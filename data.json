[
    {
        "nombre": "base",
        "funciones": [
            {
                "nombre": "abs",
                "sintaxis": [
                    "abs(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "aiter",
                "sintaxis": [
                    "aiter(async_iterable)"
                ],
                "parametros": [
                    "async_iterable"
                ]
            },
            {
                "nombre": "all",
                "sintaxis": [
                    "all(iterable)"
                ],
                "parametros": [
                    "iterable"
                ]
            },
            {
                "nombre": "anext",
                "sintaxis": [
                    "awaitable anext(async_iterator[, default])"
                ],
                "parametros": [
                    "async_iterator",
                    "default"
                ]
            },
            {
                "nombre": "any",
                "sintaxis": [
                    "any(iterable)"
                ],
                "parametros": [
                    "iterable"
                ]
            },
            {
                "nombre": "ascii",
                "sintaxis": [
                    "ascii(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "bin",
                "sintaxis": [
                    "bin(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "breakpoint",
                "sintaxis": [
                    "breakpoint(*args, **kws)"
                ],
                "parametros": [
                    "args",
                    "kws"
                ]
            },
            {
                "nombre": "callable",
                "sintaxis": [
                    "callable(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "chr",
                "sintaxis": [
                    "chr(i)"
                ],
                "parametros": [
                    "i"
                ]
            },
            {
                "nombre": "classmethod",
                "sintaxis": [
                    "@classmethod"
                ],
                "parametros": []
            },
            {
                "nombre": "compile",
                "sintaxis": [
                    "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=- 1)"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "flags",
                    "dont_inherit",
                    "source",
                    "optimize"
                ]
            },
            {
                "nombre": "delattr",
                "sintaxis": [
                    "delattr(object, name)"
                ],
                "parametros": [
                    "object",
                    "name"
                ]
            },
            {
                "nombre": "dir",
                "sintaxis": [
                    "dir([object])"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "divmod",
                "sintaxis": [
                    "divmod(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "enumerate",
                "sintaxis": [
                    "enumerate(iterable, start=0)"
                ],
                "parametros": [
                    "iterable",
                    "start"
                ]
            },
            {
                "nombre": "eval",
                "sintaxis": [
                    "eval(expression[, globals[, locals]])"
                ],
                "parametros": [
                    "globals",
                    "expression",
                    "locals"
                ]
            },
            {
                "nombre": "exec",
                "sintaxis": [
                    "exec(object[, globals[, locals]])"
                ],
                "parametros": [
                    "globals",
                    "locals",
                    "object"
                ]
            },
            {
                "nombre": "filter",
                "sintaxis": [
                    "filter(function, iterable)"
                ],
                "parametros": [
                    "iterable",
                    "function"
                ]
            },
            {
                "nombre": "format",
                "sintaxis": [
                    "format(value[, format_spec])"
                ],
                "parametros": [
                    "format_spec",
                    "value"
                ]
            },
            {
                "nombre": "getattr",
                "sintaxis": [
                    "getattr(object, name[, default])"
                ],
                "parametros": [
                    "object",
                    "name",
                    "default"
                ]
            },
            {
                "nombre": "globals",
                "sintaxis": [
                    "globals()"
                ],
                "parametros": []
            },
            {
                "nombre": "hasattr",
                "sintaxis": [
                    "hasattr(object, name)"
                ],
                "parametros": [
                    "object",
                    "name"
                ]
            },
            {
                "nombre": "hash",
                "sintaxis": [
                    "hash(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "help",
                "sintaxis": [
                    "help([object])"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "hex",
                "sintaxis": [
                    "hex(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "id",
                "sintaxis": [
                    "id(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "input",
                "sintaxis": [
                    "input([prompt])"
                ],
                "parametros": [
                    "prompt"
                ]
            },
            {
                "nombre": "isinstance",
                "sintaxis": [
                    "isinstance(object, classinfo)"
                ],
                "parametros": [
                    "classinfo",
                    "object"
                ]
            },
            {
                "nombre": "issubclass",
                "sintaxis": [
                    "issubclass(class, classinfo)"
                ],
                "parametros": [
                    "classinfo",
                    "class"
                ]
            },
            {
                "nombre": "iter",
                "sintaxis": [
                    "iter(object[, sentinel])"
                ],
                "parametros": [
                    "object",
                    "sentinel"
                ]
            },
            {
                "nombre": "len",
                "sintaxis": [
                    "len(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "locals",
                "sintaxis": [
                    "locals()"
                ],
                "parametros": []
            },
            {
                "nombre": "map",
                "sintaxis": [
                    "map(function, iterable, ...)"
                ],
                "parametros": [
                    "iterable",
                    "...",
                    "function"
                ]
            },
            {
                "nombre": "max",
                "sintaxis": [
                    "max(iterable, *[, key, default])",
                    "max(arg1, arg2, *args[, key])"
                ],
                "parametros": [
                    "*args",
                    "key",
                    "arg1",
                    "default",
                    "arg2",
                    "iterable",
                    "*"
                ]
            },
            {
                "nombre": "min",
                "sintaxis": [
                    "min(iterable, *[, key, default])",
                    "min(arg1, arg2, *args[, key])"
                ],
                "parametros": [
                    "*args",
                    "key",
                    "arg1",
                    "default",
                    "arg2",
                    "iterable",
                    "*"
                ]
            },
            {
                "nombre": "next",
                "sintaxis": [
                    "next(iterator[, default])"
                ],
                "parametros": [
                    "iterator",
                    "default"
                ]
            },
            {
                "nombre": "oct",
                "sintaxis": [
                    "oct(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "open(file, mode='r', buffering=- 1, encoding=None, errors=None, newline=None, closefd=True, opener=None)"
                ],
                "parametros": [
                    "mode",
                    "opener",
                    "errors",
                    "encoding",
                    "buffering",
                    "newline",
                    "closefd",
                    "file"
                ]
            },
            {
                "nombre": "ord",
                "sintaxis": [
                    "ord(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "pow",
                "sintaxis": [
                    "pow(base, exp[, mod])"
                ],
                "parametros": [
                    "mod",
                    "base",
                    "exp"
                ]
            },
            {
                "nombre": "print",
                "sintaxis": [
                    "print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)"
                ],
                "parametros": [
                    "end",
                    "sep",
                    "objects",
                    "file",
                    "flush"
                ]
            },
            {
                "nombre": "repr",
                "sintaxis": [
                    "repr(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "reversed",
                "sintaxis": [
                    "reversed(seq)"
                ],
                "parametros": [
                    "seq"
                ]
            },
            {
                "nombre": "round",
                "sintaxis": [
                    "round(number[, ndigits])"
                ],
                "parametros": [
                    "ndigits",
                    "number"
                ]
            },
            {
                "nombre": "setattr",
                "sintaxis": [
                    "setattr(object, name, value)"
                ],
                "parametros": [
                    "object",
                    "value",
                    "name"
                ]
            },
            {
                "nombre": "sorted",
                "sintaxis": [
                    "sorted(iterable, *, key=None, reverse=False)"
                ],
                "parametros": [
                    "iterable",
                    "*",
                    "reverse",
                    "key"
                ]
            },
            {
                "nombre": "staticmethod",
                "sintaxis": [
                    "@staticmethod"
                ],
                "parametros": []
            },
            {
                "nombre": "sum",
                "sintaxis": [
                    "sum(iterable, /, start=0)"
                ],
                "parametros": [
                    "iterable",
                    "/",
                    "start"
                ]
            },
            {
                "nombre": "vars",
                "sintaxis": [
                    "vars([object])"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "zip",
                "sintaxis": [
                    "zip(*iterables, strict=False)"
                ],
                "parametros": [
                    "iterables",
                    "strict"
                ]
            },
            {
                "nombre": "__import__",
                "sintaxis": [
                    "__import__(name, globals=None, locals=None, fromlist=(), level=0)"
                ],
                "parametros": [
                    "name",
                    "fromlist",
                    "globals",
                    "locals",
                    "level"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "bool",
                "constructores": [
                    {
                        "nombre": "bool",
                        "sintaxis": [
                            "class bool([x])"
                        ],
                        "parametros": [
                            "x"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class bool"
                ]
            },
            {
                "nombre": "bytearray",
                "constructores": [
                    {
                        "nombre": "bytearray",
                        "sintaxis": [
                            "class bytearray([source[, encoding[, errors]]])"
                        ],
                        "parametros": [
                            "errors",
                            "encoding",
                            "source"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "capitalize",
                        "sintaxis": [
                            "bytearray.capitalize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "center",
                        "sintaxis": [
                            "bytearray.center(width[, fillbyte])"
                        ],
                        "parametros": [
                            "width",
                            "fillbyte"
                        ]
                    },
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "bytearray.count(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "decode",
                        "sintaxis": [
                            "bytearray.decode(encoding='utf-8', errors='strict')"
                        ],
                        "parametros": [
                            "encoding",
                            "errors"
                        ]
                    },
                    {
                        "nombre": "endswith",
                        "sintaxis": [
                            "bytearray.endswith(suffix[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "suffix",
                            "start"
                        ]
                    },
                    {
                        "nombre": "expandtabs",
                        "sintaxis": [
                            "bytearray.expandtabs(tabsize=8)"
                        ],
                        "parametros": [
                            "tabsize"
                        ]
                    },
                    {
                        "nombre": "find",
                        "sintaxis": [
                            "bytearray.find(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "fromhex",
                        "sintaxis": [
                            "classmethod fromhex(string)"
                        ],
                        "parametros": [
                            "string"
                        ]
                    },
                    {
                        "nombre": "hex",
                        "sintaxis": [
                            "hex([sep[, bytes_per_sep]])"
                        ],
                        "parametros": [
                            "sep",
                            "bytes_per_sep"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "bytearray.index(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "isalnum",
                        "sintaxis": [
                            "bytearray.isalnum()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isalpha",
                        "sintaxis": [
                            "bytearray.isalpha()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isascii",
                        "sintaxis": [
                            "bytearray.isascii()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isdigit",
                        "sintaxis": [
                            "bytearray.isdigit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "islower",
                        "sintaxis": [
                            "bytearray.islower()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isspace",
                        "sintaxis": [
                            "bytearray.isspace()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "istitle",
                        "sintaxis": [
                            "bytearray.istitle()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isupper",
                        "sintaxis": [
                            "bytearray.isupper()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "bytearray.join(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "ljust",
                        "sintaxis": [
                            "bytearray.ljust(width[, fillbyte])"
                        ],
                        "parametros": [
                            "width",
                            "fillbyte"
                        ]
                    },
                    {
                        "nombre": "lower",
                        "sintaxis": [
                            "bytearray.lower()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lstrip",
                        "sintaxis": [
                            "bytearray.lstrip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "maketrans",
                        "sintaxis": [
                            "static bytearray.maketrans(from, to)"
                        ],
                        "parametros": [
                            "from",
                            "to"
                        ]
                    },
                    {
                        "nombre": "partition",
                        "sintaxis": [
                            "bytearray.partition(sep)"
                        ],
                        "parametros": [
                            "sep"
                        ]
                    },
                    {
                        "nombre": "removeprefix",
                        "sintaxis": [
                            "bytearray.removeprefix(prefix, /)"
                        ],
                        "parametros": [
                            "/",
                            "prefix"
                        ]
                    },
                    {
                        "nombre": "removesuffix",
                        "sintaxis": [
                            "bytearray.removesuffix(suffix, /)"
                        ],
                        "parametros": [
                            "/",
                            "suffix"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "bytearray.replace(old, new[, count])"
                        ],
                        "parametros": [
                            "old",
                            "new",
                            "count"
                        ]
                    },
                    {
                        "nombre": "rfind",
                        "sintaxis": [
                            "bytearray.rfind(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "rindex",
                        "sintaxis": [
                            "bytearray.rindex(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "rjust",
                        "sintaxis": [
                            "bytearray.rjust(width[, fillbyte])"
                        ],
                        "parametros": [
                            "width",
                            "fillbyte"
                        ]
                    },
                    {
                        "nombre": "rpartition",
                        "sintaxis": [
                            "bytearray.rpartition(sep)"
                        ],
                        "parametros": [
                            "sep"
                        ]
                    },
                    {
                        "nombre": "rsplit",
                        "sintaxis": [
                            "bytearray.rsplit(sep=None, maxsplit=- 1)"
                        ],
                        "parametros": [
                            "maxsplit",
                            "sep"
                        ]
                    },
                    {
                        "nombre": "rstrip",
                        "sintaxis": [
                            "bytearray.rstrip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "split",
                        "sintaxis": [
                            "bytearray.split(sep=None, maxsplit=- 1)"
                        ],
                        "parametros": [
                            "maxsplit",
                            "sep"
                        ]
                    },
                    {
                        "nombre": "splitlines",
                        "sintaxis": [
                            "bytearray.splitlines(keepends=False)"
                        ],
                        "parametros": [
                            "keepends"
                        ]
                    },
                    {
                        "nombre": "startswith",
                        "sintaxis": [
                            "bytearray.startswith(prefix[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "prefix",
                            "start"
                        ]
                    },
                    {
                        "nombre": "strip",
                        "sintaxis": [
                            "bytearray.strip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "swapcase",
                        "sintaxis": [
                            "bytearray.swapcase()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "title",
                        "sintaxis": [
                            "bytearray.title()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "translate",
                        "sintaxis": [
                            "bytearray.translate(table, /, delete=b'')"
                        ],
                        "parametros": [
                            "delete",
                            "/",
                            "table"
                        ]
                    },
                    {
                        "nombre": "upper",
                        "sintaxis": [
                            "bytearray.upper()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "zfill",
                        "sintaxis": [
                            "bytearray.zfill(width)"
                        ],
                        "parametros": [
                            "width"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class bytearray"
                ]
            },
            {
                "nombre": "bytes",
                "constructores": [
                    {
                        "nombre": "bytes",
                        "sintaxis": [
                            "class bytes([source[, encoding[, errors]]])"
                        ],
                        "parametros": [
                            "errors",
                            "encoding",
                            "source"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "capitalize",
                        "sintaxis": [
                            "bytes.capitalize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "center",
                        "sintaxis": [
                            "bytes.center(width[, fillbyte])"
                        ],
                        "parametros": [
                            "width",
                            "fillbyte"
                        ]
                    },
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "bytes.count(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "decode",
                        "sintaxis": [
                            "bytes.decode(encoding='utf-8', errors='strict')"
                        ],
                        "parametros": [
                            "encoding",
                            "errors"
                        ]
                    },
                    {
                        "nombre": "endswith",
                        "sintaxis": [
                            "bytes.endswith(suffix[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "suffix",
                            "start"
                        ]
                    },
                    {
                        "nombre": "expandtabs",
                        "sintaxis": [
                            "bytes.expandtabs(tabsize=8)"
                        ],
                        "parametros": [
                            "tabsize"
                        ]
                    },
                    {
                        "nombre": "find",
                        "sintaxis": [
                            "bytes.find(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "fromhex",
                        "sintaxis": [
                            "classmethod fromhex(string)"
                        ],
                        "parametros": [
                            "string"
                        ]
                    },
                    {
                        "nombre": "hex",
                        "sintaxis": [
                            "hex([sep[, bytes_per_sep]])"
                        ],
                        "parametros": [
                            "sep",
                            "bytes_per_sep"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "bytes.index(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "isalnum",
                        "sintaxis": [
                            "bytes.isalnum()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isalpha",
                        "sintaxis": [
                            "bytes.isalpha()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isascii",
                        "sintaxis": [
                            "bytes.isascii()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isdigit",
                        "sintaxis": [
                            "bytes.isdigit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "islower",
                        "sintaxis": [
                            "bytes.islower()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isspace",
                        "sintaxis": [
                            "bytes.isspace()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "istitle",
                        "sintaxis": [
                            "bytes.istitle()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isupper",
                        "sintaxis": [
                            "bytes.isupper()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "bytes.join(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "ljust",
                        "sintaxis": [
                            "bytes.ljust(width[, fillbyte])"
                        ],
                        "parametros": [
                            "width",
                            "fillbyte"
                        ]
                    },
                    {
                        "nombre": "lower",
                        "sintaxis": [
                            "bytes.lower()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lstrip",
                        "sintaxis": [
                            "bytes.lstrip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "maketrans",
                        "sintaxis": [
                            "static bytes.maketrans(from, to)"
                        ],
                        "parametros": [
                            "from",
                            "to"
                        ]
                    },
                    {
                        "nombre": "partition",
                        "sintaxis": [
                            "bytes.partition(sep)"
                        ],
                        "parametros": [
                            "sep"
                        ]
                    },
                    {
                        "nombre": "removeprefix",
                        "sintaxis": [
                            "bytes.removeprefix(prefix, /)"
                        ],
                        "parametros": [
                            "/",
                            "prefix"
                        ]
                    },
                    {
                        "nombre": "removesuffix",
                        "sintaxis": [
                            "bytes.removesuffix(suffix, /)"
                        ],
                        "parametros": [
                            "/",
                            "suffix"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "bytes.replace(old, new[, count])"
                        ],
                        "parametros": [
                            "old",
                            "new",
                            "count"
                        ]
                    },
                    {
                        "nombre": "rfind",
                        "sintaxis": [
                            "bytes.rfind(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "rindex",
                        "sintaxis": [
                            "bytes.rindex(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "rjust",
                        "sintaxis": [
                            "bytes.rjust(width[, fillbyte])"
                        ],
                        "parametros": [
                            "width",
                            "fillbyte"
                        ]
                    },
                    {
                        "nombre": "rpartition",
                        "sintaxis": [
                            "bytes.rpartition(sep)"
                        ],
                        "parametros": [
                            "sep"
                        ]
                    },
                    {
                        "nombre": "rsplit",
                        "sintaxis": [
                            "bytes.rsplit(sep=None, maxsplit=- 1)"
                        ],
                        "parametros": [
                            "maxsplit",
                            "sep"
                        ]
                    },
                    {
                        "nombre": "rstrip",
                        "sintaxis": [
                            "bytes.rstrip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "split",
                        "sintaxis": [
                            "bytes.split(sep=None, maxsplit=- 1)"
                        ],
                        "parametros": [
                            "maxsplit",
                            "sep"
                        ]
                    },
                    {
                        "nombre": "splitlines",
                        "sintaxis": [
                            "bytes.splitlines(keepends=False)"
                        ],
                        "parametros": [
                            "keepends"
                        ]
                    },
                    {
                        "nombre": "startswith",
                        "sintaxis": [
                            "bytes.startswith(prefix[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "prefix",
                            "start"
                        ]
                    },
                    {
                        "nombre": "strip",
                        "sintaxis": [
                            "bytes.strip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "swapcase",
                        "sintaxis": [
                            "bytes.swapcase()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "title",
                        "sintaxis": [
                            "bytes.title()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "translate",
                        "sintaxis": [
                            "bytes.translate(table, /, delete=b'')"
                        ],
                        "parametros": [
                            "delete",
                            "/",
                            "table"
                        ]
                    },
                    {
                        "nombre": "upper",
                        "sintaxis": [
                            "bytes.upper()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "zfill",
                        "sintaxis": [
                            "bytes.zfill(width)"
                        ],
                        "parametros": [
                            "width"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class bytes"
                ]
            },
            {
                "nombre": "class",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "mro",
                        "sintaxis": [
                            "class.mro()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__subclasses__",
                        "sintaxis": [
                            "class.__subclasses__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "__bases__",
                        "sintaxis": [
                            "class.__bases__"
                        ]
                    },
                    {
                        "nombre": "__mro__",
                        "sintaxis": [
                            "class.__mro__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class class"
                ]
            },
            {
                "nombre": "complex",
                "constructores": [
                    {
                        "nombre": "complex",
                        "sintaxis": [
                            "class complex([real[, imag]])"
                        ],
                        "parametros": [
                            "imag",
                            "real"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class complex"
                ]
            },
            {
                "nombre": "container",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "__iter__",
                        "sintaxis": [
                            "container.__iter__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class container"
                ]
            },
            {
                "nombre": "contextmanager",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "__enter__",
                        "sintaxis": [
                            "contextmanager.__enter__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__exit__",
                        "sintaxis": [
                            "contextmanager.__exit__(exc_type, exc_val, exc_tb)"
                        ],
                        "parametros": [
                            "exc_tb",
                            "exc_type",
                            "exc_val"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class contextmanager"
                ]
            },
            {
                "nombre": "definition",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "__name__",
                        "sintaxis": [
                            "definition.__name__"
                        ]
                    },
                    {
                        "nombre": "__qualname__",
                        "sintaxis": [
                            "definition.__qualname__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class definition"
                ]
            },
            {
                "nombre": "dict",
                "constructores": [
                    {
                        "nombre": "dict",
                        "sintaxis": [
                            "class dict(iterable, **kwarg)",
                            "class dict(**kwarg)",
                            "class dict(mapping, **kwarg)"
                        ],
                        "parametros": [
                            "iterable",
                            "kwarg",
                            "mapping"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromkeys",
                        "sintaxis": [
                            "classmethod fromkeys(iterable[, value])"
                        ],
                        "parametros": [
                            "iterable",
                            "value"
                        ]
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get(key[, default])"
                        ],
                        "parametros": [
                            "default",
                            "key"
                        ]
                    },
                    {
                        "nombre": "items",
                        "sintaxis": [
                            "items()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "keys",
                        "sintaxis": [
                            "keys()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "pop",
                        "sintaxis": [
                            "pop(key[, default])"
                        ],
                        "parametros": [
                            "default",
                            "key"
                        ]
                    },
                    {
                        "nombre": "popitem",
                        "sintaxis": [
                            "popitem()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setdefault",
                        "sintaxis": [
                            "setdefault(key[, default])"
                        ],
                        "parametros": [
                            "default",
                            "key"
                        ]
                    },
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "update([other])"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "values",
                        "sintaxis": [
                            "values()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class dict"
                ]
            },
            {
                "nombre": "float",
                "constructores": [
                    {
                        "nombre": "float",
                        "sintaxis": [
                            "class float([x])"
                        ],
                        "parametros": [
                            "x"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "as_integer_ratio",
                        "sintaxis": [
                            "float.as_integer_ratio()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromhex",
                        "sintaxis": [
                            "classmethod float.fromhex(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    },
                    {
                        "nombre": "hex",
                        "sintaxis": [
                            "float.hex()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_integer",
                        "sintaxis": [
                            "float.is_integer()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class float"
                ]
            },
            {
                "nombre": "frozenset",
                "constructores": [
                    {
                        "nombre": "frozenset",
                        "sintaxis": [
                            "class frozenset([iterable])"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class frozenset"
                ]
            },
            {
                "nombre": "genericalias",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "__args__",
                        "sintaxis": [
                            "genericalias.__args__"
                        ]
                    },
                    {
                        "nombre": "__origin__",
                        "sintaxis": [
                            "genericalias.__origin__"
                        ]
                    },
                    {
                        "nombre": "__parameters__",
                        "sintaxis": [
                            "genericalias.__parameters__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class genericalias"
                ]
            },
            {
                "nombre": "instance",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "__class__",
                        "sintaxis": [
                            "instance.__class__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class instance"
                ]
            },
            {
                "nombre": "int",
                "constructores": [
                    {
                        "nombre": "int",
                        "sintaxis": [
                            "class int(x, base=10)",
                            "class int([x])"
                        ],
                        "parametros": [
                            "base",
                            "x"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "as_integer_ratio",
                        "sintaxis": [
                            "int.as_integer_ratio()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "bit_count",
                        "sintaxis": [
                            "int.bit_count()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "bit_length",
                        "sintaxis": [
                            "int.bit_length()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "from_bytes",
                        "sintaxis": [
                            "classmethod int.from_bytes(bytes, byteorder, *, signed=False)"
                        ],
                        "parametros": [
                            "signed",
                            "byteorder",
                            "*",
                            "bytes"
                        ]
                    },
                    {
                        "nombre": "to_bytes",
                        "sintaxis": [
                            "int.to_bytes(length, byteorder, *, signed=False)"
                        ],
                        "parametros": [
                            "signed",
                            "byteorder",
                            "*",
                            "length"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class int"
                ]
            },
            {
                "nombre": "iterator",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "__iter__",
                        "sintaxis": [
                            "iterator.__iter__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__next__",
                        "sintaxis": [
                            "iterator.__next__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class iterator"
                ]
            },
            {
                "nombre": "list",
                "constructores": [
                    {
                        "nombre": "list",
                        "sintaxis": [
                            "class list([iterable])"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "sort",
                        "sintaxis": [
                            "sort(*, key=None, reverse=False)"
                        ],
                        "parametros": [
                            "reverse",
                            "*",
                            "key"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class list"
                ]
            },
            {
                "nombre": "memoryview",
                "constructores": [
                    {
                        "nombre": "memoryview",
                        "sintaxis": [
                            "class memoryview(object)"
                        ],
                        "parametros": [
                            "object"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cast",
                        "sintaxis": [
                            "cast(format[, shape])"
                        ],
                        "parametros": [
                            "format",
                            "shape"
                        ]
                    },
                    {
                        "nombre": "hex",
                        "sintaxis": [
                            "hex([sep[, bytes_per_sep]])"
                        ],
                        "parametros": [
                            "sep",
                            "bytes_per_sep"
                        ]
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tobytes",
                        "sintaxis": [
                            "tobytes(order=None)"
                        ],
                        "parametros": [
                            "order"
                        ]
                    },
                    {
                        "nombre": "tolist",
                        "sintaxis": [
                            "tolist()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "toreadonly",
                        "sintaxis": [
                            "toreadonly()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__eq__",
                        "sintaxis": [
                            "__eq__(exporter)"
                        ],
                        "parametros": [
                            "exporter"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "contiguous",
                        "sintaxis": [
                            "contiguous"
                        ]
                    },
                    {
                        "nombre": "c_contiguous",
                        "sintaxis": [
                            "c_contiguous"
                        ]
                    },
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "f_contiguous",
                        "sintaxis": [
                            "f_contiguous"
                        ]
                    },
                    {
                        "nombre": "itemsize",
                        "sintaxis": [
                            "itemsize"
                        ]
                    },
                    {
                        "nombre": "nbytes",
                        "sintaxis": [
                            "nbytes"
                        ]
                    },
                    {
                        "nombre": "ndim",
                        "sintaxis": [
                            "ndim"
                        ]
                    },
                    {
                        "nombre": "obj",
                        "sintaxis": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "readonly",
                        "sintaxis": [
                            "readonly"
                        ]
                    },
                    {
                        "nombre": "shape",
                        "sintaxis": [
                            "shape"
                        ]
                    },
                    {
                        "nombre": "strides",
                        "sintaxis": [
                            "strides"
                        ]
                    },
                    {
                        "nombre": "suboffsets",
                        "sintaxis": [
                            "suboffsets"
                        ]
                    }
                ],
                "sintaxis": [
                    "class memoryview"
                ]
            },
            {
                "nombre": "object",
                "constructores": [
                    {
                        "nombre": "object",
                        "sintaxis": [
                            "class object"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "__dict__",
                        "sintaxis": [
                            "object.__dict__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class object"
                ]
            },
            {
                "nombre": "property",
                "constructores": [
                    {
                        "nombre": "property",
                        "sintaxis": [
                            "class property(fget=None, fset=None, fdel=None, doc=None)"
                        ],
                        "parametros": [
                            "fget",
                            "fset",
                            "doc",
                            "fdel"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class property"
                ]
            },
            {
                "nombre": "range",
                "constructores": [
                    {
                        "nombre": "range",
                        "sintaxis": [
                            "class range(stop)",
                            "class range(start, stop[, step])"
                        ],
                        "parametros": [
                            "step",
                            "stop",
                            "start"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "start"
                        ]
                    },
                    {
                        "nombre": "step",
                        "sintaxis": [
                            "step"
                        ]
                    },
                    {
                        "nombre": "stop",
                        "sintaxis": [
                            "stop"
                        ]
                    }
                ],
                "sintaxis": [
                    "class range"
                ]
            },
            {
                "nombre": "set",
                "constructores": [
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "class frozenset([iterable])",
                            "class set([iterable])"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "add(elem)"
                        ],
                        "parametros": [
                            "elem"
                        ]
                    },
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "difference",
                        "sintaxis": [
                            "difference(*others)"
                        ],
                        "parametros": [
                            "others"
                        ]
                    },
                    {
                        "nombre": "difference_update",
                        "sintaxis": [
                            "difference_update(*others)"
                        ],
                        "parametros": [
                            "others"
                        ]
                    },
                    {
                        "nombre": "discard",
                        "sintaxis": [
                            "discard(elem)"
                        ],
                        "parametros": [
                            "elem"
                        ]
                    },
                    {
                        "nombre": "intersection",
                        "sintaxis": [
                            "intersection(*others)"
                        ],
                        "parametros": [
                            "others"
                        ]
                    },
                    {
                        "nombre": "intersection_update",
                        "sintaxis": [
                            "intersection_update(*others)"
                        ],
                        "parametros": [
                            "others"
                        ]
                    },
                    {
                        "nombre": "isdisjoint",
                        "sintaxis": [
                            "isdisjoint(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "issubset",
                        "sintaxis": [
                            "issubset(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "issuperset",
                        "sintaxis": [
                            "issuperset(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "pop",
                        "sintaxis": [
                            "pop()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove",
                        "sintaxis": [
                            "remove(elem)"
                        ],
                        "parametros": [
                            "elem"
                        ]
                    },
                    {
                        "nombre": "set < other",
                        "sintaxis": [
                            "set < other"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set > other",
                        "sintaxis": [
                            "set > other"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "symmetric_difference",
                        "sintaxis": [
                            "symmetric_difference(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "symmetric_difference_update",
                        "sintaxis": [
                            "symmetric_difference_update(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "union",
                        "sintaxis": [
                            "union(*others)"
                        ],
                        "parametros": [
                            "others"
                        ]
                    },
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "update(*others)"
                        ],
                        "parametros": [
                            "others"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class set"
                ]
            },
            {
                "nombre": "slice",
                "constructores": [
                    {
                        "nombre": "slice",
                        "sintaxis": [
                            "class slice(start, stop[, step])",
                            "class slice(stop)"
                        ],
                        "parametros": [
                            "step",
                            "stop",
                            "start"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class slice"
                ]
            },
            {
                "nombre": "str",
                "constructores": [
                    {
                        "nombre": "str",
                        "sintaxis": [
                            "class str(object=b'', encoding='utf-8', errors='strict')",
                            "class str(object='')"
                        ],
                        "parametros": [
                            "encoding",
                            "object",
                            "errors"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "capitalize",
                        "sintaxis": [
                            "str.capitalize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "casefold",
                        "sintaxis": [
                            "str.casefold()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "center",
                        "sintaxis": [
                            "str.center(width[, fillchar])"
                        ],
                        "parametros": [
                            "width",
                            "fillchar"
                        ]
                    },
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "str.count(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "str.encode(encoding='utf-8', errors='strict')"
                        ],
                        "parametros": [
                            "encoding",
                            "errors"
                        ]
                    },
                    {
                        "nombre": "endswith",
                        "sintaxis": [
                            "str.endswith(suffix[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "suffix",
                            "start"
                        ]
                    },
                    {
                        "nombre": "expandtabs",
                        "sintaxis": [
                            "str.expandtabs(tabsize=8)"
                        ],
                        "parametros": [
                            "tabsize"
                        ]
                    },
                    {
                        "nombre": "find",
                        "sintaxis": [
                            "str.find(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "str.format(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "format_map",
                        "sintaxis": [
                            "str.format_map(mapping)"
                        ],
                        "parametros": [
                            "mapping"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "str.index(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "isalnum",
                        "sintaxis": [
                            "str.isalnum()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isalpha",
                        "sintaxis": [
                            "str.isalpha()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isascii",
                        "sintaxis": [
                            "str.isascii()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isdecimal",
                        "sintaxis": [
                            "str.isdecimal()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isdigit",
                        "sintaxis": [
                            "str.isdigit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isidentifier",
                        "sintaxis": [
                            "str.isidentifier()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "islower",
                        "sintaxis": [
                            "str.islower()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isnumeric",
                        "sintaxis": [
                            "str.isnumeric()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isprintable",
                        "sintaxis": [
                            "str.isprintable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isspace",
                        "sintaxis": [
                            "str.isspace()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "istitle",
                        "sintaxis": [
                            "str.istitle()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isupper",
                        "sintaxis": [
                            "str.isupper()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "str.join(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "ljust",
                        "sintaxis": [
                            "str.ljust(width[, fillchar])"
                        ],
                        "parametros": [
                            "width",
                            "fillchar"
                        ]
                    },
                    {
                        "nombre": "lower",
                        "sintaxis": [
                            "str.lower()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lstrip",
                        "sintaxis": [
                            "str.lstrip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "maketrans",
                        "sintaxis": [
                            "static str.maketrans(x[, y[, z]])"
                        ],
                        "parametros": [
                            "y",
                            "x",
                            "z"
                        ]
                    },
                    {
                        "nombre": "partition",
                        "sintaxis": [
                            "str.partition(sep)"
                        ],
                        "parametros": [
                            "sep"
                        ]
                    },
                    {
                        "nombre": "removeprefix",
                        "sintaxis": [
                            "str.removeprefix(prefix, /)"
                        ],
                        "parametros": [
                            "/",
                            "prefix"
                        ]
                    },
                    {
                        "nombre": "removesuffix",
                        "sintaxis": [
                            "str.removesuffix(suffix, /)"
                        ],
                        "parametros": [
                            "/",
                            "suffix"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "str.replace(old, new[, count])"
                        ],
                        "parametros": [
                            "old",
                            "new",
                            "count"
                        ]
                    },
                    {
                        "nombre": "rfind",
                        "sintaxis": [
                            "str.rfind(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "rindex",
                        "sintaxis": [
                            "str.rindex(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "rjust",
                        "sintaxis": [
                            "str.rjust(width[, fillchar])"
                        ],
                        "parametros": [
                            "width",
                            "fillchar"
                        ]
                    },
                    {
                        "nombre": "rpartition",
                        "sintaxis": [
                            "str.rpartition(sep)"
                        ],
                        "parametros": [
                            "sep"
                        ]
                    },
                    {
                        "nombre": "rsplit",
                        "sintaxis": [
                            "str.rsplit(sep=None, maxsplit=- 1)"
                        ],
                        "parametros": [
                            "maxsplit",
                            "sep"
                        ]
                    },
                    {
                        "nombre": "rstrip",
                        "sintaxis": [
                            "str.rstrip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "split",
                        "sintaxis": [
                            "str.split(sep=None, maxsplit=- 1)"
                        ],
                        "parametros": [
                            "maxsplit",
                            "sep"
                        ]
                    },
                    {
                        "nombre": "splitlines",
                        "sintaxis": [
                            "str.splitlines([keepends])"
                        ],
                        "parametros": [
                            "keepends"
                        ]
                    },
                    {
                        "nombre": "startswith",
                        "sintaxis": [
                            "str.startswith(prefix[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "prefix",
                            "start"
                        ]
                    },
                    {
                        "nombre": "strip",
                        "sintaxis": [
                            "str.strip([chars])"
                        ],
                        "parametros": [
                            "chars"
                        ]
                    },
                    {
                        "nombre": "swapcase",
                        "sintaxis": [
                            "str.swapcase()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "title",
                        "sintaxis": [
                            "str.title()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "translate",
                        "sintaxis": [
                            "str.translate(table)"
                        ],
                        "parametros": [
                            "table"
                        ]
                    },
                    {
                        "nombre": "upper",
                        "sintaxis": [
                            "str.upper()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "zfill",
                        "sintaxis": [
                            "str.zfill(width)"
                        ],
                        "parametros": [
                            "width"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class str"
                ]
            },
            {
                "nombre": "super",
                "constructores": [
                    {
                        "nombre": "super",
                        "sintaxis": [
                            "class super([type[, object-or-type]])"
                        ],
                        "parametros": [
                            "object-or-type",
                            "type"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class super"
                ]
            },
            {
                "nombre": "tuple",
                "constructores": [
                    {
                        "nombre": "tuple",
                        "sintaxis": [
                            "class tuple([iterable])"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class tuple"
                ]
            },
            {
                "nombre": "type",
                "constructores": [
                    {
                        "nombre": "type",
                        "sintaxis": [
                            "class type(object)",
                            "class type(name, bases, dict, **kwds)"
                        ],
                        "parametros": [
                            "name",
                            "bases",
                            "dict",
                            "kwds",
                            "object"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class type"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "ArithmeticError",
                "sintaxis": [
                    "exception ArithmeticError"
                ]
            },
            {
                "nombre": "AssertionError",
                "sintaxis": [
                    "exception AssertionError"
                ]
            },
            {
                "nombre": "AttributeError",
                "sintaxis": [
                    "exception AttributeError"
                ]
            },
            {
                "nombre": "BaseException",
                "sintaxis": [
                    "exception BaseException"
                ]
            },
            {
                "nombre": "BlockingIOError",
                "sintaxis": [
                    "exception BlockingIOError"
                ]
            },
            {
                "nombre": "BrokenPipeError",
                "sintaxis": [
                    "exception BrokenPipeError"
                ]
            },
            {
                "nombre": "BufferError",
                "sintaxis": [
                    "exception BufferError"
                ]
            },
            {
                "nombre": "BytesWarning",
                "sintaxis": [
                    "exception BytesWarning"
                ]
            },
            {
                "nombre": "ChildProcessError",
                "sintaxis": [
                    "exception ChildProcessError"
                ]
            },
            {
                "nombre": "ConnectionAbortedError",
                "sintaxis": [
                    "exception ConnectionAbortedError"
                ]
            },
            {
                "nombre": "ConnectionError",
                "sintaxis": [
                    "exception ConnectionError"
                ]
            },
            {
                "nombre": "ConnectionRefusedError",
                "sintaxis": [
                    "exception ConnectionRefusedError"
                ]
            },
            {
                "nombre": "ConnectionResetError",
                "sintaxis": [
                    "exception ConnectionResetError"
                ]
            },
            {
                "nombre": "DeprecationWarning",
                "sintaxis": [
                    "exception DeprecationWarning"
                ]
            },
            {
                "nombre": "EncodingWarning",
                "sintaxis": [
                    "exception EncodingWarning"
                ]
            },
            {
                "nombre": "EnvironmentError",
                "sintaxis": [
                    "exception EnvironmentError"
                ]
            },
            {
                "nombre": "EOFError",
                "sintaxis": [
                    "exception EOFError"
                ]
            },
            {
                "nombre": "Exception",
                "sintaxis": [
                    "exception Exception"
                ]
            },
            {
                "nombre": "FileExistsError",
                "sintaxis": [
                    "exception FileExistsError"
                ]
            },
            {
                "nombre": "FileNotFoundError",
                "sintaxis": [
                    "exception FileNotFoundError"
                ]
            },
            {
                "nombre": "FloatingPointError",
                "sintaxis": [
                    "exception FloatingPointError"
                ]
            },
            {
                "nombre": "FutureWarning",
                "sintaxis": [
                    "exception FutureWarning"
                ]
            },
            {
                "nombre": "GeneratorExit",
                "sintaxis": [
                    "exception GeneratorExit"
                ]
            },
            {
                "nombre": "ImportError",
                "sintaxis": [
                    "exception ImportError"
                ]
            },
            {
                "nombre": "ImportWarning",
                "sintaxis": [
                    "exception ImportWarning"
                ]
            },
            {
                "nombre": "IndentationError",
                "sintaxis": [
                    "exception IndentationError"
                ]
            },
            {
                "nombre": "IndexError",
                "sintaxis": [
                    "exception IndexError"
                ]
            },
            {
                "nombre": "InterruptedError",
                "sintaxis": [
                    "exception InterruptedError"
                ]
            },
            {
                "nombre": "IOError",
                "sintaxis": [
                    "exception IOError"
                ]
            },
            {
                "nombre": "IsADirectoryError",
                "sintaxis": [
                    "exception IsADirectoryError"
                ]
            },
            {
                "nombre": "KeyboardInterrupt",
                "sintaxis": [
                    "exception KeyboardInterrupt"
                ]
            },
            {
                "nombre": "KeyError",
                "sintaxis": [
                    "exception KeyError"
                ]
            },
            {
                "nombre": "LookupError",
                "sintaxis": [
                    "exception LookupError"
                ]
            },
            {
                "nombre": "MemoryError",
                "sintaxis": [
                    "exception MemoryError"
                ]
            },
            {
                "nombre": "ModuleNotFoundError",
                "sintaxis": [
                    "exception ModuleNotFoundError"
                ]
            },
            {
                "nombre": "NameError",
                "sintaxis": [
                    "exception NameError"
                ]
            },
            {
                "nombre": "NotADirectoryError",
                "sintaxis": [
                    "exception NotADirectoryError"
                ]
            },
            {
                "nombre": "NotImplementedError",
                "sintaxis": [
                    "exception NotImplementedError"
                ]
            },
            {
                "nombre": "OSError",
                "sintaxis": [
                    "exception OSError([arg])"
                ]
            },
            {
                "nombre": "OverflowError",
                "sintaxis": [
                    "exception OverflowError"
                ]
            },
            {
                "nombre": "PendingDeprecationWarning",
                "sintaxis": [
                    "exception PendingDeprecationWarning"
                ]
            },
            {
                "nombre": "PermissionError",
                "sintaxis": [
                    "exception PermissionError"
                ]
            },
            {
                "nombre": "ProcessLookupError",
                "sintaxis": [
                    "exception ProcessLookupError"
                ]
            },
            {
                "nombre": "RecursionError",
                "sintaxis": [
                    "exception RecursionError"
                ]
            },
            {
                "nombre": "ReferenceError",
                "sintaxis": [
                    "exception ReferenceError"
                ]
            },
            {
                "nombre": "ResourceWarning",
                "sintaxis": [
                    "exception ResourceWarning"
                ]
            },
            {
                "nombre": "RuntimeError",
                "sintaxis": [
                    "exception RuntimeError"
                ]
            },
            {
                "nombre": "RuntimeWarning",
                "sintaxis": [
                    "exception RuntimeWarning"
                ]
            },
            {
                "nombre": "StopAsyncIteration",
                "sintaxis": [
                    "exception StopAsyncIteration"
                ]
            },
            {
                "nombre": "StopIteration",
                "sintaxis": [
                    "exception StopIteration"
                ]
            },
            {
                "nombre": "SyntaxError",
                "sintaxis": [
                    "exception SyntaxError(message, details)"
                ]
            },
            {
                "nombre": "SyntaxWarning",
                "sintaxis": [
                    "exception SyntaxWarning"
                ]
            },
            {
                "nombre": "SystemError",
                "sintaxis": [
                    "exception SystemError"
                ]
            },
            {
                "nombre": "SystemExit",
                "sintaxis": [
                    "exception SystemExit"
                ]
            },
            {
                "nombre": "TabError",
                "sintaxis": [
                    "exception TabError"
                ]
            },
            {
                "nombre": "TimeoutError",
                "sintaxis": [
                    "exception TimeoutError"
                ]
            },
            {
                "nombre": "TypeError",
                "sintaxis": [
                    "exception TypeError"
                ]
            },
            {
                "nombre": "UnboundLocalError",
                "sintaxis": [
                    "exception UnboundLocalError"
                ]
            },
            {
                "nombre": "UnicodeDecodeError",
                "sintaxis": [
                    "exception UnicodeDecodeError"
                ]
            },
            {
                "nombre": "UnicodeEncodeError",
                "sintaxis": [
                    "exception UnicodeEncodeError"
                ]
            },
            {
                "nombre": "UnicodeError",
                "sintaxis": [
                    "exception UnicodeError"
                ]
            },
            {
                "nombre": "UnicodeTranslateError",
                "sintaxis": [
                    "exception UnicodeTranslateError"
                ]
            },
            {
                "nombre": "UnicodeWarning",
                "sintaxis": [
                    "exception UnicodeWarning"
                ]
            },
            {
                "nombre": "UserWarning",
                "sintaxis": [
                    "exception UserWarning"
                ]
            },
            {
                "nombre": "ValueError",
                "sintaxis": [
                    "exception ValueError"
                ]
            },
            {
                "nombre": "Warning",
                "sintaxis": [
                    "exception Warning"
                ]
            },
            {
                "nombre": "WindowsError",
                "sintaxis": [
                    "exception WindowsError"
                ]
            },
            {
                "nombre": "ZeroDivisionError",
                "sintaxis": [
                    "exception ZeroDivisionError"
                ]
            }
        ]
    },
    {
        "nombre": "__future__",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "__main__",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "_thread",
        "funciones": [
            {
                "nombre": "allocate_lock",
                "sintaxis": [
                    "_thread.allocate_lock()"
                ],
                "parametros": []
            },
            {
                "nombre": "exit",
                "sintaxis": [
                    "_thread.exit()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_ident",
                "sintaxis": [
                    "_thread.get_ident()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_native_id",
                "sintaxis": [
                    "_thread.get_native_id()"
                ],
                "parametros": []
            },
            {
                "nombre": "interrupt_main",
                "sintaxis": [
                    "_thread.interrupt_main(signum=signal.SIGINT, /)"
                ],
                "parametros": [
                    "signum",
                    "/"
                ]
            },
            {
                "nombre": "stack_size",
                "sintaxis": [
                    "_thread.stack_size([size])"
                ],
                "parametros": [
                    "size"
                ]
            },
            {
                "nombre": "start_new_thread",
                "sintaxis": [
                    "_thread.start_new_thread(function, args[, kwargs])"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "function"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "lock",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "lock.acquire(waitflag=1, timeout=- 1)"
                        ],
                        "parametros": [
                            "timeout",
                            "waitflag"
                        ]
                    },
                    {
                        "nombre": "locked",
                        "sintaxis": [
                            "lock.locked()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "lock.release()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class lock"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "LockType",
                "sintaxis": [
                    "_thread.LockType"
                ]
            },
            {
                "nombre": "TIMEOUT_MAX",
                "sintaxis": [
                    "_thread.TIMEOUT_MAX"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception _thread.error"
                ]
            }
        ]
    },
    {
        "nombre": "abc",
        "funciones": [
            {
                "nombre": "abstractclassmethod",
                "sintaxis": [
                    "@abc.abstractclassmethod"
                ],
                "parametros": []
            },
            {
                "nombre": "abstractmethod",
                "sintaxis": [
                    "@abc.abstractmethod"
                ],
                "parametros": []
            },
            {
                "nombre": "abstractproperty",
                "sintaxis": [
                    "@abc.abstractproperty"
                ],
                "parametros": []
            },
            {
                "nombre": "abstractstaticmethod",
                "sintaxis": [
                    "@abc.abstractstaticmethod"
                ],
                "parametros": []
            },
            {
                "nombre": "get_cache_token",
                "sintaxis": [
                    "abc.get_cache_token()"
                ],
                "parametros": []
            },
            {
                "nombre": "update_abstractmethods",
                "sintaxis": [
                    "abc.update_abstractmethods(cls)"
                ],
                "parametros": [
                    "cls"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "ABC",
                "constructores": [
                    {
                        "nombre": "ABC",
                        "sintaxis": [
                            "class abc.ABC"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ABC"
                ]
            },
            {
                "nombre": "ABCMeta",
                "constructores": [
                    {
                        "nombre": "ABCMeta",
                        "sintaxis": [
                            "class abc.ABCMeta"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "register",
                        "sintaxis": [
                            "register(subclass)"
                        ],
                        "parametros": [
                            "subclass"
                        ]
                    },
                    {
                        "nombre": "__subclasshook__",
                        "sintaxis": [
                            "__subclasshook__(subclass)"
                        ],
                        "parametros": [
                            "subclass"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ABCMeta"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "aifc",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "aifc.open(file, mode=None)"
                ],
                "parametros": [
                    "mode",
                    "file"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "aifc",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "aifc",
                        "sintaxis": [
                            "aifc.aifc()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "aiff",
                        "sintaxis": [
                            "aifc.aiff()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "aifc.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getcompname",
                        "sintaxis": [
                            "aifc.getcompname()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getcomptype",
                        "sintaxis": [
                            "aifc.getcomptype()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getframerate",
                        "sintaxis": [
                            "aifc.getframerate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getmark",
                        "sintaxis": [
                            "aifc.getmark(id)"
                        ],
                        "parametros": [
                            "id"
                        ]
                    },
                    {
                        "nombre": "getmarkers",
                        "sintaxis": [
                            "aifc.getmarkers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getnchannels",
                        "sintaxis": [
                            "aifc.getnchannels()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getnframes",
                        "sintaxis": [
                            "aifc.getnframes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getparams",
                        "sintaxis": [
                            "aifc.getparams()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getsampwidth",
                        "sintaxis": [
                            "aifc.getsampwidth()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readframes",
                        "sintaxis": [
                            "aifc.readframes(nframes)"
                        ],
                        "parametros": [
                            "nframes"
                        ]
                    },
                    {
                        "nombre": "rewind",
                        "sintaxis": [
                            "aifc.rewind()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setcomptype",
                        "sintaxis": [
                            "aifc.setcomptype(type, name)"
                        ],
                        "parametros": [
                            "type",
                            "name"
                        ]
                    },
                    {
                        "nombre": "setframerate",
                        "sintaxis": [
                            "aifc.setframerate(rate)"
                        ],
                        "parametros": [
                            "rate"
                        ]
                    },
                    {
                        "nombre": "setmark",
                        "sintaxis": [
                            "aifc.setmark(id, pos, name)"
                        ],
                        "parametros": [
                            "pos",
                            "name",
                            "id"
                        ]
                    },
                    {
                        "nombre": "setnchannels",
                        "sintaxis": [
                            "aifc.setnchannels(nchannels)"
                        ],
                        "parametros": [
                            "nchannels"
                        ]
                    },
                    {
                        "nombre": "setnframes",
                        "sintaxis": [
                            "aifc.setnframes(nframes)"
                        ],
                        "parametros": [
                            "nframes"
                        ]
                    },
                    {
                        "nombre": "setparams",
                        "sintaxis": [
                            "aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)"
                        ],
                        "parametros": [
                            "framerate",
                            "sampwidth",
                            "comptype",
                            "compname",
                            "nchannels"
                        ]
                    },
                    {
                        "nombre": "setpos",
                        "sintaxis": [
                            "aifc.setpos(pos)"
                        ],
                        "parametros": [
                            "pos"
                        ]
                    },
                    {
                        "nombre": "setsampwidth",
                        "sintaxis": [
                            "aifc.setsampwidth(width)"
                        ],
                        "parametros": [
                            "width"
                        ]
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "aifc.tell()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "writeframes",
                        "sintaxis": [
                            "aifc.writeframes(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "writeframesraw",
                        "sintaxis": [
                            "aifc.writeframesraw(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class aifc"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "argparse",
        "funciones": [],
        "clases": [
            {
                "nombre": "Action",
                "constructores": [
                    {
                        "nombre": "Action",
                        "sintaxis": [
                            "class argparse.Action(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)"
                        ],
                        "parametros": [
                            "dest",
                            "type",
                            "help",
                            "required",
                            "const",
                            "metavar",
                            "default",
                            "option_strings",
                            "choices",
                            "nargs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Action"
                ]
            },
            {
                "nombre": "ArgumentParser",
                "constructores": [
                    {
                        "nombre": "ArgumentParser",
                        "sintaxis": [
                            "class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True, exit_on_error=True)"
                        ],
                        "parametros": [
                            "description",
                            "parents",
                            "prefix_chars",
                            "allow_abbrev",
                            "conflict_handler",
                            "exit_on_error",
                            "prog",
                            "formatter_class",
                            "fromfile_prefix_chars",
                            "argument_default",
                            "add_help",
                            "epilog",
                            "usage"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_argument",
                        "sintaxis": [
                            "ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])"
                        ],
                        "parametros": [
                            "type",
                            "help",
                            "dest",
                            "name or flags...",
                            "required",
                            "const",
                            "metavar",
                            "default",
                            "choices",
                            "action",
                            "nargs"
                        ]
                    },
                    {
                        "nombre": "add_argument_group",
                        "sintaxis": [
                            "ArgumentParser.add_argument_group(title=None, description=None)"
                        ],
                        "parametros": [
                            "title",
                            "description"
                        ]
                    },
                    {
                        "nombre": "add_mutually_exclusive_group",
                        "sintaxis": [
                            "ArgumentParser.add_mutually_exclusive_group(required=False)"
                        ],
                        "parametros": [
                            "required"
                        ]
                    },
                    {
                        "nombre": "add_subparsers",
                        "sintaxis": [
                            "ArgumentParser.add_subparsers([title][, description][, prog][, parser_class][, action][, option_string][, dest][, required][, help][, metavar])"
                        ],
                        "parametros": [
                            "title",
                            "description",
                            "dest",
                            "help",
                            "required",
                            "metavar",
                            "prog",
                            "action",
                            "option_string",
                            "parser_class"
                        ]
                    },
                    {
                        "nombre": "convert_arg_line_to_args",
                        "sintaxis": [
                            "ArgumentParser.convert_arg_line_to_args(arg_line)"
                        ],
                        "parametros": [
                            "arg_line"
                        ]
                    },
                    {
                        "nombre": "error",
                        "sintaxis": [
                            "ArgumentParser.error(message)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    },
                    {
                        "nombre": "exit",
                        "sintaxis": [
                            "ArgumentParser.exit(status=0, message=None)"
                        ],
                        "parametros": [
                            "status",
                            "message"
                        ]
                    },
                    {
                        "nombre": "format_help",
                        "sintaxis": [
                            "ArgumentParser.format_help()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "format_usage",
                        "sintaxis": [
                            "ArgumentParser.format_usage()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_default",
                        "sintaxis": [
                            "ArgumentParser.get_default(dest)"
                        ],
                        "parametros": [
                            "dest"
                        ]
                    },
                    {
                        "nombre": "parse_args",
                        "sintaxis": [
                            "ArgumentParser.parse_args(args=None, namespace=None)"
                        ],
                        "parametros": [
                            "args",
                            "namespace"
                        ]
                    },
                    {
                        "nombre": "parse_intermixed_args",
                        "sintaxis": [
                            "ArgumentParser.parse_intermixed_args(args=None, namespace=None)"
                        ],
                        "parametros": [
                            "args",
                            "namespace"
                        ]
                    },
                    {
                        "nombre": "parse_known_args",
                        "sintaxis": [
                            "ArgumentParser.parse_known_args(args=None, namespace=None)"
                        ],
                        "parametros": [
                            "args",
                            "namespace"
                        ]
                    },
                    {
                        "nombre": "parse_known_intermixed_args",
                        "sintaxis": [
                            "ArgumentParser.parse_known_intermixed_args(args=None, namespace=None)"
                        ],
                        "parametros": [
                            "args",
                            "namespace"
                        ]
                    },
                    {
                        "nombre": "print_help",
                        "sintaxis": [
                            "ArgumentParser.print_help(file=None)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    },
                    {
                        "nombre": "print_usage",
                        "sintaxis": [
                            "ArgumentParser.print_usage(file=None)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    },
                    {
                        "nombre": "set_defaults",
                        "sintaxis": [
                            "ArgumentParser.set_defaults(**kwargs)"
                        ],
                        "parametros": [
                            "kwargs"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ArgumentParser"
                ]
            },
            {
                "nombre": "FileType",
                "constructores": [
                    {
                        "nombre": "FileType",
                        "sintaxis": [
                            "class argparse.FileType(mode='r', bufsize=- 1, encoding=None, errors=None)"
                        ],
                        "parametros": [
                            "mode",
                            "encoding",
                            "errors",
                            "bufsize"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FileType"
                ]
            },
            {
                "nombre": "Namespace",
                "constructores": [
                    {
                        "nombre": "Namespace",
                        "sintaxis": [
                            "class argparse.Namespace"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Namespace"
                ]
            },
            {
                "nombre": "RawDescriptionHelpFormatter",
                "constructores": [
                    {
                        "nombre": "RawDescriptionHelpFormatter",
                        "sintaxis": [
                            "class argparse.RawDescriptionHelpFormatter",
                            "class argparse.RawTextHelpFormatter",
                            "class argparse.MetavarTypeHelpFormatter",
                            "class argparse.ArgumentDefaultsHelpFormatter"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class RawDescriptionHelpFormatter"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "array",
        "funciones": [],
        "clases": [
            {
                "nombre": "array",
                "constructores": [
                    {
                        "nombre": "array",
                        "sintaxis": [
                            "class array.array(typecode[, initializer])"
                        ],
                        "parametros": [
                            "initializer",
                            "typecode"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "append",
                        "sintaxis": [
                            "array.append(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "buffer_info",
                        "sintaxis": [
                            "array.buffer_info()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "byteswap",
                        "sintaxis": [
                            "array.byteswap()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "array.count(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "extend",
                        "sintaxis": [
                            "array.extend(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "frombytes",
                        "sintaxis": [
                            "array.frombytes(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    },
                    {
                        "nombre": "fromfile",
                        "sintaxis": [
                            "array.fromfile(f, n)"
                        ],
                        "parametros": [
                            "f",
                            "n"
                        ]
                    },
                    {
                        "nombre": "fromlist",
                        "sintaxis": [
                            "array.fromlist(list)"
                        ],
                        "parametros": [
                            "list"
                        ]
                    },
                    {
                        "nombre": "fromunicode",
                        "sintaxis": [
                            "array.fromunicode(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "array.index(x[, start[, stop]])"
                        ],
                        "parametros": [
                            "stop",
                            "x",
                            "start"
                        ]
                    },
                    {
                        "nombre": "insert",
                        "sintaxis": [
                            "array.insert(i, x)"
                        ],
                        "parametros": [
                            "i",
                            "x"
                        ]
                    },
                    {
                        "nombre": "pop",
                        "sintaxis": [
                            "array.pop([i])"
                        ],
                        "parametros": [
                            "i"
                        ]
                    },
                    {
                        "nombre": "remove",
                        "sintaxis": [
                            "array.remove(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "reverse",
                        "sintaxis": [
                            "array.reverse()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tobytes",
                        "sintaxis": [
                            "array.tobytes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tofile",
                        "sintaxis": [
                            "array.tofile(f)"
                        ],
                        "parametros": [
                            "f"
                        ]
                    },
                    {
                        "nombre": "tolist",
                        "sintaxis": [
                            "array.tolist()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tounicode",
                        "sintaxis": [
                            "array.tounicode()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "itemsize",
                        "sintaxis": [
                            "array.itemsize"
                        ]
                    },
                    {
                        "nombre": "typecode",
                        "sintaxis": [
                            "array.typecode"
                        ]
                    }
                ],
                "sintaxis": [
                    "class array"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "typecodes",
                "sintaxis": [
                    "array.typecodes"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "ast",
        "funciones": [
            {
                "nombre": "copy_location",
                "sintaxis": [
                    "ast.copy_location(new_node, old_node)"
                ],
                "parametros": [
                    "new_node",
                    "old_node"
                ]
            },
            {
                "nombre": "dump",
                "sintaxis": [
                    "ast.dump(node, annotate_fields=True, include_attributes=False, *, indent=None)"
                ],
                "parametros": [
                    "include_attributes",
                    "indent",
                    "node",
                    "*",
                    "annotate_fields"
                ]
            },
            {
                "nombre": "fix_missing_locations",
                "sintaxis": [
                    "ast.fix_missing_locations(node)"
                ],
                "parametros": [
                    "node"
                ]
            },
            {
                "nombre": "get_docstring",
                "sintaxis": [
                    "ast.get_docstring(node, clean=True)"
                ],
                "parametros": [
                    "clean",
                    "node"
                ]
            },
            {
                "nombre": "get_source_segment",
                "sintaxis": [
                    "ast.get_source_segment(source, node, *, padded=False)"
                ],
                "parametros": [
                    "*",
                    "padded",
                    "source",
                    "node"
                ]
            },
            {
                "nombre": "increment_lineno",
                "sintaxis": [
                    "ast.increment_lineno(node, n=1)"
                ],
                "parametros": [
                    "n",
                    "node"
                ]
            },
            {
                "nombre": "iter_child_nodes",
                "sintaxis": [
                    "ast.iter_child_nodes(node)"
                ],
                "parametros": [
                    "node"
                ]
            },
            {
                "nombre": "iter_fields",
                "sintaxis": [
                    "ast.iter_fields(node)"
                ],
                "parametros": [
                    "node"
                ]
            },
            {
                "nombre": "literal_eval",
                "sintaxis": [
                    "ast.literal_eval(node_or_string)"
                ],
                "parametros": [
                    "node_or_string"
                ]
            },
            {
                "nombre": "parse",
                "sintaxis": [
                    "ast.parse(source, filename='<unknown>', mode='exec', *, type_comments=False, feature_version=None)"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "feature_version",
                    "type_comments",
                    "source",
                    "*"
                ]
            },
            {
                "nombre": "unparse",
                "sintaxis": [
                    "ast.unparse(ast_obj)"
                ],
                "parametros": [
                    "ast_obj"
                ]
            },
            {
                "nombre": "walk",
                "sintaxis": [
                    "ast.walk(node)"
                ],
                "parametros": [
                    "node"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Add",
                "constructores": [
                    {
                        "nombre": "Add",
                        "sintaxis": [
                            "class ast.LShift",
                            "class ast.Mult",
                            "class ast.Div",
                            "class ast.Sub",
                            "class ast.Mod",
                            "class ast.Pow",
                            "class ast.RShift",
                            "class ast.BitAnd",
                            "class ast.FloorDiv",
                            "class ast.MatMult",
                            "class ast.BitOr",
                            "class ast.BitXor",
                            "class ast.Add"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Add"
                ]
            },
            {
                "nombre": "alias",
                "constructores": [
                    {
                        "nombre": "alias",
                        "sintaxis": [
                            "class ast.alias(name, asname)"
                        ],
                        "parametros": [
                            "asname",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class alias"
                ]
            },
            {
                "nombre": "And",
                "constructores": [
                    {
                        "nombre": "And",
                        "sintaxis": [
                            "class ast.Or",
                            "class ast.And"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class And"
                ]
            },
            {
                "nombre": "AnnAssign",
                "constructores": [
                    {
                        "nombre": "AnnAssign",
                        "sintaxis": [
                            "class ast.AnnAssign(target, annotation, value, simple)"
                        ],
                        "parametros": [
                            "annotation",
                            "value",
                            "simple",
                            "target"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AnnAssign"
                ]
            },
            {
                "nombre": "arg",
                "constructores": [
                    {
                        "nombre": "arg",
                        "sintaxis": [
                            "class ast.arg(arg, annotation, type_comment)"
                        ],
                        "parametros": [
                            "arg",
                            "annotation",
                            "type_comment"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "type_comment",
                        "sintaxis": [
                            "type_comment"
                        ]
                    }
                ],
                "sintaxis": [
                    "class arg"
                ]
            },
            {
                "nombre": "arguments",
                "constructores": [
                    {
                        "nombre": "arguments",
                        "sintaxis": [
                            "class ast.arguments(posonlyargs, args, vararg, kwonlyargs, kw_defaults, kwarg, defaults)"
                        ],
                        "parametros": [
                            "args",
                            "kwonlyargs",
                            "kw_defaults",
                            "posonlyargs",
                            "kwarg",
                            "defaults",
                            "vararg"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class arguments"
                ]
            },
            {
                "nombre": "Assert",
                "constructores": [
                    {
                        "nombre": "Assert",
                        "sintaxis": [
                            "class ast.Assert(test, msg)"
                        ],
                        "parametros": [
                            "msg",
                            "test"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Assert"
                ]
            },
            {
                "nombre": "Assign",
                "constructores": [
                    {
                        "nombre": "Assign",
                        "sintaxis": [
                            "class ast.Assign(targets, value, type_comment)"
                        ],
                        "parametros": [
                            "targets",
                            "type_comment",
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "type_comment",
                        "sintaxis": [
                            "type_comment"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Assign"
                ]
            },
            {
                "nombre": "AST",
                "constructores": [
                    {
                        "nombre": "AST",
                        "sintaxis": [
                            "class ast.AST"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "_fields",
                        "sintaxis": [
                            "_fields"
                        ]
                    }
                ],
                "sintaxis": [
                    "class AST"
                ]
            },
            {
                "nombre": "AsyncFor",
                "constructores": [
                    {
                        "nombre": "AsyncFor",
                        "sintaxis": [
                            "class ast.AsyncWith(items, body, type_comment)",
                            "class ast.AsyncFor(target, iter, body, orelse, type_comment)"
                        ],
                        "parametros": [
                            "orelse",
                            "body",
                            "target",
                            "items",
                            "iter",
                            "type_comment"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncFor"
                ]
            },
            {
                "nombre": "AsyncFunctionDef",
                "constructores": [
                    {
                        "nombre": "AsyncFunctionDef",
                        "sintaxis": [
                            "class ast.AsyncFunctionDef(name, args, body, decorator_list, returns, type_comment)"
                        ],
                        "parametros": [
                            "args",
                            "returns",
                            "name",
                            "body",
                            "decorator_list",
                            "type_comment"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncFunctionDef"
                ]
            },
            {
                "nombre": "Attribute",
                "constructores": [
                    {
                        "nombre": "Attribute",
                        "sintaxis": [
                            "class ast.Attribute(value, attr, ctx)"
                        ],
                        "parametros": [
                            "ctx",
                            "value",
                            "attr"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Attribute"
                ]
            },
            {
                "nombre": "AugAssign",
                "constructores": [
                    {
                        "nombre": "AugAssign",
                        "sintaxis": [
                            "class ast.AugAssign(target, op, value)"
                        ],
                        "parametros": [
                            "op",
                            "value",
                            "target"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AugAssign"
                ]
            },
            {
                "nombre": "Await",
                "constructores": [
                    {
                        "nombre": "Await",
                        "sintaxis": [
                            "class ast.Await(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Await"
                ]
            },
            {
                "nombre": "BinOp",
                "constructores": [
                    {
                        "nombre": "BinOp",
                        "sintaxis": [
                            "class ast.BinOp(left, op, right)"
                        ],
                        "parametros": [
                            "op",
                            "right",
                            "left"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BinOp"
                ]
            },
            {
                "nombre": "BoolOp",
                "constructores": [
                    {
                        "nombre": "BoolOp",
                        "sintaxis": [
                            "class ast.BoolOp(op, values)"
                        ],
                        "parametros": [
                            "op",
                            "values"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BoolOp"
                ]
            },
            {
                "nombre": "Break",
                "constructores": [
                    {
                        "nombre": "Break",
                        "sintaxis": [
                            "class ast.Break",
                            "class ast.Continue"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Break"
                ]
            },
            {
                "nombre": "Call",
                "constructores": [
                    {
                        "nombre": "Call",
                        "sintaxis": [
                            "class ast.Call(func, args, keywords, starargs, kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "func",
                            "starargs",
                            "keywords"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Call"
                ]
            },
            {
                "nombre": "ClassDef",
                "constructores": [
                    {
                        "nombre": "ClassDef",
                        "sintaxis": [
                            "class ast.ClassDef(name, bases, keywords, starargs, kwargs, body, decorator_list)"
                        ],
                        "parametros": [
                            "kwargs",
                            "name",
                            "bases",
                            "body",
                            "decorator_list",
                            "starargs",
                            "keywords"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ClassDef"
                ]
            },
            {
                "nombre": "Compare",
                "constructores": [
                    {
                        "nombre": "Compare",
                        "sintaxis": [
                            "class ast.Compare(left, ops, comparators)"
                        ],
                        "parametros": [
                            "comparators",
                            "ops",
                            "left"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Compare"
                ]
            },
            {
                "nombre": "comprehension",
                "constructores": [
                    {
                        "nombre": "comprehension",
                        "sintaxis": [
                            "class ast.comprehension(target, iter, ifs, is_async)"
                        ],
                        "parametros": [
                            "iter",
                            "is_async",
                            "target",
                            "ifs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class comprehension"
                ]
            },
            {
                "nombre": "Constant",
                "constructores": [
                    {
                        "nombre": "Constant",
                        "sintaxis": [
                            "class ast.Constant(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Constant"
                ]
            },
            {
                "nombre": "Delete",
                "constructores": [
                    {
                        "nombre": "Delete",
                        "sintaxis": [
                            "class ast.Delete(targets)"
                        ],
                        "parametros": [
                            "targets"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Delete"
                ]
            },
            {
                "nombre": "Dict",
                "constructores": [
                    {
                        "nombre": "Dict",
                        "sintaxis": [
                            "class ast.Dict(keys, values)"
                        ],
                        "parametros": [
                            "values",
                            "keys"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Dict"
                ]
            },
            {
                "nombre": "Eq",
                "constructores": [
                    {
                        "nombre": "Eq",
                        "sintaxis": [
                            "class ast.Lt",
                            "class ast.GtE",
                            "class ast.Gt",
                            "class ast.LtE",
                            "class ast.Is",
                            "class ast.IsNot",
                            "class ast.Eq",
                            "class ast.In",
                            "class ast.NotIn",
                            "class ast.NotEq"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Eq"
                ]
            },
            {
                "nombre": "ExceptHandler",
                "constructores": [
                    {
                        "nombre": "ExceptHandler",
                        "sintaxis": [
                            "class ast.ExceptHandler(type, name, body)"
                        ],
                        "parametros": [
                            "type",
                            "body",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ExceptHandler"
                ]
            },
            {
                "nombre": "Expr",
                "constructores": [
                    {
                        "nombre": "Expr",
                        "sintaxis": [
                            "class ast.Expr(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Expr"
                ]
            },
            {
                "nombre": "For",
                "constructores": [
                    {
                        "nombre": "For",
                        "sintaxis": [
                            "class ast.For(target, iter, body, orelse, type_comment)"
                        ],
                        "parametros": [
                            "orelse",
                            "body",
                            "target",
                            "iter",
                            "type_comment"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "type_comment",
                        "sintaxis": [
                            "type_comment"
                        ]
                    }
                ],
                "sintaxis": [
                    "class For"
                ]
            },
            {
                "nombre": "FormattedValue",
                "constructores": [
                    {
                        "nombre": "FormattedValue",
                        "sintaxis": [
                            "class ast.FormattedValue(value, conversion, format_spec)"
                        ],
                        "parametros": [
                            "conversion",
                            "format_spec",
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FormattedValue"
                ]
            },
            {
                "nombre": "FunctionDef",
                "constructores": [
                    {
                        "nombre": "FunctionDef",
                        "sintaxis": [
                            "class ast.FunctionDef(name, args, body, decorator_list, returns, type_comment)"
                        ],
                        "parametros": [
                            "args",
                            "returns",
                            "name",
                            "body",
                            "decorator_list",
                            "type_comment"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "type_comment",
                        "sintaxis": [
                            "type_comment"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FunctionDef"
                ]
            },
            {
                "nombre": "Global",
                "constructores": [
                    {
                        "nombre": "Global",
                        "sintaxis": [
                            "class ast.Global(names)",
                            "class ast.Nonlocal(names)"
                        ],
                        "parametros": [
                            "names"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Global"
                ]
            },
            {
                "nombre": "If",
                "constructores": [
                    {
                        "nombre": "If",
                        "sintaxis": [
                            "class ast.If(test, body, orelse)"
                        ],
                        "parametros": [
                            "orelse",
                            "body",
                            "test"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class If"
                ]
            },
            {
                "nombre": "IfExp",
                "constructores": [
                    {
                        "nombre": "IfExp",
                        "sintaxis": [
                            "class ast.IfExp(test, body, orelse)"
                        ],
                        "parametros": [
                            "orelse",
                            "body",
                            "test"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IfExp"
                ]
            },
            {
                "nombre": "Import",
                "constructores": [
                    {
                        "nombre": "Import",
                        "sintaxis": [
                            "class ast.Import(names)"
                        ],
                        "parametros": [
                            "names"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Import"
                ]
            },
            {
                "nombre": "ImportFrom",
                "constructores": [
                    {
                        "nombre": "ImportFrom",
                        "sintaxis": [
                            "class ast.ImportFrom(module, names, level)"
                        ],
                        "parametros": [
                            "level",
                            "names",
                            "module"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ImportFrom"
                ]
            },
            {
                "nombre": "JoinedStr",
                "constructores": [
                    {
                        "nombre": "JoinedStr",
                        "sintaxis": [
                            "class ast.JoinedStr(values)"
                        ],
                        "parametros": [
                            "values"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class JoinedStr"
                ]
            },
            {
                "nombre": "keyword",
                "constructores": [
                    {
                        "nombre": "keyword",
                        "sintaxis": [
                            "class ast.keyword(arg, value)"
                        ],
                        "parametros": [
                            "arg",
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class keyword"
                ]
            },
            {
                "nombre": "Lambda",
                "constructores": [
                    {
                        "nombre": "Lambda",
                        "sintaxis": [
                            "class ast.Lambda(args, body)"
                        ],
                        "parametros": [
                            "args",
                            "body"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Lambda"
                ]
            },
            {
                "nombre": "List",
                "constructores": [
                    {
                        "nombre": "List",
                        "sintaxis": [
                            "class ast.Tuple(elts, ctx)",
                            "class ast.List(elts, ctx)"
                        ],
                        "parametros": [
                            "ctx",
                            "elts"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class List"
                ]
            },
            {
                "nombre": "ListComp",
                "constructores": [
                    {
                        "nombre": "ListComp",
                        "sintaxis": [
                            "class ast.SetComp(elt, generators)",
                            "class ast.GeneratorExp(elt, generators)",
                            "class ast.ListComp(elt, generators)",
                            "class ast.DictComp(key, value, generators)"
                        ],
                        "parametros": [
                            "elt",
                            "generators",
                            "value",
                            "key"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ListComp"
                ]
            },
            {
                "nombre": "Load",
                "constructores": [
                    {
                        "nombre": "Load",
                        "sintaxis": [
                            "class ast.Load",
                            "class ast.Store",
                            "class ast.Del"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Load"
                ]
            },
            {
                "nombre": "Match",
                "constructores": [
                    {
                        "nombre": "Match",
                        "sintaxis": [
                            "class ast.Match(subject, cases)"
                        ],
                        "parametros": [
                            "cases",
                            "subject"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Match"
                ]
            },
            {
                "nombre": "MatchAs",
                "constructores": [
                    {
                        "nombre": "MatchAs",
                        "sintaxis": [
                            "class ast.MatchAs(pattern, name)"
                        ],
                        "parametros": [
                            "pattern",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchAs"
                ]
            },
            {
                "nombre": "MatchClass",
                "constructores": [
                    {
                        "nombre": "MatchClass",
                        "sintaxis": [
                            "class ast.MatchClass(cls, patterns, kwd_attrs, kwd_patterns)"
                        ],
                        "parametros": [
                            "cls",
                            "kwd_patterns",
                            "patterns",
                            "kwd_attrs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchClass"
                ]
            },
            {
                "nombre": "MatchMapping",
                "constructores": [
                    {
                        "nombre": "MatchMapping",
                        "sintaxis": [
                            "class ast.MatchMapping(keys, patterns, rest)"
                        ],
                        "parametros": [
                            "patterns",
                            "rest",
                            "keys"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchMapping"
                ]
            },
            {
                "nombre": "MatchOr",
                "constructores": [
                    {
                        "nombre": "MatchOr",
                        "sintaxis": [
                            "class ast.MatchOr(patterns)"
                        ],
                        "parametros": [
                            "patterns"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchOr"
                ]
            },
            {
                "nombre": "MatchSequence",
                "constructores": [
                    {
                        "nombre": "MatchSequence",
                        "sintaxis": [
                            "class ast.MatchSequence(patterns)"
                        ],
                        "parametros": [
                            "patterns"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchSequence"
                ]
            },
            {
                "nombre": "MatchSingleton",
                "constructores": [
                    {
                        "nombre": "MatchSingleton",
                        "sintaxis": [
                            "class ast.MatchSingleton(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchSingleton"
                ]
            },
            {
                "nombre": "MatchStar",
                "constructores": [
                    {
                        "nombre": "MatchStar",
                        "sintaxis": [
                            "class ast.MatchStar(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchStar"
                ]
            },
            {
                "nombre": "MatchValue",
                "constructores": [
                    {
                        "nombre": "MatchValue",
                        "sintaxis": [
                            "class ast.MatchValue(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MatchValue"
                ]
            },
            {
                "nombre": "match_case",
                "constructores": [
                    {
                        "nombre": "match_case",
                        "sintaxis": [
                            "class ast.match_case(pattern, guard, body)"
                        ],
                        "parametros": [
                            "pattern",
                            "guard",
                            "body"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class match_case"
                ]
            },
            {
                "nombre": "Name",
                "constructores": [
                    {
                        "nombre": "Name",
                        "sintaxis": [
                            "class ast.Name(id, ctx)"
                        ],
                        "parametros": [
                            "ctx",
                            "id"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Name"
                ]
            },
            {
                "nombre": "NamedExpr",
                "constructores": [
                    {
                        "nombre": "NamedExpr",
                        "sintaxis": [
                            "class ast.NamedExpr(target, value)"
                        ],
                        "parametros": [
                            "value",
                            "target"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NamedExpr"
                ]
            },
            {
                "nombre": "NodeTransformer",
                "constructores": [
                    {
                        "nombre": "NodeTransformer",
                        "sintaxis": [
                            "class ast.NodeTransformer"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NodeTransformer"
                ]
            },
            {
                "nombre": "NodeVisitor",
                "constructores": [
                    {
                        "nombre": "NodeVisitor",
                        "sintaxis": [
                            "class ast.NodeVisitor"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "generic_visit",
                        "sintaxis": [
                            "generic_visit(node)"
                        ],
                        "parametros": [
                            "node"
                        ]
                    },
                    {
                        "nombre": "visit",
                        "sintaxis": [
                            "visit(node)"
                        ],
                        "parametros": [
                            "node"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class NodeVisitor"
                ]
            },
            {
                "nombre": "Pass",
                "constructores": [
                    {
                        "nombre": "Pass",
                        "sintaxis": [
                            "class ast.Pass"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Pass"
                ]
            },
            {
                "nombre": "Raise",
                "constructores": [
                    {
                        "nombre": "Raise",
                        "sintaxis": [
                            "class ast.Raise(exc, cause)"
                        ],
                        "parametros": [
                            "exc",
                            "cause"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Raise"
                ]
            },
            {
                "nombre": "Return",
                "constructores": [
                    {
                        "nombre": "Return",
                        "sintaxis": [
                            "class ast.Return(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Return"
                ]
            },
            {
                "nombre": "Set",
                "constructores": [
                    {
                        "nombre": "Set",
                        "sintaxis": [
                            "class ast.Set(elts)"
                        ],
                        "parametros": [
                            "elts"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Set"
                ]
            },
            {
                "nombre": "Slice",
                "constructores": [
                    {
                        "nombre": "Slice",
                        "sintaxis": [
                            "class ast.Slice(lower, upper, step)"
                        ],
                        "parametros": [
                            "lower",
                            "upper",
                            "step"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Slice"
                ]
            },
            {
                "nombre": "Starred",
                "constructores": [
                    {
                        "nombre": "Starred",
                        "sintaxis": [
                            "class ast.Starred(value, ctx)"
                        ],
                        "parametros": [
                            "ctx",
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Starred"
                ]
            },
            {
                "nombre": "Subscript",
                "constructores": [
                    {
                        "nombre": "Subscript",
                        "sintaxis": [
                            "class ast.Subscript(value, slice, ctx)"
                        ],
                        "parametros": [
                            "slice",
                            "ctx",
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Subscript"
                ]
            },
            {
                "nombre": "Try",
                "constructores": [
                    {
                        "nombre": "Try",
                        "sintaxis": [
                            "class ast.Try(body, handlers, orelse, finalbody)"
                        ],
                        "parametros": [
                            "orelse",
                            "handlers",
                            "body",
                            "finalbody"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Try"
                ]
            },
            {
                "nombre": "UAdd",
                "constructores": [
                    {
                        "nombre": "UAdd",
                        "sintaxis": [
                            "class ast.Not",
                            "class ast.UAdd",
                            "class ast.USub",
                            "class ast.Invert"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class UAdd"
                ]
            },
            {
                "nombre": "UnaryOp",
                "constructores": [
                    {
                        "nombre": "UnaryOp",
                        "sintaxis": [
                            "class ast.UnaryOp(op, operand)"
                        ],
                        "parametros": [
                            "op",
                            "operand"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class UnaryOp"
                ]
            },
            {
                "nombre": "While",
                "constructores": [
                    {
                        "nombre": "While",
                        "sintaxis": [
                            "class ast.While(test, body, orelse)"
                        ],
                        "parametros": [
                            "orelse",
                            "body",
                            "test"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class While"
                ]
            },
            {
                "nombre": "With",
                "constructores": [
                    {
                        "nombre": "With",
                        "sintaxis": [
                            "class ast.With(items, body, type_comment)"
                        ],
                        "parametros": [
                            "items",
                            "type_comment",
                            "body"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "type_comment",
                        "sintaxis": [
                            "type_comment"
                        ]
                    }
                ],
                "sintaxis": [
                    "class With"
                ]
            },
            {
                "nombre": "withitem",
                "constructores": [
                    {
                        "nombre": "withitem",
                        "sintaxis": [
                            "class ast.withitem(context_expr, optional_vars)"
                        ],
                        "parametros": [
                            "optional_vars",
                            "context_expr"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class withitem"
                ]
            },
            {
                "nombre": "Yield",
                "constructores": [
                    {
                        "nombre": "Yield",
                        "sintaxis": [
                            "class ast.Yield(value)",
                            "class ast.YieldFrom(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Yield"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "PyCF_ALLOW_TOP_LEVEL_AWAIT",
                "sintaxis": [
                    "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT"
                ]
            },
            {
                "nombre": "PyCF_ONLY_AST",
                "sintaxis": [
                    "ast.PyCF_ONLY_AST"
                ]
            },
            {
                "nombre": "PyCF_TYPE_COMMENTS",
                "sintaxis": [
                    "ast.PyCF_TYPE_COMMENTS"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "asynchat",
        "funciones": [],
        "clases": [
            {
                "nombre": "async_chat",
                "constructores": [
                    {
                        "nombre": "async_chat",
                        "sintaxis": [
                            "class asynchat.async_chat"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close_when_done",
                        "sintaxis": [
                            "async_chat.close_when_done()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "collect_incoming_data",
                        "sintaxis": [
                            "async_chat.collect_incoming_data(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "discard_buffers",
                        "sintaxis": [
                            "async_chat.discard_buffers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "found_terminator",
                        "sintaxis": [
                            "async_chat.found_terminator()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_terminator",
                        "sintaxis": [
                            "async_chat.get_terminator()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "push",
                        "sintaxis": [
                            "async_chat.push(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "push_with_producer",
                        "sintaxis": [
                            "async_chat.push_with_producer(producer)"
                        ],
                        "parametros": [
                            "producer"
                        ]
                    },
                    {
                        "nombre": "set_terminator",
                        "sintaxis": [
                            "async_chat.set_terminator(term)"
                        ],
                        "parametros": [
                            "term"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class async_chat"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ac_in_buffer_size",
                "sintaxis": [
                    "ac_in_buffer_size"
                ]
            },
            {
                "nombre": "ac_out_buffer_size",
                "sintaxis": [
                    "ac_out_buffer_size"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "asyncio",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "asyncore",
        "funciones": [
            {
                "nombre": "loop",
                "sintaxis": [
                    "asyncore.loop([timeout[, use_poll[, map[, count]]]])"
                ],
                "parametros": [
                    "timeout",
                    "map",
                    "count",
                    "use_poll"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "dispatcher",
                "constructores": [
                    {
                        "nombre": "dispatcher",
                        "sintaxis": [
                            "class asyncore.dispatcher"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "accept",
                        "sintaxis": [
                            "accept()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "bind",
                        "sintaxis": [
                            "bind(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "connect",
                        "sintaxis": [
                            "connect(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "create_socket",
                        "sintaxis": [
                            "create_socket(family=socket.AF_INET, type=socket.SOCK_STREAM)"
                        ],
                        "parametros": [
                            "type",
                            "family"
                        ]
                    },
                    {
                        "nombre": "handle_accept",
                        "sintaxis": [
                            "handle_accept()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_accepted",
                        "sintaxis": [
                            "handle_accepted(sock, addr)"
                        ],
                        "parametros": [
                            "addr",
                            "sock"
                        ]
                    },
                    {
                        "nombre": "handle_close",
                        "sintaxis": [
                            "handle_close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_connect",
                        "sintaxis": [
                            "handle_connect()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_error",
                        "sintaxis": [
                            "handle_error()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_expt",
                        "sintaxis": [
                            "handle_expt()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_read",
                        "sintaxis": [
                            "handle_read()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_write",
                        "sintaxis": [
                            "handle_write()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "listen",
                        "sintaxis": [
                            "listen(backlog)"
                        ],
                        "parametros": [
                            "backlog"
                        ]
                    },
                    {
                        "nombre": "readable",
                        "sintaxis": [
                            "readable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "recv",
                        "sintaxis": [
                            "recv(buffer_size)"
                        ],
                        "parametros": [
                            "buffer_size"
                        ]
                    },
                    {
                        "nombre": "send",
                        "sintaxis": [
                            "send(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "writable",
                        "sintaxis": [
                            "writable()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class dispatcher"
                ]
            },
            {
                "nombre": "dispatcher_with_send",
                "constructores": [
                    {
                        "nombre": "dispatcher_with_send",
                        "sintaxis": [
                            "class asyncore.dispatcher_with_send"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class dispatcher_with_send"
                ]
            },
            {
                "nombre": "file_dispatcher",
                "constructores": [
                    {
                        "nombre": "file_dispatcher",
                        "sintaxis": [
                            "class asyncore.file_dispatcher"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class file_dispatcher"
                ]
            },
            {
                "nombre": "file_wrapper",
                "constructores": [
                    {
                        "nombre": "file_wrapper",
                        "sintaxis": [
                            "class asyncore.file_wrapper"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class file_wrapper"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "atexit",
        "funciones": [
            {
                "nombre": "register",
                "sintaxis": [
                    "atexit.register(func, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "func",
                    "kwargs"
                ]
            },
            {
                "nombre": "unregister",
                "sintaxis": [
                    "atexit.unregister(func)"
                ],
                "parametros": [
                    "func"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "audioop",
        "funciones": [
            {
                "nombre": "add",
                "sintaxis": [
                    "audioop.add(fragment1, fragment2, width)"
                ],
                "parametros": [
                    "fragment2",
                    "fragment1",
                    "width"
                ]
            },
            {
                "nombre": "adpcm2lin",
                "sintaxis": [
                    "audioop.adpcm2lin(adpcmfragment, width, state)"
                ],
                "parametros": [
                    "width",
                    "state",
                    "adpcmfragment"
                ]
            },
            {
                "nombre": "alaw2lin",
                "sintaxis": [
                    "audioop.alaw2lin(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "avg",
                "sintaxis": [
                    "audioop.avg(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "avgpp",
                "sintaxis": [
                    "audioop.avgpp(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "bias",
                "sintaxis": [
                    "audioop.bias(fragment, width, bias)"
                ],
                "parametros": [
                    "width",
                    "fragment",
                    "bias"
                ]
            },
            {
                "nombre": "byteswap",
                "sintaxis": [
                    "audioop.byteswap(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "cross",
                "sintaxis": [
                    "audioop.cross(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "findfactor",
                "sintaxis": [
                    "audioop.findfactor(fragment, reference)"
                ],
                "parametros": [
                    "reference",
                    "fragment"
                ]
            },
            {
                "nombre": "findfit",
                "sintaxis": [
                    "audioop.findfit(fragment, reference)"
                ],
                "parametros": [
                    "reference",
                    "fragment"
                ]
            },
            {
                "nombre": "findmax",
                "sintaxis": [
                    "audioop.findmax(fragment, length)"
                ],
                "parametros": [
                    "fragment",
                    "length"
                ]
            },
            {
                "nombre": "getsample",
                "sintaxis": [
                    "audioop.getsample(fragment, width, index)"
                ],
                "parametros": [
                    "index",
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "lin2adpcm",
                "sintaxis": [
                    "audioop.lin2adpcm(fragment, width, state)"
                ],
                "parametros": [
                    "state",
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "lin2alaw",
                "sintaxis": [
                    "audioop.lin2alaw(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "lin2lin",
                "sintaxis": [
                    "audioop.lin2lin(fragment, width, newwidth)"
                ],
                "parametros": [
                    "newwidth",
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "lin2ulaw",
                "sintaxis": [
                    "audioop.lin2ulaw(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "max",
                "sintaxis": [
                    "audioop.max(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "maxpp",
                "sintaxis": [
                    "audioop.maxpp(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "minmax",
                "sintaxis": [
                    "audioop.minmax(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "mul",
                "sintaxis": [
                    "audioop.mul(fragment, width, factor)"
                ],
                "parametros": [
                    "factor",
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "ratecv",
                "sintaxis": [
                    "audioop.ratecv(fragment, width, nchannels, inrate, outrate, state[, weightA[, weightB]])"
                ],
                "parametros": [
                    "outrate",
                    "fragment",
                    "weightA",
                    "weightB",
                    "state",
                    "width",
                    "nchannels",
                    "inrate"
                ]
            },
            {
                "nombre": "reverse",
                "sintaxis": [
                    "audioop.reverse(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "rms",
                "sintaxis": [
                    "audioop.rms(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            },
            {
                "nombre": "tomono",
                "sintaxis": [
                    "audioop.tomono(fragment, width, lfactor, rfactor)"
                ],
                "parametros": [
                    "lfactor",
                    "width",
                    "fragment",
                    "rfactor"
                ]
            },
            {
                "nombre": "tostereo",
                "sintaxis": [
                    "audioop.tostereo(fragment, width, lfactor, rfactor)"
                ],
                "parametros": [
                    "lfactor",
                    "width",
                    "fragment",
                    "rfactor"
                ]
            },
            {
                "nombre": "ulaw2lin",
                "sintaxis": [
                    "audioop.ulaw2lin(fragment, width)"
                ],
                "parametros": [
                    "width",
                    "fragment"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception audioop.error"
                ]
            }
        ]
    },
    {
        "nombre": "base64",
        "funciones": [
            {
                "nombre": "a85decode",
                "sintaxis": [
                    "base64.a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')"
                ],
                "parametros": [
                    "ignorechars",
                    "foldspaces",
                    "b",
                    "adobe",
                    "*"
                ]
            },
            {
                "nombre": "a85encode",
                "sintaxis": [
                    "base64.a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False)"
                ],
                "parametros": [
                    "wrapcol",
                    "foldspaces",
                    "*",
                    "b",
                    "adobe",
                    "pad"
                ]
            },
            {
                "nombre": "b16decode",
                "sintaxis": [
                    "base64.b16decode(s, casefold=False)"
                ],
                "parametros": [
                    "s",
                    "casefold"
                ]
            },
            {
                "nombre": "b16encode",
                "sintaxis": [
                    "base64.b16encode(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "b32decode",
                "sintaxis": [
                    "base64.b32decode(s, casefold=False, map01=None)"
                ],
                "parametros": [
                    "s",
                    "map01",
                    "casefold"
                ]
            },
            {
                "nombre": "b32encode",
                "sintaxis": [
                    "base64.b32encode(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "b32hexdecode",
                "sintaxis": [
                    "base64.b32hexdecode(s, casefold=False)"
                ],
                "parametros": [
                    "s",
                    "casefold"
                ]
            },
            {
                "nombre": "b32hexencode",
                "sintaxis": [
                    "base64.b32hexencode(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "b64decode",
                "sintaxis": [
                    "base64.b64decode(s, altchars=None, validate=False)"
                ],
                "parametros": [
                    "s",
                    "altchars",
                    "validate"
                ]
            },
            {
                "nombre": "b64encode",
                "sintaxis": [
                    "base64.b64encode(s, altchars=None)"
                ],
                "parametros": [
                    "s",
                    "altchars"
                ]
            },
            {
                "nombre": "b85decode",
                "sintaxis": [
                    "base64.b85decode(b)"
                ],
                "parametros": [
                    "b"
                ]
            },
            {
                "nombre": "b85encode",
                "sintaxis": [
                    "base64.b85encode(b, pad=False)"
                ],
                "parametros": [
                    "pad",
                    "b"
                ]
            },
            {
                "nombre": "decode",
                "sintaxis": [
                    "base64.decode(input, output)"
                ],
                "parametros": [
                    "output",
                    "input"
                ]
            },
            {
                "nombre": "decodebytes",
                "sintaxis": [
                    "base64.decodebytes(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "encode",
                "sintaxis": [
                    "base64.encode(input, output)"
                ],
                "parametros": [
                    "output",
                    "input"
                ]
            },
            {
                "nombre": "encodebytes",
                "sintaxis": [
                    "base64.encodebytes(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "standard_b64decode",
                "sintaxis": [
                    "base64.standard_b64decode(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "standard_b64encode",
                "sintaxis": [
                    "base64.standard_b64encode(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "urlsafe_b64decode",
                "sintaxis": [
                    "base64.urlsafe_b64decode(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "urlsafe_b64encode",
                "sintaxis": [
                    "base64.urlsafe_b64encode(s)"
                ],
                "parametros": [
                    "s"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "bdb",
        "funciones": [
            {
                "nombre": "checkfuncname",
                "sintaxis": [
                    "bdb.checkfuncname(b, frame)"
                ],
                "parametros": [
                    "b",
                    "frame"
                ]
            },
            {
                "nombre": "effective",
                "sintaxis": [
                    "bdb.effective(file, line, frame)"
                ],
                "parametros": [
                    "line",
                    "file",
                    "frame"
                ]
            },
            {
                "nombre": "set_trace",
                "sintaxis": [
                    "bdb.set_trace()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "Bdb",
                "constructores": [
                    {
                        "nombre": "Bdb",
                        "sintaxis": [
                            "class bdb.Bdb(skip=None)"
                        ],
                        "parametros": [
                            "skip"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "break_anywhere",
                        "sintaxis": [
                            "break_anywhere(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "break_here",
                        "sintaxis": [
                            "break_here(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "canonic",
                        "sintaxis": [
                            "canonic(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "clear_all_breaks",
                        "sintaxis": [
                            "clear_all_breaks()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "clear_all_file_breaks",
                        "sintaxis": [
                            "clear_all_file_breaks(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "clear_bpbynumber",
                        "sintaxis": [
                            "clear_bpbynumber(arg)"
                        ],
                        "parametros": [
                            "arg"
                        ]
                    },
                    {
                        "nombre": "clear_break",
                        "sintaxis": [
                            "clear_break(filename, lineno)"
                        ],
                        "parametros": [
                            "filename",
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "dispatch_call",
                        "sintaxis": [
                            "dispatch_call(frame, arg)"
                        ],
                        "parametros": [
                            "arg",
                            "frame"
                        ]
                    },
                    {
                        "nombre": "dispatch_exception",
                        "sintaxis": [
                            "dispatch_exception(frame, arg)"
                        ],
                        "parametros": [
                            "arg",
                            "frame"
                        ]
                    },
                    {
                        "nombre": "dispatch_line",
                        "sintaxis": [
                            "dispatch_line(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "dispatch_return",
                        "sintaxis": [
                            "dispatch_return(frame, arg)"
                        ],
                        "parametros": [
                            "arg",
                            "frame"
                        ]
                    },
                    {
                        "nombre": "do_clear",
                        "sintaxis": [
                            "do_clear(arg)"
                        ],
                        "parametros": [
                            "arg"
                        ]
                    },
                    {
                        "nombre": "format_stack_entry",
                        "sintaxis": [
                            "format_stack_entry(frame_lineno, lprefix=': ')"
                        ],
                        "parametros": [
                            "lprefix",
                            "frame_lineno"
                        ]
                    },
                    {
                        "nombre": "get_all_breaks",
                        "sintaxis": [
                            "get_all_breaks()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_bpbynumber",
                        "sintaxis": [
                            "get_bpbynumber(arg)"
                        ],
                        "parametros": [
                            "arg"
                        ]
                    },
                    {
                        "nombre": "get_break",
                        "sintaxis": [
                            "get_break(filename, lineno)"
                        ],
                        "parametros": [
                            "filename",
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "get_breaks",
                        "sintaxis": [
                            "get_breaks(filename, lineno)"
                        ],
                        "parametros": [
                            "filename",
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "get_file_breaks",
                        "sintaxis": [
                            "get_file_breaks(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "get_stack",
                        "sintaxis": [
                            "get_stack(f, t)"
                        ],
                        "parametros": [
                            "f",
                            "t"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(cmd, globals=None, locals=None)"
                        ],
                        "parametros": [
                            "globals",
                            "cmd",
                            "locals"
                        ]
                    },
                    {
                        "nombre": "runcall",
                        "sintaxis": [
                            "runcall(func, /, *args, **kwds)"
                        ],
                        "parametros": [
                            "func",
                            "/",
                            "*args",
                            "**kwds"
                        ]
                    },
                    {
                        "nombre": "runctx",
                        "sintaxis": [
                            "runctx(cmd, globals, locals)"
                        ],
                        "parametros": [
                            "globals",
                            "cmd",
                            "locals"
                        ]
                    },
                    {
                        "nombre": "runeval",
                        "sintaxis": [
                            "runeval(expr, globals=None, locals=None)"
                        ],
                        "parametros": [
                            "globals",
                            "expr",
                            "locals"
                        ]
                    },
                    {
                        "nombre": "set_break",
                        "sintaxis": [
                            "set_break(filename, lineno, temporary=0, cond, funcname)"
                        ],
                        "parametros": [
                            "temporary",
                            "filename",
                            "cond",
                            "lineno",
                            "funcname"
                        ]
                    },
                    {
                        "nombre": "set_continue",
                        "sintaxis": [
                            "set_continue()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_next",
                        "sintaxis": [
                            "set_next(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "set_quit",
                        "sintaxis": [
                            "set_quit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_return",
                        "sintaxis": [
                            "set_return(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "set_step",
                        "sintaxis": [
                            "set_step()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_trace",
                        "sintaxis": [
                            "set_trace([frame])"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "set_until",
                        "sintaxis": [
                            "set_until(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "stop_here",
                        "sintaxis": [
                            "stop_here(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "trace_dispatch",
                        "sintaxis": [
                            "trace_dispatch(frame, event, arg)"
                        ],
                        "parametros": [
                            "arg",
                            "event",
                            "frame"
                        ]
                    },
                    {
                        "nombre": "user_call",
                        "sintaxis": [
                            "user_call(frame, argument_list)"
                        ],
                        "parametros": [
                            "argument_list",
                            "frame"
                        ]
                    },
                    {
                        "nombre": "user_exception",
                        "sintaxis": [
                            "user_exception(frame, exc_info)"
                        ],
                        "parametros": [
                            "exc_info",
                            "frame"
                        ]
                    },
                    {
                        "nombre": "user_line",
                        "sintaxis": [
                            "user_line(frame)"
                        ],
                        "parametros": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "user_return",
                        "sintaxis": [
                            "user_return(frame, return_value)"
                        ],
                        "parametros": [
                            "return_value",
                            "frame"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Bdb"
                ]
            },
            {
                "nombre": "Breakpoint",
                "constructores": [
                    {
                        "nombre": "Breakpoint",
                        "sintaxis": [
                            "class bdb.Breakpoint(self, file, line, temporary=0, cond=None, funcname=None)"
                        ],
                        "parametros": [
                            "temporary",
                            "cond",
                            "line",
                            "funcname",
                            "self",
                            "file"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "bpformat",
                        "sintaxis": [
                            "bpformat()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "bpprint",
                        "sintaxis": [
                            "bpprint(out=None)"
                        ],
                        "parametros": [
                            "out"
                        ]
                    },
                    {
                        "nombre": "deleteMe",
                        "sintaxis": [
                            "deleteMe()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "disable",
                        "sintaxis": [
                            "disable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "enable",
                        "sintaxis": [
                            "enable()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Breakpoint"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "BdbQuit",
                "sintaxis": [
                    "exception bdb.BdbQuit"
                ]
            }
        ]
    },
    {
        "nombre": "binascii",
        "funciones": [
            {
                "nombre": "a2b_base64",
                "sintaxis": [
                    "binascii.a2b_base64(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "a2b_hex",
                "sintaxis": [
                    "binascii.a2b_hex(hexstr)",
                    "binascii.unhexlify(hexstr)"
                ],
                "parametros": [
                    "hexstr"
                ]
            },
            {
                "nombre": "a2b_hqx",
                "sintaxis": [
                    "binascii.a2b_hqx(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "a2b_qp",
                "sintaxis": [
                    "binascii.a2b_qp(data, header=False)"
                ],
                "parametros": [
                    "header",
                    "data"
                ]
            },
            {
                "nombre": "a2b_uu",
                "sintaxis": [
                    "binascii.a2b_uu(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "b2a_base64",
                "sintaxis": [
                    "binascii.b2a_base64(data, *, newline=True)"
                ],
                "parametros": [
                    "*",
                    "newline",
                    "data"
                ]
            },
            {
                "nombre": "b2a_hex",
                "sintaxis": [
                    "binascii.b2a_hex(data[, sep[, bytes_per_sep=1]])",
                    "binascii.hexlify(data[, sep[, bytes_per_sep=1]])"
                ],
                "parametros": [
                    "sep",
                    "bytes_per_sep",
                    "data"
                ]
            },
            {
                "nombre": "b2a_hqx",
                "sintaxis": [
                    "binascii.b2a_hqx(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "b2a_qp",
                "sintaxis": [
                    "binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)"
                ],
                "parametros": [
                    "istext",
                    "header",
                    "quotetabs",
                    "data"
                ]
            },
            {
                "nombre": "b2a_uu",
                "sintaxis": [
                    "binascii.b2a_uu(data, *, backtick=False)"
                ],
                "parametros": [
                    "backtick",
                    "*",
                    "data"
                ]
            },
            {
                "nombre": "crc32",
                "sintaxis": [
                    "binascii.crc32(data[, value])"
                ],
                "parametros": [
                    "value",
                    "data"
                ]
            },
            {
                "nombre": "crc_hqx",
                "sintaxis": [
                    "binascii.crc_hqx(data, value)"
                ],
                "parametros": [
                    "value",
                    "data"
                ]
            },
            {
                "nombre": "rlecode_hqx",
                "sintaxis": [
                    "binascii.rlecode_hqx(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "rledecode_hqx",
                "sintaxis": [
                    "binascii.rledecode_hqx(data)"
                ],
                "parametros": [
                    "data"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception binascii.Error"
                ]
            },
            {
                "nombre": "Incomplete",
                "sintaxis": [
                    "exception binascii.Incomplete"
                ]
            }
        ]
    },
    {
        "nombre": "binhex",
        "funciones": [
            {
                "nombre": "binhex",
                "sintaxis": [
                    "binhex.binhex(input, output)"
                ],
                "parametros": [
                    "output",
                    "input"
                ]
            },
            {
                "nombre": "hexbin",
                "sintaxis": [
                    "binhex.hexbin(input, output)"
                ],
                "parametros": [
                    "output",
                    "input"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception binhex.Error"
                ]
            }
        ]
    },
    {
        "nombre": "bisect",
        "funciones": [
            {
                "nombre": "bisect_left",
                "sintaxis": [
                    "bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None)"
                ],
                "parametros": [
                    "key",
                    "lo",
                    "*",
                    "a",
                    "hi",
                    "x"
                ]
            },
            {
                "nombre": "bisect_right",
                "sintaxis": [
                    "bisect.bisect_right(a, x, lo=0, hi=len(a), *, key=None)",
                    "bisect.bisect(a, x, lo=0, hi=len(a))"
                ],
                "parametros": [
                    "key",
                    "lo",
                    "*",
                    "a",
                    "hi",
                    "x"
                ]
            },
            {
                "nombre": "insort_left",
                "sintaxis": [
                    "bisect.insort_left(a, x, lo=0, hi=len(a), *, key=None)"
                ],
                "parametros": [
                    "key",
                    "lo",
                    "*",
                    "a",
                    "hi",
                    "x"
                ]
            },
            {
                "nombre": "insort_right",
                "sintaxis": [
                    "bisect.insort_right(a, x, lo=0, hi=len(a), *, key=None)",
                    "bisect.insort(a, x, lo=0, hi=len(a))"
                ],
                "parametros": [
                    "key",
                    "lo",
                    "*",
                    "a",
                    "hi",
                    "x"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "builtins",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "bz2",
        "funciones": [
            {
                "nombre": "compress",
                "sintaxis": [
                    "bz2.compress(data, compresslevel=9)"
                ],
                "parametros": [
                    "compresslevel",
                    "data"
                ]
            },
            {
                "nombre": "decompress",
                "sintaxis": [
                    "bz2.decompress(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "bz2.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "encoding",
                    "compresslevel",
                    "errors",
                    "newline"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BZ2Compressor",
                "constructores": [
                    {
                        "nombre": "BZ2Compressor",
                        "sintaxis": [
                            "class bz2.BZ2Compressor(compresslevel=9)"
                        ],
                        "parametros": [
                            "compresslevel"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "compress",
                        "sintaxis": [
                            "compress(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BZ2Compressor"
                ]
            },
            {
                "nombre": "BZ2Decompressor",
                "constructores": [
                    {
                        "nombre": "BZ2Decompressor",
                        "sintaxis": [
                            "class bz2.BZ2Decompressor"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "decompress",
                        "sintaxis": [
                            "decompress(data, max_length=- 1)"
                        ],
                        "parametros": [
                            "max_length",
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "eof",
                        "sintaxis": [
                            "eof"
                        ]
                    },
                    {
                        "nombre": "needs_input",
                        "sintaxis": [
                            "needs_input"
                        ]
                    },
                    {
                        "nombre": "unused_data",
                        "sintaxis": [
                            "unused_data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BZ2Decompressor"
                ]
            },
            {
                "nombre": "BZ2File",
                "constructores": [
                    {
                        "nombre": "BZ2File",
                        "sintaxis": [
                            "class bz2.BZ2File(filename, mode='r', *, compresslevel=9)"
                        ],
                        "parametros": [
                            "mode",
                            "filename",
                            "*",
                            "compresslevel"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "peek",
                        "sintaxis": [
                            "peek([n])"
                        ],
                        "parametros": [
                            "n"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BZ2File"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "calendar",
        "funciones": [
            {
                "nombre": "calendar",
                "sintaxis": [
                    "calendar.calendar(year, w=2, l=1, c=6, m=3)"
                ],
                "parametros": [
                    "year",
                    "m",
                    "c",
                    "l",
                    "w"
                ]
            },
            {
                "nombre": "firstweekday",
                "sintaxis": [
                    "calendar.firstweekday()"
                ],
                "parametros": []
            },
            {
                "nombre": "isleap",
                "sintaxis": [
                    "calendar.isleap(year)"
                ],
                "parametros": [
                    "year"
                ]
            },
            {
                "nombre": "leapdays",
                "sintaxis": [
                    "calendar.leapdays(y1, y2)"
                ],
                "parametros": [
                    "y2",
                    "y1"
                ]
            },
            {
                "nombre": "month",
                "sintaxis": [
                    "calendar.month(theyear, themonth, w=0, l=0)"
                ],
                "parametros": [
                    "themonth",
                    "w",
                    "theyear",
                    "l"
                ]
            },
            {
                "nombre": "monthcalendar",
                "sintaxis": [
                    "calendar.monthcalendar(year, month)"
                ],
                "parametros": [
                    "month",
                    "year"
                ]
            },
            {
                "nombre": "monthrange",
                "sintaxis": [
                    "calendar.monthrange(year, month)"
                ],
                "parametros": [
                    "month",
                    "year"
                ]
            },
            {
                "nombre": "prcal",
                "sintaxis": [
                    "calendar.prcal(year, w=0, l=0, c=6, m=3)"
                ],
                "parametros": [
                    "year",
                    "m",
                    "c",
                    "l",
                    "w"
                ]
            },
            {
                "nombre": "prmonth",
                "sintaxis": [
                    "calendar.prmonth(theyear, themonth, w=0, l=0)"
                ],
                "parametros": [
                    "themonth",
                    "w",
                    "theyear",
                    "l"
                ]
            },
            {
                "nombre": "setfirstweekday",
                "sintaxis": [
                    "calendar.setfirstweekday(weekday)"
                ],
                "parametros": [
                    "weekday"
                ]
            },
            {
                "nombre": "timegm",
                "sintaxis": [
                    "calendar.timegm(tuple)"
                ],
                "parametros": [
                    "tuple"
                ]
            },
            {
                "nombre": "weekday",
                "sintaxis": [
                    "calendar.weekday(year, month, day)"
                ],
                "parametros": [
                    "day",
                    "month",
                    "year"
                ]
            },
            {
                "nombre": "weekheader",
                "sintaxis": [
                    "calendar.weekheader(n)"
                ],
                "parametros": [
                    "n"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Calendar",
                "constructores": [
                    {
                        "nombre": "Calendar",
                        "sintaxis": [
                            "class calendar.Calendar(firstweekday=0)"
                        ],
                        "parametros": [
                            "firstweekday"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "itermonthdates",
                        "sintaxis": [
                            "itermonthdates(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "itermonthdays",
                        "sintaxis": [
                            "itermonthdays(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "itermonthdays2",
                        "sintaxis": [
                            "itermonthdays2(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "itermonthdays3",
                        "sintaxis": [
                            "itermonthdays3(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "itermonthdays4",
                        "sintaxis": [
                            "itermonthdays4(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "iterweekdays",
                        "sintaxis": [
                            "iterweekdays()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "monthdatescalendar",
                        "sintaxis": [
                            "monthdatescalendar(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "monthdays2calendar",
                        "sintaxis": [
                            "monthdays2calendar(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "monthdayscalendar",
                        "sintaxis": [
                            "monthdayscalendar(year, month)"
                        ],
                        "parametros": [
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "yeardatescalendar",
                        "sintaxis": [
                            "yeardatescalendar(year, width=3)"
                        ],
                        "parametros": [
                            "width",
                            "year"
                        ]
                    },
                    {
                        "nombre": "yeardays2calendar",
                        "sintaxis": [
                            "yeardays2calendar(year, width=3)"
                        ],
                        "parametros": [
                            "width",
                            "year"
                        ]
                    },
                    {
                        "nombre": "yeardayscalendar",
                        "sintaxis": [
                            "yeardayscalendar(year, width=3)"
                        ],
                        "parametros": [
                            "width",
                            "year"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Calendar"
                ]
            },
            {
                "nombre": "HTMLCalendar",
                "constructores": [
                    {
                        "nombre": "HTMLCalendar",
                        "sintaxis": [
                            "class calendar.HTMLCalendar(firstweekday=0)"
                        ],
                        "parametros": [
                            "firstweekday"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "formatmonth",
                        "sintaxis": [
                            "formatmonth(theyear, themonth, withyear=True)"
                        ],
                        "parametros": [
                            "themonth",
                            "withyear",
                            "theyear"
                        ]
                    },
                    {
                        "nombre": "formatyear",
                        "sintaxis": [
                            "formatyear(theyear, width=3)"
                        ],
                        "parametros": [
                            "theyear",
                            "width"
                        ]
                    },
                    {
                        "nombre": "formatyearpage",
                        "sintaxis": [
                            "formatyearpage(theyear, width=3, css='calendar.css', encoding=None)"
                        ],
                        "parametros": [
                            "css",
                            "theyear",
                            "width",
                            "encoding"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "cssclasses",
                        "sintaxis": [
                            "cssclasses"
                        ]
                    },
                    {
                        "nombre": "cssclasses_weekday_head",
                        "sintaxis": [
                            "cssclasses_weekday_head"
                        ]
                    },
                    {
                        "nombre": "cssclass_month",
                        "sintaxis": [
                            "cssclass_month"
                        ]
                    },
                    {
                        "nombre": "cssclass_month_head",
                        "sintaxis": [
                            "cssclass_month_head"
                        ]
                    },
                    {
                        "nombre": "cssclass_noday",
                        "sintaxis": [
                            "cssclass_noday"
                        ]
                    },
                    {
                        "nombre": "cssclass_year",
                        "sintaxis": [
                            "cssclass_year"
                        ]
                    },
                    {
                        "nombre": "cssclass_year_head",
                        "sintaxis": [
                            "cssclass_year_head"
                        ]
                    }
                ],
                "sintaxis": [
                    "class HTMLCalendar"
                ]
            },
            {
                "nombre": "LocaleHTMLCalendar",
                "constructores": [
                    {
                        "nombre": "LocaleHTMLCalendar",
                        "sintaxis": [
                            "class calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)"
                        ],
                        "parametros": [
                            "locale",
                            "firstweekday"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LocaleHTMLCalendar"
                ]
            },
            {
                "nombre": "LocaleTextCalendar",
                "constructores": [
                    {
                        "nombre": "LocaleTextCalendar",
                        "sintaxis": [
                            "class calendar.LocaleTextCalendar(firstweekday=0, locale=None)"
                        ],
                        "parametros": [
                            "locale",
                            "firstweekday"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LocaleTextCalendar"
                ]
            },
            {
                "nombre": "TextCalendar",
                "constructores": [
                    {
                        "nombre": "TextCalendar",
                        "sintaxis": [
                            "class calendar.TextCalendar(firstweekday=0)"
                        ],
                        "parametros": [
                            "firstweekday"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "formatmonth",
                        "sintaxis": [
                            "formatmonth(theyear, themonth, w=0, l=0)"
                        ],
                        "parametros": [
                            "themonth",
                            "w",
                            "theyear",
                            "l"
                        ]
                    },
                    {
                        "nombre": "formatyear",
                        "sintaxis": [
                            "formatyear(theyear, w=2, l=1, c=6, m=3)"
                        ],
                        "parametros": [
                            "theyear",
                            "m",
                            "c",
                            "l",
                            "w"
                        ]
                    },
                    {
                        "nombre": "prmonth",
                        "sintaxis": [
                            "prmonth(theyear, themonth, w=0, l=0)"
                        ],
                        "parametros": [
                            "themonth",
                            "w",
                            "theyear",
                            "l"
                        ]
                    },
                    {
                        "nombre": "pryear",
                        "sintaxis": [
                            "pryear(theyear, w=2, l=1, c=6, m=3)"
                        ],
                        "parametros": [
                            "theyear",
                            "m",
                            "c",
                            "l",
                            "w"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class TextCalendar"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "day_abbr",
                "sintaxis": [
                    "calendar.day_abbr"
                ]
            },
            {
                "nombre": "day_name",
                "sintaxis": [
                    "calendar.day_name"
                ]
            },
            {
                "nombre": "month_abbr",
                "sintaxis": [
                    "calendar.month_abbr"
                ]
            },
            {
                "nombre": "month_name",
                "sintaxis": [
                    "calendar.month_name"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "cgi",
        "funciones": [
            {
                "nombre": "parse",
                "sintaxis": [
                    "cgi.parse(fp=None, environ=os.environ, keep_blank_values=False, strict_parsing=False, separator='&')"
                ],
                "parametros": [
                    "strict_parsing",
                    "separator",
                    "keep_blank_values",
                    "environ",
                    "fp"
                ]
            },
            {
                "nombre": "parse_header",
                "sintaxis": [
                    "cgi.parse_header(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "parse_multipart",
                "sintaxis": [
                    "cgi.parse_multipart(fp, pdict, encoding='utf-8', errors='replace', separator='&')"
                ],
                "parametros": [
                    "encoding",
                    "errors",
                    "separator",
                    "pdict",
                    "fp"
                ]
            },
            {
                "nombre": "print_directory",
                "sintaxis": [
                    "cgi.print_directory()"
                ],
                "parametros": []
            },
            {
                "nombre": "print_environ",
                "sintaxis": [
                    "cgi.print_environ()"
                ],
                "parametros": []
            },
            {
                "nombre": "print_environ_usage",
                "sintaxis": [
                    "cgi.print_environ_usage()"
                ],
                "parametros": []
            },
            {
                "nombre": "print_form",
                "sintaxis": [
                    "cgi.print_form(form)"
                ],
                "parametros": [
                    "form"
                ]
            },
            {
                "nombre": "test",
                "sintaxis": [
                    "cgi.test()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "FieldStorage",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "getfirst",
                        "sintaxis": [
                            "FieldStorage.getfirst(name, default=None)"
                        ],
                        "parametros": [
                            "name",
                            "default"
                        ]
                    },
                    {
                        "nombre": "getlist",
                        "sintaxis": [
                            "FieldStorage.getlist(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FieldStorage"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "cgitb",
        "funciones": [
            {
                "nombre": "enable",
                "sintaxis": [
                    "cgitb.enable(display=1, logdir=None, context=5, format='html')"
                ],
                "parametros": [
                    "format",
                    "display",
                    "logdir",
                    "context"
                ]
            },
            {
                "nombre": "handler",
                "sintaxis": [
                    "cgitb.handler(info=None)"
                ],
                "parametros": [
                    "info"
                ]
            },
            {
                "nombre": "html",
                "sintaxis": [
                    "cgitb.html(info, context=5)"
                ],
                "parametros": [
                    "context",
                    "info"
                ]
            },
            {
                "nombre": "text",
                "sintaxis": [
                    "cgitb.text(info, context=5)"
                ],
                "parametros": [
                    "context",
                    "info"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "chunk",
        "funciones": [],
        "clases": [
            {
                "nombre": "Chunk",
                "constructores": [
                    {
                        "nombre": "Chunk",
                        "sintaxis": [
                            "class chunk.Chunk(file, align=True, bigendian=True, inclheader=False)"
                        ],
                        "parametros": [
                            "align",
                            "bigendian",
                            "file",
                            "inclheader"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getname",
                        "sintaxis": [
                            "getname()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getsize",
                        "sintaxis": [
                            "getsize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isatty",
                        "sintaxis": [
                            "isatty()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read(size=- 1)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "seek",
                        "sintaxis": [
                            "seek(pos, whence=0)"
                        ],
                        "parametros": [
                            "whence",
                            "pos"
                        ]
                    },
                    {
                        "nombre": "skip",
                        "sintaxis": [
                            "skip()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "tell()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Chunk"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "cmath",
        "funciones": [
            {
                "nombre": "acos",
                "sintaxis": [
                    "cmath.acos(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "acosh",
                "sintaxis": [
                    "cmath.acosh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "asin",
                "sintaxis": [
                    "cmath.asin(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "asinh",
                "sintaxis": [
                    "cmath.asinh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "atan",
                "sintaxis": [
                    "cmath.atan(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "atanh",
                "sintaxis": [
                    "cmath.atanh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "cos",
                "sintaxis": [
                    "cmath.cos(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "cosh",
                "sintaxis": [
                    "cmath.cosh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "exp",
                "sintaxis": [
                    "cmath.exp(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "isclose",
                "sintaxis": [
                    "cmath.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)"
                ],
                "parametros": [
                    "abs_tol",
                    "a",
                    "b",
                    "*",
                    "rel_tol"
                ]
            },
            {
                "nombre": "isfinite",
                "sintaxis": [
                    "cmath.isfinite(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "isinf",
                "sintaxis": [
                    "cmath.isinf(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "isnan",
                "sintaxis": [
                    "cmath.isnan(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "log",
                "sintaxis": [
                    "cmath.log(x[, base])"
                ],
                "parametros": [
                    "base",
                    "x"
                ]
            },
            {
                "nombre": "log10",
                "sintaxis": [
                    "cmath.log10(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "phase",
                "sintaxis": [
                    "cmath.phase(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "polar",
                "sintaxis": [
                    "cmath.polar(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "rect",
                "sintaxis": [
                    "cmath.rect(r, phi)"
                ],
                "parametros": [
                    "r",
                    "phi"
                ]
            },
            {
                "nombre": "sin",
                "sintaxis": [
                    "cmath.sin(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "sinh",
                "sintaxis": [
                    "cmath.sinh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "sqrt",
                "sintaxis": [
                    "cmath.sqrt(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "tan",
                "sintaxis": [
                    "cmath.tan(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "tanh",
                "sintaxis": [
                    "cmath.tanh(x)"
                ],
                "parametros": [
                    "x"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "e",
                "sintaxis": [
                    "cmath.e"
                ]
            },
            {
                "nombre": "inf",
                "sintaxis": [
                    "cmath.inf"
                ]
            },
            {
                "nombre": "infj",
                "sintaxis": [
                    "cmath.infj"
                ]
            },
            {
                "nombre": "nan",
                "sintaxis": [
                    "cmath.nan"
                ]
            },
            {
                "nombre": "nanj",
                "sintaxis": [
                    "cmath.nanj"
                ]
            },
            {
                "nombre": "pi",
                "sintaxis": [
                    "cmath.pi"
                ]
            },
            {
                "nombre": "tau",
                "sintaxis": [
                    "cmath.tau"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "cmd",
        "funciones": [],
        "clases": [
            {
                "nombre": "Cmd",
                "constructores": [
                    {
                        "nombre": "Cmd",
                        "sintaxis": [
                            "class cmd.Cmd(completekey='tab', stdin=None, stdout=None)"
                        ],
                        "parametros": [
                            "stdout",
                            "stdin",
                            "completekey"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cmdloop",
                        "sintaxis": [
                            "Cmd.cmdloop(intro=None)"
                        ],
                        "parametros": [
                            "intro"
                        ]
                    },
                    {
                        "nombre": "completedefault",
                        "sintaxis": [
                            "Cmd.completedefault(text, line, begidx, endidx)"
                        ],
                        "parametros": [
                            "line",
                            "begidx",
                            "endidx",
                            "text"
                        ]
                    },
                    {
                        "nombre": "default",
                        "sintaxis": [
                            "Cmd.default(line)"
                        ],
                        "parametros": [
                            "line"
                        ]
                    },
                    {
                        "nombre": "emptyline",
                        "sintaxis": [
                            "Cmd.emptyline()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "onecmd",
                        "sintaxis": [
                            "Cmd.onecmd(str)"
                        ],
                        "parametros": [
                            "str"
                        ]
                    },
                    {
                        "nombre": "postcmd",
                        "sintaxis": [
                            "Cmd.postcmd(stop, line)"
                        ],
                        "parametros": [
                            "line",
                            "stop"
                        ]
                    },
                    {
                        "nombre": "postloop",
                        "sintaxis": [
                            "Cmd.postloop()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "precmd",
                        "sintaxis": [
                            "Cmd.precmd(line)"
                        ],
                        "parametros": [
                            "line"
                        ]
                    },
                    {
                        "nombre": "preloop",
                        "sintaxis": [
                            "Cmd.preloop()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "cmdqueue",
                        "sintaxis": [
                            "Cmd.cmdqueue"
                        ]
                    },
                    {
                        "nombre": "doc_header",
                        "sintaxis": [
                            "Cmd.doc_header"
                        ]
                    },
                    {
                        "nombre": "identchars",
                        "sintaxis": [
                            "Cmd.identchars"
                        ]
                    },
                    {
                        "nombre": "intro",
                        "sintaxis": [
                            "Cmd.intro"
                        ]
                    },
                    {
                        "nombre": "lastcmd",
                        "sintaxis": [
                            "Cmd.lastcmd"
                        ]
                    },
                    {
                        "nombre": "misc_header",
                        "sintaxis": [
                            "Cmd.misc_header"
                        ]
                    },
                    {
                        "nombre": "prompt",
                        "sintaxis": [
                            "Cmd.prompt"
                        ]
                    },
                    {
                        "nombre": "ruler",
                        "sintaxis": [
                            "Cmd.ruler"
                        ]
                    },
                    {
                        "nombre": "undoc_header",
                        "sintaxis": [
                            "Cmd.undoc_header"
                        ]
                    },
                    {
                        "nombre": "use_rawinput",
                        "sintaxis": [
                            "Cmd.use_rawinput"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Cmd"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "code",
        "funciones": [
            {
                "nombre": "compile_command",
                "sintaxis": [
                    "code.compile_command(source, filename='<input>', symbol='single')"
                ],
                "parametros": [
                    "filename",
                    "source",
                    "symbol"
                ]
            },
            {
                "nombre": "interact",
                "sintaxis": [
                    "code.interact(banner=None, readfunc=None, local=None, exitmsg=None)"
                ],
                "parametros": [
                    "exitmsg",
                    "readfunc",
                    "local",
                    "banner"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "InteractiveConsole",
                "constructores": [
                    {
                        "nombre": "InteractiveConsole",
                        "sintaxis": [
                            "class code.InteractiveConsole(locals=None, filename='<console>')"
                        ],
                        "parametros": [
                            "filename",
                            "locals"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "interact",
                        "sintaxis": [
                            "InteractiveConsole.interact(banner=None, exitmsg=None)"
                        ],
                        "parametros": [
                            "exitmsg",
                            "banner"
                        ]
                    },
                    {
                        "nombre": "push",
                        "sintaxis": [
                            "InteractiveConsole.push(line)"
                        ],
                        "parametros": [
                            "line"
                        ]
                    },
                    {
                        "nombre": "raw_input",
                        "sintaxis": [
                            "InteractiveConsole.raw_input(prompt='')"
                        ],
                        "parametros": [
                            "prompt"
                        ]
                    },
                    {
                        "nombre": "resetbuffer",
                        "sintaxis": [
                            "InteractiveConsole.resetbuffer()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class InteractiveConsole"
                ]
            },
            {
                "nombre": "InteractiveInterpreter",
                "constructores": [
                    {
                        "nombre": "InteractiveInterpreter",
                        "sintaxis": [
                            "class code.InteractiveInterpreter(locals=None)"
                        ],
                        "parametros": [
                            "locals"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "runcode",
                        "sintaxis": [
                            "InteractiveInterpreter.runcode(code)"
                        ],
                        "parametros": [
                            "code"
                        ]
                    },
                    {
                        "nombre": "runsource",
                        "sintaxis": [
                            "InteractiveInterpreter.runsource(source, filename='<input>', symbol='single')"
                        ],
                        "parametros": [
                            "filename",
                            "source",
                            "symbol"
                        ]
                    },
                    {
                        "nombre": "showsyntaxerror",
                        "sintaxis": [
                            "InteractiveInterpreter.showsyntaxerror(filename=None)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "showtraceback",
                        "sintaxis": [
                            "InteractiveInterpreter.showtraceback()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "InteractiveInterpreter.write(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class InteractiveInterpreter"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "codecs",
        "funciones": [
            {
                "nombre": "backslashreplace_errors",
                "sintaxis": [
                    "codecs.backslashreplace_errors(exception)"
                ],
                "parametros": [
                    "exception"
                ]
            },
            {
                "nombre": "decode",
                "sintaxis": [
                    "codecs.decode(obj, encoding='utf-8', errors='strict')"
                ],
                "parametros": [
                    "obj",
                    "encoding",
                    "errors"
                ]
            },
            {
                "nombre": "encode",
                "sintaxis": [
                    "codecs.encode(obj, encoding='utf-8', errors='strict')"
                ],
                "parametros": [
                    "obj",
                    "encoding",
                    "errors"
                ]
            },
            {
                "nombre": "EncodedFile",
                "sintaxis": [
                    "codecs.EncodedFile(file, data_encoding, file_encoding=None, errors='strict')"
                ],
                "parametros": [
                    "data_encoding",
                    "file_encoding",
                    "file",
                    "errors"
                ]
            },
            {
                "nombre": "getdecoder",
                "sintaxis": [
                    "codecs.getdecoder(encoding)"
                ],
                "parametros": [
                    "encoding"
                ]
            },
            {
                "nombre": "getencoder",
                "sintaxis": [
                    "codecs.getencoder(encoding)"
                ],
                "parametros": [
                    "encoding"
                ]
            },
            {
                "nombre": "getincrementaldecoder",
                "sintaxis": [
                    "codecs.getincrementaldecoder(encoding)"
                ],
                "parametros": [
                    "encoding"
                ]
            },
            {
                "nombre": "getincrementalencoder",
                "sintaxis": [
                    "codecs.getincrementalencoder(encoding)"
                ],
                "parametros": [
                    "encoding"
                ]
            },
            {
                "nombre": "getreader",
                "sintaxis": [
                    "codecs.getreader(encoding)"
                ],
                "parametros": [
                    "encoding"
                ]
            },
            {
                "nombre": "getwriter",
                "sintaxis": [
                    "codecs.getwriter(encoding)"
                ],
                "parametros": [
                    "encoding"
                ]
            },
            {
                "nombre": "ignore_errors",
                "sintaxis": [
                    "codecs.ignore_errors(exception)"
                ],
                "parametros": [
                    "exception"
                ]
            },
            {
                "nombre": "iterdecode",
                "sintaxis": [
                    "codecs.iterdecode(iterator, encoding, errors='strict', **kwargs)"
                ],
                "parametros": [
                    "iterator",
                    "encoding",
                    "kwargs",
                    "errors"
                ]
            },
            {
                "nombre": "iterencode",
                "sintaxis": [
                    "codecs.iterencode(iterator, encoding, errors='strict', **kwargs)"
                ],
                "parametros": [
                    "iterator",
                    "encoding",
                    "kwargs",
                    "errors"
                ]
            },
            {
                "nombre": "lookup",
                "sintaxis": [
                    "codecs.lookup(encoding)"
                ],
                "parametros": [
                    "encoding"
                ]
            },
            {
                "nombre": "lookup_error",
                "sintaxis": [
                    "codecs.lookup_error(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "nameprep",
                "sintaxis": [
                    "encodings.idna.nameprep(label)"
                ],
                "parametros": [
                    "label"
                ]
            },
            {
                "nombre": "namereplace_errors",
                "sintaxis": [
                    "codecs.namereplace_errors(exception)"
                ],
                "parametros": [
                    "exception"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "codecs.open(filename, mode='r', encoding=None, errors='strict', buffering=- 1)"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "encoding",
                    "errors",
                    "buffering"
                ]
            },
            {
                "nombre": "register",
                "sintaxis": [
                    "codecs.register(search_function)"
                ],
                "parametros": [
                    "search_function"
                ]
            },
            {
                "nombre": "register_error",
                "sintaxis": [
                    "codecs.register_error(name, error_handler)"
                ],
                "parametros": [
                    "error_handler",
                    "name"
                ]
            },
            {
                "nombre": "replace_errors",
                "sintaxis": [
                    "codecs.replace_errors(exception)"
                ],
                "parametros": [
                    "exception"
                ]
            },
            {
                "nombre": "strict_errors",
                "sintaxis": [
                    "codecs.strict_errors(exception)"
                ],
                "parametros": [
                    "exception"
                ]
            },
            {
                "nombre": "ToASCII",
                "sintaxis": [
                    "encodings.idna.ToASCII(label)"
                ],
                "parametros": [
                    "label"
                ]
            },
            {
                "nombre": "ToUnicode",
                "sintaxis": [
                    "encodings.idna.ToUnicode(label)"
                ],
                "parametros": [
                    "label"
                ]
            },
            {
                "nombre": "unregister",
                "sintaxis": [
                    "codecs.unregister(search_function)"
                ],
                "parametros": [
                    "search_function"
                ]
            },
            {
                "nombre": "xmlcharrefreplace_errors",
                "sintaxis": [
                    "codecs.xmlcharrefreplace_errors(exception)"
                ],
                "parametros": [
                    "exception"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Codec",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "decode",
                        "sintaxis": [
                            "Codec.decode(input[, errors])"
                        ],
                        "parametros": [
                            "errors",
                            "input"
                        ]
                    },
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "Codec.encode(input[, errors])"
                        ],
                        "parametros": [
                            "errors",
                            "input"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Codec"
                ]
            },
            {
                "nombre": "CodecInfo",
                "constructores": [
                    {
                        "nombre": "CodecInfo",
                        "sintaxis": [
                            "class codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None)"
                        ],
                        "parametros": [
                            "name",
                            "incrementalencoder",
                            "streamreader",
                            "decode",
                            "streamwriter",
                            "incrementaldecoder",
                            "encode"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "encode"
                        ]
                    },
                    {
                        "nombre": "incrementalencoder",
                        "sintaxis": [
                            "incrementalencoder"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "streamwriter",
                        "sintaxis": [
                            "streamwriter"
                        ]
                    }
                ],
                "sintaxis": [
                    "class CodecInfo"
                ]
            },
            {
                "nombre": "IncrementalDecoder",
                "constructores": [
                    {
                        "nombre": "IncrementalDecoder",
                        "sintaxis": [
                            "class codecs.IncrementalDecoder(errors='strict')"
                        ],
                        "parametros": [
                            "errors"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "decode",
                        "sintaxis": [
                            "decode(object[, final])"
                        ],
                        "parametros": [
                            "final",
                            "object"
                        ]
                    },
                    {
                        "nombre": "getstate",
                        "sintaxis": [
                            "getstate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setstate",
                        "sintaxis": [
                            "setstate(state)"
                        ],
                        "parametros": [
                            "state"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class IncrementalDecoder"
                ]
            },
            {
                "nombre": "IncrementalEncoder",
                "constructores": [
                    {
                        "nombre": "IncrementalEncoder",
                        "sintaxis": [
                            "class codecs.IncrementalEncoder(errors='strict')"
                        ],
                        "parametros": [
                            "errors"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "encode(object[, final])"
                        ],
                        "parametros": [
                            "final",
                            "object"
                        ]
                    },
                    {
                        "nombre": "getstate",
                        "sintaxis": [
                            "getstate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setstate",
                        "sintaxis": [
                            "setstate(state)"
                        ],
                        "parametros": [
                            "state"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class IncrementalEncoder"
                ]
            },
            {
                "nombre": "StreamReader",
                "constructores": [
                    {
                        "nombre": "StreamReader",
                        "sintaxis": [
                            "class codecs.StreamReader(stream, errors='strict')"
                        ],
                        "parametros": [
                            "errors",
                            "stream"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read([size[, chars[, firstline]]])"
                        ],
                        "parametros": [
                            "firstline",
                            "size",
                            "chars"
                        ]
                    },
                    {
                        "nombre": "readline",
                        "sintaxis": [
                            "readline([size[, keepends]])"
                        ],
                        "parametros": [
                            "size",
                            "keepends"
                        ]
                    },
                    {
                        "nombre": "readlines",
                        "sintaxis": [
                            "readlines([sizehint[, keepends]])"
                        ],
                        "parametros": [
                            "sizehint",
                            "keepends"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class StreamReader"
                ]
            },
            {
                "nombre": "StreamReaderWriter",
                "constructores": [
                    {
                        "nombre": "StreamReaderWriter",
                        "sintaxis": [
                            "class codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')"
                        ],
                        "parametros": [
                            "Writer",
                            "Reader",
                            "errors",
                            "stream"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class StreamReaderWriter"
                ]
            },
            {
                "nombre": "StreamRecoder",
                "constructores": [
                    {
                        "nombre": "StreamRecoder",
                        "sintaxis": [
                            "class codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')"
                        ],
                        "parametros": [
                            "errors",
                            "stream",
                            "decode",
                            "Reader",
                            "Writer",
                            "encode"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class StreamRecoder"
                ]
            },
            {
                "nombre": "StreamWriter",
                "constructores": [
                    {
                        "nombre": "StreamWriter",
                        "sintaxis": [
                            "class codecs.StreamWriter(stream, errors='strict')"
                        ],
                        "parametros": [
                            "errors",
                            "stream"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(object)"
                        ],
                        "parametros": [
                            "object"
                        ]
                    },
                    {
                        "nombre": "writelines",
                        "sintaxis": [
                            "writelines(list)"
                        ],
                        "parametros": [
                            "list"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class StreamWriter"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "BOM",
                "sintaxis": [
                    "codecs.BOM"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "codeop",
        "funciones": [
            {
                "nombre": "compile_command",
                "sintaxis": [
                    "codeop.compile_command(source, filename='<input>', symbol='single')"
                ],
                "parametros": [
                    "filename",
                    "source",
                    "symbol"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "CommandCompiler",
                "constructores": [
                    {
                        "nombre": "CommandCompiler",
                        "sintaxis": [
                            "class codeop.CommandCompiler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class CommandCompiler"
                ]
            },
            {
                "nombre": "Compile",
                "constructores": [
                    {
                        "nombre": "Compile",
                        "sintaxis": [
                            "class codeop.Compile"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Compile"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "collections",
        "funciones": [
            {
                "nombre": "namedtuple",
                "sintaxis": [
                    "collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)"
                ],
                "parametros": [
                    "rename",
                    "defaults",
                    "module",
                    "typename",
                    "*",
                    "field_names"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "ChainMap",
                "constructores": [
                    {
                        "nombre": "ChainMap",
                        "sintaxis": [
                            "class collections.ChainMap(*maps)"
                        ],
                        "parametros": [
                            "maps"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "new_child",
                        "sintaxis": [
                            "new_child(m=None, **kwargs)"
                        ],
                        "parametros": [
                            "kwargs",
                            "m"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "maps",
                        "sintaxis": [
                            "maps"
                        ]
                    },
                    {
                        "nombre": "parents",
                        "sintaxis": [
                            "parents"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ChainMap"
                ]
            },
            {
                "nombre": "Counter",
                "constructores": [
                    {
                        "nombre": "Counter",
                        "sintaxis": [
                            "class collections.Counter([iterable-or-mapping])"
                        ],
                        "parametros": [
                            "iterable-or-mapping"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "elements",
                        "sintaxis": [
                            "elements()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromkeys",
                        "sintaxis": [
                            "fromkeys(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "most_common",
                        "sintaxis": [
                            "most_common([n])"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "subtract",
                        "sintaxis": [
                            "subtract([iterable-or-mapping])"
                        ],
                        "parametros": [
                            "iterable-or-mapping"
                        ]
                    },
                    {
                        "nombre": "total",
                        "sintaxis": [
                            "total()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "update([iterable-or-mapping])"
                        ],
                        "parametros": [
                            "iterable-or-mapping"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Counter"
                ]
            },
            {
                "nombre": "defaultdict",
                "constructores": [
                    {
                        "nombre": "defaultdict",
                        "sintaxis": [
                            "class collections.defaultdict(default_factory=None, /[, ...])"
                        ],
                        "parametros": [
                            "/",
                            "...",
                            "default_factory"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "__missing__",
                        "sintaxis": [
                            "__missing__(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "default_factory",
                        "sintaxis": [
                            "default_factory"
                        ]
                    }
                ],
                "sintaxis": [
                    "class defaultdict"
                ]
            },
            {
                "nombre": "deque",
                "constructores": [
                    {
                        "nombre": "deque",
                        "sintaxis": [
                            "class collections.deque([iterable[, maxlen]])"
                        ],
                        "parametros": [
                            "iterable",
                            "maxlen"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "append",
                        "sintaxis": [
                            "append(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "appendleft",
                        "sintaxis": [
                            "appendleft(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "count(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "extend",
                        "sintaxis": [
                            "extend(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "extendleft",
                        "sintaxis": [
                            "extendleft(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "index(x[, start[, stop]])"
                        ],
                        "parametros": [
                            "stop",
                            "x",
                            "start"
                        ]
                    },
                    {
                        "nombre": "insert",
                        "sintaxis": [
                            "insert(i, x)"
                        ],
                        "parametros": [
                            "i",
                            "x"
                        ]
                    },
                    {
                        "nombre": "pop",
                        "sintaxis": [
                            "pop()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "popleft",
                        "sintaxis": [
                            "popleft()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove",
                        "sintaxis": [
                            "remove(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "reverse",
                        "sintaxis": [
                            "reverse()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "rotate",
                        "sintaxis": [
                            "rotate(n=1)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "maxlen",
                        "sintaxis": [
                            "maxlen"
                        ]
                    }
                ],
                "sintaxis": [
                    "class deque"
                ]
            },
            {
                "nombre": "OrderedDict",
                "constructores": [
                    {
                        "nombre": "OrderedDict",
                        "sintaxis": [
                            "class collections.OrderedDict([items])"
                        ],
                        "parametros": [
                            "items"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "move_to_end",
                        "sintaxis": [
                            "move_to_end(key, last=True)"
                        ],
                        "parametros": [
                            "last",
                            "key"
                        ]
                    },
                    {
                        "nombre": "popitem",
                        "sintaxis": [
                            "popitem(last=True)"
                        ],
                        "parametros": [
                            "last"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class OrderedDict"
                ]
            },
            {
                "nombre": "somenamedtuple",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "_asdict",
                        "sintaxis": [
                            "somenamedtuple._asdict()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "_make",
                        "sintaxis": [
                            "classmethod somenamedtuple._make(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "_replace",
                        "sintaxis": [
                            "somenamedtuple._replace(**kwargs)"
                        ],
                        "parametros": [
                            "kwargs"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "_fields",
                        "sintaxis": [
                            "somenamedtuple._fields"
                        ]
                    },
                    {
                        "nombre": "_field_defaults",
                        "sintaxis": [
                            "somenamedtuple._field_defaults"
                        ]
                    }
                ],
                "sintaxis": [
                    "class somenamedtuple"
                ]
            },
            {
                "nombre": "UserDict",
                "constructores": [
                    {
                        "nombre": "UserDict",
                        "sintaxis": [
                            "class collections.UserDict([initialdata])"
                        ],
                        "parametros": [
                            "initialdata"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class UserDict"
                ]
            },
            {
                "nombre": "UserList",
                "constructores": [
                    {
                        "nombre": "UserList",
                        "sintaxis": [
                            "class collections.UserList([list])"
                        ],
                        "parametros": [
                            "list"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class UserList"
                ]
            },
            {
                "nombre": "UserString",
                "constructores": [
                    {
                        "nombre": "UserString",
                        "sintaxis": [
                            "class collections.UserString(seq)"
                        ],
                        "parametros": [
                            "seq"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class UserString"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "collections.abc",
        "funciones": [],
        "clases": [
            {
                "nombre": "AsyncGenerator",
                "constructores": [
                    {
                        "nombre": "AsyncGenerator",
                        "sintaxis": [
                            "class collections.abc.AsyncGenerator"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncGenerator"
                ]
            },
            {
                "nombre": "AsyncIterable",
                "constructores": [
                    {
                        "nombre": "AsyncIterable",
                        "sintaxis": [
                            "class collections.abc.AsyncIterable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncIterable"
                ]
            },
            {
                "nombre": "AsyncIterator",
                "constructores": [
                    {
                        "nombre": "AsyncIterator",
                        "sintaxis": [
                            "class collections.abc.AsyncIterator"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncIterator"
                ]
            },
            {
                "nombre": "Awaitable",
                "constructores": [
                    {
                        "nombre": "Awaitable",
                        "sintaxis": [
                            "class collections.abc.Awaitable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Awaitable"
                ]
            },
            {
                "nombre": "Callable",
                "constructores": [
                    {
                        "nombre": "Callable",
                        "sintaxis": [
                            "class collections.abc.Callable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Callable"
                ]
            },
            {
                "nombre": "Collection",
                "constructores": [
                    {
                        "nombre": "Collection",
                        "sintaxis": [
                            "class collections.abc.Collection"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Collection"
                ]
            },
            {
                "nombre": "Container",
                "constructores": [
                    {
                        "nombre": "Container",
                        "sintaxis": [
                            "class collections.abc.Container"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Container"
                ]
            },
            {
                "nombre": "Coroutine",
                "constructores": [
                    {
                        "nombre": "Coroutine",
                        "sintaxis": [
                            "class collections.abc.Coroutine"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Coroutine"
                ]
            },
            {
                "nombre": "Generator",
                "constructores": [
                    {
                        "nombre": "Generator",
                        "sintaxis": [
                            "class collections.abc.Generator"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Generator"
                ]
            },
            {
                "nombre": "Hashable",
                "constructores": [
                    {
                        "nombre": "Hashable",
                        "sintaxis": [
                            "class collections.abc.Hashable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Hashable"
                ]
            },
            {
                "nombre": "Iterable",
                "constructores": [
                    {
                        "nombre": "Iterable",
                        "sintaxis": [
                            "class collections.abc.Iterable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Iterable"
                ]
            },
            {
                "nombre": "Iterator",
                "constructores": [
                    {
                        "nombre": "Iterator",
                        "sintaxis": [
                            "class collections.abc.Iterator"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Iterator"
                ]
            },
            {
                "nombre": "Mapping",
                "constructores": [
                    {
                        "nombre": "Mapping",
                        "sintaxis": [
                            "class collections.abc.MutableMapping",
                            "class collections.abc.Mapping"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Mapping"
                ]
            },
            {
                "nombre": "MappingView",
                "constructores": [
                    {
                        "nombre": "MappingView",
                        "sintaxis": [
                            "class collections.abc.MappingView",
                            "class collections.abc.KeysView",
                            "class collections.abc.ValuesView",
                            "class collections.abc.ItemsView"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MappingView"
                ]
            },
            {
                "nombre": "Reversible",
                "constructores": [
                    {
                        "nombre": "Reversible",
                        "sintaxis": [
                            "class collections.abc.Reversible"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Reversible"
                ]
            },
            {
                "nombre": "Sequence",
                "constructores": [
                    {
                        "nombre": "Sequence",
                        "sintaxis": [
                            "class collections.abc.Sequence",
                            "class collections.abc.MutableSequence",
                            "class collections.abc.ByteString"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Sequence"
                ]
            },
            {
                "nombre": "Set",
                "constructores": [
                    {
                        "nombre": "Set",
                        "sintaxis": [
                            "class collections.abc.MutableSet",
                            "class collections.abc.Set"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Set"
                ]
            },
            {
                "nombre": "Sized",
                "constructores": [
                    {
                        "nombre": "Sized",
                        "sintaxis": [
                            "class collections.abc.Sized"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Sized"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "colorsys",
        "funciones": [
            {
                "nombre": "hls_to_rgb",
                "sintaxis": [
                    "colorsys.hls_to_rgb(h, l, s)"
                ],
                "parametros": [
                    "s",
                    "h",
                    "l"
                ]
            },
            {
                "nombre": "hsv_to_rgb",
                "sintaxis": [
                    "colorsys.hsv_to_rgb(h, s, v)"
                ],
                "parametros": [
                    "s",
                    "h",
                    "v"
                ]
            },
            {
                "nombre": "rgb_to_hls",
                "sintaxis": [
                    "colorsys.rgb_to_hls(r, g, b)"
                ],
                "parametros": [
                    "r",
                    "b",
                    "g"
                ]
            },
            {
                "nombre": "rgb_to_hsv",
                "sintaxis": [
                    "colorsys.rgb_to_hsv(r, g, b)"
                ],
                "parametros": [
                    "r",
                    "b",
                    "g"
                ]
            },
            {
                "nombre": "rgb_to_yiq",
                "sintaxis": [
                    "colorsys.rgb_to_yiq(r, g, b)"
                ],
                "parametros": [
                    "r",
                    "b",
                    "g"
                ]
            },
            {
                "nombre": "yiq_to_rgb",
                "sintaxis": [
                    "colorsys.yiq_to_rgb(y, i, q)"
                ],
                "parametros": [
                    "i",
                    "y",
                    "q"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "compileall",
        "funciones": [
            {
                "nombre": "compile_dir",
                "sintaxis": [
                    "compileall.compile_dir(dir, maxlevels=sys.getrecursionlimit(), ddir=None, force=False, rx=None, quiet=0, legacy=False, optimize=- 1, workers=1, invalidation_mode=None, *, stripdir=None, prependdir=None, limit_sl_dest=None, hardlink_dupes=False)"
                ],
                "parametros": [
                    "maxlevels",
                    "quiet",
                    "hardlink_dupes",
                    "prependdir",
                    "workers",
                    "legacy",
                    "invalidation_mode",
                    "force",
                    "ddir",
                    "rx",
                    "limit_sl_dest",
                    "optimize",
                    "*",
                    "dir",
                    "stripdir"
                ]
            },
            {
                "nombre": "compile_file",
                "sintaxis": [
                    "compileall.compile_file(fullname, ddir=None, force=False, rx=None, quiet=0, legacy=False, optimize=- 1, invalidation_mode=None, *, stripdir=None, prependdir=None, limit_sl_dest=None, hardlink_dupes=False)"
                ],
                "parametros": [
                    "quiet",
                    "fullname",
                    "hardlink_dupes",
                    "prependdir",
                    "legacy",
                    "invalidation_mode",
                    "force",
                    "ddir",
                    "rx",
                    "limit_sl_dest",
                    "optimize",
                    "*",
                    "stripdir"
                ]
            },
            {
                "nombre": "compile_path",
                "sintaxis": [
                    "compileall.compile_path(skip_curdir=True, maxlevels=0, force=False, quiet=0, legacy=False, optimize=- 1, invalidation_mode=None)"
                ],
                "parametros": [
                    "maxlevels",
                    "quiet",
                    "legacy",
                    "skip_curdir",
                    "force",
                    "invalidation_mode",
                    "optimize"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "concurrent.futures",
        "funciones": [
            {
                "nombre": "as_completed",
                "sintaxis": [
                    "concurrent.futures.as_completed(fs, timeout=None)"
                ],
                "parametros": [
                    "timeout",
                    "fs"
                ]
            },
            {
                "nombre": "wait",
                "sintaxis": [
                    "concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)"
                ],
                "parametros": [
                    "return_when",
                    "timeout",
                    "fs"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Executor",
                "constructores": [
                    {
                        "nombre": "Executor",
                        "sintaxis": [
                            "class concurrent.futures.Executor"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "map",
                        "sintaxis": [
                            "map(func, *iterables, timeout=None, chunksize=1)"
                        ],
                        "parametros": [
                            "func",
                            "timeout",
                            "iterables",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "shutdown",
                        "sintaxis": [
                            "shutdown(wait=True, *, cancel_futures=False)"
                        ],
                        "parametros": [
                            "cancel_futures",
                            "*",
                            "wait"
                        ]
                    },
                    {
                        "nombre": "submit",
                        "sintaxis": [
                            "submit(fn, /, *args, **kwargs)"
                        ],
                        "parametros": [
                            "**kwargs",
                            "fn",
                            "/",
                            "*args"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Executor"
                ]
            },
            {
                "nombre": "Future",
                "constructores": [
                    {
                        "nombre": "Future",
                        "sintaxis": [
                            "class concurrent.futures.Future"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_done_callback",
                        "sintaxis": [
                            "add_done_callback(fn)"
                        ],
                        "parametros": [
                            "fn"
                        ]
                    },
                    {
                        "nombre": "cancel",
                        "sintaxis": [
                            "cancel()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "cancelled",
                        "sintaxis": [
                            "cancelled()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "done",
                        "sintaxis": [
                            "done()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "exception",
                        "sintaxis": [
                            "exception(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "result",
                        "sintaxis": [
                            "result(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "running",
                        "sintaxis": [
                            "running()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_exception",
                        "sintaxis": [
                            "set_exception(exception)"
                        ],
                        "parametros": [
                            "exception"
                        ]
                    },
                    {
                        "nombre": "set_result",
                        "sintaxis": [
                            "set_result(result)"
                        ],
                        "parametros": [
                            "result"
                        ]
                    },
                    {
                        "nombre": "set_running_or_notify_cancel",
                        "sintaxis": [
                            "set_running_or_notify_cancel()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Future"
                ]
            },
            {
                "nombre": "ProcessPoolExecutor",
                "constructores": [
                    {
                        "nombre": "ProcessPoolExecutor",
                        "sintaxis": [
                            "class concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None, initializer=None, initargs=())"
                        ],
                        "parametros": [
                            "max_workers",
                            "initializer",
                            "mp_context",
                            "initargs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ProcessPoolExecutor"
                ]
            },
            {
                "nombre": "ThreadPoolExecutor",
                "constructores": [
                    {
                        "nombre": "ThreadPoolExecutor",
                        "sintaxis": [
                            "class concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix='', initializer=None, initargs=())"
                        ],
                        "parametros": [
                            "max_workers",
                            "initializer",
                            "thread_name_prefix",
                            "initargs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ThreadPoolExecutor"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "BrokenExecutor",
                "sintaxis": [
                    "exception concurrent.futures.BrokenExecutor"
                ]
            },
            {
                "nombre": "BrokenProcessPool",
                "sintaxis": [
                    "exception concurrent.futures.process.BrokenProcessPool"
                ]
            },
            {
                "nombre": "BrokenThreadPool",
                "sintaxis": [
                    "exception concurrent.futures.thread.BrokenThreadPool"
                ]
            },
            {
                "nombre": "CancelledError",
                "sintaxis": [
                    "exception concurrent.futures.CancelledError"
                ]
            },
            {
                "nombre": "InvalidStateError",
                "sintaxis": [
                    "exception concurrent.futures.InvalidStateError"
                ]
            },
            {
                "nombre": "TimeoutError",
                "sintaxis": [
                    "exception concurrent.futures.TimeoutError"
                ]
            }
        ]
    },
    {
        "nombre": "configparser",
        "funciones": [],
        "clases": [
            {
                "nombre": "BasicInterpolation",
                "constructores": [
                    {
                        "nombre": "BasicInterpolation",
                        "sintaxis": [
                            "class configparser.BasicInterpolation"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BasicInterpolation"
                ]
            },
            {
                "nombre": "ConfigParser",
                "constructores": [
                    {
                        "nombre": "ConfigParser",
                        "sintaxis": [
                            "class configparser.ConfigParser(defaults=None, dict_type=dict, allow_no_value=False, delimiters='=', ':', comment_prefixes='#', ';', inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section=configparser.DEFAULTSECT, interpolation=BasicInterpolation(), converters={})"
                        ],
                        "parametros": [
                            "empty_lines_in_values",
                            "dict_type",
                            "converters",
                            "defaults",
                            "default_section",
                            "delimiters",
                            "inline_comment_prefixes",
                            "interpolation",
                            "comment_prefixes",
                            "allow_no_value",
                            "strict"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_section",
                        "sintaxis": [
                            "add_section(section)"
                        ],
                        "parametros": [
                            "section"
                        ]
                    },
                    {
                        "nombre": "defaults",
                        "sintaxis": [
                            "defaults()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get(section, option, *, raw=False, vars=None[, fallback])"
                        ],
                        "parametros": [
                            "section",
                            "option",
                            "fallback",
                            "vars",
                            "*",
                            "raw"
                        ]
                    },
                    {
                        "nombre": "getboolean",
                        "sintaxis": [
                            "getboolean(section, option, *, raw=False, vars=None[, fallback])"
                        ],
                        "parametros": [
                            "section",
                            "option",
                            "fallback",
                            "vars",
                            "*",
                            "raw"
                        ]
                    },
                    {
                        "nombre": "getfloat",
                        "sintaxis": [
                            "getfloat(section, option, *, raw=False, vars=None[, fallback])"
                        ],
                        "parametros": [
                            "section",
                            "option",
                            "fallback",
                            "vars",
                            "*",
                            "raw"
                        ]
                    },
                    {
                        "nombre": "getint",
                        "sintaxis": [
                            "getint(section, option, *, raw=False, vars=None[, fallback])"
                        ],
                        "parametros": [
                            "section",
                            "option",
                            "fallback",
                            "vars",
                            "*",
                            "raw"
                        ]
                    },
                    {
                        "nombre": "has_option",
                        "sintaxis": [
                            "has_option(section, option)"
                        ],
                        "parametros": [
                            "section",
                            "option"
                        ]
                    },
                    {
                        "nombre": "has_section",
                        "sintaxis": [
                            "has_section(section)"
                        ],
                        "parametros": [
                            "section"
                        ]
                    },
                    {
                        "nombre": "items",
                        "sintaxis": [
                            "items(raw=False, vars=None)"
                        ],
                        "parametros": [
                            "vars",
                            "raw"
                        ]
                    },
                    {
                        "nombre": "options",
                        "sintaxis": [
                            "options(section)"
                        ],
                        "parametros": [
                            "section"
                        ]
                    },
                    {
                        "nombre": "optionxform",
                        "sintaxis": [
                            "ConfigParser.optionxform(option)",
                            "optionxform(option)"
                        ],
                        "parametros": [
                            "option"
                        ]
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read(filenames, encoding=None)"
                        ],
                        "parametros": [
                            "filenames",
                            "encoding"
                        ]
                    },
                    {
                        "nombre": "readfp",
                        "sintaxis": [
                            "readfp(fp, filename=None)"
                        ],
                        "parametros": [
                            "filename",
                            "fp"
                        ]
                    },
                    {
                        "nombre": "read_dict",
                        "sintaxis": [
                            "read_dict(dictionary, source='<dict>')"
                        ],
                        "parametros": [
                            "dictionary",
                            "source"
                        ]
                    },
                    {
                        "nombre": "read_file",
                        "sintaxis": [
                            "read_file(f, source=None)"
                        ],
                        "parametros": [
                            "f",
                            "source"
                        ]
                    },
                    {
                        "nombre": "read_string",
                        "sintaxis": [
                            "read_string(string, source='<string>')"
                        ],
                        "parametros": [
                            "string",
                            "source"
                        ]
                    },
                    {
                        "nombre": "remove_option",
                        "sintaxis": [
                            "remove_option(section, option)"
                        ],
                        "parametros": [
                            "section",
                            "option"
                        ]
                    },
                    {
                        "nombre": "remove_section",
                        "sintaxis": [
                            "remove_section(section)"
                        ],
                        "parametros": [
                            "section"
                        ]
                    },
                    {
                        "nombre": "sections",
                        "sintaxis": [
                            "sections()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set(section, option, value)"
                        ],
                        "parametros": [
                            "section",
                            "value",
                            "option"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(fileobject, space_around_delimiters=True)"
                        ],
                        "parametros": [
                            "space_around_delimiters",
                            "fileobject"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "BOOLEAN_STATES",
                        "sintaxis": [
                            "ConfigParser.BOOLEAN_STATES"
                        ]
                    },
                    {
                        "nombre": "SECTCRE",
                        "sintaxis": [
                            "ConfigParser.SECTCRE"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ConfigParser"
                ]
            },
            {
                "nombre": "ExtendedInterpolation",
                "constructores": [
                    {
                        "nombre": "ExtendedInterpolation",
                        "sintaxis": [
                            "class configparser.ExtendedInterpolation"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ExtendedInterpolation"
                ]
            },
            {
                "nombre": "RawConfigParser",
                "constructores": [
                    {
                        "nombre": "RawConfigParser",
                        "sintaxis": [
                            "class configparser.RawConfigParser(defaults=None, dict_type=dict, allow_no_value=False, *, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section=configparser.DEFAULTSECT[, interpolation])"
                        ],
                        "parametros": [
                            "empty_lines_in_values",
                            "dict_type",
                            "defaults",
                            "default_section",
                            "delimiters",
                            "inline_comment_prefixes",
                            "strict",
                            "interpolation",
                            "';')",
                            "comment_prefixes",
                            "allow_no_value",
                            "*",
                            "':')"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_section",
                        "sintaxis": [
                            "add_section(section)"
                        ],
                        "parametros": [
                            "section"
                        ]
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set(section, option, value)"
                        ],
                        "parametros": [
                            "section",
                            "value",
                            "option"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class RawConfigParser"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "MAX_INTERPOLATION_DEPTH",
                "sintaxis": [
                    "configparser.MAX_INTERPOLATION_DEPTH"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "DuplicateOptionError",
                "sintaxis": [
                    "exception configparser.DuplicateOptionError"
                ]
            },
            {
                "nombre": "DuplicateSectionError",
                "sintaxis": [
                    "exception configparser.DuplicateSectionError"
                ]
            },
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception configparser.Error"
                ]
            },
            {
                "nombre": "InterpolationDepthError",
                "sintaxis": [
                    "exception configparser.InterpolationDepthError"
                ]
            },
            {
                "nombre": "InterpolationError",
                "sintaxis": [
                    "exception configparser.InterpolationError"
                ]
            },
            {
                "nombre": "InterpolationMissingOptionError",
                "sintaxis": [
                    "exception configparser.InterpolationMissingOptionError"
                ]
            },
            {
                "nombre": "InterpolationSyntaxError",
                "sintaxis": [
                    "exception configparser.InterpolationSyntaxError"
                ]
            },
            {
                "nombre": "MissingSectionHeaderError",
                "sintaxis": [
                    "exception configparser.MissingSectionHeaderError"
                ]
            },
            {
                "nombre": "NoOptionError",
                "sintaxis": [
                    "exception configparser.NoOptionError"
                ]
            },
            {
                "nombre": "NoSectionError",
                "sintaxis": [
                    "exception configparser.NoSectionError"
                ]
            },
            {
                "nombre": "ParsingError",
                "sintaxis": [
                    "exception configparser.ParsingError"
                ]
            }
        ]
    },
    {
        "nombre": "contextlib",
        "funciones": [
            {
                "nombre": "asynccontextmanager",
                "sintaxis": [
                    "@contextlib.asynccontextmanager"
                ],
                "parametros": []
            },
            {
                "nombre": "closing",
                "sintaxis": [
                    "contextlib.closing(thing)"
                ],
                "parametros": [
                    "thing"
                ]
            },
            {
                "nombre": "contextmanager",
                "sintaxis": [
                    "@contextlib.contextmanager"
                ],
                "parametros": []
            },
            {
                "nombre": "nullcontext",
                "sintaxis": [
                    "contextlib.nullcontext(enter_result=None)"
                ],
                "parametros": [
                    "enter_result"
                ]
            },
            {
                "nombre": "redirect_stderr",
                "sintaxis": [
                    "contextlib.redirect_stderr(new_target)"
                ],
                "parametros": [
                    "new_target"
                ]
            },
            {
                "nombre": "redirect_stdout",
                "sintaxis": [
                    "contextlib.redirect_stdout(new_target)"
                ],
                "parametros": [
                    "new_target"
                ]
            },
            {
                "nombre": "suppress",
                "sintaxis": [
                    "contextlib.suppress(*exceptions)"
                ],
                "parametros": [
                    "exceptions"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "AbstractAsyncContextManager",
                "constructores": [
                    {
                        "nombre": "AbstractAsyncContextManager",
                        "sintaxis": [
                            "class contextlib.AbstractAsyncContextManager"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AbstractAsyncContextManager"
                ]
            },
            {
                "nombre": "AbstractContextManager",
                "constructores": [
                    {
                        "nombre": "AbstractContextManager",
                        "sintaxis": [
                            "class contextlib.AbstractContextManager"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AbstractContextManager"
                ]
            },
            {
                "nombre": "aclosing",
                "constructores": [
                    {
                        "nombre": "aclosing",
                        "sintaxis": [
                            "class contextlib.aclosing(thing)"
                        ],
                        "parametros": [
                            "thing"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class aclosing"
                ]
            },
            {
                "nombre": "AsyncContextDecorator",
                "constructores": [
                    {
                        "nombre": "AsyncContextDecorator",
                        "sintaxis": [
                            "class contextlib.AsyncContextDecorator"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncContextDecorator"
                ]
            },
            {
                "nombre": "AsyncExitStack",
                "constructores": [
                    {
                        "nombre": "AsyncExitStack",
                        "sintaxis": [
                            "class contextlib.AsyncExitStack"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "aclose",
                        "sintaxis": [
                            "coroutine aclose()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "enter_async_context",
                        "sintaxis": [
                            "coroutine enter_async_context(cm)"
                        ],
                        "parametros": [
                            "cm"
                        ]
                    },
                    {
                        "nombre": "push_async_callback",
                        "sintaxis": [
                            "push_async_callback(callback, /, *args, **kwds)"
                        ],
                        "parametros": [
                            "callback",
                            "/",
                            "*args",
                            "**kwds"
                        ]
                    },
                    {
                        "nombre": "push_async_exit",
                        "sintaxis": [
                            "push_async_exit(exit)"
                        ],
                        "parametros": [
                            "exit"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AsyncExitStack"
                ]
            },
            {
                "nombre": "ContextDecorator",
                "constructores": [
                    {
                        "nombre": "ContextDecorator",
                        "sintaxis": [
                            "class contextlib.ContextDecorator"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ContextDecorator"
                ]
            },
            {
                "nombre": "ExitStack",
                "constructores": [
                    {
                        "nombre": "ExitStack",
                        "sintaxis": [
                            "class contextlib.ExitStack"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "callback",
                        "sintaxis": [
                            "callback(callback, /, *args, **kwds)"
                        ],
                        "parametros": [
                            "callback",
                            "/",
                            "*args",
                            "**kwds"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "enter_context",
                        "sintaxis": [
                            "enter_context(cm)"
                        ],
                        "parametros": [
                            "cm"
                        ]
                    },
                    {
                        "nombre": "pop_all",
                        "sintaxis": [
                            "pop_all()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "push",
                        "sintaxis": [
                            "push(exit)"
                        ],
                        "parametros": [
                            "exit"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ExitStack"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "contextvars",
        "funciones": [
            {
                "nombre": "copy_context",
                "sintaxis": [
                    "contextvars.copy_context()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "Context",
                "constructores": [
                    {
                        "nombre": "Context",
                        "sintaxis": [
                            "class contextvars.Context"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get(var[, default])"
                        ],
                        "parametros": [
                            "var",
                            "default"
                        ]
                    },
                    {
                        "nombre": "items",
                        "sintaxis": [
                            "items()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "keys",
                        "sintaxis": [
                            "keys()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(callable, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "callable"
                        ]
                    },
                    {
                        "nombre": "values",
                        "sintaxis": [
                            "values()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Context"
                ]
            },
            {
                "nombre": "ContextVar",
                "constructores": [
                    {
                        "nombre": "ContextVar",
                        "sintaxis": [
                            "class contextvars.ContextVar(name[, *, default])"
                        ],
                        "parametros": [
                            "*",
                            "name",
                            "default"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get([default])"
                        ],
                        "parametros": [
                            "default"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset(token)"
                        ],
                        "parametros": [
                            "token"
                        ]
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ContextVar"
                ]
            },
            {
                "nombre": "Token",
                "constructores": [
                    {
                        "nombre": "Token",
                        "sintaxis": [
                            "class contextvars.Token"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "MISSING",
                        "sintaxis": [
                            "Token.MISSING"
                        ]
                    },
                    {
                        "nombre": "MISSING",
                        "sintaxis": [
                            "Token.MISSING"
                        ]
                    },
                    {
                        "nombre": "old_value",
                        "sintaxis": [
                            "Token.old_value"
                        ]
                    },
                    {
                        "nombre": "old_value",
                        "sintaxis": [
                            "Token.old_value"
                        ]
                    },
                    {
                        "nombre": "var",
                        "sintaxis": [
                            "Token.var"
                        ]
                    },
                    {
                        "nombre": "var",
                        "sintaxis": [
                            "Token.var"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Token"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "copy",
        "funciones": [
            {
                "nombre": "copy",
                "sintaxis": [
                    "copy.copy(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "deepcopy",
                "sintaxis": [
                    "copy.deepcopy(x[, memo])"
                ],
                "parametros": [
                    "x",
                    "memo"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception copy.Error"
                ]
            }
        ]
    },
    {
        "nombre": "copyreg",
        "funciones": [
            {
                "nombre": "constructor",
                "sintaxis": [
                    "copyreg.constructor(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "pickle",
                "sintaxis": [
                    "copyreg.pickle(type, function, constructor=None)"
                ],
                "parametros": [
                    "type",
                    "constructor",
                    "function"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "cProfile",
        "funciones": [
            {
                "nombre": "run",
                "sintaxis": [
                    "profile.run(command, filename=None, sort=- 1)"
                ],
                "parametros": [
                    "sort",
                    "filename",
                    "command"
                ]
            },
            {
                "nombre": "runctx",
                "sintaxis": [
                    "profile.runctx(command, globals, locals, filename=None, sort=- 1)"
                ],
                "parametros": [
                    "filename",
                    "globals",
                    "sort",
                    "locals",
                    "command"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Profile",
                "constructores": [
                    {
                        "nombre": "Profile",
                        "sintaxis": [
                            "class profile.Profile(timer=None, timeunit=0.0, subcalls=True, builtins=True)"
                        ],
                        "parametros": [
                            "subcalls",
                            "timeunit",
                            "builtins",
                            "timer"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "create_stats",
                        "sintaxis": [
                            "create_stats()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "disable",
                        "sintaxis": [
                            "disable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "dump_stats",
                        "sintaxis": [
                            "dump_stats(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "enable",
                        "sintaxis": [
                            "enable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "print_stats",
                        "sintaxis": [
                            "print_stats(sort=- 1)"
                        ],
                        "parametros": [
                            "sort"
                        ]
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(cmd)"
                        ],
                        "parametros": [
                            "cmd"
                        ]
                    },
                    {
                        "nombre": "runcall",
                        "sintaxis": [
                            "runcall(func, /, *args, **kwargs)"
                        ],
                        "parametros": [
                            "**kwargs",
                            "func",
                            "/",
                            "*args"
                        ]
                    },
                    {
                        "nombre": "runctx",
                        "sintaxis": [
                            "runctx(cmd, globals, locals)"
                        ],
                        "parametros": [
                            "globals",
                            "cmd",
                            "locals"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Profile"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "crypt",
        "funciones": [
            {
                "nombre": "crypt",
                "sintaxis": [
                    "crypt.crypt(word, salt=None)"
                ],
                "parametros": [
                    "word",
                    "salt"
                ]
            },
            {
                "nombre": "mksalt",
                "sintaxis": [
                    "crypt.mksalt(method=None, *, rounds=None)"
                ],
                "parametros": [
                    "rounds",
                    "*",
                    "method"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "crypt",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "methods",
                        "sintaxis": [
                            "crypt.methods"
                        ]
                    }
                ],
                "sintaxis": [
                    "class crypt"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "METHOD_BLOWFISH",
                "sintaxis": [
                    "crypt.METHOD_BLOWFISH"
                ]
            },
            {
                "nombre": "METHOD_CRYPT",
                "sintaxis": [
                    "crypt.METHOD_CRYPT"
                ]
            },
            {
                "nombre": "METHOD_MD5",
                "sintaxis": [
                    "crypt.METHOD_MD5"
                ]
            },
            {
                "nombre": "METHOD_SHA256",
                "sintaxis": [
                    "crypt.METHOD_SHA256"
                ]
            },
            {
                "nombre": "METHOD_SHA512",
                "sintaxis": [
                    "crypt.METHOD_SHA512"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "csv",
        "funciones": [
            {
                "nombre": "field_size_limit",
                "sintaxis": [
                    "csv.field_size_limit([new_limit])"
                ],
                "parametros": [
                    "new_limit"
                ]
            },
            {
                "nombre": "get_dialect",
                "sintaxis": [
                    "csv.get_dialect(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "list_dialects",
                "sintaxis": [
                    "csv.list_dialects()"
                ],
                "parametros": []
            },
            {
                "nombre": "reader",
                "sintaxis": [
                    "csv.reader(csvfile, dialect='excel', **fmtparams)"
                ],
                "parametros": [
                    "fmtparams",
                    "dialect",
                    "csvfile"
                ]
            },
            {
                "nombre": "register_dialect",
                "sintaxis": [
                    "csv.register_dialect(name[, dialect[, **fmtparams]])"
                ],
                "parametros": [
                    "dialect",
                    "**fmtparams",
                    "name"
                ]
            },
            {
                "nombre": "unregister_dialect",
                "sintaxis": [
                    "csv.unregister_dialect(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "writer",
                "sintaxis": [
                    "csv.writer(csvfile, dialect='excel', **fmtparams)"
                ],
                "parametros": [
                    "fmtparams",
                    "dialect",
                    "csvfile"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "csvreader",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "__next__",
                        "sintaxis": [
                            "csvreader.__next__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "dialect",
                        "sintaxis": [
                            "csvreader.dialect"
                        ]
                    },
                    {
                        "nombre": "fieldnames",
                        "sintaxis": [
                            "csvreader.fieldnames"
                        ]
                    },
                    {
                        "nombre": "line_num",
                        "sintaxis": [
                            "csvreader.line_num"
                        ]
                    }
                ],
                "sintaxis": [
                    "class csvreader"
                ]
            },
            {
                "nombre": "csvwriter",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "writerow",
                        "sintaxis": [
                            "csvwriter.writerow(row)"
                        ],
                        "parametros": [
                            "row"
                        ]
                    },
                    {
                        "nombre": "writerows",
                        "sintaxis": [
                            "csvwriter.writerows(rows)"
                        ],
                        "parametros": [
                            "rows"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "dialect",
                        "sintaxis": [
                            "csvwriter.dialect"
                        ]
                    }
                ],
                "sintaxis": [
                    "class csvwriter"
                ]
            },
            {
                "nombre": "Dialect",
                "constructores": [
                    {
                        "nombre": "Dialect",
                        "sintaxis": [
                            "class csv.Dialect"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "delimiter",
                        "sintaxis": [
                            "Dialect.delimiter"
                        ]
                    },
                    {
                        "nombre": "doublequote",
                        "sintaxis": [
                            "Dialect.doublequote"
                        ]
                    },
                    {
                        "nombre": "escapechar",
                        "sintaxis": [
                            "Dialect.escapechar"
                        ]
                    },
                    {
                        "nombre": "lineterminator",
                        "sintaxis": [
                            "Dialect.lineterminator"
                        ]
                    },
                    {
                        "nombre": "quotechar",
                        "sintaxis": [
                            "Dialect.quotechar"
                        ]
                    },
                    {
                        "nombre": "quoting",
                        "sintaxis": [
                            "Dialect.quoting"
                        ]
                    },
                    {
                        "nombre": "skipinitialspace",
                        "sintaxis": [
                            "Dialect.skipinitialspace"
                        ]
                    },
                    {
                        "nombre": "strict",
                        "sintaxis": [
                            "Dialect.strict"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Dialect"
                ]
            },
            {
                "nombre": "DictReader",
                "constructores": [
                    {
                        "nombre": "DictReader",
                        "sintaxis": [
                            "class csv.DictReader(f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)"
                        ],
                        "parametros": [
                            "args",
                            "f",
                            "dialect",
                            "kwds",
                            "fieldnames",
                            "restval",
                            "restkey"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DictReader"
                ]
            },
            {
                "nombre": "DictWriter",
                "constructores": [
                    {
                        "nombre": "DictWriter",
                        "sintaxis": [
                            "class csv.DictWriter(f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)"
                        ],
                        "parametros": [
                            "args",
                            "f",
                            "dialect",
                            "kwds",
                            "fieldnames",
                            "restval",
                            "extrasaction"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "writeheader",
                        "sintaxis": [
                            "DictWriter.writeheader()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DictWriter"
                ]
            },
            {
                "nombre": "excel",
                "constructores": [
                    {
                        "nombre": "excel",
                        "sintaxis": [
                            "class csv.excel"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class excel"
                ]
            },
            {
                "nombre": "excel_tab",
                "constructores": [
                    {
                        "nombre": "excel_tab",
                        "sintaxis": [
                            "class csv.excel_tab"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class excel_tab"
                ]
            },
            {
                "nombre": "Sniffer",
                "constructores": [
                    {
                        "nombre": "Sniffer",
                        "sintaxis": [
                            "class csv.Sniffer"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "has_header",
                        "sintaxis": [
                            "has_header(sample)"
                        ],
                        "parametros": [
                            "sample"
                        ]
                    },
                    {
                        "nombre": "sniff",
                        "sintaxis": [
                            "sniff(sample, delimiters=None)"
                        ],
                        "parametros": [
                            "delimiters",
                            "sample"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Sniffer"
                ]
            },
            {
                "nombre": "unix_dialect",
                "constructores": [
                    {
                        "nombre": "unix_dialect",
                        "sintaxis": [
                            "class csv.unix_dialect"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class unix_dialect"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "QUOTE_ALL",
                "sintaxis": [
                    "csv.QUOTE_ALL"
                ]
            },
            {
                "nombre": "QUOTE_MINIMAL",
                "sintaxis": [
                    "csv.QUOTE_MINIMAL"
                ]
            },
            {
                "nombre": "QUOTE_NONE",
                "sintaxis": [
                    "csv.QUOTE_NONE"
                ]
            },
            {
                "nombre": "QUOTE_NONNUMERIC",
                "sintaxis": [
                    "csv.QUOTE_NONNUMERIC"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception csv.Error"
                ]
            }
        ]
    },
    {
        "nombre": "ctypes",
        "funciones": [
            {
                "nombre": "addressof",
                "sintaxis": [
                    "ctypes.addressof(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "alignment",
                "sintaxis": [
                    "ctypes.alignment(obj_or_type)"
                ],
                "parametros": [
                    "obj_or_type"
                ]
            },
            {
                "nombre": "byref",
                "sintaxis": [
                    "ctypes.byref(obj[, offset])"
                ],
                "parametros": [
                    "obj",
                    "offset"
                ]
            },
            {
                "nombre": "callable",
                "sintaxis": [
                    "callable(result, func, arguments)"
                ],
                "parametros": [
                    "func",
                    "arguments",
                    "result"
                ]
            },
            {
                "nombre": "cast",
                "sintaxis": [
                    "ctypes.cast(obj, type)"
                ],
                "parametros": [
                    "obj",
                    "type"
                ]
            },
            {
                "nombre": "CFUNCTYPE",
                "sintaxis": [
                    "ctypes.CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)"
                ],
                "parametros": [
                    "use_last_error",
                    "argtypes",
                    "restype",
                    "use_errno"
                ]
            },
            {
                "nombre": "create_string_buffer",
                "sintaxis": [
                    "ctypes.create_string_buffer(init_or_size, size=None)"
                ],
                "parametros": [
                    "init_or_size",
                    "size"
                ]
            },
            {
                "nombre": "create_unicode_buffer",
                "sintaxis": [
                    "ctypes.create_unicode_buffer(init_or_size, size=None)"
                ],
                "parametros": [
                    "init_or_size",
                    "size"
                ]
            },
            {
                "nombre": "DllCanUnloadNow",
                "sintaxis": [
                    "ctypes.DllCanUnloadNow()"
                ],
                "parametros": []
            },
            {
                "nombre": "DllGetClassObject",
                "sintaxis": [
                    "ctypes.DllGetClassObject()"
                ],
                "parametros": []
            },
            {
                "nombre": "find_library",
                "sintaxis": [
                    "ctypes.util.find_library(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "find_msvcrt",
                "sintaxis": [
                    "ctypes.util.find_msvcrt()"
                ],
                "parametros": []
            },
            {
                "nombre": "FormatError",
                "sintaxis": [
                    "ctypes.FormatError([code])"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "GetLastError",
                "sintaxis": [
                    "ctypes.GetLastError()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_errno",
                "sintaxis": [
                    "ctypes.get_errno()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_last_error",
                "sintaxis": [
                    "ctypes.get_last_error()"
                ],
                "parametros": []
            },
            {
                "nombre": "memmove",
                "sintaxis": [
                    "ctypes.memmove(dst, src, count)"
                ],
                "parametros": [
                    "dst",
                    "count",
                    "src"
                ]
            },
            {
                "nombre": "memset",
                "sintaxis": [
                    "ctypes.memset(dst, c, count)"
                ],
                "parametros": [
                    "dst",
                    "count",
                    "c"
                ]
            },
            {
                "nombre": "POINTER",
                "sintaxis": [
                    "ctypes.POINTER(type)"
                ],
                "parametros": [
                    "type"
                ]
            },
            {
                "nombre": "pointer",
                "sintaxis": [
                    "ctypes.pointer(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "prototype",
                "sintaxis": [
                    "prototype(address)"
                ],
                "parametros": [
                    "address"
                ]
            },
            {
                "nombre": "prototype",
                "sintaxis": [
                    "prototype(callable)"
                ],
                "parametros": [
                    "callable"
                ]
            },
            {
                "nombre": "prototype",
                "sintaxis": [
                    "prototype(func_spec[, paramflags])"
                ],
                "parametros": [
                    "paramflags",
                    "func_spec"
                ]
            },
            {
                "nombre": "prototype",
                "sintaxis": [
                    "prototype(vtbl_index, name[, paramflags[, iid]])"
                ],
                "parametros": [
                    "paramflags",
                    "iid",
                    "name",
                    "vtbl_index"
                ]
            },
            {
                "nombre": "PYFUNCTYPE",
                "sintaxis": [
                    "ctypes.PYFUNCTYPE(restype, *argtypes)"
                ],
                "parametros": [
                    "argtypes",
                    "restype"
                ]
            },
            {
                "nombre": "resize",
                "sintaxis": [
                    "ctypes.resize(obj, size)"
                ],
                "parametros": [
                    "obj",
                    "size"
                ]
            },
            {
                "nombre": "set_errno",
                "sintaxis": [
                    "ctypes.set_errno(value)"
                ],
                "parametros": [
                    "value"
                ]
            },
            {
                "nombre": "set_last_error",
                "sintaxis": [
                    "ctypes.set_last_error(value)"
                ],
                "parametros": [
                    "value"
                ]
            },
            {
                "nombre": "sizeof",
                "sintaxis": [
                    "ctypes.sizeof(obj_or_type)"
                ],
                "parametros": [
                    "obj_or_type"
                ]
            },
            {
                "nombre": "string_at",
                "sintaxis": [
                    "ctypes.string_at(address, size=- 1)"
                ],
                "parametros": [
                    "address",
                    "size"
                ]
            },
            {
                "nombre": "WinError",
                "sintaxis": [
                    "ctypes.WinError(code=None, descr=None)"
                ],
                "parametros": [
                    "code",
                    "descr"
                ]
            },
            {
                "nombre": "WINFUNCTYPE",
                "sintaxis": [
                    "ctypes.WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)"
                ],
                "parametros": [
                    "use_last_error",
                    "argtypes",
                    "restype",
                    "use_errno"
                ]
            },
            {
                "nombre": "wstring_at",
                "sintaxis": [
                    "ctypes.wstring_at(address, size=- 1)"
                ],
                "parametros": [
                    "address",
                    "size"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Array",
                "constructores": [
                    {
                        "nombre": "Array",
                        "sintaxis": [
                            "class ctypes.Array(*args)"
                        ],
                        "parametros": [
                            "args"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "_length_",
                        "sintaxis": [
                            "_length_"
                        ]
                    },
                    {
                        "nombre": "_type_",
                        "sintaxis": [
                            "_type_"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Array"
                ]
            },
            {
                "nombre": "BigEndianStructure",
                "constructores": [
                    {
                        "nombre": "BigEndianStructure",
                        "sintaxis": [
                            "class ctypes.BigEndianStructure(*args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BigEndianStructure"
                ]
            },
            {
                "nombre": "CDLL",
                "constructores": [
                    {
                        "nombre": "CDLL",
                        "sintaxis": [
                            "class ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False, winmode=0)"
                        ],
                        "parametros": [
                            "mode",
                            "name",
                            "use_errno",
                            "winmode",
                            "use_last_error",
                            "handle"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class CDLL"
                ]
            },
            {
                "nombre": "c_bool",
                "constructores": [
                    {
                        "nombre": "c_bool",
                        "sintaxis": [
                            "class ctypes.c_bool"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_bool"
                ]
            },
            {
                "nombre": "c_byte",
                "constructores": [
                    {
                        "nombre": "c_byte",
                        "sintaxis": [
                            "class ctypes.c_byte"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_byte"
                ]
            },
            {
                "nombre": "c_char",
                "constructores": [
                    {
                        "nombre": "c_char",
                        "sintaxis": [
                            "class ctypes.c_char"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_char"
                ]
            },
            {
                "nombre": "c_char_p",
                "constructores": [
                    {
                        "nombre": "c_char_p",
                        "sintaxis": [
                            "class ctypes.c_char_p"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_char_p"
                ]
            },
            {
                "nombre": "c_double",
                "constructores": [
                    {
                        "nombre": "c_double",
                        "sintaxis": [
                            "class ctypes.c_double"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_double"
                ]
            },
            {
                "nombre": "c_float",
                "constructores": [
                    {
                        "nombre": "c_float",
                        "sintaxis": [
                            "class ctypes.c_float"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_float"
                ]
            },
            {
                "nombre": "c_int",
                "constructores": [
                    {
                        "nombre": "c_int",
                        "sintaxis": [
                            "class ctypes.c_int"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_int"
                ]
            },
            {
                "nombre": "c_int16",
                "constructores": [
                    {
                        "nombre": "c_int16",
                        "sintaxis": [
                            "class ctypes.c_int16"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_int16"
                ]
            },
            {
                "nombre": "c_int32",
                "constructores": [
                    {
                        "nombre": "c_int32",
                        "sintaxis": [
                            "class ctypes.c_int32"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_int32"
                ]
            },
            {
                "nombre": "c_int64",
                "constructores": [
                    {
                        "nombre": "c_int64",
                        "sintaxis": [
                            "class ctypes.c_int64"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_int64"
                ]
            },
            {
                "nombre": "c_int8",
                "constructores": [
                    {
                        "nombre": "c_int8",
                        "sintaxis": [
                            "class ctypes.c_int8"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_int8"
                ]
            },
            {
                "nombre": "c_long",
                "constructores": [
                    {
                        "nombre": "c_long",
                        "sintaxis": [
                            "class ctypes.c_long"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_long"
                ]
            },
            {
                "nombre": "c_longdouble",
                "constructores": [
                    {
                        "nombre": "c_longdouble",
                        "sintaxis": [
                            "class ctypes.c_longdouble"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_longdouble"
                ]
            },
            {
                "nombre": "c_longlong",
                "constructores": [
                    {
                        "nombre": "c_longlong",
                        "sintaxis": [
                            "class ctypes.c_longlong"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_longlong"
                ]
            },
            {
                "nombre": "c_short",
                "constructores": [
                    {
                        "nombre": "c_short",
                        "sintaxis": [
                            "class ctypes.c_short"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_short"
                ]
            },
            {
                "nombre": "c_size_t",
                "constructores": [
                    {
                        "nombre": "c_size_t",
                        "sintaxis": [
                            "class ctypes.c_size_t"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_size_t"
                ]
            },
            {
                "nombre": "c_ssize_t",
                "constructores": [
                    {
                        "nombre": "c_ssize_t",
                        "sintaxis": [
                            "class ctypes.c_ssize_t"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_ssize_t"
                ]
            },
            {
                "nombre": "c_ubyte",
                "constructores": [
                    {
                        "nombre": "c_ubyte",
                        "sintaxis": [
                            "class ctypes.c_ubyte"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_ubyte"
                ]
            },
            {
                "nombre": "c_uint",
                "constructores": [
                    {
                        "nombre": "c_uint",
                        "sintaxis": [
                            "class ctypes.c_uint"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_uint"
                ]
            },
            {
                "nombre": "c_uint16",
                "constructores": [
                    {
                        "nombre": "c_uint16",
                        "sintaxis": [
                            "class ctypes.c_uint16"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_uint16"
                ]
            },
            {
                "nombre": "c_uint32",
                "constructores": [
                    {
                        "nombre": "c_uint32",
                        "sintaxis": [
                            "class ctypes.c_uint32"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_uint32"
                ]
            },
            {
                "nombre": "c_uint64",
                "constructores": [
                    {
                        "nombre": "c_uint64",
                        "sintaxis": [
                            "class ctypes.c_uint64"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_uint64"
                ]
            },
            {
                "nombre": "c_uint8",
                "constructores": [
                    {
                        "nombre": "c_uint8",
                        "sintaxis": [
                            "class ctypes.c_uint8"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_uint8"
                ]
            },
            {
                "nombre": "c_ulong",
                "constructores": [
                    {
                        "nombre": "c_ulong",
                        "sintaxis": [
                            "class ctypes.c_ulong"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_ulong"
                ]
            },
            {
                "nombre": "c_ulonglong",
                "constructores": [
                    {
                        "nombre": "c_ulonglong",
                        "sintaxis": [
                            "class ctypes.c_ulonglong"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_ulonglong"
                ]
            },
            {
                "nombre": "c_ushort",
                "constructores": [
                    {
                        "nombre": "c_ushort",
                        "sintaxis": [
                            "class ctypes.c_ushort"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_ushort"
                ]
            },
            {
                "nombre": "c_void_p",
                "constructores": [
                    {
                        "nombre": "c_void_p",
                        "sintaxis": [
                            "class ctypes.c_void_p"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_void_p"
                ]
            },
            {
                "nombre": "c_wchar",
                "constructores": [
                    {
                        "nombre": "c_wchar",
                        "sintaxis": [
                            "class ctypes.c_wchar"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_wchar"
                ]
            },
            {
                "nombre": "c_wchar_p",
                "constructores": [
                    {
                        "nombre": "c_wchar_p",
                        "sintaxis": [
                            "class ctypes.c_wchar_p"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class c_wchar_p"
                ]
            },
            {
                "nombre": "HRESULT",
                "constructores": [
                    {
                        "nombre": "HRESULT",
                        "sintaxis": [
                            "class ctypes.HRESULT"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HRESULT"
                ]
            },
            {
                "nombre": "LibraryLoader",
                "constructores": [
                    {
                        "nombre": "LibraryLoader",
                        "sintaxis": [
                            "class ctypes.LibraryLoader(dlltype)"
                        ],
                        "parametros": [
                            "dlltype"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "LoadLibrary",
                        "sintaxis": [
                            "LoadLibrary(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LibraryLoader"
                ]
            },
            {
                "nombre": "LittleEndianStructure",
                "constructores": [
                    {
                        "nombre": "LittleEndianStructure",
                        "sintaxis": [
                            "class ctypes.LittleEndianStructure(*args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LittleEndianStructure"
                ]
            },
            {
                "nombre": "OleDLL",
                "constructores": [
                    {
                        "nombre": "OleDLL",
                        "sintaxis": [
                            "class ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False, winmode=0)"
                        ],
                        "parametros": [
                            "mode",
                            "name",
                            "use_errno",
                            "winmode",
                            "use_last_error",
                            "handle"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class OleDLL"
                ]
            },
            {
                "nombre": "PyDLL",
                "constructores": [
                    {
                        "nombre": "PyDLL",
                        "sintaxis": [
                            "class ctypes.PyDLL(name, mode=DEFAULT_MODE, handle=None)"
                        ],
                        "parametros": [
                            "mode",
                            "handle",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "_handle",
                        "sintaxis": [
                            "PyDLL._handle"
                        ]
                    },
                    {
                        "nombre": "_name",
                        "sintaxis": [
                            "PyDLL._name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class PyDLL"
                ]
            },
            {
                "nombre": "py_object",
                "constructores": [
                    {
                        "nombre": "py_object",
                        "sintaxis": [
                            "class ctypes.py_object"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class py_object"
                ]
            },
            {
                "nombre": "Structure",
                "constructores": [
                    {
                        "nombre": "Structure",
                        "sintaxis": [
                            "class ctypes.Structure(*args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "_anonymous_",
                        "sintaxis": [
                            "_anonymous_"
                        ]
                    },
                    {
                        "nombre": "_fields_",
                        "sintaxis": [
                            "_fields_"
                        ]
                    },
                    {
                        "nombre": "_pack_",
                        "sintaxis": [
                            "_pack_"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Structure"
                ]
            },
            {
                "nombre": "Union",
                "constructores": [
                    {
                        "nombre": "Union",
                        "sintaxis": [
                            "class ctypes.Union(*args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Union"
                ]
            },
            {
                "nombre": "WinDLL",
                "constructores": [
                    {
                        "nombre": "WinDLL",
                        "sintaxis": [
                            "class ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False, winmode=0)"
                        ],
                        "parametros": [
                            "mode",
                            "name",
                            "use_errno",
                            "winmode",
                            "use_last_error",
                            "handle"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class WinDLL"
                ]
            },
            {
                "nombre": "_CData",
                "constructores": [
                    {
                        "nombre": "_CData",
                        "sintaxis": [
                            "class ctypes._CData"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "from_address",
                        "sintaxis": [
                            "from_address(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "from_buffer",
                        "sintaxis": [
                            "from_buffer(source[, offset])"
                        ],
                        "parametros": [
                            "offset",
                            "source"
                        ]
                    },
                    {
                        "nombre": "from_buffer_copy",
                        "sintaxis": [
                            "from_buffer_copy(source[, offset])"
                        ],
                        "parametros": [
                            "offset",
                            "source"
                        ]
                    },
                    {
                        "nombre": "from_param",
                        "sintaxis": [
                            "from_param(obj)"
                        ],
                        "parametros": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "in_dll",
                        "sintaxis": [
                            "in_dll(library, name)"
                        ],
                        "parametros": [
                            "library",
                            "name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "_b_base_",
                        "sintaxis": [
                            "_b_base_"
                        ]
                    },
                    {
                        "nombre": "_b_needsfree_",
                        "sintaxis": [
                            "_b_needsfree_"
                        ]
                    },
                    {
                        "nombre": "_objects",
                        "sintaxis": [
                            "_objects"
                        ]
                    }
                ],
                "sintaxis": [
                    "class _CData"
                ]
            },
            {
                "nombre": "_FuncPtr",
                "constructores": [
                    {
                        "nombre": "_FuncPtr",
                        "sintaxis": [
                            "class ctypes._FuncPtr"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "argtypes",
                        "sintaxis": [
                            "argtypes"
                        ]
                    },
                    {
                        "nombre": "errcheck",
                        "sintaxis": [
                            "errcheck"
                        ]
                    },
                    {
                        "nombre": "restype",
                        "sintaxis": [
                            "restype"
                        ]
                    }
                ],
                "sintaxis": [
                    "class _FuncPtr"
                ]
            },
            {
                "nombre": "_Pointer",
                "constructores": [
                    {
                        "nombre": "_Pointer",
                        "sintaxis": [
                            "class ctypes._Pointer"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "contents",
                        "sintaxis": [
                            "contents"
                        ]
                    },
                    {
                        "nombre": "_type_",
                        "sintaxis": [
                            "_type_"
                        ]
                    }
                ],
                "sintaxis": [
                    "class _Pointer"
                ]
            },
            {
                "nombre": "_SimpleCData",
                "constructores": [
                    {
                        "nombre": "_SimpleCData",
                        "sintaxis": [
                            "class ctypes._SimpleCData"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "value",
                        "sintaxis": [
                            "value"
                        ]
                    }
                ],
                "sintaxis": [
                    "class _SimpleCData"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "cdll",
                "sintaxis": [
                    "ctypes.cdll"
                ]
            },
            {
                "nombre": "DEFAULT_MODE",
                "sintaxis": [
                    "ctypes.DEFAULT_MODE"
                ]
            },
            {
                "nombre": "find_library",
                "sintaxis": [
                    "ctypes.util.find_library(name)"
                ]
            },
            {
                "nombre": "oledll",
                "sintaxis": [
                    "ctypes.oledll"
                ]
            },
            {
                "nombre": "pydll",
                "sintaxis": [
                    "ctypes.pydll"
                ]
            },
            {
                "nombre": "pythonapi",
                "sintaxis": [
                    "ctypes.pythonapi"
                ]
            },
            {
                "nombre": "RTLD_GLOBAL",
                "sintaxis": [
                    "ctypes.RTLD_GLOBAL"
                ]
            },
            {
                "nombre": "RTLD_LOCAL",
                "sintaxis": [
                    "ctypes.RTLD_LOCAL"
                ]
            },
            {
                "nombre": "windll",
                "sintaxis": [
                    "ctypes.windll"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "ArgumentError",
                "sintaxis": [
                    "exception ctypes.ArgumentError"
                ]
            }
        ]
    },
    {
        "nombre": "curses",
        "funciones": [
            {
                "nombre": "baudrate",
                "sintaxis": [
                    "curses.baudrate()"
                ],
                "parametros": []
            },
            {
                "nombre": "beep",
                "sintaxis": [
                    "curses.beep()"
                ],
                "parametros": []
            },
            {
                "nombre": "can_change_color",
                "sintaxis": [
                    "curses.can_change_color()"
                ],
                "parametros": []
            },
            {
                "nombre": "cbreak",
                "sintaxis": [
                    "curses.cbreak()"
                ],
                "parametros": []
            },
            {
                "nombre": "color_content",
                "sintaxis": [
                    "curses.color_content(color_number)"
                ],
                "parametros": [
                    "color_number"
                ]
            },
            {
                "nombre": "color_pair",
                "sintaxis": [
                    "curses.color_pair(pair_number)"
                ],
                "parametros": [
                    "pair_number"
                ]
            },
            {
                "nombre": "curs_set",
                "sintaxis": [
                    "curses.curs_set(visibility)"
                ],
                "parametros": [
                    "visibility"
                ]
            },
            {
                "nombre": "def_prog_mode",
                "sintaxis": [
                    "curses.def_prog_mode()"
                ],
                "parametros": []
            },
            {
                "nombre": "def_shell_mode",
                "sintaxis": [
                    "curses.def_shell_mode()"
                ],
                "parametros": []
            },
            {
                "nombre": "delay_output",
                "sintaxis": [
                    "curses.delay_output(ms)"
                ],
                "parametros": [
                    "ms"
                ]
            },
            {
                "nombre": "doupdate",
                "sintaxis": [
                    "curses.doupdate()"
                ],
                "parametros": []
            },
            {
                "nombre": "echo",
                "sintaxis": [
                    "curses.echo()"
                ],
                "parametros": []
            },
            {
                "nombre": "endwin",
                "sintaxis": [
                    "curses.endwin()"
                ],
                "parametros": []
            },
            {
                "nombre": "erasechar",
                "sintaxis": [
                    "curses.erasechar()"
                ],
                "parametros": []
            },
            {
                "nombre": "filter",
                "sintaxis": [
                    "curses.filter()"
                ],
                "parametros": []
            },
            {
                "nombre": "flash",
                "sintaxis": [
                    "curses.flash()"
                ],
                "parametros": []
            },
            {
                "nombre": "flushinp",
                "sintaxis": [
                    "curses.flushinp()"
                ],
                "parametros": []
            },
            {
                "nombre": "getmouse",
                "sintaxis": [
                    "curses.getmouse()"
                ],
                "parametros": []
            },
            {
                "nombre": "getsyx",
                "sintaxis": [
                    "curses.getsyx()"
                ],
                "parametros": []
            },
            {
                "nombre": "getwin",
                "sintaxis": [
                    "curses.getwin(file)"
                ],
                "parametros": [
                    "file"
                ]
            },
            {
                "nombre": "get_escdelay",
                "sintaxis": [
                    "curses.get_escdelay()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_tabsize",
                "sintaxis": [
                    "curses.get_tabsize()"
                ],
                "parametros": []
            },
            {
                "nombre": "halfdelay",
                "sintaxis": [
                    "curses.halfdelay(tenths)"
                ],
                "parametros": [
                    "tenths"
                ]
            },
            {
                "nombre": "has_colors",
                "sintaxis": [
                    "curses.has_colors()"
                ],
                "parametros": []
            },
            {
                "nombre": "has_extended_color_support",
                "sintaxis": [
                    "curses.has_extended_color_support()"
                ],
                "parametros": []
            },
            {
                "nombre": "has_ic",
                "sintaxis": [
                    "curses.has_ic()"
                ],
                "parametros": []
            },
            {
                "nombre": "has_il",
                "sintaxis": [
                    "curses.has_il()"
                ],
                "parametros": []
            },
            {
                "nombre": "has_key",
                "sintaxis": [
                    "curses.has_key(ch)"
                ],
                "parametros": [
                    "ch"
                ]
            },
            {
                "nombre": "initscr",
                "sintaxis": [
                    "curses.initscr()"
                ],
                "parametros": []
            },
            {
                "nombre": "init_color",
                "sintaxis": [
                    "curses.init_color(color_number, r, g, b)"
                ],
                "parametros": [
                    "r",
                    "b",
                    "g",
                    "color_number"
                ]
            },
            {
                "nombre": "init_pair",
                "sintaxis": [
                    "curses.init_pair(pair_number, fg, bg)"
                ],
                "parametros": [
                    "fg",
                    "pair_number",
                    "bg"
                ]
            },
            {
                "nombre": "isendwin",
                "sintaxis": [
                    "curses.isendwin()"
                ],
                "parametros": []
            },
            {
                "nombre": "is_term_resized",
                "sintaxis": [
                    "curses.is_term_resized(nlines, ncols)"
                ],
                "parametros": [
                    "ncols",
                    "nlines"
                ]
            },
            {
                "nombre": "keyname",
                "sintaxis": [
                    "curses.keyname(k)"
                ],
                "parametros": [
                    "k"
                ]
            },
            {
                "nombre": "killchar",
                "sintaxis": [
                    "curses.killchar()"
                ],
                "parametros": []
            },
            {
                "nombre": "longname",
                "sintaxis": [
                    "curses.longname()"
                ],
                "parametros": []
            },
            {
                "nombre": "meta",
                "sintaxis": [
                    "curses.meta(flag)"
                ],
                "parametros": [
                    "flag"
                ]
            },
            {
                "nombre": "mouseinterval",
                "sintaxis": [
                    "curses.mouseinterval(interval)"
                ],
                "parametros": [
                    "interval"
                ]
            },
            {
                "nombre": "mousemask",
                "sintaxis": [
                    "curses.mousemask(mousemask)"
                ],
                "parametros": [
                    "mousemask"
                ]
            },
            {
                "nombre": "napms",
                "sintaxis": [
                    "curses.napms(ms)"
                ],
                "parametros": [
                    "ms"
                ]
            },
            {
                "nombre": "newpad",
                "sintaxis": [
                    "curses.newpad(nlines, ncols)"
                ],
                "parametros": [
                    "ncols",
                    "nlines"
                ]
            },
            {
                "nombre": "newwin",
                "sintaxis": [
                    "curses.newwin(nlines, ncols)",
                    "curses.newwin(nlines, ncols, begin_y, begin_x)"
                ],
                "parametros": [
                    "ncols",
                    "nlines",
                    "begin_y",
                    "begin_x"
                ]
            },
            {
                "nombre": "nl",
                "sintaxis": [
                    "curses.nl()"
                ],
                "parametros": []
            },
            {
                "nombre": "nocbreak",
                "sintaxis": [
                    "curses.nocbreak()"
                ],
                "parametros": []
            },
            {
                "nombre": "noecho",
                "sintaxis": [
                    "curses.noecho()"
                ],
                "parametros": []
            },
            {
                "nombre": "nonl",
                "sintaxis": [
                    "curses.nonl()"
                ],
                "parametros": []
            },
            {
                "nombre": "noqiflush",
                "sintaxis": [
                    "curses.noqiflush()"
                ],
                "parametros": []
            },
            {
                "nombre": "noraw",
                "sintaxis": [
                    "curses.noraw()"
                ],
                "parametros": []
            },
            {
                "nombre": "pair_content",
                "sintaxis": [
                    "curses.pair_content(pair_number)"
                ],
                "parametros": [
                    "pair_number"
                ]
            },
            {
                "nombre": "pair_number",
                "sintaxis": [
                    "curses.pair_number(attr)"
                ],
                "parametros": [
                    "attr"
                ]
            },
            {
                "nombre": "putp",
                "sintaxis": [
                    "curses.putp(str)"
                ],
                "parametros": [
                    "str"
                ]
            },
            {
                "nombre": "qiflush",
                "sintaxis": [
                    "curses.qiflush([flag])"
                ],
                "parametros": [
                    "flag"
                ]
            },
            {
                "nombre": "raw",
                "sintaxis": [
                    "curses.raw()"
                ],
                "parametros": []
            },
            {
                "nombre": "resetty",
                "sintaxis": [
                    "curses.resetty()"
                ],
                "parametros": []
            },
            {
                "nombre": "reset_prog_mode",
                "sintaxis": [
                    "curses.reset_prog_mode()"
                ],
                "parametros": []
            },
            {
                "nombre": "reset_shell_mode",
                "sintaxis": [
                    "curses.reset_shell_mode()"
                ],
                "parametros": []
            },
            {
                "nombre": "resizeterm",
                "sintaxis": [
                    "curses.resizeterm(nlines, ncols)"
                ],
                "parametros": [
                    "ncols",
                    "nlines"
                ]
            },
            {
                "nombre": "resize_term",
                "sintaxis": [
                    "curses.resize_term(nlines, ncols)"
                ],
                "parametros": [
                    "ncols",
                    "nlines"
                ]
            },
            {
                "nombre": "savetty",
                "sintaxis": [
                    "curses.savetty()"
                ],
                "parametros": []
            },
            {
                "nombre": "setsyx",
                "sintaxis": [
                    "curses.setsyx(y, x)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "setupterm",
                "sintaxis": [
                    "curses.setupterm(term=None, fd=- 1)"
                ],
                "parametros": [
                    "term",
                    "fd"
                ]
            },
            {
                "nombre": "set_escdelay",
                "sintaxis": [
                    "curses.set_escdelay(ms)"
                ],
                "parametros": [
                    "ms"
                ]
            },
            {
                "nombre": "set_tabsize",
                "sintaxis": [
                    "curses.set_tabsize(size)"
                ],
                "parametros": [
                    "size"
                ]
            },
            {
                "nombre": "start_color",
                "sintaxis": [
                    "curses.start_color()"
                ],
                "parametros": []
            },
            {
                "nombre": "termattrs",
                "sintaxis": [
                    "curses.termattrs()"
                ],
                "parametros": []
            },
            {
                "nombre": "termname",
                "sintaxis": [
                    "curses.termname()"
                ],
                "parametros": []
            },
            {
                "nombre": "tigetflag",
                "sintaxis": [
                    "curses.tigetflag(capname)"
                ],
                "parametros": [
                    "capname"
                ]
            },
            {
                "nombre": "tigetnum",
                "sintaxis": [
                    "curses.tigetnum(capname)"
                ],
                "parametros": [
                    "capname"
                ]
            },
            {
                "nombre": "tigetstr",
                "sintaxis": [
                    "curses.tigetstr(capname)"
                ],
                "parametros": [
                    "capname"
                ]
            },
            {
                "nombre": "tparm",
                "sintaxis": [
                    "curses.tparm(str[, ...])"
                ],
                "parametros": [
                    "...",
                    "str"
                ]
            },
            {
                "nombre": "typeahead",
                "sintaxis": [
                    "curses.typeahead(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "unctrl",
                "sintaxis": [
                    "curses.unctrl(ch)"
                ],
                "parametros": [
                    "ch"
                ]
            },
            {
                "nombre": "ungetch",
                "sintaxis": [
                    "curses.ungetch(ch)"
                ],
                "parametros": [
                    "ch"
                ]
            },
            {
                "nombre": "ungetmouse",
                "sintaxis": [
                    "curses.ungetmouse(id, x, y, z, bstate)"
                ],
                "parametros": [
                    "y",
                    "z",
                    "id",
                    "x",
                    "bstate"
                ]
            },
            {
                "nombre": "unget_wch",
                "sintaxis": [
                    "curses.unget_wch(ch)"
                ],
                "parametros": [
                    "ch"
                ]
            },
            {
                "nombre": "update_lines_cols",
                "sintaxis": [
                    "curses.update_lines_cols()"
                ],
                "parametros": []
            },
            {
                "nombre": "use_default_colors",
                "sintaxis": [
                    "curses.use_default_colors()"
                ],
                "parametros": []
            },
            {
                "nombre": "use_env",
                "sintaxis": [
                    "curses.use_env(flag)"
                ],
                "parametros": [
                    "flag"
                ]
            },
            {
                "nombre": "wrapper",
                "sintaxis": [
                    "curses.wrapper(func, /, *args, **kwargs)"
                ],
                "parametros": [
                    "**kwargs",
                    "func",
                    "/",
                    "*args"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "window",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "addch",
                        "sintaxis": [
                            "window.addch(y, x, ch[, attr])",
                            "window.addch(ch[, attr])"
                        ],
                        "parametros": [
                            "y",
                            "ch",
                            "x",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "addnstr",
                        "sintaxis": [
                            "window.addnstr(str, n[, attr])",
                            "window.addnstr(y, x, str, n[, attr])"
                        ],
                        "parametros": [
                            "n",
                            "y",
                            "attr",
                            "str",
                            "x"
                        ]
                    },
                    {
                        "nombre": "addstr",
                        "sintaxis": [
                            "window.addstr(str[, attr])",
                            "window.addstr(y, x, str[, attr])"
                        ],
                        "parametros": [
                            "y",
                            "str",
                            "x",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "attroff",
                        "sintaxis": [
                            "window.attroff(attr)"
                        ],
                        "parametros": [
                            "attr"
                        ]
                    },
                    {
                        "nombre": "attron",
                        "sintaxis": [
                            "window.attron(attr)"
                        ],
                        "parametros": [
                            "attr"
                        ]
                    },
                    {
                        "nombre": "attrset",
                        "sintaxis": [
                            "window.attrset(attr)"
                        ],
                        "parametros": [
                            "attr"
                        ]
                    },
                    {
                        "nombre": "bkgd",
                        "sintaxis": [
                            "window.bkgd(ch[, attr])"
                        ],
                        "parametros": [
                            "ch",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "bkgdset",
                        "sintaxis": [
                            "window.bkgdset(ch[, attr])"
                        ],
                        "parametros": [
                            "ch",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "border",
                        "sintaxis": [
                            "window.border([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]]])"
                        ],
                        "parametros": [
                            "tl",
                            "ls",
                            "bl",
                            "rs",
                            "tr",
                            "bs",
                            "br",
                            "ts"
                        ]
                    },
                    {
                        "nombre": "box",
                        "sintaxis": [
                            "window.box([vertch, horch])"
                        ],
                        "parametros": [
                            "vertch",
                            "horch"
                        ]
                    },
                    {
                        "nombre": "chgat",
                        "sintaxis": [
                            "window.chgat(y, x, attr)",
                            "window.chgat(num, attr)",
                            "window.chgat(y, x, num, attr)",
                            "window.chgat(attr)"
                        ],
                        "parametros": [
                            "num",
                            "y",
                            "x",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "window.clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "clearok",
                        "sintaxis": [
                            "window.clearok(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "clrtobot",
                        "sintaxis": [
                            "window.clrtobot()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "clrtoeol",
                        "sintaxis": [
                            "window.clrtoeol()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "cursyncup",
                        "sintaxis": [
                            "window.cursyncup()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "delch",
                        "sintaxis": [
                            "window.delch([y, x])"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "deleteln",
                        "sintaxis": [
                            "window.deleteln()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "derwin",
                        "sintaxis": [
                            "window.derwin(begin_y, begin_x)",
                            "window.derwin(nlines, ncols, begin_y, begin_x)"
                        ],
                        "parametros": [
                            "ncols",
                            "begin_y",
                            "nlines",
                            "begin_x"
                        ]
                    },
                    {
                        "nombre": "echochar",
                        "sintaxis": [
                            "window.echochar(ch[, attr])"
                        ],
                        "parametros": [
                            "ch",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "enclose",
                        "sintaxis": [
                            "window.enclose(y, x)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "erase",
                        "sintaxis": [
                            "window.erase()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getbegyx",
                        "sintaxis": [
                            "window.getbegyx()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getbkgd",
                        "sintaxis": [
                            "window.getbkgd()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getch",
                        "sintaxis": [
                            "window.getch([y, x])"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "getkey",
                        "sintaxis": [
                            "window.getkey([y, x])"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "getmaxyx",
                        "sintaxis": [
                            "window.getmaxyx()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getparyx",
                        "sintaxis": [
                            "window.getparyx()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getstr",
                        "sintaxis": [
                            "window.getstr(y, x, n)",
                            "window.getstr()",
                            "window.getstr(n)",
                            "window.getstr(y, x)"
                        ],
                        "parametros": [
                            "n",
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "getyx",
                        "sintaxis": [
                            "window.getyx()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_wch",
                        "sintaxis": [
                            "window.get_wch([y, x])"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "hline",
                        "sintaxis": [
                            "window.hline(ch, n)",
                            "window.hline(y, x, ch, n)"
                        ],
                        "parametros": [
                            "n",
                            "y",
                            "ch",
                            "x"
                        ]
                    },
                    {
                        "nombre": "idcok",
                        "sintaxis": [
                            "window.idcok(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "idlok",
                        "sintaxis": [
                            "window.idlok(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "immedok",
                        "sintaxis": [
                            "window.immedok(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "inch",
                        "sintaxis": [
                            "window.inch([y, x])"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "insch",
                        "sintaxis": [
                            "window.insch(y, x, ch[, attr])",
                            "window.insch(ch[, attr])"
                        ],
                        "parametros": [
                            "y",
                            "ch",
                            "x",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "insdelln",
                        "sintaxis": [
                            "window.insdelln(nlines)"
                        ],
                        "parametros": [
                            "nlines"
                        ]
                    },
                    {
                        "nombre": "insertln",
                        "sintaxis": [
                            "window.insertln()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "insnstr",
                        "sintaxis": [
                            "window.insnstr(str, n[, attr])",
                            "window.insnstr(y, x, str, n[, attr])"
                        ],
                        "parametros": [
                            "n",
                            "y",
                            "attr",
                            "str",
                            "x"
                        ]
                    },
                    {
                        "nombre": "insstr",
                        "sintaxis": [
                            "window.insstr(str[, attr])",
                            "window.insstr(y, x, str[, attr])"
                        ],
                        "parametros": [
                            "y",
                            "str",
                            "x",
                            "attr"
                        ]
                    },
                    {
                        "nombre": "instr",
                        "sintaxis": [
                            "window.instr(y, x[, n])",
                            "window.instr([n])"
                        ],
                        "parametros": [
                            "n",
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_linetouched",
                        "sintaxis": [
                            "window.is_linetouched(line)"
                        ],
                        "parametros": [
                            "line"
                        ]
                    },
                    {
                        "nombre": "is_wintouched",
                        "sintaxis": [
                            "window.is_wintouched()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "keypad",
                        "sintaxis": [
                            "window.keypad(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "leaveok",
                        "sintaxis": [
                            "window.leaveok(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "move",
                        "sintaxis": [
                            "window.move(new_y, new_x)"
                        ],
                        "parametros": [
                            "new_x",
                            "new_y"
                        ]
                    },
                    {
                        "nombre": "mvderwin",
                        "sintaxis": [
                            "window.mvderwin(y, x)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "mvwin",
                        "sintaxis": [
                            "window.mvwin(new_y, new_x)"
                        ],
                        "parametros": [
                            "new_x",
                            "new_y"
                        ]
                    },
                    {
                        "nombre": "nodelay",
                        "sintaxis": [
                            "window.nodelay(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "notimeout",
                        "sintaxis": [
                            "window.notimeout(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "noutrefresh",
                        "sintaxis": [
                            "window.noutrefresh()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "overlay",
                        "sintaxis": [
                            "window.overlay(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])"
                        ],
                        "parametros": [
                            "dmincol",
                            "destwin",
                            "smincol",
                            "dmaxcol",
                            "dminrow",
                            "dmaxrow",
                            "sminrow"
                        ]
                    },
                    {
                        "nombre": "overwrite",
                        "sintaxis": [
                            "window.overwrite(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])"
                        ],
                        "parametros": [
                            "dmincol",
                            "destwin",
                            "smincol",
                            "dmaxcol",
                            "dminrow",
                            "dmaxrow",
                            "sminrow"
                        ]
                    },
                    {
                        "nombre": "putwin",
                        "sintaxis": [
                            "window.putwin(file)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    },
                    {
                        "nombre": "redrawln",
                        "sintaxis": [
                            "window.redrawln(beg, num)"
                        ],
                        "parametros": [
                            "beg",
                            "num"
                        ]
                    },
                    {
                        "nombre": "redrawwin",
                        "sintaxis": [
                            "window.redrawwin()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "refresh",
                        "sintaxis": [
                            "window.refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])"
                        ],
                        "parametros": [
                            "smaxrow",
                            "smaxcol",
                            "pminrow",
                            "smincol",
                            "sminrow",
                            "pmincol"
                        ]
                    },
                    {
                        "nombre": "resize",
                        "sintaxis": [
                            "window.resize(nlines, ncols)"
                        ],
                        "parametros": [
                            "ncols",
                            "nlines"
                        ]
                    },
                    {
                        "nombre": "scroll",
                        "sintaxis": [
                            "window.scroll([lines=1])"
                        ],
                        "parametros": [
                            "lines"
                        ]
                    },
                    {
                        "nombre": "scrollok",
                        "sintaxis": [
                            "window.scrollok(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "setscrreg",
                        "sintaxis": [
                            "window.setscrreg(top, bottom)"
                        ],
                        "parametros": [
                            "top",
                            "bottom"
                        ]
                    },
                    {
                        "nombre": "standend",
                        "sintaxis": [
                            "window.standend()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "standout",
                        "sintaxis": [
                            "window.standout()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "subpad",
                        "sintaxis": [
                            "window.subpad(begin_y, begin_x)",
                            "window.subpad(nlines, ncols, begin_y, begin_x)"
                        ],
                        "parametros": [
                            "ncols",
                            "begin_y",
                            "nlines",
                            "begin_x"
                        ]
                    },
                    {
                        "nombre": "subwin",
                        "sintaxis": [
                            "window.subwin(nlines, ncols, begin_y, begin_x)",
                            "window.subwin(begin_y, begin_x)"
                        ],
                        "parametros": [
                            "ncols",
                            "begin_y",
                            "nlines",
                            "begin_x"
                        ]
                    },
                    {
                        "nombre": "syncdown",
                        "sintaxis": [
                            "window.syncdown()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "syncok",
                        "sintaxis": [
                            "window.syncok(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "syncup",
                        "sintaxis": [
                            "window.syncup()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "timeout",
                        "sintaxis": [
                            "window.timeout(delay)"
                        ],
                        "parametros": [
                            "delay"
                        ]
                    },
                    {
                        "nombre": "touchline",
                        "sintaxis": [
                            "window.touchline(start, count[, changed])"
                        ],
                        "parametros": [
                            "changed",
                            "count",
                            "start"
                        ]
                    },
                    {
                        "nombre": "touchwin",
                        "sintaxis": [
                            "window.touchwin()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "untouchwin",
                        "sintaxis": [
                            "window.untouchwin()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "vline",
                        "sintaxis": [
                            "window.vline(ch, n)",
                            "window.vline(y, x, ch, n)"
                        ],
                        "parametros": [
                            "n",
                            "y",
                            "ch",
                            "x"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "encoding",
                        "sintaxis": [
                            "window.encoding"
                        ]
                    }
                ],
                "sintaxis": [
                    "class window"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ERR",
                "sintaxis": [
                    "curses.ERR"
                ]
            },
            {
                "nombre": "ncurses_version",
                "sintaxis": [
                    "curses.ncurses_version"
                ]
            },
            {
                "nombre": "OK",
                "sintaxis": [
                    "curses.OK"
                ]
            },
            {
                "nombre": "version",
                "sintaxis": [
                    "curses.version"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception curses.error"
                ]
            }
        ]
    },
    {
        "nombre": "curses.ascii",
        "funciones": [
            {
                "nombre": "alt",
                "sintaxis": [
                    "curses.ascii.alt(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "ascii",
                "sintaxis": [
                    "curses.ascii.ascii(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "ctrl",
                "sintaxis": [
                    "curses.ascii.ctrl(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isalnum",
                "sintaxis": [
                    "curses.ascii.isalnum(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isalpha",
                "sintaxis": [
                    "curses.ascii.isalpha(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isascii",
                "sintaxis": [
                    "curses.ascii.isascii(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isblank",
                "sintaxis": [
                    "curses.ascii.isblank(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "iscntrl",
                "sintaxis": [
                    "curses.ascii.iscntrl(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isctrl",
                "sintaxis": [
                    "curses.ascii.isctrl(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isdigit",
                "sintaxis": [
                    "curses.ascii.isdigit(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isgraph",
                "sintaxis": [
                    "curses.ascii.isgraph(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "islower",
                "sintaxis": [
                    "curses.ascii.islower(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "ismeta",
                "sintaxis": [
                    "curses.ascii.ismeta(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isprint",
                "sintaxis": [
                    "curses.ascii.isprint(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "ispunct",
                "sintaxis": [
                    "curses.ascii.ispunct(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isspace",
                "sintaxis": [
                    "curses.ascii.isspace(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isupper",
                "sintaxis": [
                    "curses.ascii.isupper(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "isxdigit",
                "sintaxis": [
                    "curses.ascii.isxdigit(c)"
                ],
                "parametros": [
                    "c"
                ]
            },
            {
                "nombre": "unctrl",
                "sintaxis": [
                    "curses.ascii.unctrl(c)"
                ],
                "parametros": [
                    "c"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "controlnames",
                "sintaxis": [
                    "curses.ascii.controlnames"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "curses.panel",
        "funciones": [
            {
                "nombre": "bottom_panel",
                "sintaxis": [
                    "curses.panel.bottom_panel()"
                ],
                "parametros": []
            },
            {
                "nombre": "new_panel",
                "sintaxis": [
                    "curses.panel.new_panel(win)"
                ],
                "parametros": [
                    "win"
                ]
            },
            {
                "nombre": "top_panel",
                "sintaxis": [
                    "curses.panel.top_panel()"
                ],
                "parametros": []
            },
            {
                "nombre": "update_panels",
                "sintaxis": [
                    "curses.panel.update_panels()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "Panel",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "above",
                        "sintaxis": [
                            "Panel.above()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "below",
                        "sintaxis": [
                            "Panel.below()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "bottom",
                        "sintaxis": [
                            "Panel.bottom()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "hidden",
                        "sintaxis": [
                            "Panel.hidden()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "hide",
                        "sintaxis": [
                            "Panel.hide()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "move",
                        "sintaxis": [
                            "Panel.move(y, x)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "Panel.replace(win)"
                        ],
                        "parametros": [
                            "win"
                        ]
                    },
                    {
                        "nombre": "set_userptr",
                        "sintaxis": [
                            "Panel.set_userptr(obj)"
                        ],
                        "parametros": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "show",
                        "sintaxis": [
                            "Panel.show()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "top",
                        "sintaxis": [
                            "Panel.top()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "userptr",
                        "sintaxis": [
                            "Panel.userptr()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "window",
                        "sintaxis": [
                            "Panel.window()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Panel"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "curses.textpad",
        "funciones": [
            {
                "nombre": "rectangle",
                "sintaxis": [
                    "curses.textpad.rectangle(win, uly, ulx, lry, lrx)"
                ],
                "parametros": [
                    "win",
                    "ulx",
                    "lrx",
                    "lry",
                    "uly"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Textbox",
                "constructores": [
                    {
                        "nombre": "Textbox",
                        "sintaxis": [
                            "class curses.textpad.Textbox(win)"
                        ],
                        "parametros": [
                            "win"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "do_command",
                        "sintaxis": [
                            "do_command(ch)"
                        ],
                        "parametros": [
                            "ch"
                        ]
                    },
                    {
                        "nombre": "edit",
                        "sintaxis": [
                            "edit([validator])"
                        ],
                        "parametros": [
                            "validator"
                        ]
                    },
                    {
                        "nombre": "gather",
                        "sintaxis": [
                            "gather()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "stripspaces",
                        "sintaxis": [
                            "stripspaces"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Textbox"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "dataclasses",
        "funciones": [
            {
                "nombre": "asdict",
                "sintaxis": [
                    "dataclasses.asdict(instance, *, dict_factory=dict)"
                ],
                "parametros": [
                    "dict_factory",
                    "*",
                    "instance"
                ]
            },
            {
                "nombre": "astuple",
                "sintaxis": [
                    "dataclasses.astuple(instance, *, tuple_factory=tuple)"
                ],
                "parametros": [
                    "tuple_factory",
                    "*",
                    "instance"
                ]
            },
            {
                "nombre": "dataclass",
                "sintaxis": [
                    "@dataclasses.dataclass(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False)"
                ],
                "parametros": [
                    "eq",
                    "init",
                    "repr",
                    "frozen",
                    "unsafe_hash",
                    "match_args",
                    "order",
                    "kw_only",
                    "slots",
                    "*"
                ]
            },
            {
                "nombre": "field",
                "sintaxis": [
                    "dataclasses.field(*, default=MISSING, default_factory=MISSING, init=True, repr=True, hash=None, compare=True, metadata=None, kw_only=MISSING)"
                ],
                "parametros": [
                    "hash",
                    "compare",
                    "init",
                    "repr",
                    "default",
                    "kw_only",
                    "metadata",
                    "*",
                    "default_factory"
                ]
            },
            {
                "nombre": "fields",
                "sintaxis": [
                    "dataclasses.fields(class_or_instance)"
                ],
                "parametros": [
                    "class_or_instance"
                ]
            },
            {
                "nombre": "is_dataclass",
                "sintaxis": [
                    "dataclasses.is_dataclass(class_or_instance)"
                ],
                "parametros": [
                    "class_or_instance"
                ]
            },
            {
                "nombre": "make_dataclass",
                "sintaxis": [
                    "dataclasses.make_dataclass(cls_name, fields, *, bases=(), namespace=None, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False)"
                ],
                "parametros": [
                    "eq",
                    "init",
                    "repr",
                    "bases",
                    "frozen",
                    "unsafe_hash",
                    "match_args",
                    "order",
                    "namespace",
                    "kw_only",
                    "slots",
                    "fields",
                    "*",
                    "cls_name"
                ]
            },
            {
                "nombre": "replace",
                "sintaxis": [
                    "dataclasses.replace(instance, /, **changes)"
                ],
                "parametros": [
                    "/",
                    "**changes",
                    "instance"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Field",
                "constructores": [
                    {
                        "nombre": "Field",
                        "sintaxis": [
                            "class dataclasses.Field"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Field"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "KW_ONLY",
                "sintaxis": [
                    "dataclasses.KW_ONLY"
                ]
            },
            {
                "nombre": "MISSING",
                "sintaxis": [
                    "dataclasses.MISSING"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "FrozenInstanceError",
                "sintaxis": [
                    "exception dataclasses.FrozenInstanceError"
                ]
            }
        ]
    },
    {
        "nombre": "datetime",
        "funciones": [],
        "clases": [
            {
                "nombre": "date",
                "constructores": [
                    {
                        "nombre": "date",
                        "sintaxis": [
                            "class datetime.date",
                            "class datetime.date(year, month, day)"
                        ],
                        "parametros": [
                            "year",
                            "month",
                            "day"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "ctime",
                        "sintaxis": [
                            "date.ctime()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromisocalendar",
                        "sintaxis": [
                            "classmethod date.fromisocalendar(year, week, day)"
                        ],
                        "parametros": [
                            "week",
                            "day",
                            "year"
                        ]
                    },
                    {
                        "nombre": "fromisoformat",
                        "sintaxis": [
                            "classmethod date.fromisoformat(date_string)"
                        ],
                        "parametros": [
                            "date_string"
                        ]
                    },
                    {
                        "nombre": "fromordinal",
                        "sintaxis": [
                            "classmethod date.fromordinal(ordinal)"
                        ],
                        "parametros": [
                            "ordinal"
                        ]
                    },
                    {
                        "nombre": "fromtimestamp",
                        "sintaxis": [
                            "classmethod date.fromtimestamp(timestamp)"
                        ],
                        "parametros": [
                            "timestamp"
                        ]
                    },
                    {
                        "nombre": "isocalendar",
                        "sintaxis": [
                            "date.isocalendar()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isoformat",
                        "sintaxis": [
                            "date.isoformat()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isoweekday",
                        "sintaxis": [
                            "date.isoweekday()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "date.replace(year=self.year, month=self.month, day=self.day)"
                        ],
                        "parametros": [
                            "day",
                            "month",
                            "year"
                        ]
                    },
                    {
                        "nombre": "strftime",
                        "sintaxis": [
                            "date.strftime(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "timetuple",
                        "sintaxis": [
                            "date.timetuple()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "today",
                        "sintaxis": [
                            "classmethod date.today()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "toordinal",
                        "sintaxis": [
                            "date.toordinal()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "weekday",
                        "sintaxis": [
                            "date.weekday()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__format__",
                        "sintaxis": [
                            "date.__format__(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "date.__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "day",
                        "sintaxis": [
                            "date.day"
                        ]
                    },
                    {
                        "nombre": "max",
                        "sintaxis": [
                            "date.max"
                        ]
                    },
                    {
                        "nombre": "min",
                        "sintaxis": [
                            "date.min"
                        ]
                    },
                    {
                        "nombre": "month",
                        "sintaxis": [
                            "date.month"
                        ]
                    },
                    {
                        "nombre": "resolution",
                        "sintaxis": [
                            "date.resolution"
                        ]
                    },
                    {
                        "nombre": "year",
                        "sintaxis": [
                            "date.year"
                        ]
                    }
                ],
                "sintaxis": [
                    "class date"
                ]
            },
            {
                "nombre": "datetime",
                "constructores": [
                    {
                        "nombre": "datetime",
                        "sintaxis": [
                            "class datetime.datetime",
                            "class datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)"
                        ],
                        "parametros": [
                            "hour",
                            "tzinfo",
                            "microsecond",
                            "second",
                            "minute",
                            "year",
                            "fold",
                            "month",
                            "*",
                            "day"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "astimezone",
                        "sintaxis": [
                            "datetime.astimezone(tz=None)"
                        ],
                        "parametros": [
                            "tz"
                        ]
                    },
                    {
                        "nombre": "combine",
                        "sintaxis": [
                            "classmethod datetime.combine(date, time, tzinfo=self.tzinfo)"
                        ],
                        "parametros": [
                            "date",
                            "tzinfo",
                            "time"
                        ]
                    },
                    {
                        "nombre": "ctime",
                        "sintaxis": [
                            "datetime.ctime()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "date",
                        "sintaxis": [
                            "datetime.date()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "dst",
                        "sintaxis": [
                            "datetime.dst()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromisocalendar",
                        "sintaxis": [
                            "classmethod datetime.fromisocalendar(year, week, day)"
                        ],
                        "parametros": [
                            "week",
                            "day",
                            "year"
                        ]
                    },
                    {
                        "nombre": "fromisoformat",
                        "sintaxis": [
                            "classmethod datetime.fromisoformat(date_string)"
                        ],
                        "parametros": [
                            "date_string"
                        ]
                    },
                    {
                        "nombre": "fromordinal",
                        "sintaxis": [
                            "classmethod datetime.fromordinal(ordinal)"
                        ],
                        "parametros": [
                            "ordinal"
                        ]
                    },
                    {
                        "nombre": "fromtimestamp",
                        "sintaxis": [
                            "classmethod datetime.fromtimestamp(timestamp, tz=None)"
                        ],
                        "parametros": [
                            "tz",
                            "timestamp"
                        ]
                    },
                    {
                        "nombre": "isocalendar",
                        "sintaxis": [
                            "datetime.isocalendar()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isoformat",
                        "sintaxis": [
                            "datetime.isoformat(sep='T', timespec='auto')"
                        ],
                        "parametros": [
                            "timespec",
                            "sep"
                        ]
                    },
                    {
                        "nombre": "isoweekday",
                        "sintaxis": [
                            "datetime.isoweekday()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "now",
                        "sintaxis": [
                            "classmethod datetime.now(tz=None)"
                        ],
                        "parametros": [
                            "tz"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "datetime.replace(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, *, fold=0)"
                        ],
                        "parametros": [
                            "hour",
                            "tzinfo",
                            "microsecond",
                            "second",
                            "year",
                            "*",
                            "fold",
                            "month",
                            "minute",
                            "day"
                        ]
                    },
                    {
                        "nombre": "strftime",
                        "sintaxis": [
                            "datetime.strftime(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "strptime",
                        "sintaxis": [
                            "classmethod datetime.strptime(date_string, format)"
                        ],
                        "parametros": [
                            "format",
                            "date_string"
                        ]
                    },
                    {
                        "nombre": "time",
                        "sintaxis": [
                            "datetime.time()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "timestamp",
                        "sintaxis": [
                            "datetime.timestamp()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "timetuple",
                        "sintaxis": [
                            "datetime.timetuple()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "timetz",
                        "sintaxis": [
                            "datetime.timetz()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "today",
                        "sintaxis": [
                            "classmethod datetime.today()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "toordinal",
                        "sintaxis": [
                            "datetime.toordinal()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tzname",
                        "sintaxis": [
                            "datetime.tzname()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "utcfromtimestamp",
                        "sintaxis": [
                            "classmethod datetime.utcfromtimestamp(timestamp)"
                        ],
                        "parametros": [
                            "timestamp"
                        ]
                    },
                    {
                        "nombre": "utcnow",
                        "sintaxis": [
                            "classmethod datetime.utcnow()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "utcoffset",
                        "sintaxis": [
                            "datetime.utcoffset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "utctimetuple",
                        "sintaxis": [
                            "datetime.utctimetuple()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "weekday",
                        "sintaxis": [
                            "datetime.weekday()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__format__",
                        "sintaxis": [
                            "datetime.__format__(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "datetime.__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "day",
                        "sintaxis": [
                            "datetime.day"
                        ]
                    },
                    {
                        "nombre": "fold",
                        "sintaxis": [
                            "datetime.fold"
                        ]
                    },
                    {
                        "nombre": "hour",
                        "sintaxis": [
                            "datetime.hour"
                        ]
                    },
                    {
                        "nombre": "max",
                        "sintaxis": [
                            "datetime.max"
                        ]
                    },
                    {
                        "nombre": "microsecond",
                        "sintaxis": [
                            "datetime.microsecond"
                        ]
                    },
                    {
                        "nombre": "min",
                        "sintaxis": [
                            "datetime.min"
                        ]
                    },
                    {
                        "nombre": "minute",
                        "sintaxis": [
                            "datetime.minute"
                        ]
                    },
                    {
                        "nombre": "month",
                        "sintaxis": [
                            "datetime.month"
                        ]
                    },
                    {
                        "nombre": "resolution",
                        "sintaxis": [
                            "datetime.resolution"
                        ]
                    },
                    {
                        "nombre": "second",
                        "sintaxis": [
                            "datetime.second"
                        ]
                    },
                    {
                        "nombre": "tzinfo",
                        "sintaxis": [
                            "datetime.tzinfo"
                        ]
                    },
                    {
                        "nombre": "year",
                        "sintaxis": [
                            "datetime.year"
                        ]
                    }
                ],
                "sintaxis": [
                    "class datetime"
                ]
            },
            {
                "nombre": "time",
                "constructores": [
                    {
                        "nombre": "time",
                        "sintaxis": [
                            "class datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)",
                            "class datetime.time"
                        ],
                        "parametros": [
                            "hour",
                            "tzinfo",
                            "microsecond",
                            "second",
                            "minute",
                            "fold",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "dst",
                        "sintaxis": [
                            "time.dst()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromisoformat",
                        "sintaxis": [
                            "classmethod time.fromisoformat(time_string)"
                        ],
                        "parametros": [
                            "time_string"
                        ]
                    },
                    {
                        "nombre": "isoformat",
                        "sintaxis": [
                            "time.isoformat(timespec='auto')"
                        ],
                        "parametros": [
                            "timespec"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "time.replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, *, fold=0)"
                        ],
                        "parametros": [
                            "hour",
                            "tzinfo",
                            "microsecond",
                            "second",
                            "*",
                            "fold",
                            "minute"
                        ]
                    },
                    {
                        "nombre": "strftime",
                        "sintaxis": [
                            "time.strftime(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "tzname",
                        "sintaxis": [
                            "time.tzname()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "utcoffset",
                        "sintaxis": [
                            "time.utcoffset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__format__",
                        "sintaxis": [
                            "time.__format__(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "time.__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "fold",
                        "sintaxis": [
                            "time.fold"
                        ]
                    },
                    {
                        "nombre": "hour",
                        "sintaxis": [
                            "time.hour"
                        ]
                    },
                    {
                        "nombre": "max",
                        "sintaxis": [
                            "time.max"
                        ]
                    },
                    {
                        "nombre": "microsecond",
                        "sintaxis": [
                            "time.microsecond"
                        ]
                    },
                    {
                        "nombre": "min",
                        "sintaxis": [
                            "time.min"
                        ]
                    },
                    {
                        "nombre": "minute",
                        "sintaxis": [
                            "time.minute"
                        ]
                    },
                    {
                        "nombre": "resolution",
                        "sintaxis": [
                            "time.resolution"
                        ]
                    },
                    {
                        "nombre": "second",
                        "sintaxis": [
                            "time.second"
                        ]
                    },
                    {
                        "nombre": "tzinfo",
                        "sintaxis": [
                            "time.tzinfo"
                        ]
                    }
                ],
                "sintaxis": [
                    "class time"
                ]
            },
            {
                "nombre": "timedelta",
                "constructores": [
                    {
                        "nombre": "timedelta",
                        "sintaxis": [
                            "class datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)",
                            "class datetime.timedelta"
                        ],
                        "parametros": [
                            "microseconds",
                            "seconds",
                            "minutes",
                            "weeks",
                            "days",
                            "hours",
                            "milliseconds"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "total_seconds",
                        "sintaxis": [
                            "timedelta.total_seconds()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "max",
                        "sintaxis": [
                            "timedelta.max"
                        ]
                    },
                    {
                        "nombre": "min",
                        "sintaxis": [
                            "timedelta.min"
                        ]
                    },
                    {
                        "nombre": "resolution",
                        "sintaxis": [
                            "timedelta.resolution"
                        ]
                    }
                ],
                "sintaxis": [
                    "class timedelta"
                ]
            },
            {
                "nombre": "timezone",
                "constructores": [
                    {
                        "nombre": "timezone",
                        "sintaxis": [
                            "class datetime.timezone(offset, name=None)",
                            "class datetime.timezone"
                        ],
                        "parametros": [
                            "offset",
                            "name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "dst",
                        "sintaxis": [
                            "timezone.dst(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    },
                    {
                        "nombre": "fromutc",
                        "sintaxis": [
                            "timezone.fromutc(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    },
                    {
                        "nombre": "tzname",
                        "sintaxis": [
                            "timezone.tzname(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    },
                    {
                        "nombre": "utcoffset",
                        "sintaxis": [
                            "timezone.utcoffset(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "utc",
                        "sintaxis": [
                            "timezone.utc"
                        ]
                    }
                ],
                "sintaxis": [
                    "class timezone"
                ]
            },
            {
                "nombre": "tzinfo",
                "constructores": [
                    {
                        "nombre": "tzinfo",
                        "sintaxis": [
                            "class datetime.tzinfo"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "dst",
                        "sintaxis": [
                            "tzinfo.dst(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    },
                    {
                        "nombre": "fromutc",
                        "sintaxis": [
                            "tzinfo.fromutc(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    },
                    {
                        "nombre": "tzname",
                        "sintaxis": [
                            "tzinfo.tzname(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    },
                    {
                        "nombre": "utcoffset",
                        "sintaxis": [
                            "tzinfo.utcoffset(dt)"
                        ],
                        "parametros": [
                            "dt"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class tzinfo"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "MAXYEAR",
                "sintaxis": [
                    "datetime.MAXYEAR"
                ]
            },
            {
                "nombre": "MINYEAR",
                "sintaxis": [
                    "datetime.MINYEAR"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "dbm",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "dbm.open(file, flag='r', mode=438)"
                ],
                "parametros": [
                    "mode",
                    "file",
                    "flag"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "dbm.gnu.open(filename[, flag[, mode]])"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "flag"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "dbm.ndbm.open(filename[, flag[, mode]])"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "flag"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "dbm.dumb.open(filename[, flag[, mode]])"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "flag"
                ]
            },
            {
                "nombre": "whichdb",
                "sintaxis": [
                    "dbm.whichdb(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "dumbdbm",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "dumbdbm.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sync",
                        "sintaxis": [
                            "dumbdbm.sync()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class dumbdbm"
                ]
            },
            {
                "nombre": "gdbm",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "gdbm.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "firstkey",
                        "sintaxis": [
                            "gdbm.firstkey()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "nextkey",
                        "sintaxis": [
                            "gdbm.nextkey(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "reorganize",
                        "sintaxis": [
                            "gdbm.reorganize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sync",
                        "sintaxis": [
                            "gdbm.sync()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class gdbm"
                ]
            },
            {
                "nombre": "ndbm",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "ndbm.close()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ndbm"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "library",
                "sintaxis": [
                    "dbm.ndbm.library"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception dbm.error"
                ]
            },
            {
                "nombre": "error",
                "sintaxis": [
                    "exception dbm.gnu.error"
                ]
            },
            {
                "nombre": "error",
                "sintaxis": [
                    "exception dbm.ndbm.error"
                ]
            },
            {
                "nombre": "error",
                "sintaxis": [
                    "exception dbm.dumb.error"
                ]
            }
        ]
    },
    {
        "nombre": "dbm.dumb",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "dbm.dumb.open(filename[, flag[, mode]])"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "flag"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "dumbdbm",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "dumbdbm.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sync",
                        "sintaxis": [
                            "dumbdbm.sync()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class dumbdbm"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception dbm.dumb.error"
                ]
            }
        ]
    },
    {
        "nombre": "dbm.gnu",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "dbm.gnu.open(filename[, flag[, mode]])"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "flag"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "gdbm",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "gdbm.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "firstkey",
                        "sintaxis": [
                            "gdbm.firstkey()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "nextkey",
                        "sintaxis": [
                            "gdbm.nextkey(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "reorganize",
                        "sintaxis": [
                            "gdbm.reorganize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sync",
                        "sintaxis": [
                            "gdbm.sync()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class gdbm"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception dbm.gnu.error"
                ]
            }
        ]
    },
    {
        "nombre": "dbm.ndbm",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "dbm.ndbm.open(filename[, flag[, mode]])"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "flag"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "ndbm",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "ndbm.close()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ndbm"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "library",
                "sintaxis": [
                    "dbm.ndbm.library"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception dbm.ndbm.error"
                ]
            }
        ]
    },
    {
        "nombre": "decimal",
        "funciones": [
            {
                "nombre": "getcontext",
                "sintaxis": [
                    "decimal.getcontext()"
                ],
                "parametros": []
            },
            {
                "nombre": "localcontext",
                "sintaxis": [
                    "decimal.localcontext(ctx=None)"
                ],
                "parametros": [
                    "ctx"
                ]
            },
            {
                "nombre": "setcontext",
                "sintaxis": [
                    "decimal.setcontext(c)"
                ],
                "parametros": [
                    "c"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BasicContext",
                "constructores": [
                    {
                        "nombre": "BasicContext",
                        "sintaxis": [
                            "class decimal.BasicContext"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BasicContext"
                ]
            },
            {
                "nombre": "Clamped",
                "constructores": [
                    {
                        "nombre": "Clamped",
                        "sintaxis": [
                            "class decimal.Clamped"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Clamped"
                ]
            },
            {
                "nombre": "Context",
                "constructores": [
                    {
                        "nombre": "Context",
                        "sintaxis": [
                            "class decimal.Context(prec=None, rounding=None, Emin=None, Emax=None, capitals=None, clamp=None, flags=None, traps=None)"
                        ],
                        "parametros": [
                            "Emin",
                            "prec",
                            "rounding",
                            "clamp",
                            "capitals",
                            "flags",
                            "Emax",
                            "traps"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "abs",
                        "sintaxis": [
                            "abs(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "add(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "canonical",
                        "sintaxis": [
                            "canonical(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "clear_flags",
                        "sintaxis": [
                            "clear_flags()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "clear_traps",
                        "sintaxis": [
                            "clear_traps()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "compare",
                        "sintaxis": [
                            "compare(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "compare_signal",
                        "sintaxis": [
                            "compare_signal(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "compare_total",
                        "sintaxis": [
                            "compare_total(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "compare_total_mag",
                        "sintaxis": [
                            "compare_total_mag(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy_abs",
                        "sintaxis": [
                            "copy_abs(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "copy_decimal",
                        "sintaxis": [
                            "copy_decimal(num)"
                        ],
                        "parametros": [
                            "num"
                        ]
                    },
                    {
                        "nombre": "copy_negate",
                        "sintaxis": [
                            "copy_negate(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "copy_sign",
                        "sintaxis": [
                            "copy_sign(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "create_decimal",
                        "sintaxis": [
                            "create_decimal(num)"
                        ],
                        "parametros": [
                            "num"
                        ]
                    },
                    {
                        "nombre": "create_decimal_from_float",
                        "sintaxis": [
                            "create_decimal_from_float(f)"
                        ],
                        "parametros": [
                            "f"
                        ]
                    },
                    {
                        "nombre": "divide",
                        "sintaxis": [
                            "divide(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "divide_int",
                        "sintaxis": [
                            "divide_int(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "divmod",
                        "sintaxis": [
                            "divmod(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "Etiny",
                        "sintaxis": [
                            "Etiny()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Etop",
                        "sintaxis": [
                            "Etop()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "exp",
                        "sintaxis": [
                            "exp(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "fma",
                        "sintaxis": [
                            "fma(x, y, z)"
                        ],
                        "parametros": [
                            "y",
                            "x",
                            "z"
                        ]
                    },
                    {
                        "nombre": "is_canonical",
                        "sintaxis": [
                            "is_canonical(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_finite",
                        "sintaxis": [
                            "is_finite(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_infinite",
                        "sintaxis": [
                            "is_infinite(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_nan",
                        "sintaxis": [
                            "is_nan(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_normal",
                        "sintaxis": [
                            "is_normal(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_qnan",
                        "sintaxis": [
                            "is_qnan(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_signed",
                        "sintaxis": [
                            "is_signed(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_snan",
                        "sintaxis": [
                            "is_snan(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_subnormal",
                        "sintaxis": [
                            "is_subnormal(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "is_zero",
                        "sintaxis": [
                            "is_zero(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "ln",
                        "sintaxis": [
                            "ln(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "log10",
                        "sintaxis": [
                            "log10(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "logb",
                        "sintaxis": [
                            "logb(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "logical_and",
                        "sintaxis": [
                            "logical_and(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "logical_invert",
                        "sintaxis": [
                            "logical_invert(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "logical_or",
                        "sintaxis": [
                            "logical_or(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "logical_xor",
                        "sintaxis": [
                            "logical_xor(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "max",
                        "sintaxis": [
                            "max(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "max_mag",
                        "sintaxis": [
                            "max_mag(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "min",
                        "sintaxis": [
                            "min(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "minus",
                        "sintaxis": [
                            "minus(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "min_mag",
                        "sintaxis": [
                            "min_mag(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "multiply",
                        "sintaxis": [
                            "multiply(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "next_minus",
                        "sintaxis": [
                            "next_minus(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "next_plus",
                        "sintaxis": [
                            "next_plus(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "next_toward",
                        "sintaxis": [
                            "next_toward(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "normalize",
                        "sintaxis": [
                            "normalize(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "number_class",
                        "sintaxis": [
                            "number_class(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "plus",
                        "sintaxis": [
                            "plus(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "power",
                        "sintaxis": [
                            "power(x, y, modulo=None)"
                        ],
                        "parametros": [
                            "modulo",
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "quantize",
                        "sintaxis": [
                            "quantize(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "radix",
                        "sintaxis": [
                            "radix()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remainder",
                        "sintaxis": [
                            "remainder(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "remainder_near",
                        "sintaxis": [
                            "remainder_near(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "rotate",
                        "sintaxis": [
                            "rotate(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "same_quantum",
                        "sintaxis": [
                            "same_quantum(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "scaleb",
                        "sintaxis": [
                            "scaleb(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "shift",
                        "sintaxis": [
                            "shift(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "sqrt",
                        "sintaxis": [
                            "sqrt(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "subtract",
                        "sintaxis": [
                            "subtract(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "to_eng_string",
                        "sintaxis": [
                            "to_eng_string(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "to_integral_exact",
                        "sintaxis": [
                            "to_integral_exact(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "to_sci_string",
                        "sintaxis": [
                            "to_sci_string(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Context"
                ]
            },
            {
                "nombre": "Decimal",
                "constructores": [
                    {
                        "nombre": "Decimal",
                        "sintaxis": [
                            "class decimal.Decimal(value='0', context=None)"
                        ],
                        "parametros": [
                            "context",
                            "value"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "adjusted",
                        "sintaxis": [
                            "adjusted()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "as_integer_ratio",
                        "sintaxis": [
                            "as_integer_ratio()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "as_tuple",
                        "sintaxis": [
                            "as_tuple()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "canonical",
                        "sintaxis": [
                            "canonical()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "compare",
                        "sintaxis": [
                            "compare(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "compare_signal",
                        "sintaxis": [
                            "compare_signal(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "compare_total",
                        "sintaxis": [
                            "compare_total(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "compare_total_mag",
                        "sintaxis": [
                            "compare_total_mag(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "conjugate",
                        "sintaxis": [
                            "conjugate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy_abs",
                        "sintaxis": [
                            "copy_abs()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy_negate",
                        "sintaxis": [
                            "copy_negate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy_sign",
                        "sintaxis": [
                            "copy_sign(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "exp",
                        "sintaxis": [
                            "exp(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "fma",
                        "sintaxis": [
                            "fma(other, third, context=None)"
                        ],
                        "parametros": [
                            "third",
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "from_float",
                        "sintaxis": [
                            "from_float(f)"
                        ],
                        "parametros": [
                            "f"
                        ]
                    },
                    {
                        "nombre": "is_canonical",
                        "sintaxis": [
                            "is_canonical()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_finite",
                        "sintaxis": [
                            "is_finite()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_infinite",
                        "sintaxis": [
                            "is_infinite()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_nan",
                        "sintaxis": [
                            "is_nan()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_normal",
                        "sintaxis": [
                            "is_normal(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "is_qnan",
                        "sintaxis": [
                            "is_qnan()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_signed",
                        "sintaxis": [
                            "is_signed()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_snan",
                        "sintaxis": [
                            "is_snan()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_subnormal",
                        "sintaxis": [
                            "is_subnormal(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "is_zero",
                        "sintaxis": [
                            "is_zero()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "ln",
                        "sintaxis": [
                            "ln(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "log10",
                        "sintaxis": [
                            "log10(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "logb",
                        "sintaxis": [
                            "logb(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "logical_and",
                        "sintaxis": [
                            "logical_and(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "logical_invert",
                        "sintaxis": [
                            "logical_invert(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "logical_or",
                        "sintaxis": [
                            "logical_or(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "logical_xor",
                        "sintaxis": [
                            "logical_xor(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "max",
                        "sintaxis": [
                            "max(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "max_mag",
                        "sintaxis": [
                            "max_mag(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "min",
                        "sintaxis": [
                            "min(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "min_mag",
                        "sintaxis": [
                            "min_mag(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "next_minus",
                        "sintaxis": [
                            "next_minus(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "next_plus",
                        "sintaxis": [
                            "next_plus(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "next_toward",
                        "sintaxis": [
                            "next_toward(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "normalize",
                        "sintaxis": [
                            "normalize(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "number_class",
                        "sintaxis": [
                            "number_class(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "quantize",
                        "sintaxis": [
                            "quantize(exp, rounding=None, context=None)"
                        ],
                        "parametros": [
                            "rounding",
                            "exp",
                            "context"
                        ]
                    },
                    {
                        "nombre": "radix",
                        "sintaxis": [
                            "radix()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remainder_near",
                        "sintaxis": [
                            "remainder_near(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "rotate",
                        "sintaxis": [
                            "rotate(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "same_quantum",
                        "sintaxis": [
                            "same_quantum(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "scaleb",
                        "sintaxis": [
                            "scaleb(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "shift",
                        "sintaxis": [
                            "shift(other, context=None)"
                        ],
                        "parametros": [
                            "other",
                            "context"
                        ]
                    },
                    {
                        "nombre": "sqrt",
                        "sintaxis": [
                            "sqrt(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "to_eng_string",
                        "sintaxis": [
                            "to_eng_string(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "to_integral",
                        "sintaxis": [
                            "to_integral(rounding=None, context=None)"
                        ],
                        "parametros": [
                            "rounding",
                            "context"
                        ]
                    },
                    {
                        "nombre": "to_integral_exact",
                        "sintaxis": [
                            "to_integral_exact(rounding=None, context=None)"
                        ],
                        "parametros": [
                            "rounding",
                            "context"
                        ]
                    },
                    {
                        "nombre": "to_integral_value",
                        "sintaxis": [
                            "to_integral_value(rounding=None, context=None)"
                        ],
                        "parametros": [
                            "rounding",
                            "context"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Decimal"
                ]
            },
            {
                "nombre": "DecimalException",
                "constructores": [
                    {
                        "nombre": "DecimalException",
                        "sintaxis": [
                            "class decimal.DecimalException"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DecimalException"
                ]
            },
            {
                "nombre": "DefaultContext",
                "constructores": [
                    {
                        "nombre": "DefaultContext",
                        "sintaxis": [
                            "class decimal.DefaultContext"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DefaultContext"
                ]
            },
            {
                "nombre": "DivisionByZero",
                "constructores": [
                    {
                        "nombre": "DivisionByZero",
                        "sintaxis": [
                            "class decimal.DivisionByZero"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DivisionByZero"
                ]
            },
            {
                "nombre": "ExtendedContext",
                "constructores": [
                    {
                        "nombre": "ExtendedContext",
                        "sintaxis": [
                            "class decimal.ExtendedContext"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ExtendedContext"
                ]
            },
            {
                "nombre": "FloatOperation",
                "constructores": [
                    {
                        "nombre": "FloatOperation",
                        "sintaxis": [
                            "class decimal.FloatOperation"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FloatOperation"
                ]
            },
            {
                "nombre": "Inexact",
                "constructores": [
                    {
                        "nombre": "Inexact",
                        "sintaxis": [
                            "class decimal.Inexact"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Inexact"
                ]
            },
            {
                "nombre": "InvalidOperation",
                "constructores": [
                    {
                        "nombre": "InvalidOperation",
                        "sintaxis": [
                            "class decimal.InvalidOperation"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class InvalidOperation"
                ]
            },
            {
                "nombre": "Overflow",
                "constructores": [
                    {
                        "nombre": "Overflow",
                        "sintaxis": [
                            "class decimal.Overflow"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Overflow"
                ]
            },
            {
                "nombre": "Rounded",
                "constructores": [
                    {
                        "nombre": "Rounded",
                        "sintaxis": [
                            "class decimal.Rounded"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Rounded"
                ]
            },
            {
                "nombre": "Subnormal",
                "constructores": [
                    {
                        "nombre": "Subnormal",
                        "sintaxis": [
                            "class decimal.Subnormal"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Subnormal"
                ]
            },
            {
                "nombre": "Underflow",
                "constructores": [
                    {
                        "nombre": "Underflow",
                        "sintaxis": [
                            "class decimal.Underflow"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Underflow"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "HAVE_CONTEXTVAR",
                "sintaxis": [
                    "decimal.HAVE_CONTEXTVAR"
                ]
            },
            {
                "nombre": "HAVE_THREADS",
                "sintaxis": [
                    "decimal.HAVE_THREADS"
                ]
            },
            {
                "nombre": "MAX_EMAX",
                "sintaxis": [
                    "decimal.MAX_EMAX"
                ]
            },
            {
                "nombre": "MAX_PREC",
                "sintaxis": [
                    "decimal.MAX_PREC"
                ]
            },
            {
                "nombre": "MIN_EMIN",
                "sintaxis": [
                    "decimal.MIN_EMIN"
                ]
            },
            {
                "nombre": "MIN_ETINY",
                "sintaxis": [
                    "decimal.MIN_ETINY"
                ]
            },
            {
                "nombre": "ROUND_05UP",
                "sintaxis": [
                    "decimal.ROUND_05UP"
                ]
            },
            {
                "nombre": "ROUND_CEILING",
                "sintaxis": [
                    "decimal.ROUND_CEILING"
                ]
            },
            {
                "nombre": "ROUND_DOWN",
                "sintaxis": [
                    "decimal.ROUND_DOWN"
                ]
            },
            {
                "nombre": "ROUND_FLOOR",
                "sintaxis": [
                    "decimal.ROUND_FLOOR"
                ]
            },
            {
                "nombre": "ROUND_HALF_DOWN",
                "sintaxis": [
                    "decimal.ROUND_HALF_DOWN"
                ]
            },
            {
                "nombre": "ROUND_HALF_EVEN",
                "sintaxis": [
                    "decimal.ROUND_HALF_EVEN"
                ]
            },
            {
                "nombre": "ROUND_HALF_UP",
                "sintaxis": [
                    "decimal.ROUND_HALF_UP"
                ]
            },
            {
                "nombre": "ROUND_UP",
                "sintaxis": [
                    "decimal.ROUND_UP"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "difflib",
        "funciones": [
            {
                "nombre": "context_diff",
                "sintaxis": [
                    "difflib.context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\\n')"
                ],
                "parametros": [
                    "tofiledate",
                    "fromfile",
                    "n",
                    "a",
                    "tofile",
                    "b",
                    "fromfiledate",
                    "lineterm"
                ]
            },
            {
                "nombre": "diff_bytes",
                "sintaxis": [
                    "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'', fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\\n')"
                ],
                "parametros": [
                    "tofiledate",
                    "fromfile",
                    "n",
                    "a",
                    "tofile",
                    "b",
                    "fromfiledate",
                    "lineterm",
                    "dfunc"
                ]
            },
            {
                "nombre": "get_close_matches",
                "sintaxis": [
                    "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)"
                ],
                "parametros": [
                    "possibilities",
                    "n",
                    "word",
                    "cutoff"
                ]
            },
            {
                "nombre": "IS_CHARACTER_JUNK",
                "sintaxis": [
                    "difflib.IS_CHARACTER_JUNK(ch)"
                ],
                "parametros": [
                    "ch"
                ]
            },
            {
                "nombre": "IS_LINE_JUNK",
                "sintaxis": [
                    "difflib.IS_LINE_JUNK(line)"
                ],
                "parametros": [
                    "line"
                ]
            },
            {
                "nombre": "ndiff",
                "sintaxis": [
                    "difflib.ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)"
                ],
                "parametros": [
                    "linejunk",
                    "b",
                    "charjunk",
                    "a"
                ]
            },
            {
                "nombre": "restore",
                "sintaxis": [
                    "difflib.restore(sequence, which)"
                ],
                "parametros": [
                    "which",
                    "sequence"
                ]
            },
            {
                "nombre": "unified_diff",
                "sintaxis": [
                    "difflib.unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\\n')"
                ],
                "parametros": [
                    "tofiledate",
                    "fromfile",
                    "n",
                    "a",
                    "tofile",
                    "b",
                    "fromfiledate",
                    "lineterm"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Differ",
                "constructores": [
                    {
                        "nombre": "Differ",
                        "sintaxis": [
                            "class difflib.Differ(linejunk=None, charjunk=None)",
                            "class difflib.Differ"
                        ],
                        "parametros": [
                            "linejunk",
                            "charjunk"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "compare",
                        "sintaxis": [
                            "compare(a, b)"
                        ],
                        "parametros": [
                            "b",
                            "a"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Differ"
                ]
            },
            {
                "nombre": "HtmlDiff",
                "constructores": [
                    {
                        "nombre": "HtmlDiff",
                        "sintaxis": [
                            "class difflib.HtmlDiff"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "make_file",
                        "sintaxis": [
                            "make_file(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5, *, charset='utf-8')"
                        ],
                        "parametros": [
                            "tolines",
                            "context",
                            "numlines",
                            "todesc",
                            "charset",
                            "fromdesc",
                            "*",
                            "fromlines"
                        ]
                    },
                    {
                        "nombre": "make_table",
                        "sintaxis": [
                            "make_table(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5)"
                        ],
                        "parametros": [
                            "tolines",
                            "context",
                            "numlines",
                            "todesc",
                            "fromdesc",
                            "fromlines"
                        ]
                    },
                    {
                        "nombre": "__init__",
                        "sintaxis": [
                            "__init__(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=IS_CHARACTER_JUNK)"
                        ],
                        "parametros": [
                            "charjunk",
                            "linejunk",
                            "tabsize",
                            "wrapcolumn"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HtmlDiff"
                ]
            },
            {
                "nombre": "SequenceMatcher",
                "constructores": [
                    {
                        "nombre": "SequenceMatcher",
                        "sintaxis": [
                            "class difflib.SequenceMatcher",
                            "class difflib.SequenceMatcher(isjunk=None, a='', b='', autojunk=True)"
                        ],
                        "parametros": [
                            "autojunk",
                            "b",
                            "isjunk",
                            "a"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_longest_match",
                        "sintaxis": [
                            "find_longest_match(alo=0, ahi=None, blo=0, bhi=None)"
                        ],
                        "parametros": [
                            "alo",
                            "blo",
                            "ahi",
                            "bhi"
                        ]
                    },
                    {
                        "nombre": "get_grouped_opcodes",
                        "sintaxis": [
                            "get_grouped_opcodes(n=3)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "get_matching_blocks",
                        "sintaxis": [
                            "get_matching_blocks()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_opcodes",
                        "sintaxis": [
                            "get_opcodes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "quick_ratio",
                        "sintaxis": [
                            "quick_ratio()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "ratio",
                        "sintaxis": [
                            "ratio()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "real_quick_ratio",
                        "sintaxis": [
                            "real_quick_ratio()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_seq1",
                        "sintaxis": [
                            "set_seq1(a)"
                        ],
                        "parametros": [
                            "a"
                        ]
                    },
                    {
                        "nombre": "set_seq2",
                        "sintaxis": [
                            "set_seq2(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    },
                    {
                        "nombre": "set_seqs",
                        "sintaxis": [
                            "set_seqs(a, b)"
                        ],
                        "parametros": [
                            "b",
                            "a"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SequenceMatcher"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "dis",
        "funciones": [
            {
                "nombre": "code_info",
                "sintaxis": [
                    "dis.code_info(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "dis",
                "sintaxis": [
                    "dis.dis(x=None, *, file=None, depth=None)"
                ],
                "parametros": [
                    "depth",
                    "*",
                    "file",
                    "x"
                ]
            },
            {
                "nombre": "disassemble",
                "sintaxis": [
                    "dis.disassemble(code, lasti=- 1, *, file=None)",
                    "dis.disco(code, lasti=- 1, *, file=None)"
                ],
                "parametros": [
                    "code",
                    "file",
                    "*",
                    "lasti"
                ]
            },
            {
                "nombre": "distb",
                "sintaxis": [
                    "dis.distb(tb=None, *, file=None)"
                ],
                "parametros": [
                    "file",
                    "*",
                    "tb"
                ]
            },
            {
                "nombre": "findlabels",
                "sintaxis": [
                    "dis.findlabels(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "findlinestarts",
                "sintaxis": [
                    "dis.findlinestarts(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "get_instructions",
                "sintaxis": [
                    "dis.get_instructions(x, *, first_line=None)"
                ],
                "parametros": [
                    "first_line",
                    "*",
                    "x"
                ]
            },
            {
                "nombre": "show_code",
                "sintaxis": [
                    "dis.show_code(x, *, file=None)"
                ],
                "parametros": [
                    "*",
                    "file",
                    "x"
                ]
            },
            {
                "nombre": "stack_effect",
                "sintaxis": [
                    "dis.stack_effect(opcode, oparg=None, *, jump=None)"
                ],
                "parametros": [
                    "jump",
                    "*",
                    "opcode",
                    "oparg"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Bytecode",
                "constructores": [
                    {
                        "nombre": "Bytecode",
                        "sintaxis": [
                            "class dis.Bytecode(x, *, first_line=None, current_offset=None)"
                        ],
                        "parametros": [
                            "current_offset",
                            "first_line",
                            "*",
                            "x"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "dis",
                        "sintaxis": [
                            "dis()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "from_traceback",
                        "sintaxis": [
                            "classmethod from_traceback(tb)"
                        ],
                        "parametros": [
                            "tb"
                        ]
                    },
                    {
                        "nombre": "info",
                        "sintaxis": [
                            "info()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Bytecode"
                ]
            },
            {
                "nombre": "Instruction",
                "constructores": [
                    {
                        "nombre": "Instruction",
                        "sintaxis": [
                            "class dis.Instruction"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Instruction"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "arg",
                "sintaxis": [
                    "arg"
                ]
            },
            {
                "nombre": "argrepr",
                "sintaxis": [
                    "argrepr"
                ]
            },
            {
                "nombre": "argval",
                "sintaxis": [
                    "argval"
                ]
            },
            {
                "nombre": "cmp_op",
                "sintaxis": [
                    "dis.cmp_op"
                ]
            },
            {
                "nombre": "codeobj",
                "sintaxis": [
                    "codeobj"
                ]
            },
            {
                "nombre": "first_line",
                "sintaxis": [
                    "first_line"
                ]
            },
            {
                "nombre": "hascompare",
                "sintaxis": [
                    "dis.hascompare"
                ]
            },
            {
                "nombre": "hasconst",
                "sintaxis": [
                    "dis.hasconst"
                ]
            },
            {
                "nombre": "hasfree",
                "sintaxis": [
                    "dis.hasfree"
                ]
            },
            {
                "nombre": "hasjabs",
                "sintaxis": [
                    "dis.hasjabs"
                ]
            },
            {
                "nombre": "hasjrel",
                "sintaxis": [
                    "dis.hasjrel"
                ]
            },
            {
                "nombre": "haslocal",
                "sintaxis": [
                    "dis.haslocal"
                ]
            },
            {
                "nombre": "hasname",
                "sintaxis": [
                    "dis.hasname"
                ]
            },
            {
                "nombre": "is_jump_target",
                "sintaxis": [
                    "is_jump_target"
                ]
            },
            {
                "nombre": "offset",
                "sintaxis": [
                    "offset"
                ]
            },
            {
                "nombre": "opcode",
                "sintaxis": [
                    "opcode"
                ]
            },
            {
                "nombre": "opmap",
                "sintaxis": [
                    "dis.opmap"
                ]
            },
            {
                "nombre": "opname",
                "sintaxis": [
                    "opname"
                ]
            },
            {
                "nombre": "opname",
                "sintaxis": [
                    "dis.opname"
                ]
            },
            {
                "nombre": "starts_line",
                "sintaxis": [
                    "starts_line"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "distutils",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.archive_util",
        "funciones": [
            {
                "nombre": "make_archive",
                "sintaxis": [
                    "distutils.archive_util.make_archive(base_name, format[, root_dir=None, base_dir=None, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "format",
                    "base_dir",
                    "dry_run",
                    "base_name",
                    "root_dir",
                    "verbose"
                ]
            },
            {
                "nombre": "make_tarball",
                "sintaxis": [
                    "distutils.archive_util.make_tarball(base_name, base_dir[, compress='gzip', verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "base_dir",
                    "dry_run",
                    "base_name",
                    "verbose",
                    "compress"
                ]
            },
            {
                "nombre": "make_zipfile",
                "sintaxis": [
                    "distutils.archive_util.make_zipfile(base_name, base_dir[, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "verbose",
                    "dry_run",
                    "base_dir",
                    "base_name"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.bcppcompiler",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.ccompiler",
        "funciones": [
            {
                "nombre": "gen_lib_options",
                "sintaxis": [
                    "distutils.ccompiler.gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)"
                ],
                "parametros": [
                    "compiler",
                    "library_dirs",
                    "runtime_library_dirs",
                    "libraries"
                ]
            },
            {
                "nombre": "gen_preprocess_options",
                "sintaxis": [
                    "distutils.ccompiler.gen_preprocess_options(macros, include_dirs)"
                ],
                "parametros": [
                    "include_dirs",
                    "macros"
                ]
            },
            {
                "nombre": "get_default_compiler",
                "sintaxis": [
                    "distutils.ccompiler.get_default_compiler(osname, platform)"
                ],
                "parametros": [
                    "osname",
                    "platform"
                ]
            },
            {
                "nombre": "new_compiler",
                "sintaxis": [
                    "distutils.ccompiler.new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0)"
                ],
                "parametros": [
                    "compiler",
                    "dry_run",
                    "plat",
                    "force",
                    "verbose"
                ]
            },
            {
                "nombre": "show_compilers",
                "sintaxis": [
                    "distutils.ccompiler.show_compilers()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "CCompiler",
                "constructores": [
                    {
                        "nombre": "CCompiler",
                        "sintaxis": [
                            "class distutils.ccompiler.CCompiler([verbose=0, dry_run=0, force=0])"
                        ],
                        "parametros": [
                            "verbose",
                            "dry_run",
                            "force"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_include_dir",
                        "sintaxis": [
                            "add_include_dir(dir)"
                        ],
                        "parametros": [
                            "dir"
                        ]
                    },
                    {
                        "nombre": "add_library",
                        "sintaxis": [
                            "add_library(libname)"
                        ],
                        "parametros": [
                            "libname"
                        ]
                    },
                    {
                        "nombre": "add_library_dir",
                        "sintaxis": [
                            "add_library_dir(dir)"
                        ],
                        "parametros": [
                            "dir"
                        ]
                    },
                    {
                        "nombre": "add_link_object",
                        "sintaxis": [
                            "add_link_object(object)"
                        ],
                        "parametros": [
                            "object"
                        ]
                    },
                    {
                        "nombre": "add_runtime_library_dir",
                        "sintaxis": [
                            "add_runtime_library_dir(dir)"
                        ],
                        "parametros": [
                            "dir"
                        ]
                    },
                    {
                        "nombre": "announce",
                        "sintaxis": [
                            "announce(msg[, level=1])"
                        ],
                        "parametros": [
                            "msg",
                            "level"
                        ]
                    },
                    {
                        "nombre": "compile",
                        "sintaxis": [
                            "compile(sources[, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None])"
                        ],
                        "parametros": [
                            "sources",
                            "include_dirs",
                            "extra_preargs",
                            "extra_postargs",
                            "debug",
                            "depends",
                            "output_dir",
                            "macros"
                        ]
                    },
                    {
                        "nombre": "create_static_lib",
                        "sintaxis": [
                            "create_static_lib(objects, output_libname[, output_dir=None, debug=0, target_lang=None])"
                        ],
                        "parametros": [
                            "target_lang",
                            "objects",
                            "debug",
                            "output_dir",
                            "output_libname"
                        ]
                    },
                    {
                        "nombre": "debug_print",
                        "sintaxis": [
                            "debug_print(msg)"
                        ],
                        "parametros": [
                            "msg"
                        ]
                    },
                    {
                        "nombre": "define_macro",
                        "sintaxis": [
                            "define_macro(name[, value=None])"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "detect_language",
                        "sintaxis": [
                            "detect_language(sources)"
                        ],
                        "parametros": [
                            "sources"
                        ]
                    },
                    {
                        "nombre": "executable_filename",
                        "sintaxis": [
                            "executable_filename(basename[, strip_dir=0, output_dir=''])"
                        ],
                        "parametros": [
                            "basename",
                            "strip_dir",
                            "output_dir"
                        ]
                    },
                    {
                        "nombre": "execute",
                        "sintaxis": [
                            "execute(func, args[, msg=None, level=1])"
                        ],
                        "parametros": [
                            "args",
                            "func",
                            "msg",
                            "level"
                        ]
                    },
                    {
                        "nombre": "find_library_file",
                        "sintaxis": [
                            "find_library_file(dirs, lib[, debug=0])"
                        ],
                        "parametros": [
                            "dirs",
                            "debug",
                            "lib"
                        ]
                    },
                    {
                        "nombre": "has_function",
                        "sintaxis": [
                            "has_function(funcname[, includes=None, include_dirs=None, libraries=None, library_dirs=None])"
                        ],
                        "parametros": [
                            "include_dirs",
                            "includes",
                            "library_dirs",
                            "libraries",
                            "funcname"
                        ]
                    },
                    {
                        "nombre": "library_dir_option",
                        "sintaxis": [
                            "library_dir_option(dir)"
                        ],
                        "parametros": [
                            "dir"
                        ]
                    },
                    {
                        "nombre": "library_filename",
                        "sintaxis": [
                            "library_filename(libname[, lib_type='static', strip_dir=0, output_dir=''])"
                        ],
                        "parametros": [
                            "lib_type",
                            "libname",
                            "strip_dir",
                            "output_dir"
                        ]
                    },
                    {
                        "nombre": "library_option",
                        "sintaxis": [
                            "library_option(lib)"
                        ],
                        "parametros": [
                            "lib"
                        ]
                    },
                    {
                        "nombre": "link",
                        "sintaxis": [
                            "link(target_desc, objects, output_filename[, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None])"
                        ],
                        "parametros": [
                            "target_lang",
                            "output_filename",
                            "extra_postargs",
                            "objects",
                            "export_symbols",
                            "build_temp",
                            "target_desc",
                            "output_dir",
                            "runtime_library_dirs",
                            "libraries",
                            "debug",
                            "library_dirs",
                            "extra_preargs"
                        ]
                    },
                    {
                        "nombre": "link_executable",
                        "sintaxis": [
                            "link_executable(objects, output_progname[, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, target_lang=None])"
                        ],
                        "parametros": [
                            "output_progname",
                            "target_lang",
                            "extra_postargs",
                            "objects",
                            "runtime_library_dirs",
                            "output_dir",
                            "debug",
                            "libraries",
                            "library_dirs",
                            "extra_preargs"
                        ]
                    },
                    {
                        "nombre": "link_shared_lib",
                        "sintaxis": [
                            "link_shared_lib(objects, output_libname[, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None])"
                        ],
                        "parametros": [
                            "target_lang",
                            "extra_postargs",
                            "objects",
                            "export_symbols",
                            "build_temp",
                            "runtime_library_dirs",
                            "output_dir",
                            "debug",
                            "libraries",
                            "library_dirs",
                            "extra_preargs",
                            "output_libname"
                        ]
                    },
                    {
                        "nombre": "link_shared_object",
                        "sintaxis": [
                            "link_shared_object(objects, output_filename[, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None])"
                        ],
                        "parametros": [
                            "target_lang",
                            "output_filename",
                            "extra_postargs",
                            "objects",
                            "export_symbols",
                            "build_temp",
                            "runtime_library_dirs",
                            "output_dir",
                            "debug",
                            "libraries",
                            "library_dirs",
                            "extra_preargs"
                        ]
                    },
                    {
                        "nombre": "mkpath",
                        "sintaxis": [
                            "mkpath(name[, mode=511])"
                        ],
                        "parametros": [
                            "mode",
                            "name"
                        ]
                    },
                    {
                        "nombre": "move_file",
                        "sintaxis": [
                            "move_file(src, dst)"
                        ],
                        "parametros": [
                            "dst",
                            "src"
                        ]
                    },
                    {
                        "nombre": "object_filenames",
                        "sintaxis": [
                            "object_filenames(source_filenames[, strip_dir=0, output_dir=''])"
                        ],
                        "parametros": [
                            "source_filenames",
                            "strip_dir",
                            "output_dir"
                        ]
                    },
                    {
                        "nombre": "preprocess",
                        "sintaxis": [
                            "preprocess(source[, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None])"
                        ],
                        "parametros": [
                            "include_dirs",
                            "output_file",
                            "extra_postargs",
                            "macros",
                            "source",
                            "extra_preargs"
                        ]
                    },
                    {
                        "nombre": "runtime_library_dir_option",
                        "sintaxis": [
                            "runtime_library_dir_option(dir)"
                        ],
                        "parametros": [
                            "dir"
                        ]
                    },
                    {
                        "nombre": "set_executables",
                        "sintaxis": [
                            "set_executables(**args)"
                        ],
                        "parametros": [
                            "args"
                        ]
                    },
                    {
                        "nombre": "set_include_dirs",
                        "sintaxis": [
                            "set_include_dirs(dirs)"
                        ],
                        "parametros": [
                            "dirs"
                        ]
                    },
                    {
                        "nombre": "set_libraries",
                        "sintaxis": [
                            "set_libraries(libnames)"
                        ],
                        "parametros": [
                            "libnames"
                        ]
                    },
                    {
                        "nombre": "set_library_dirs",
                        "sintaxis": [
                            "set_library_dirs(dirs)"
                        ],
                        "parametros": [
                            "dirs"
                        ]
                    },
                    {
                        "nombre": "set_link_objects",
                        "sintaxis": [
                            "set_link_objects(objects)"
                        ],
                        "parametros": [
                            "objects"
                        ]
                    },
                    {
                        "nombre": "set_runtime_library_dirs",
                        "sintaxis": [
                            "set_runtime_library_dirs(dirs)"
                        ],
                        "parametros": [
                            "dirs"
                        ]
                    },
                    {
                        "nombre": "shared_object_filename",
                        "sintaxis": [
                            "shared_object_filename(basename[, strip_dir=0, output_dir=''])"
                        ],
                        "parametros": [
                            "basename",
                            "strip_dir",
                            "output_dir"
                        ]
                    },
                    {
                        "nombre": "spawn",
                        "sintaxis": [
                            "spawn(cmd)"
                        ],
                        "parametros": [
                            "cmd"
                        ]
                    },
                    {
                        "nombre": "undefine_macro",
                        "sintaxis": [
                            "undefine_macro(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "warn",
                        "sintaxis": [
                            "warn(msg)"
                        ],
                        "parametros": [
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class CCompiler"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.cmd",
        "funciones": [],
        "clases": [
            {
                "nombre": "Command",
                "constructores": [
                    {
                        "nombre": "Command",
                        "sintaxis": [
                            "class distutils.cmd.Command(dist)"
                        ],
                        "parametros": [
                            "dist"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Command"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.bdist",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.bdist_dumb",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.bdist_msi",
        "funciones": [],
        "clases": [
            {
                "nombre": "bdist_msi",
                "constructores": [
                    {
                        "nombre": "bdist_msi",
                        "sintaxis": [
                            "class distutils.command.bdist_msi.bdist_msi"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class bdist_msi"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.bdist_packager",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.bdist_rpm",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.build",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.build_clib",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.build_ext",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.build_py",
        "funciones": [],
        "clases": [
            {
                "nombre": "build_py",
                "constructores": [
                    {
                        "nombre": "build_py",
                        "sintaxis": [
                            "class distutils.command.build_py.build_py"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class build_py"
                ]
            },
            {
                "nombre": "build_py_2to3",
                "constructores": [
                    {
                        "nombre": "build_py_2to3",
                        "sintaxis": [
                            "class distutils.command.build_py.build_py_2to3"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class build_py_2to3"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.build_scripts",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.check",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.clean",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.config",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.install",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.install_data",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.install_headers",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.install_lib",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.install_scripts",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.register",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.command.sdist",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.core",
        "funciones": [
            {
                "nombre": "run_setup",
                "sintaxis": [
                    "distutils.core.run_setup(script_name[, script_args=None, stop_after='run'])"
                ],
                "parametros": [
                    "script_name",
                    "script_args",
                    "stop_after"
                ]
            },
            {
                "nombre": "setup",
                "sintaxis": [
                    "distutils.core.setup(arguments)"
                ],
                "parametros": [
                    "arguments"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Command",
                "constructores": [
                    {
                        "nombre": "Command",
                        "sintaxis": [
                            "class distutils.core.Command"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Command"
                ]
            },
            {
                "nombre": "Distribution",
                "constructores": [
                    {
                        "nombre": "Distribution",
                        "sintaxis": [
                            "class distutils.core.Distribution"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Distribution"
                ]
            },
            {
                "nombre": "Extension",
                "constructores": [
                    {
                        "nombre": "Extension",
                        "sintaxis": [
                            "class distutils.core.Extension"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Extension"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.cygwinccompiler",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.debug",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.dep_util",
        "funciones": [
            {
                "nombre": "newer",
                "sintaxis": [
                    "distutils.dep_util.newer(source, target)"
                ],
                "parametros": [
                    "target",
                    "source"
                ]
            },
            {
                "nombre": "newer_group",
                "sintaxis": [
                    "distutils.dep_util.newer_group(sources, target[, missing='error'])"
                ],
                "parametros": [
                    "sources",
                    "target",
                    "missing"
                ]
            },
            {
                "nombre": "newer_pairwise",
                "sintaxis": [
                    "distutils.dep_util.newer_pairwise(sources, targets)"
                ],
                "parametros": [
                    "targets",
                    "sources"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.dir_util",
        "funciones": [
            {
                "nombre": "copy_tree",
                "sintaxis": [
                    "distutils.dir_util.copy_tree(src, dst[, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "preserve_symlinks",
                    "verbose",
                    "dry_run",
                    "preserve_times",
                    "update",
                    "dst",
                    "preserve_mode",
                    "src"
                ]
            },
            {
                "nombre": "create_tree",
                "sintaxis": [
                    "distutils.dir_util.create_tree(base_dir, files[, mode=0o777, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "mode",
                    "base_dir",
                    "dry_run",
                    "verbose",
                    "files"
                ]
            },
            {
                "nombre": "mkpath",
                "sintaxis": [
                    "distutils.dir_util.mkpath(name[, mode=0o777, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "mode",
                    "verbose",
                    "name",
                    "dry_run"
                ]
            },
            {
                "nombre": "remove_tree",
                "sintaxis": [
                    "distutils.dir_util.remove_tree(directory[, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "verbose",
                    "dry_run",
                    "directory"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.dist",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.errors",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.extension",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.fancy_getopt",
        "funciones": [
            {
                "nombre": "fancy_getopt",
                "sintaxis": [
                    "distutils.fancy_getopt.fancy_getopt(options, negative_opt, object, args)"
                ],
                "parametros": [
                    "args",
                    "negative_opt",
                    "object",
                    "options"
                ]
            },
            {
                "nombre": "wrap_text",
                "sintaxis": [
                    "distutils.fancy_getopt.wrap_text(text, width)"
                ],
                "parametros": [
                    "width",
                    "text"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "FancyGetopt",
                "constructores": [
                    {
                        "nombre": "FancyGetopt",
                        "sintaxis": [
                            "class distutils.fancy_getopt.FancyGetopt([option_table=None])"
                        ],
                        "parametros": [
                            "option_table"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "generate_help",
                        "sintaxis": [
                            "FancyGetopt.generate_help([header=None])"
                        ],
                        "parametros": [
                            "header"
                        ]
                    },
                    {
                        "nombre": "getopt",
                        "sintaxis": [
                            "FancyGetopt.getopt([args=None, object=None])"
                        ],
                        "parametros": [
                            "args",
                            "object"
                        ]
                    },
                    {
                        "nombre": "get_option_order",
                        "sintaxis": [
                            "FancyGetopt.get_option_order()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FancyGetopt"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.file_util",
        "funciones": [
            {
                "nombre": "copy_file",
                "sintaxis": [
                    "distutils.file_util.copy_file(src, dst[, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "verbose",
                    "dry_run",
                    "preserve_times",
                    "update",
                    "link",
                    "dst",
                    "preserve_mode",
                    "src"
                ]
            },
            {
                "nombre": "move_file",
                "sintaxis": [
                    "distutils.file_util.move_file(src, dst[, verbose, dry_run])"
                ],
                "parametros": [
                    "dst",
                    "verbose",
                    "src",
                    "dry_run"
                ]
            },
            {
                "nombre": "write_file",
                "sintaxis": [
                    "distutils.file_util.write_file(filename, contents)"
                ],
                "parametros": [
                    "filename",
                    "contents"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.filelist",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.log",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.msvccompiler",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.spawn",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.sysconfig",
        "funciones": [
            {
                "nombre": "customize_compiler",
                "sintaxis": [
                    "distutils.sysconfig.customize_compiler(compiler)"
                ],
                "parametros": [
                    "compiler"
                ]
            },
            {
                "nombre": "get_config_h_filename",
                "sintaxis": [
                    "distutils.sysconfig.get_config_h_filename()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_config_var",
                "sintaxis": [
                    "distutils.sysconfig.get_config_var(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "get_config_vars",
                "sintaxis": [
                    "distutils.sysconfig.get_config_vars(...)"
                ],
                "parametros": [
                    "..."
                ]
            },
            {
                "nombre": "get_makefile_filename",
                "sintaxis": [
                    "distutils.sysconfig.get_makefile_filename()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_python_inc",
                "sintaxis": [
                    "distutils.sysconfig.get_python_inc([plat_specific[, prefix]])"
                ],
                "parametros": [
                    "plat_specific",
                    "prefix"
                ]
            },
            {
                "nombre": "get_python_lib",
                "sintaxis": [
                    "distutils.sysconfig.get_python_lib([plat_specific[, standard_lib[, prefix]]])"
                ],
                "parametros": [
                    "plat_specific",
                    "prefix",
                    "standard_lib"
                ]
            },
            {
                "nombre": "set_python_build",
                "sintaxis": [
                    "distutils.sysconfig.set_python_build()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "EXEC_PREFIX",
                "sintaxis": [
                    "distutils.sysconfig.EXEC_PREFIX"
                ]
            },
            {
                "nombre": "PREFIX",
                "sintaxis": [
                    "distutils.sysconfig.PREFIX"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "distutils.text_file",
        "funciones": [],
        "clases": [
            {
                "nombre": "TextFile",
                "constructores": [
                    {
                        "nombre": "TextFile",
                        "sintaxis": [
                            "class distutils.text_file.TextFile([filename=None, file=None, **options])"
                        ],
                        "parametros": [
                            "filename",
                            "file",
                            "**options"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "open(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "readline",
                        "sintaxis": [
                            "readline()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readlines",
                        "sintaxis": [
                            "readlines()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unreadline",
                        "sintaxis": [
                            "unreadline(line)"
                        ],
                        "parametros": [
                            "line"
                        ]
                    },
                    {
                        "nombre": "warn",
                        "sintaxis": [
                            "warn(msg[, line=None])"
                        ],
                        "parametros": [
                            "line",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class TextFile"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.unixccompiler",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.util",
        "funciones": [
            {
                "nombre": "byte_compile",
                "sintaxis": [
                    "distutils.util.byte_compile(py_files[, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None])"
                ],
                "parametros": [
                    "base_dir",
                    "dry_run",
                    "prefix",
                    "direct",
                    "py_files",
                    "force",
                    "verbose",
                    "optimize"
                ]
            },
            {
                "nombre": "change_root",
                "sintaxis": [
                    "distutils.util.change_root(new_root, pathname)"
                ],
                "parametros": [
                    "new_root",
                    "pathname"
                ]
            },
            {
                "nombre": "check_environ",
                "sintaxis": [
                    "distutils.util.check_environ()"
                ],
                "parametros": []
            },
            {
                "nombre": "convert_path",
                "sintaxis": [
                    "distutils.util.convert_path(pathname)"
                ],
                "parametros": [
                    "pathname"
                ]
            },
            {
                "nombre": "execute",
                "sintaxis": [
                    "distutils.util.execute(func, args[, msg=None, verbose=0, dry_run=0])"
                ],
                "parametros": [
                    "args",
                    "dry_run",
                    "verbose",
                    "func",
                    "msg"
                ]
            },
            {
                "nombre": "get_platform",
                "sintaxis": [
                    "distutils.util.get_platform()"
                ],
                "parametros": []
            },
            {
                "nombre": "rfc822_escape",
                "sintaxis": [
                    "distutils.util.rfc822_escape(header)"
                ],
                "parametros": [
                    "header"
                ]
            },
            {
                "nombre": "split_quoted",
                "sintaxis": [
                    "distutils.util.split_quoted(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "strtobool",
                "sintaxis": [
                    "distutils.util.strtobool(val)"
                ],
                "parametros": [
                    "val"
                ]
            },
            {
                "nombre": "subst_vars",
                "sintaxis": [
                    "distutils.util.subst_vars(s, local_vars)"
                ],
                "parametros": [
                    "s",
                    "local_vars"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "distutils.version",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "doctest",
        "funciones": [
            {
                "nombre": "debug",
                "sintaxis": [
                    "doctest.debug(module, name, pm=False)"
                ],
                "parametros": [
                    "pm",
                    "name",
                    "module"
                ]
            },
            {
                "nombre": "debug_src",
                "sintaxis": [
                    "doctest.debug_src(src, pm=False, globs=None)"
                ],
                "parametros": [
                    "globs",
                    "src",
                    "pm"
                ]
            },
            {
                "nombre": "DocFileSuite",
                "sintaxis": [
                    "doctest.DocFileSuite(*paths, module_relative=True, package=None, setUp=None, tearDown=None, globs=None, optionflags=0, parser=DocTestParser(), encoding=None)"
                ],
                "parametros": [
                    "module_relative",
                    "parser",
                    "encoding",
                    "paths",
                    "setUp",
                    "tearDown",
                    "optionflags",
                    "package",
                    "globs"
                ]
            },
            {
                "nombre": "DocTestSuite",
                "sintaxis": [
                    "doctest.DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, setUp=None, tearDown=None, checker=None)"
                ],
                "parametros": [
                    "test_finder",
                    "checker",
                    "setUp",
                    "tearDown",
                    "module",
                    "extraglobs",
                    "globs"
                ]
            },
            {
                "nombre": "register_optionflag",
                "sintaxis": [
                    "doctest.register_optionflag(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "run_docstring_examples",
                "sintaxis": [
                    "doctest.run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0)"
                ],
                "parametros": [
                    "name",
                    "f",
                    "compileflags",
                    "optionflags",
                    "verbose",
                    "globs"
                ]
            },
            {
                "nombre": "script_from_examples",
                "sintaxis": [
                    "doctest.script_from_examples(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "set_unittest_reportflags",
                "sintaxis": [
                    "doctest.set_unittest_reportflags(flags)"
                ],
                "parametros": [
                    "flags"
                ]
            },
            {
                "nombre": "testfile",
                "sintaxis": [
                    "doctest.testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None)"
                ],
                "parametros": [
                    "module_relative",
                    "filename",
                    "parser",
                    "encoding",
                    "name",
                    "raise_on_error",
                    "report",
                    "optionflags",
                    "verbose",
                    "package",
                    "extraglobs",
                    "globs"
                ]
            },
            {
                "nombre": "testmod",
                "sintaxis": [
                    "doctest.testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)"
                ],
                "parametros": [
                    "name",
                    "raise_on_error",
                    "exclude_empty",
                    "m",
                    "report",
                    "optionflags",
                    "verbose",
                    "extraglobs",
                    "globs"
                ]
            },
            {
                "nombre": "testsource",
                "sintaxis": [
                    "doctest.testsource(module, name)"
                ],
                "parametros": [
                    "name",
                    "module"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "DebugRunner",
                "constructores": [
                    {
                        "nombre": "DebugRunner",
                        "sintaxis": [
                            "class doctest.DebugRunner(checker=None, verbose=None, optionflags=0)"
                        ],
                        "parametros": [
                            "verbose",
                            "optionflags",
                            "checker"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DebugRunner"
                ]
            },
            {
                "nombre": "DocTest",
                "constructores": [
                    {
                        "nombre": "DocTest",
                        "sintaxis": [
                            "class doctest.DocTest(examples, globs, name, filename, lineno, docstring)"
                        ],
                        "parametros": [
                            "filename",
                            "name",
                            "lineno",
                            "docstring",
                            "examples",
                            "globs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "docstring",
                        "sintaxis": [
                            "docstring"
                        ]
                    },
                    {
                        "nombre": "examples",
                        "sintaxis": [
                            "examples"
                        ]
                    },
                    {
                        "nombre": "filename",
                        "sintaxis": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "globs",
                        "sintaxis": [
                            "globs"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class DocTest"
                ]
            },
            {
                "nombre": "DocTestFailure",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "example",
                        "sintaxis": [
                            "DocTestFailure.example"
                        ]
                    },
                    {
                        "nombre": "got",
                        "sintaxis": [
                            "DocTestFailure.got"
                        ]
                    },
                    {
                        "nombre": "test",
                        "sintaxis": [
                            "DocTestFailure.test"
                        ]
                    }
                ],
                "sintaxis": [
                    "class DocTestFailure"
                ]
            },
            {
                "nombre": "DocTestFinder",
                "constructores": [
                    {
                        "nombre": "DocTestFinder",
                        "sintaxis": [
                            "class doctest.DocTestFinder(verbose=False, parser=DocTestParser(), recurse=True, exclude_empty=True)"
                        ],
                        "parametros": [
                            "verbose",
                            "recurse",
                            "parser",
                            "exclude_empty"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find",
                        "sintaxis": [
                            "find(obj[, name][, module][, globs][, extraglobs])"
                        ],
                        "parametros": [
                            "obj[, name][, module][, globs][, extraglobs]"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DocTestFinder"
                ]
            },
            {
                "nombre": "DocTestParser",
                "constructores": [
                    {
                        "nombre": "DocTestParser",
                        "sintaxis": [
                            "class doctest.DocTestParser"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_doctest",
                        "sintaxis": [
                            "get_doctest(string, globs, name, filename, lineno)"
                        ],
                        "parametros": [
                            "filename",
                            "name",
                            "lineno",
                            "string",
                            "globs"
                        ]
                    },
                    {
                        "nombre": "get_examples",
                        "sintaxis": [
                            "get_examples(string, name='<string>')"
                        ],
                        "parametros": [
                            "string",
                            "name"
                        ]
                    },
                    {
                        "nombre": "parse",
                        "sintaxis": [
                            "parse(string, name='<string>')"
                        ],
                        "parametros": [
                            "string",
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DocTestParser"
                ]
            },
            {
                "nombre": "DocTestRunner",
                "constructores": [
                    {
                        "nombre": "DocTestRunner",
                        "sintaxis": [
                            "class doctest.DocTestRunner(checker=None, verbose=None, optionflags=0)"
                        ],
                        "parametros": [
                            "verbose",
                            "optionflags",
                            "checker"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "report_failure",
                        "sintaxis": [
                            "report_failure(out, test, example, got)"
                        ],
                        "parametros": [
                            "example",
                            "out",
                            "got",
                            "test"
                        ]
                    },
                    {
                        "nombre": "report_start",
                        "sintaxis": [
                            "report_start(out, test, example)"
                        ],
                        "parametros": [
                            "example",
                            "out",
                            "test"
                        ]
                    },
                    {
                        "nombre": "report_success",
                        "sintaxis": [
                            "report_success(out, test, example, got)"
                        ],
                        "parametros": [
                            "example",
                            "out",
                            "got",
                            "test"
                        ]
                    },
                    {
                        "nombre": "report_unexpected_exception",
                        "sintaxis": [
                            "report_unexpected_exception(out, test, example, exc_info)"
                        ],
                        "parametros": [
                            "example",
                            "out",
                            "exc_info",
                            "test"
                        ]
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(test, compileflags=None, out=None, clear_globs=True)"
                        ],
                        "parametros": [
                            "compileflags",
                            "out",
                            "clear_globs",
                            "test"
                        ]
                    },
                    {
                        "nombre": "summarize",
                        "sintaxis": [
                            "summarize(verbose=None)"
                        ],
                        "parametros": [
                            "verbose"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DocTestRunner"
                ]
            },
            {
                "nombre": "Example",
                "constructores": [
                    {
                        "nombre": "Example",
                        "sintaxis": [
                            "class doctest.Example(source, want, exc_msg=None, lineno=0, indent=0, options=None)"
                        ],
                        "parametros": [
                            "options",
                            "lineno",
                            "exc_msg",
                            "want",
                            "indent",
                            "source"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "exc_msg",
                        "sintaxis": [
                            "exc_msg"
                        ]
                    },
                    {
                        "nombre": "indent",
                        "sintaxis": [
                            "indent"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "options",
                        "sintaxis": [
                            "options"
                        ]
                    },
                    {
                        "nombre": "source",
                        "sintaxis": [
                            "source"
                        ]
                    },
                    {
                        "nombre": "want",
                        "sintaxis": [
                            "want"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Example"
                ]
            },
            {
                "nombre": "OutputChecker",
                "constructores": [
                    {
                        "nombre": "OutputChecker",
                        "sintaxis": [
                            "class doctest.OutputChecker"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "check_output",
                        "sintaxis": [
                            "check_output(want, got, optionflags)"
                        ],
                        "parametros": [
                            "want",
                            "got",
                            "optionflags"
                        ]
                    },
                    {
                        "nombre": "output_difference",
                        "sintaxis": [
                            "output_difference(example, got, optionflags)"
                        ],
                        "parametros": [
                            "example",
                            "got",
                            "optionflags"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class OutputChecker"
                ]
            },
            {
                "nombre": "UnexpectedException",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "example",
                        "sintaxis": [
                            "UnexpectedException.example"
                        ]
                    },
                    {
                        "nombre": "exc_info",
                        "sintaxis": [
                            "UnexpectedException.exc_info"
                        ]
                    },
                    {
                        "nombre": "test",
                        "sintaxis": [
                            "UnexpectedException.test"
                        ]
                    }
                ],
                "sintaxis": [
                    "class UnexpectedException"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "COMPARISON_FLAGS",
                "sintaxis": [
                    "doctest.COMPARISON_FLAGS"
                ]
            },
            {
                "nombre": "DONT_ACCEPT_BLANKLINE",
                "sintaxis": [
                    "doctest.DONT_ACCEPT_BLANKLINE"
                ]
            },
            {
                "nombre": "DONT_ACCEPT_TRUE_FOR_1",
                "sintaxis": [
                    "doctest.DONT_ACCEPT_TRUE_FOR_1"
                ]
            },
            {
                "nombre": "ELLIPSIS",
                "sintaxis": [
                    "doctest.ELLIPSIS"
                ]
            },
            {
                "nombre": "FAIL_FAST",
                "sintaxis": [
                    "doctest.FAIL_FAST"
                ]
            },
            {
                "nombre": "IGNORE_EXCEPTION_DETAIL",
                "sintaxis": [
                    "doctest.IGNORE_EXCEPTION_DETAIL"
                ]
            },
            {
                "nombre": "NORMALIZE_WHITESPACE",
                "sintaxis": [
                    "doctest.NORMALIZE_WHITESPACE"
                ]
            },
            {
                "nombre": "REPORTING_FLAGS",
                "sintaxis": [
                    "doctest.REPORTING_FLAGS"
                ]
            },
            {
                "nombre": "REPORT_CDIFF",
                "sintaxis": [
                    "doctest.REPORT_CDIFF"
                ]
            },
            {
                "nombre": "REPORT_NDIFF",
                "sintaxis": [
                    "doctest.REPORT_NDIFF"
                ]
            },
            {
                "nombre": "REPORT_ONLY_FIRST_FAILURE",
                "sintaxis": [
                    "doctest.REPORT_ONLY_FIRST_FAILURE"
                ]
            },
            {
                "nombre": "REPORT_UDIFF",
                "sintaxis": [
                    "doctest.REPORT_UDIFF"
                ]
            },
            {
                "nombre": "SKIP",
                "sintaxis": [
                    "doctest.SKIP"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "DocTestFailure",
                "sintaxis": [
                    "exception doctest.DocTestFailure(test, example, got)"
                ]
            },
            {
                "nombre": "UnexpectedException",
                "sintaxis": [
                    "exception doctest.UnexpectedException(test, example, exc_info)"
                ]
            }
        ]
    },
    {
        "nombre": "email",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.charset",
        "funciones": [
            {
                "nombre": "add_alias",
                "sintaxis": [
                    "email.charset.add_alias(alias, canonical)"
                ],
                "parametros": [
                    "alias",
                    "canonical"
                ]
            },
            {
                "nombre": "add_charset",
                "sintaxis": [
                    "email.charset.add_charset(charset, header_enc=None, body_enc=None, output_charset=None)"
                ],
                "parametros": [
                    "body_enc",
                    "output_charset",
                    "charset",
                    "header_enc"
                ]
            },
            {
                "nombre": "add_codec",
                "sintaxis": [
                    "email.charset.add_codec(charset, codecname)"
                ],
                "parametros": [
                    "charset",
                    "codecname"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Charset",
                "constructores": [
                    {
                        "nombre": "Charset",
                        "sintaxis": [
                            "class email.charset.Charset(input_charset=DEFAULT_CHARSET)"
                        ],
                        "parametros": [
                            "input_charset"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "body_encode",
                        "sintaxis": [
                            "body_encode(string)"
                        ],
                        "parametros": [
                            "string"
                        ]
                    },
                    {
                        "nombre": "get_body_encoding",
                        "sintaxis": [
                            "get_body_encoding()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_output_charset",
                        "sintaxis": [
                            "get_output_charset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "header_encode",
                        "sintaxis": [
                            "header_encode(string)"
                        ],
                        "parametros": [
                            "string"
                        ]
                    },
                    {
                        "nombre": "header_encode_lines",
                        "sintaxis": [
                            "header_encode_lines(string, maxlengths)"
                        ],
                        "parametros": [
                            "maxlengths",
                            "string"
                        ]
                    },
                    {
                        "nombre": "__eq__",
                        "sintaxis": [
                            "__eq__(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "__ne__",
                        "sintaxis": [
                            "__ne__(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "body_encoding",
                        "sintaxis": [
                            "body_encoding"
                        ]
                    },
                    {
                        "nombre": "header_encoding",
                        "sintaxis": [
                            "header_encoding"
                        ]
                    },
                    {
                        "nombre": "input_charset",
                        "sintaxis": [
                            "input_charset"
                        ]
                    },
                    {
                        "nombre": "input_codec",
                        "sintaxis": [
                            "input_codec"
                        ]
                    },
                    {
                        "nombre": "output_charset",
                        "sintaxis": [
                            "output_charset"
                        ]
                    },
                    {
                        "nombre": "output_codec",
                        "sintaxis": [
                            "output_codec"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Charset"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.contentmanager",
        "funciones": [],
        "clases": [
            {
                "nombre": "ContentManager",
                "constructores": [
                    {
                        "nombre": "ContentManager",
                        "sintaxis": [
                            "class email.contentmanager.ContentManager"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_get_handler",
                        "sintaxis": [
                            "add_get_handler(key, handler)"
                        ],
                        "parametros": [
                            "handler",
                            "key"
                        ]
                    },
                    {
                        "nombre": "add_set_handler",
                        "sintaxis": [
                            "add_set_handler(typekey, handler)"
                        ],
                        "parametros": [
                            "typekey",
                            "handler"
                        ]
                    },
                    {
                        "nombre": "get_content",
                        "sintaxis": [
                            "get_content(msg, *args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "set_content",
                        "sintaxis": [
                            "set_content(msg, obj, *args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "obj",
                            "msg",
                            "kw"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ContentManager"
                ]
            },
            {
                "nombre": "email.contentmanager",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "get_content",
                        "sintaxis": [
                            "email.contentmanager.get_content(msg, errors='replace')"
                        ],
                        "parametros": [
                            "errors",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "set_content",
                        "sintaxis": [
                            "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, disposition=None, filename=None, cid=None, params=None, headers=None)",
                            "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cte=\"base64\", disposition=None, filename=None, cid=None, params=None, headers=None)",
                            "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8', cte=None, disposition=None, filename=None, cid=None, params=None, headers=None)"
                        ],
                        "parametros": [
                            "filename",
                            "headers",
                            "<'str'>",
                            "params",
                            "subtype",
                            "maintype",
                            "<'EmailMessage'>",
                            "charset",
                            "cte",
                            "disposition",
                            "<'bytes'>",
                            "cid",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class email.contentmanager"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "raw_data_manager",
                "sintaxis": [
                    "email.contentmanager.raw_data_manager"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "email.encoders",
        "funciones": [
            {
                "nombre": "encode_7or8bit",
                "sintaxis": [
                    "email.encoders.encode_7or8bit(msg)"
                ],
                "parametros": [
                    "msg"
                ]
            },
            {
                "nombre": "encode_base64",
                "sintaxis": [
                    "email.encoders.encode_base64(msg)"
                ],
                "parametros": [
                    "msg"
                ]
            },
            {
                "nombre": "encode_noop",
                "sintaxis": [
                    "email.encoders.encode_noop(msg)"
                ],
                "parametros": [
                    "msg"
                ]
            },
            {
                "nombre": "encode_quopri",
                "sintaxis": [
                    "email.encoders.encode_quopri(msg)"
                ],
                "parametros": [
                    "msg"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.errors",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "BoundaryError",
                "sintaxis": [
                    "exception email.errors.BoundaryError"
                ]
            },
            {
                "nombre": "HeaderParseError",
                "sintaxis": [
                    "exception email.errors.HeaderParseError"
                ]
            },
            {
                "nombre": "MessageError",
                "sintaxis": [
                    "exception email.errors.MessageError"
                ]
            },
            {
                "nombre": "MessageParseError",
                "sintaxis": [
                    "exception email.errors.MessageParseError"
                ]
            },
            {
                "nombre": "MultipartConversionError",
                "sintaxis": [
                    "exception email.errors.MultipartConversionError"
                ]
            }
        ]
    },
    {
        "nombre": "email.generator",
        "funciones": [],
        "clases": [
            {
                "nombre": "BytesGenerator",
                "constructores": [
                    {
                        "nombre": "BytesGenerator",
                        "sintaxis": [
                            "class email.generator.BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None)"
                        ],
                        "parametros": [
                            "outfp",
                            "maxheaderlen",
                            "policy",
                            "mangle_from_",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "clone",
                        "sintaxis": [
                            "clone(fp)"
                        ],
                        "parametros": [
                            "fp"
                        ]
                    },
                    {
                        "nombre": "flatten",
                        "sintaxis": [
                            "flatten(msg, unixfrom=False, linesep=None)"
                        ],
                        "parametros": [
                            "linesep",
                            "msg",
                            "unixfrom"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BytesGenerator"
                ]
            },
            {
                "nombre": "DecodedGenerator",
                "constructores": [
                    {
                        "nombre": "DecodedGenerator",
                        "sintaxis": [
                            "class email.generator.DecodedGenerator(outfp, mangle_from_=None, maxheaderlen=None, fmt=None, *, policy=None)"
                        ],
                        "parametros": [
                            "outfp",
                            "maxheaderlen",
                            "policy",
                            "fmt",
                            "mangle_from_",
                            "*"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DecodedGenerator"
                ]
            },
            {
                "nombre": "Generator",
                "constructores": [
                    {
                        "nombre": "Generator",
                        "sintaxis": [
                            "class email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None)"
                        ],
                        "parametros": [
                            "outfp",
                            "maxheaderlen",
                            "policy",
                            "mangle_from_",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "clone",
                        "sintaxis": [
                            "clone(fp)"
                        ],
                        "parametros": [
                            "fp"
                        ]
                    },
                    {
                        "nombre": "flatten",
                        "sintaxis": [
                            "flatten(msg, unixfrom=False, linesep=None)"
                        ],
                        "parametros": [
                            "linesep",
                            "msg",
                            "unixfrom"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Generator"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.header",
        "funciones": [
            {
                "nombre": "decode_header",
                "sintaxis": [
                    "email.header.decode_header(header)"
                ],
                "parametros": [
                    "header"
                ]
            },
            {
                "nombre": "make_header",
                "sintaxis": [
                    "email.header.make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' ')"
                ],
                "parametros": [
                    "header_name",
                    "decoded_seq",
                    "continuation_ws",
                    "maxlinelen"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Header",
                "constructores": [
                    {
                        "nombre": "Header",
                        "sintaxis": [
                            "class email.header.Header(s=None, charset=None, maxlinelen=None, header_name=None, continuation_ws=' ', errors='strict')"
                        ],
                        "parametros": [
                            "header_name",
                            "errors",
                            "continuation_ws",
                            "s",
                            "charset",
                            "maxlinelen"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "append",
                        "sintaxis": [
                            "append(s, charset=None, errors='strict')"
                        ],
                        "parametros": [
                            "s",
                            "errors",
                            "charset"
                        ]
                    },
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "encode(splitchars=';, \\t', maxlinelen=None, linesep='\\n')"
                        ],
                        "parametros": [
                            "linesep",
                            "splitchars",
                            "maxlinelen"
                        ]
                    },
                    {
                        "nombre": "__eq__",
                        "sintaxis": [
                            "__eq__(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "__ne__",
                        "sintaxis": [
                            "__ne__(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Header"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.headerregistry",
        "funciones": [],
        "clases": [
            {
                "nombre": "Address",
                "constructores": [
                    {
                        "nombre": "Address",
                        "sintaxis": [
                            "class email.headerregistry.Address(display_name='', username='', domain='', addr_spec=None)"
                        ],
                        "parametros": [
                            "username",
                            "addr_spec",
                            "domain",
                            "display_name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "addr_spec",
                        "sintaxis": [
                            "addr_spec"
                        ]
                    },
                    {
                        "nombre": "display_name",
                        "sintaxis": [
                            "display_name"
                        ]
                    },
                    {
                        "nombre": "domain",
                        "sintaxis": [
                            "domain"
                        ]
                    },
                    {
                        "nombre": "username",
                        "sintaxis": [
                            "username"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Address"
                ]
            },
            {
                "nombre": "AddressHeader",
                "constructores": [
                    {
                        "nombre": "AddressHeader",
                        "sintaxis": [
                            "class email.headerregistry.AddressHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "addresses",
                        "sintaxis": [
                            "addresses"
                        ]
                    },
                    {
                        "nombre": "groups",
                        "sintaxis": [
                            "groups"
                        ]
                    }
                ],
                "sintaxis": [
                    "class AddressHeader"
                ]
            },
            {
                "nombre": "BaseHeader",
                "constructores": [
                    {
                        "nombre": "BaseHeader",
                        "sintaxis": [
                            "class email.headerregistry.BaseHeader(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fold",
                        "sintaxis": [
                            "fold(*, policy)"
                        ],
                        "parametros": [
                            "policy",
                            "*"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "defects",
                        "sintaxis": [
                            "defects"
                        ]
                    },
                    {
                        "nombre": "max_count",
                        "sintaxis": [
                            "max_count"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseHeader"
                ]
            },
            {
                "nombre": "ContentDispositionHeader",
                "constructores": [
                    {
                        "nombre": "ContentDispositionHeader",
                        "sintaxis": [
                            "class email.headerregistry.ContentDispositionHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "content_disposition",
                        "sintaxis": [
                            "content_disposition"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ContentDispositionHeader"
                ]
            },
            {
                "nombre": "ContentTransferEncoding",
                "constructores": [
                    {
                        "nombre": "ContentTransferEncoding",
                        "sintaxis": [
                            "class email.headerregistry.ContentTransferEncoding"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "cte",
                        "sintaxis": [
                            "cte"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ContentTransferEncoding"
                ]
            },
            {
                "nombre": "ContentTypeHeader",
                "constructores": [
                    {
                        "nombre": "ContentTypeHeader",
                        "sintaxis": [
                            "class email.headerregistry.ContentTypeHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "content_type",
                        "sintaxis": [
                            "content_type"
                        ]
                    },
                    {
                        "nombre": "maintype",
                        "sintaxis": [
                            "maintype"
                        ]
                    },
                    {
                        "nombre": "subtype",
                        "sintaxis": [
                            "subtype"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ContentTypeHeader"
                ]
            },
            {
                "nombre": "DateHeader",
                "constructores": [
                    {
                        "nombre": "DateHeader",
                        "sintaxis": [
                            "class email.headerregistry.DateHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "datetime",
                        "sintaxis": [
                            "datetime"
                        ]
                    }
                ],
                "sintaxis": [
                    "class DateHeader"
                ]
            },
            {
                "nombre": "Group",
                "constructores": [
                    {
                        "nombre": "Group",
                        "sintaxis": [
                            "class email.headerregistry.Group(display_name=None, addresses=None)"
                        ],
                        "parametros": [
                            "addresses",
                            "display_name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "addresses",
                        "sintaxis": [
                            "addresses"
                        ]
                    },
                    {
                        "nombre": "display_name",
                        "sintaxis": [
                            "display_name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Group"
                ]
            },
            {
                "nombre": "HeaderRegistry",
                "constructores": [
                    {
                        "nombre": "HeaderRegistry",
                        "sintaxis": [
                            "class email.headerregistry.HeaderRegistry(base_class=BaseHeader, default_class=UnstructuredHeader, use_default_map=True)"
                        ],
                        "parametros": [
                            "use_default_map",
                            "base_class",
                            "default_class"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "map_to_type",
                        "sintaxis": [
                            "map_to_type(self, name, cls)"
                        ],
                        "parametros": [
                            "cls",
                            "self",
                            "name"
                        ]
                    },
                    {
                        "nombre": "__call__",
                        "sintaxis": [
                            "__call__(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "__getitem__",
                        "sintaxis": [
                            "__getitem__(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HeaderRegistry"
                ]
            },
            {
                "nombre": "MIMEVersionHeader",
                "constructores": [
                    {
                        "nombre": "MIMEVersionHeader",
                        "sintaxis": [
                            "class email.headerregistry.MIMEVersionHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "major",
                        "sintaxis": [
                            "major"
                        ]
                    },
                    {
                        "nombre": "minor",
                        "sintaxis": [
                            "minor"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class MIMEVersionHeader"
                ]
            },
            {
                "nombre": "ParameterizedMIMEHeader",
                "constructores": [
                    {
                        "nombre": "ParameterizedMIMEHeader",
                        "sintaxis": [
                            "class email.headerregistry.ParameterizedMIMEHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "params",
                        "sintaxis": [
                            "params"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ParameterizedMIMEHeader"
                ]
            },
            {
                "nombre": "SingleAddressHeader",
                "constructores": [
                    {
                        "nombre": "SingleAddressHeader",
                        "sintaxis": [
                            "class email.headerregistry.SingleAddressHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "address",
                        "sintaxis": [
                            "address"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SingleAddressHeader"
                ]
            },
            {
                "nombre": "UnstructuredHeader",
                "constructores": [
                    {
                        "nombre": "UnstructuredHeader",
                        "sintaxis": [
                            "class email.headerregistry.UnstructuredHeader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class UnstructuredHeader"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.iterators",
        "funciones": [
            {
                "nombre": "body_line_iterator",
                "sintaxis": [
                    "email.iterators.body_line_iterator(msg, decode=False)"
                ],
                "parametros": [
                    "decode",
                    "msg"
                ]
            },
            {
                "nombre": "typed_subpart_iterator",
                "sintaxis": [
                    "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)"
                ],
                "parametros": [
                    "subtype",
                    "msg",
                    "maintype"
                ]
            },
            {
                "nombre": "_structure",
                "sintaxis": [
                    "email.iterators._structure(msg, fp=None, level=0, include_default=False)"
                ],
                "parametros": [
                    "include_default",
                    "fp",
                    "msg",
                    "level"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.message",
        "funciones": [],
        "clases": [
            {
                "nombre": "EmailMessage",
                "constructores": [
                    {
                        "nombre": "EmailMessage",
                        "sintaxis": [
                            "class email.message.EmailMessage(policy=default)"
                        ],
                        "parametros": [
                            "policy"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_alternative",
                        "sintaxis": [
                            "add_alternative(*args, content_manager=None, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw",
                            "content_manager"
                        ]
                    },
                    {
                        "nombre": "add_attachment",
                        "sintaxis": [
                            "add_attachment(*args, content_manager=None, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw",
                            "content_manager"
                        ]
                    },
                    {
                        "nombre": "add_header",
                        "sintaxis": [
                            "add_header(_name, _value, **_params)"
                        ],
                        "parametros": [
                            "_name",
                            "_value",
                            "_params"
                        ]
                    },
                    {
                        "nombre": "add_related",
                        "sintaxis": [
                            "add_related(*args, content_manager=None, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw",
                            "content_manager"
                        ]
                    },
                    {
                        "nombre": "as_bytes",
                        "sintaxis": [
                            "as_bytes(unixfrom=False, policy=None)"
                        ],
                        "parametros": [
                            "policy",
                            "unixfrom"
                        ]
                    },
                    {
                        "nombre": "as_string",
                        "sintaxis": [
                            "as_string(unixfrom=False, maxheaderlen=None, policy=None)"
                        ],
                        "parametros": [
                            "maxheaderlen",
                            "unixfrom",
                            "policy"
                        ]
                    },
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "clear_content",
                        "sintaxis": [
                            "clear_content()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "del_param",
                        "sintaxis": [
                            "del_param(param, header='content-type', requote=True)"
                        ],
                        "parametros": [
                            "param",
                            "requote",
                            "header"
                        ]
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get(name, failobj=None)"
                        ],
                        "parametros": [
                            "failobj",
                            "name"
                        ]
                    },
                    {
                        "nombre": "get_all",
                        "sintaxis": [
                            "get_all(name, failobj=None)"
                        ],
                        "parametros": [
                            "failobj",
                            "name"
                        ]
                    },
                    {
                        "nombre": "get_body",
                        "sintaxis": [
                            "get_body(preferencelist='related', 'html', 'plain')"
                        ],
                        "parametros": [
                            "preferencelist"
                        ]
                    },
                    {
                        "nombre": "get_boundary",
                        "sintaxis": [
                            "get_boundary(failobj=None)"
                        ],
                        "parametros": [
                            "failobj"
                        ]
                    },
                    {
                        "nombre": "get_charsets",
                        "sintaxis": [
                            "get_charsets(failobj=None)"
                        ],
                        "parametros": [
                            "failobj"
                        ]
                    },
                    {
                        "nombre": "get_content",
                        "sintaxis": [
                            "get_content(*args, content_manager=None, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw",
                            "content_manager"
                        ]
                    },
                    {
                        "nombre": "get_content_charset",
                        "sintaxis": [
                            "get_content_charset(failobj=None)"
                        ],
                        "parametros": [
                            "failobj"
                        ]
                    },
                    {
                        "nombre": "get_content_disposition",
                        "sintaxis": [
                            "get_content_disposition()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_content_maintype",
                        "sintaxis": [
                            "get_content_maintype()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_content_subtype",
                        "sintaxis": [
                            "get_content_subtype()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_content_type",
                        "sintaxis": [
                            "get_content_type()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_default_type",
                        "sintaxis": [
                            "get_default_type()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "get_filename(failobj=None)"
                        ],
                        "parametros": [
                            "failobj"
                        ]
                    },
                    {
                        "nombre": "get_unixfrom",
                        "sintaxis": [
                            "get_unixfrom()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_attachment",
                        "sintaxis": [
                            "is_attachment()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_multipart",
                        "sintaxis": [
                            "is_multipart()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "items",
                        "sintaxis": [
                            "items()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iter_attachments",
                        "sintaxis": [
                            "iter_attachments()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iter_parts",
                        "sintaxis": [
                            "iter_parts()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "keys",
                        "sintaxis": [
                            "keys()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "make_alternative",
                        "sintaxis": [
                            "make_alternative(boundary=None)"
                        ],
                        "parametros": [
                            "boundary"
                        ]
                    },
                    {
                        "nombre": "make_mixed",
                        "sintaxis": [
                            "make_mixed(boundary=None)"
                        ],
                        "parametros": [
                            "boundary"
                        ]
                    },
                    {
                        "nombre": "make_related",
                        "sintaxis": [
                            "make_related(boundary=None)"
                        ],
                        "parametros": [
                            "boundary"
                        ]
                    },
                    {
                        "nombre": "replace_header",
                        "sintaxis": [
                            "replace_header(_name, _value)"
                        ],
                        "parametros": [
                            "_name",
                            "_value"
                        ]
                    },
                    {
                        "nombre": "set_boundary",
                        "sintaxis": [
                            "set_boundary(boundary)"
                        ],
                        "parametros": [
                            "boundary"
                        ]
                    },
                    {
                        "nombre": "set_content",
                        "sintaxis": [
                            "set_content(*args, content_manager=None, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw",
                            "content_manager"
                        ]
                    },
                    {
                        "nombre": "set_default_type",
                        "sintaxis": [
                            "set_default_type(ctype)"
                        ],
                        "parametros": [
                            "ctype"
                        ]
                    },
                    {
                        "nombre": "set_param",
                        "sintaxis": [
                            "set_param(param, value, header='Content-Type', requote=True, charset=None, language='', replace=False)"
                        ],
                        "parametros": [
                            "requote",
                            "param",
                            "value",
                            "header",
                            "charset",
                            "language",
                            "replace"
                        ]
                    },
                    {
                        "nombre": "set_unixfrom",
                        "sintaxis": [
                            "set_unixfrom(unixfrom)"
                        ],
                        "parametros": [
                            "unixfrom"
                        ]
                    },
                    {
                        "nombre": "values",
                        "sintaxis": [
                            "values()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "walk",
                        "sintaxis": [
                            "walk()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__bytes__",
                        "sintaxis": [
                            "__bytes__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__contains__",
                        "sintaxis": [
                            "__contains__(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "__delitem__",
                        "sintaxis": [
                            "__delitem__(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "__getitem__",
                        "sintaxis": [
                            "__getitem__(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "__len__",
                        "sintaxis": [
                            "__len__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__setitem__",
                        "sintaxis": [
                            "__setitem__(name, val)"
                        ],
                        "parametros": [
                            "val",
                            "name"
                        ]
                    },
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "defects",
                        "sintaxis": [
                            "defects"
                        ]
                    },
                    {
                        "nombre": "epilogue",
                        "sintaxis": [
                            "epilogue"
                        ]
                    },
                    {
                        "nombre": "preamble",
                        "sintaxis": [
                            "preamble"
                        ]
                    }
                ],
                "sintaxis": [
                    "class EmailMessage"
                ]
            },
            {
                "nombre": "MIMEPart",
                "constructores": [
                    {
                        "nombre": "MIMEPart",
                        "sintaxis": [
                            "class email.message.MIMEPart(policy=default)"
                        ],
                        "parametros": [
                            "policy"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEPart"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.mime",
        "funciones": [],
        "clases": [
            {
                "nombre": "MIMEApplication",
                "constructores": [
                    {
                        "nombre": "MIMEApplication",
                        "sintaxis": [
                            "class email.mime.application.MIMEApplication(_data, _subtype='octet-stream', _encoder=email.encoders.encode_base64, *, policy=compat32, **_params)"
                        ],
                        "parametros": [
                            "policy",
                            "_params",
                            "*",
                            "_encoder",
                            "_data",
                            "_subtype"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEApplication"
                ]
            },
            {
                "nombre": "MIMEAudio",
                "constructores": [
                    {
                        "nombre": "MIMEAudio",
                        "sintaxis": [
                            "class email.mime.audio.MIMEAudio(_audiodata, _subtype=None, _encoder=email.encoders.encode_base64, *, policy=compat32, **_params)"
                        ],
                        "parametros": [
                            "policy",
                            "_params",
                            "*",
                            "_encoder",
                            "_audiodata",
                            "_subtype"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEAudio"
                ]
            },
            {
                "nombre": "MIMEBase",
                "constructores": [
                    {
                        "nombre": "MIMEBase",
                        "sintaxis": [
                            "class email.mime.base.MIMEBase(_maintype, _subtype, *, policy=compat32, **_params)"
                        ],
                        "parametros": [
                            "policy",
                            "_params",
                            "*",
                            "_maintype",
                            "_subtype"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEBase"
                ]
            },
            {
                "nombre": "MIMEImage",
                "constructores": [
                    {
                        "nombre": "MIMEImage",
                        "sintaxis": [
                            "class email.mime.image.MIMEImage(_imagedata, _subtype=None, _encoder=email.encoders.encode_base64, *, policy=compat32, **_params)"
                        ],
                        "parametros": [
                            "policy",
                            "_params",
                            "*",
                            "_imagedata",
                            "_encoder",
                            "_subtype"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEImage"
                ]
            },
            {
                "nombre": "MIMEMessage",
                "constructores": [
                    {
                        "nombre": "MIMEMessage",
                        "sintaxis": [
                            "class email.mime.message.MIMEMessage(_msg, _subtype='rfc822', *, policy=compat32)"
                        ],
                        "parametros": [
                            "policy",
                            "_subtype",
                            "_msg",
                            "*"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEMessage"
                ]
            },
            {
                "nombre": "MIMEMultipart",
                "constructores": [
                    {
                        "nombre": "MIMEMultipart",
                        "sintaxis": [
                            "class email.mime.multipart.MIMEMultipart(_subtype='mixed', boundary=None, _subparts=None, *, policy=compat32, **_params)"
                        ],
                        "parametros": [
                            "policy",
                            "boundary",
                            "_params",
                            "*",
                            "_subtype",
                            "_subparts"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEMultipart"
                ]
            },
            {
                "nombre": "MIMENonMultipart",
                "constructores": [
                    {
                        "nombre": "MIMENonMultipart",
                        "sintaxis": [
                            "class email.mime.nonmultipart.MIMENonMultipart"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMENonMultipart"
                ]
            },
            {
                "nombre": "MIMEText",
                "constructores": [
                    {
                        "nombre": "MIMEText",
                        "sintaxis": [
                            "class email.mime.text.MIMEText(_text, _subtype='plain', _charset=None, *, policy=compat32)"
                        ],
                        "parametros": [
                            "policy",
                            "*",
                            "_text",
                            "_subtype",
                            "_charset"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MIMEText"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.parser",
        "funciones": [
            {
                "nombre": "message_from_binary_file",
                "sintaxis": [
                    "email.message_from_binary_file(fp, _class=None, *, policy=policy.compat32)"
                ],
                "parametros": [
                    "_class",
                    "*",
                    "fp",
                    "policy"
                ]
            },
            {
                "nombre": "message_from_bytes",
                "sintaxis": [
                    "email.message_from_bytes(s, _class=None, *, policy=policy.compat32)"
                ],
                "parametros": [
                    "s",
                    "*",
                    "_class",
                    "policy"
                ]
            },
            {
                "nombre": "message_from_file",
                "sintaxis": [
                    "email.message_from_file(fp, _class=None, *, policy=policy.compat32)"
                ],
                "parametros": [
                    "_class",
                    "*",
                    "fp",
                    "policy"
                ]
            },
            {
                "nombre": "message_from_string",
                "sintaxis": [
                    "email.message_from_string(s, _class=None, *, policy=policy.compat32)"
                ],
                "parametros": [
                    "s",
                    "*",
                    "_class",
                    "policy"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BytesFeedParser",
                "constructores": [
                    {
                        "nombre": "BytesFeedParser",
                        "sintaxis": [
                            "class email.parser.BytesFeedParser(_factory=None, *, policy=policy.compat32)"
                        ],
                        "parametros": [
                            "policy",
                            "*",
                            "_factory"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "feed",
                        "sintaxis": [
                            "feed(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BytesFeedParser"
                ]
            },
            {
                "nombre": "BytesHeaderParser",
                "constructores": [
                    {
                        "nombre": "BytesHeaderParser",
                        "sintaxis": [
                            "class email.parser.BytesHeaderParser(_class=None, *, policy=policy.compat32)"
                        ],
                        "parametros": [
                            "_class",
                            "*",
                            "policy"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BytesHeaderParser"
                ]
            },
            {
                "nombre": "BytesParser",
                "constructores": [
                    {
                        "nombre": "BytesParser",
                        "sintaxis": [
                            "class email.parser.BytesParser(_class=None, *, policy=policy.compat32)"
                        ],
                        "parametros": [
                            "_class",
                            "*",
                            "policy"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "parse",
                        "sintaxis": [
                            "parse(fp, headersonly=False)"
                        ],
                        "parametros": [
                            "fp",
                            "headersonly"
                        ]
                    },
                    {
                        "nombre": "parsebytes",
                        "sintaxis": [
                            "parsebytes(bytes, headersonly=False)"
                        ],
                        "parametros": [
                            "bytes",
                            "headersonly"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BytesParser"
                ]
            },
            {
                "nombre": "FeedParser",
                "constructores": [
                    {
                        "nombre": "FeedParser",
                        "sintaxis": [
                            "class email.parser.FeedParser(_factory=None, *, policy=policy.compat32)"
                        ],
                        "parametros": [
                            "policy",
                            "*",
                            "_factory"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FeedParser"
                ]
            },
            {
                "nombre": "HeaderParser",
                "constructores": [
                    {
                        "nombre": "HeaderParser",
                        "sintaxis": [
                            "class email.parser.HeaderParser(_class=None, *, policy=policy.compat32)"
                        ],
                        "parametros": [
                            "_class",
                            "*",
                            "policy"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HeaderParser"
                ]
            },
            {
                "nombre": "Parser",
                "constructores": [
                    {
                        "nombre": "Parser",
                        "sintaxis": [
                            "class email.parser.Parser(_class=None, *, policy=policy.compat32)"
                        ],
                        "parametros": [
                            "_class",
                            "*",
                            "policy"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "parse",
                        "sintaxis": [
                            "parse(fp, headersonly=False)"
                        ],
                        "parametros": [
                            "fp",
                            "headersonly"
                        ]
                    },
                    {
                        "nombre": "parsestr",
                        "sintaxis": [
                            "parsestr(text, headersonly=False)"
                        ],
                        "parametros": [
                            "headersonly",
                            "text"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Parser"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "email.policy",
        "funciones": [],
        "clases": [
            {
                "nombre": "Compat32",
                "constructores": [
                    {
                        "nombre": "Compat32",
                        "sintaxis": [
                            "class email.policy.Compat32(**kw)"
                        ],
                        "parametros": [
                            "kw"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fold",
                        "sintaxis": [
                            "fold(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "fold_binary",
                        "sintaxis": [
                            "fold_binary(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "header_fetch_parse",
                        "sintaxis": [
                            "header_fetch_parse(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "header_source_parse",
                        "sintaxis": [
                            "header_source_parse(sourcelines)"
                        ],
                        "parametros": [
                            "sourcelines"
                        ]
                    },
                    {
                        "nombre": "header_store_parse",
                        "sintaxis": [
                            "header_store_parse(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "mangle_from_",
                        "sintaxis": [
                            "mangle_from_"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Compat32"
                ]
            },
            {
                "nombre": "EmailPolicy",
                "constructores": [
                    {
                        "nombre": "EmailPolicy",
                        "sintaxis": [
                            "class email.policy.EmailPolicy(**kw)"
                        ],
                        "parametros": [
                            "kw"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fold",
                        "sintaxis": [
                            "fold(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "fold_binary",
                        "sintaxis": [
                            "fold_binary(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "header_fetch_parse",
                        "sintaxis": [
                            "header_fetch_parse(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "header_max_count",
                        "sintaxis": [
                            "header_max_count(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "header_source_parse",
                        "sintaxis": [
                            "header_source_parse(sourcelines)"
                        ],
                        "parametros": [
                            "sourcelines"
                        ]
                    },
                    {
                        "nombre": "header_store_parse",
                        "sintaxis": [
                            "header_store_parse(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "content_manager",
                        "sintaxis": [
                            "content_manager"
                        ]
                    },
                    {
                        "nombre": "header_factory",
                        "sintaxis": [
                            "header_factory"
                        ]
                    },
                    {
                        "nombre": "refold_source",
                        "sintaxis": [
                            "refold_source"
                        ]
                    },
                    {
                        "nombre": "utf8",
                        "sintaxis": [
                            "utf8"
                        ]
                    }
                ],
                "sintaxis": [
                    "class EmailPolicy"
                ]
            },
            {
                "nombre": "Policy",
                "constructores": [
                    {
                        "nombre": "Policy",
                        "sintaxis": [
                            "class email.policy.Policy(**kw)"
                        ],
                        "parametros": [
                            "kw"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "clone",
                        "sintaxis": [
                            "clone(**kw)"
                        ],
                        "parametros": [
                            "kw"
                        ]
                    },
                    {
                        "nombre": "fold",
                        "sintaxis": [
                            "fold(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "fold_binary",
                        "sintaxis": [
                            "fold_binary(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "handle_defect",
                        "sintaxis": [
                            "handle_defect(obj, defect)"
                        ],
                        "parametros": [
                            "defect",
                            "obj"
                        ]
                    },
                    {
                        "nombre": "header_fetch_parse",
                        "sintaxis": [
                            "header_fetch_parse(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "header_max_count",
                        "sintaxis": [
                            "header_max_count(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "header_source_parse",
                        "sintaxis": [
                            "header_source_parse(sourcelines)"
                        ],
                        "parametros": [
                            "sourcelines"
                        ]
                    },
                    {
                        "nombre": "header_store_parse",
                        "sintaxis": [
                            "header_store_parse(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "register_defect",
                        "sintaxis": [
                            "register_defect(obj, defect)"
                        ],
                        "parametros": [
                            "defect",
                            "obj"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "cte_type",
                        "sintaxis": [
                            "cte_type"
                        ]
                    },
                    {
                        "nombre": "linesep",
                        "sintaxis": [
                            "linesep"
                        ]
                    },
                    {
                        "nombre": "mangle_from_",
                        "sintaxis": [
                            "mangle_from_"
                        ]
                    },
                    {
                        "nombre": "max_line_length",
                        "sintaxis": [
                            "max_line_length"
                        ]
                    },
                    {
                        "nombre": "message_factory",
                        "sintaxis": [
                            "message_factory"
                        ]
                    },
                    {
                        "nombre": "raise_on_defect",
                        "sintaxis": [
                            "raise_on_defect"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Policy"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "compat32",
                "sintaxis": [
                    "email.policy.compat32"
                ]
            },
            {
                "nombre": "default",
                "sintaxis": [
                    "email.policy.default"
                ]
            },
            {
                "nombre": "HTTP",
                "sintaxis": [
                    "email.policy.HTTP"
                ]
            },
            {
                "nombre": "SMTP",
                "sintaxis": [
                    "email.policy.SMTP"
                ]
            },
            {
                "nombre": "SMTPUTF8",
                "sintaxis": [
                    "email.policy.SMTPUTF8"
                ]
            },
            {
                "nombre": "strict",
                "sintaxis": [
                    "email.policy.strict"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "email.utils",
        "funciones": [
            {
                "nombre": "collapse_rfc2231_value",
                "sintaxis": [
                    "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')"
                ],
                "parametros": [
                    "fallback_charset",
                    "errors",
                    "value"
                ]
            },
            {
                "nombre": "decode_params",
                "sintaxis": [
                    "email.utils.decode_params(params)"
                ],
                "parametros": [
                    "params"
                ]
            },
            {
                "nombre": "decode_rfc2231",
                "sintaxis": [
                    "email.utils.decode_rfc2231(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "encode_rfc2231",
                "sintaxis": [
                    "email.utils.encode_rfc2231(s, charset=None, language=None)"
                ],
                "parametros": [
                    "s",
                    "language",
                    "charset"
                ]
            },
            {
                "nombre": "formataddr",
                "sintaxis": [
                    "email.utils.formataddr(pair, charset='utf-8')"
                ],
                "parametros": [
                    "charset",
                    "pair"
                ]
            },
            {
                "nombre": "formatdate",
                "sintaxis": [
                    "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)"
                ],
                "parametros": [
                    "localtime",
                    "usegmt",
                    "timeval"
                ]
            },
            {
                "nombre": "format_datetime",
                "sintaxis": [
                    "email.utils.format_datetime(dt, usegmt=False)"
                ],
                "parametros": [
                    "usegmt",
                    "dt"
                ]
            },
            {
                "nombre": "getaddresses",
                "sintaxis": [
                    "email.utils.getaddresses(fieldvalues)"
                ],
                "parametros": [
                    "fieldvalues"
                ]
            },
            {
                "nombre": "localtime",
                "sintaxis": [
                    "email.utils.localtime(dt=None)"
                ],
                "parametros": [
                    "dt"
                ]
            },
            {
                "nombre": "make_msgid",
                "sintaxis": [
                    "email.utils.make_msgid(idstring=None, domain=None)"
                ],
                "parametros": [
                    "idstring",
                    "domain"
                ]
            },
            {
                "nombre": "mktime_tz",
                "sintaxis": [
                    "email.utils.mktime_tz(tuple)"
                ],
                "parametros": [
                    "tuple"
                ]
            },
            {
                "nombre": "parseaddr",
                "sintaxis": [
                    "email.utils.parseaddr(address)"
                ],
                "parametros": [
                    "address"
                ]
            },
            {
                "nombre": "parsedate",
                "sintaxis": [
                    "email.utils.parsedate(date)"
                ],
                "parametros": [
                    "date"
                ]
            },
            {
                "nombre": "parsedate_to_datetime",
                "sintaxis": [
                    "email.utils.parsedate_to_datetime(date)"
                ],
                "parametros": [
                    "date"
                ]
            },
            {
                "nombre": "parsedate_tz",
                "sintaxis": [
                    "email.utils.parsedate_tz(date)"
                ],
                "parametros": [
                    "date"
                ]
            },
            {
                "nombre": "quote",
                "sintaxis": [
                    "email.utils.quote(str)"
                ],
                "parametros": [
                    "str"
                ]
            },
            {
                "nombre": "unquote",
                "sintaxis": [
                    "email.utils.unquote(str)"
                ],
                "parametros": [
                    "str"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "encodings.idna",
        "funciones": [
            {
                "nombre": "nameprep",
                "sintaxis": [
                    "encodings.idna.nameprep(label)"
                ],
                "parametros": [
                    "label"
                ]
            },
            {
                "nombre": "ToASCII",
                "sintaxis": [
                    "encodings.idna.ToASCII(label)"
                ],
                "parametros": [
                    "label"
                ]
            },
            {
                "nombre": "ToUnicode",
                "sintaxis": [
                    "encodings.idna.ToUnicode(label)"
                ],
                "parametros": [
                    "label"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "encodings.mbcs",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "encodings.utf_8_sig",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "ensurepip",
        "funciones": [
            {
                "nombre": "bootstrap",
                "sintaxis": [
                    "ensurepip.bootstrap(root=None, upgrade=False, user=False, altinstall=False, default_pip=False, verbosity=0)"
                ],
                "parametros": [
                    "upgrade",
                    "verbosity",
                    "altinstall",
                    "root",
                    "user",
                    "default_pip"
                ]
            },
            {
                "nombre": "version",
                "sintaxis": [
                    "ensurepip.version()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "enum",
        "funciones": [
            {
                "nombre": "unique",
                "sintaxis": [
                    "enum.unique()"
                ],
                "parametros": []
            },
            {
                "nombre": "unique",
                "sintaxis": [
                    "@enum.unique"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "auto",
                "constructores": [
                    {
                        "nombre": "auto",
                        "sintaxis": [
                            "class enum.auto"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class auto"
                ]
            },
            {
                "nombre": "Enum",
                "constructores": [
                    {
                        "nombre": "Enum",
                        "sintaxis": [
                            "class enum.Enum"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Enum"
                ]
            },
            {
                "nombre": "Flag",
                "constructores": [
                    {
                        "nombre": "Flag",
                        "sintaxis": [
                            "class enum.Flag"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Flag"
                ]
            },
            {
                "nombre": "IntEnum",
                "constructores": [
                    {
                        "nombre": "IntEnum",
                        "sintaxis": [
                            "class enum.IntEnum"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IntEnum"
                ]
            },
            {
                "nombre": "IntFlag",
                "constructores": [
                    {
                        "nombre": "IntFlag",
                        "sintaxis": [
                            "class enum.IntFlag"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IntFlag"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "errno",
        "funciones": [],
        "clases": [],
        "constantes": [
            {
                "nombre": "E2BIG",
                "sintaxis": [
                    "errno.E2BIG"
                ]
            },
            {
                "nombre": "EACCES",
                "sintaxis": [
                    "errno.EACCES"
                ]
            },
            {
                "nombre": "EADDRINUSE",
                "sintaxis": [
                    "errno.EADDRINUSE"
                ]
            },
            {
                "nombre": "EADDRNOTAVAIL",
                "sintaxis": [
                    "errno.EADDRNOTAVAIL"
                ]
            },
            {
                "nombre": "EADV",
                "sintaxis": [
                    "errno.EADV"
                ]
            },
            {
                "nombre": "EAFNOSUPPORT",
                "sintaxis": [
                    "errno.EAFNOSUPPORT"
                ]
            },
            {
                "nombre": "EAGAIN",
                "sintaxis": [
                    "errno.EAGAIN"
                ]
            },
            {
                "nombre": "EALREADY",
                "sintaxis": [
                    "errno.EALREADY"
                ]
            },
            {
                "nombre": "EBADE",
                "sintaxis": [
                    "errno.EBADE"
                ]
            },
            {
                "nombre": "EBADF",
                "sintaxis": [
                    "errno.EBADF"
                ]
            },
            {
                "nombre": "EBADFD",
                "sintaxis": [
                    "errno.EBADFD"
                ]
            },
            {
                "nombre": "EBADMSG",
                "sintaxis": [
                    "errno.EBADMSG"
                ]
            },
            {
                "nombre": "EBADR",
                "sintaxis": [
                    "errno.EBADR"
                ]
            },
            {
                "nombre": "EBADRQC",
                "sintaxis": [
                    "errno.EBADRQC"
                ]
            },
            {
                "nombre": "EBADSLT",
                "sintaxis": [
                    "errno.EBADSLT"
                ]
            },
            {
                "nombre": "EBFONT",
                "sintaxis": [
                    "errno.EBFONT"
                ]
            },
            {
                "nombre": "EBUSY",
                "sintaxis": [
                    "errno.EBUSY"
                ]
            },
            {
                "nombre": "ECHILD",
                "sintaxis": [
                    "errno.ECHILD"
                ]
            },
            {
                "nombre": "ECHRNG",
                "sintaxis": [
                    "errno.ECHRNG"
                ]
            },
            {
                "nombre": "ECOMM",
                "sintaxis": [
                    "errno.ECOMM"
                ]
            },
            {
                "nombre": "ECONNABORTED",
                "sintaxis": [
                    "errno.ECONNABORTED"
                ]
            },
            {
                "nombre": "ECONNREFUSED",
                "sintaxis": [
                    "errno.ECONNREFUSED"
                ]
            },
            {
                "nombre": "ECONNRESET",
                "sintaxis": [
                    "errno.ECONNRESET"
                ]
            },
            {
                "nombre": "EDEADLK",
                "sintaxis": [
                    "errno.EDEADLK"
                ]
            },
            {
                "nombre": "EDEADLOCK",
                "sintaxis": [
                    "errno.EDEADLOCK"
                ]
            },
            {
                "nombre": "EDESTADDRREQ",
                "sintaxis": [
                    "errno.EDESTADDRREQ"
                ]
            },
            {
                "nombre": "EDOM",
                "sintaxis": [
                    "errno.EDOM"
                ]
            },
            {
                "nombre": "EDOTDOT",
                "sintaxis": [
                    "errno.EDOTDOT"
                ]
            },
            {
                "nombre": "EDQUOT",
                "sintaxis": [
                    "errno.EDQUOT"
                ]
            },
            {
                "nombre": "EEXIST",
                "sintaxis": [
                    "errno.EEXIST"
                ]
            },
            {
                "nombre": "EFAULT",
                "sintaxis": [
                    "errno.EFAULT"
                ]
            },
            {
                "nombre": "EFBIG",
                "sintaxis": [
                    "errno.EFBIG"
                ]
            },
            {
                "nombre": "EHOSTDOWN",
                "sintaxis": [
                    "errno.EHOSTDOWN"
                ]
            },
            {
                "nombre": "EHOSTUNREACH",
                "sintaxis": [
                    "errno.EHOSTUNREACH"
                ]
            },
            {
                "nombre": "EIDRM",
                "sintaxis": [
                    "errno.EIDRM"
                ]
            },
            {
                "nombre": "EILSEQ",
                "sintaxis": [
                    "errno.EILSEQ"
                ]
            },
            {
                "nombre": "EINPROGRESS",
                "sintaxis": [
                    "errno.EINPROGRESS"
                ]
            },
            {
                "nombre": "EINTR",
                "sintaxis": [
                    "errno.EINTR"
                ]
            },
            {
                "nombre": "EINVAL",
                "sintaxis": [
                    "errno.EINVAL"
                ]
            },
            {
                "nombre": "EIO",
                "sintaxis": [
                    "errno.EIO"
                ]
            },
            {
                "nombre": "EISCONN",
                "sintaxis": [
                    "errno.EISCONN"
                ]
            },
            {
                "nombre": "EISDIR",
                "sintaxis": [
                    "errno.EISDIR"
                ]
            },
            {
                "nombre": "EISNAM",
                "sintaxis": [
                    "errno.EISNAM"
                ]
            },
            {
                "nombre": "EL2HLT",
                "sintaxis": [
                    "errno.EL2HLT"
                ]
            },
            {
                "nombre": "EL2NSYNC",
                "sintaxis": [
                    "errno.EL2NSYNC"
                ]
            },
            {
                "nombre": "EL3HLT",
                "sintaxis": [
                    "errno.EL3HLT"
                ]
            },
            {
                "nombre": "EL3RST",
                "sintaxis": [
                    "errno.EL3RST"
                ]
            },
            {
                "nombre": "ELIBACC",
                "sintaxis": [
                    "errno.ELIBACC"
                ]
            },
            {
                "nombre": "ELIBBAD",
                "sintaxis": [
                    "errno.ELIBBAD"
                ]
            },
            {
                "nombre": "ELIBEXEC",
                "sintaxis": [
                    "errno.ELIBEXEC"
                ]
            },
            {
                "nombre": "ELIBMAX",
                "sintaxis": [
                    "errno.ELIBMAX"
                ]
            },
            {
                "nombre": "ELIBSCN",
                "sintaxis": [
                    "errno.ELIBSCN"
                ]
            },
            {
                "nombre": "ELNRNG",
                "sintaxis": [
                    "errno.ELNRNG"
                ]
            },
            {
                "nombre": "ELOOP",
                "sintaxis": [
                    "errno.ELOOP"
                ]
            },
            {
                "nombre": "EMFILE",
                "sintaxis": [
                    "errno.EMFILE"
                ]
            },
            {
                "nombre": "EMLINK",
                "sintaxis": [
                    "errno.EMLINK"
                ]
            },
            {
                "nombre": "EMSGSIZE",
                "sintaxis": [
                    "errno.EMSGSIZE"
                ]
            },
            {
                "nombre": "EMULTIHOP",
                "sintaxis": [
                    "errno.EMULTIHOP"
                ]
            },
            {
                "nombre": "ENAMETOOLONG",
                "sintaxis": [
                    "errno.ENAMETOOLONG"
                ]
            },
            {
                "nombre": "ENAVAIL",
                "sintaxis": [
                    "errno.ENAVAIL"
                ]
            },
            {
                "nombre": "ENETDOWN",
                "sintaxis": [
                    "errno.ENETDOWN"
                ]
            },
            {
                "nombre": "ENETRESET",
                "sintaxis": [
                    "errno.ENETRESET"
                ]
            },
            {
                "nombre": "ENETUNREACH",
                "sintaxis": [
                    "errno.ENETUNREACH"
                ]
            },
            {
                "nombre": "ENFILE",
                "sintaxis": [
                    "errno.ENFILE"
                ]
            },
            {
                "nombre": "ENOANO",
                "sintaxis": [
                    "errno.ENOANO"
                ]
            },
            {
                "nombre": "ENOBUFS",
                "sintaxis": [
                    "errno.ENOBUFS"
                ]
            },
            {
                "nombre": "ENOCSI",
                "sintaxis": [
                    "errno.ENOCSI"
                ]
            },
            {
                "nombre": "ENODATA",
                "sintaxis": [
                    "errno.ENODATA"
                ]
            },
            {
                "nombre": "ENODEV",
                "sintaxis": [
                    "errno.ENODEV"
                ]
            },
            {
                "nombre": "ENOENT",
                "sintaxis": [
                    "errno.ENOENT"
                ]
            },
            {
                "nombre": "ENOEXEC",
                "sintaxis": [
                    "errno.ENOEXEC"
                ]
            },
            {
                "nombre": "ENOLCK",
                "sintaxis": [
                    "errno.ENOLCK"
                ]
            },
            {
                "nombre": "ENOLINK",
                "sintaxis": [
                    "errno.ENOLINK"
                ]
            },
            {
                "nombre": "ENOMEM",
                "sintaxis": [
                    "errno.ENOMEM"
                ]
            },
            {
                "nombre": "ENOMSG",
                "sintaxis": [
                    "errno.ENOMSG"
                ]
            },
            {
                "nombre": "ENONET",
                "sintaxis": [
                    "errno.ENONET"
                ]
            },
            {
                "nombre": "ENOPKG",
                "sintaxis": [
                    "errno.ENOPKG"
                ]
            },
            {
                "nombre": "ENOPROTOOPT",
                "sintaxis": [
                    "errno.ENOPROTOOPT"
                ]
            },
            {
                "nombre": "ENOSPC",
                "sintaxis": [
                    "errno.ENOSPC"
                ]
            },
            {
                "nombre": "ENOSR",
                "sintaxis": [
                    "errno.ENOSR"
                ]
            },
            {
                "nombre": "ENOSTR",
                "sintaxis": [
                    "errno.ENOSTR"
                ]
            },
            {
                "nombre": "ENOSYS",
                "sintaxis": [
                    "errno.ENOSYS"
                ]
            },
            {
                "nombre": "ENOTBLK",
                "sintaxis": [
                    "errno.ENOTBLK"
                ]
            },
            {
                "nombre": "ENOTCONN",
                "sintaxis": [
                    "errno.ENOTCONN"
                ]
            },
            {
                "nombre": "ENOTDIR",
                "sintaxis": [
                    "errno.ENOTDIR"
                ]
            },
            {
                "nombre": "ENOTEMPTY",
                "sintaxis": [
                    "errno.ENOTEMPTY"
                ]
            },
            {
                "nombre": "ENOTNAM",
                "sintaxis": [
                    "errno.ENOTNAM"
                ]
            },
            {
                "nombre": "ENOTSOCK",
                "sintaxis": [
                    "errno.ENOTSOCK"
                ]
            },
            {
                "nombre": "ENOTTY",
                "sintaxis": [
                    "errno.ENOTTY"
                ]
            },
            {
                "nombre": "ENOTUNIQ",
                "sintaxis": [
                    "errno.ENOTUNIQ"
                ]
            },
            {
                "nombre": "ENXIO",
                "sintaxis": [
                    "errno.ENXIO"
                ]
            },
            {
                "nombre": "EOPNOTSUPP",
                "sintaxis": [
                    "errno.EOPNOTSUPP"
                ]
            },
            {
                "nombre": "EOVERFLOW",
                "sintaxis": [
                    "errno.EOVERFLOW"
                ]
            },
            {
                "nombre": "EPERM",
                "sintaxis": [
                    "errno.EPERM"
                ]
            },
            {
                "nombre": "EPFNOSUPPORT",
                "sintaxis": [
                    "errno.EPFNOSUPPORT"
                ]
            },
            {
                "nombre": "EPIPE",
                "sintaxis": [
                    "errno.EPIPE"
                ]
            },
            {
                "nombre": "EPROTO",
                "sintaxis": [
                    "errno.EPROTO"
                ]
            },
            {
                "nombre": "EPROTONOSUPPORT",
                "sintaxis": [
                    "errno.EPROTONOSUPPORT"
                ]
            },
            {
                "nombre": "EPROTOTYPE",
                "sintaxis": [
                    "errno.EPROTOTYPE"
                ]
            },
            {
                "nombre": "ERANGE",
                "sintaxis": [
                    "errno.ERANGE"
                ]
            },
            {
                "nombre": "EREMCHG",
                "sintaxis": [
                    "errno.EREMCHG"
                ]
            },
            {
                "nombre": "EREMOTE",
                "sintaxis": [
                    "errno.EREMOTE"
                ]
            },
            {
                "nombre": "EREMOTEIO",
                "sintaxis": [
                    "errno.EREMOTEIO"
                ]
            },
            {
                "nombre": "ERESTART",
                "sintaxis": [
                    "errno.ERESTART"
                ]
            },
            {
                "nombre": "EROFS",
                "sintaxis": [
                    "errno.EROFS"
                ]
            },
            {
                "nombre": "errorcode",
                "sintaxis": [
                    "errno.errorcode"
                ]
            },
            {
                "nombre": "ESHUTDOWN",
                "sintaxis": [
                    "errno.ESHUTDOWN"
                ]
            },
            {
                "nombre": "ESOCKTNOSUPPORT",
                "sintaxis": [
                    "errno.ESOCKTNOSUPPORT"
                ]
            },
            {
                "nombre": "ESPIPE",
                "sintaxis": [
                    "errno.ESPIPE"
                ]
            },
            {
                "nombre": "ESRCH",
                "sintaxis": [
                    "errno.ESRCH"
                ]
            },
            {
                "nombre": "ESRMNT",
                "sintaxis": [
                    "errno.ESRMNT"
                ]
            },
            {
                "nombre": "ESTALE",
                "sintaxis": [
                    "errno.ESTALE"
                ]
            },
            {
                "nombre": "ESTRPIPE",
                "sintaxis": [
                    "errno.ESTRPIPE"
                ]
            },
            {
                "nombre": "ETIME",
                "sintaxis": [
                    "errno.ETIME"
                ]
            },
            {
                "nombre": "ETIMEDOUT",
                "sintaxis": [
                    "errno.ETIMEDOUT"
                ]
            },
            {
                "nombre": "ETOOMANYREFS",
                "sintaxis": [
                    "errno.ETOOMANYREFS"
                ]
            },
            {
                "nombre": "ETXTBSY",
                "sintaxis": [
                    "errno.ETXTBSY"
                ]
            },
            {
                "nombre": "EUCLEAN",
                "sintaxis": [
                    "errno.EUCLEAN"
                ]
            },
            {
                "nombre": "EUNATCH",
                "sintaxis": [
                    "errno.EUNATCH"
                ]
            },
            {
                "nombre": "EUSERS",
                "sintaxis": [
                    "errno.EUSERS"
                ]
            },
            {
                "nombre": "EWOULDBLOCK",
                "sintaxis": [
                    "errno.EWOULDBLOCK"
                ]
            },
            {
                "nombre": "EXDEV",
                "sintaxis": [
                    "errno.EXDEV"
                ]
            },
            {
                "nombre": "EXFULL",
                "sintaxis": [
                    "errno.EXFULL"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "faulthandler",
        "funciones": [
            {
                "nombre": "cancel_dump_traceback_later",
                "sintaxis": [
                    "faulthandler.cancel_dump_traceback_later()"
                ],
                "parametros": []
            },
            {
                "nombre": "disable",
                "sintaxis": [
                    "faulthandler.disable()"
                ],
                "parametros": []
            },
            {
                "nombre": "dump_traceback",
                "sintaxis": [
                    "faulthandler.dump_traceback(file=sys.stderr, all_threads=True)"
                ],
                "parametros": [
                    "file",
                    "all_threads"
                ]
            },
            {
                "nombre": "dump_traceback_later",
                "sintaxis": [
                    "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)"
                ],
                "parametros": [
                    "timeout",
                    "file",
                    "repeat",
                    "exit"
                ]
            },
            {
                "nombre": "enable",
                "sintaxis": [
                    "faulthandler.enable(file=sys.stderr, all_threads=True)"
                ],
                "parametros": [
                    "file",
                    "all_threads"
                ]
            },
            {
                "nombre": "is_enabled",
                "sintaxis": [
                    "faulthandler.is_enabled()"
                ],
                "parametros": []
            },
            {
                "nombre": "register",
                "sintaxis": [
                    "faulthandler.register(signum, file=sys.stderr, all_threads=True, chain=False)"
                ],
                "parametros": [
                    "signum",
                    "chain",
                    "file",
                    "all_threads"
                ]
            },
            {
                "nombre": "unregister",
                "sintaxis": [
                    "faulthandler.unregister(signum)"
                ],
                "parametros": [
                    "signum"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "fcntl",
        "funciones": [
            {
                "nombre": "fcntl",
                "sintaxis": [
                    "fcntl.fcntl(fd, cmd, arg=0)"
                ],
                "parametros": [
                    "fd",
                    "cmd",
                    "arg"
                ]
            },
            {
                "nombre": "flock",
                "sintaxis": [
                    "fcntl.flock(fd, operation)"
                ],
                "parametros": [
                    "fd",
                    "operation"
                ]
            },
            {
                "nombre": "ioctl",
                "sintaxis": [
                    "fcntl.ioctl(fd, request, arg=0, mutate_flag=True)"
                ],
                "parametros": [
                    "fd",
                    "arg",
                    "request",
                    "mutate_flag"
                ]
            },
            {
                "nombre": "lockf",
                "sintaxis": [
                    "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)"
                ],
                "parametros": [
                    "whence",
                    "start",
                    "len",
                    "cmd",
                    "fd"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "filecmp",
        "funciones": [
            {
                "nombre": "clear_cache",
                "sintaxis": [
                    "filecmp.clear_cache()"
                ],
                "parametros": []
            },
            {
                "nombre": "cmp",
                "sintaxis": [
                    "filecmp.cmp(f1, f2, shallow=True)"
                ],
                "parametros": [
                    "f2",
                    "shallow",
                    "f1"
                ]
            },
            {
                "nombre": "cmpfiles",
                "sintaxis": [
                    "filecmp.cmpfiles(dir1, dir2, common, shallow=True)"
                ],
                "parametros": [
                    "shallow",
                    "dir2",
                    "dir1",
                    "common"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "dircmp",
                "constructores": [
                    {
                        "nombre": "dircmp",
                        "sintaxis": [
                            "class filecmp.dircmp(a, b, ignore=None, hide=None)"
                        ],
                        "parametros": [
                            "hide",
                            "ignore",
                            "b",
                            "a"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "report",
                        "sintaxis": [
                            "report()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "report_full_closure",
                        "sintaxis": [
                            "report_full_closure()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "report_partial_closure",
                        "sintaxis": [
                            "report_partial_closure()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "common",
                        "sintaxis": [
                            "common"
                        ]
                    },
                    {
                        "nombre": "common_dirs",
                        "sintaxis": [
                            "common_dirs"
                        ]
                    },
                    {
                        "nombre": "common_files",
                        "sintaxis": [
                            "common_files"
                        ]
                    },
                    {
                        "nombre": "common_funny",
                        "sintaxis": [
                            "common_funny"
                        ]
                    },
                    {
                        "nombre": "diff_files",
                        "sintaxis": [
                            "diff_files"
                        ]
                    },
                    {
                        "nombre": "funny_files",
                        "sintaxis": [
                            "funny_files"
                        ]
                    },
                    {
                        "nombre": "left",
                        "sintaxis": [
                            "left"
                        ]
                    },
                    {
                        "nombre": "left_list",
                        "sintaxis": [
                            "left_list"
                        ]
                    },
                    {
                        "nombre": "left_only",
                        "sintaxis": [
                            "left_only"
                        ]
                    },
                    {
                        "nombre": "right",
                        "sintaxis": [
                            "right"
                        ]
                    },
                    {
                        "nombre": "right_list",
                        "sintaxis": [
                            "right_list"
                        ]
                    },
                    {
                        "nombre": "right_only",
                        "sintaxis": [
                            "right_only"
                        ]
                    },
                    {
                        "nombre": "same_files",
                        "sintaxis": [
                            "same_files"
                        ]
                    },
                    {
                        "nombre": "subdirs",
                        "sintaxis": [
                            "subdirs"
                        ]
                    }
                ],
                "sintaxis": [
                    "class dircmp"
                ]
            },
            {
                "nombre": "filecmp",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "DEFAULT_IGNORES",
                        "sintaxis": [
                            "filecmp.DEFAULT_IGNORES"
                        ]
                    }
                ],
                "sintaxis": [
                    "class filecmp"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "fileinput",
        "funciones": [
            {
                "nombre": "close",
                "sintaxis": [
                    "fileinput.close()"
                ],
                "parametros": []
            },
            {
                "nombre": "filelineno",
                "sintaxis": [
                    "fileinput.filelineno()"
                ],
                "parametros": []
            },
            {
                "nombre": "filename",
                "sintaxis": [
                    "fileinput.filename()"
                ],
                "parametros": []
            },
            {
                "nombre": "fileno",
                "sintaxis": [
                    "fileinput.fileno()"
                ],
                "parametros": []
            },
            {
                "nombre": "hook_compressed",
                "sintaxis": [
                    "fileinput.hook_compressed(filename, mode, *, encoding=None, errors=None)"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "errors",
                    "encoding",
                    "*"
                ]
            },
            {
                "nombre": "hook_encoded",
                "sintaxis": [
                    "fileinput.hook_encoded(encoding, errors=None)"
                ],
                "parametros": [
                    "encoding",
                    "errors"
                ]
            },
            {
                "nombre": "input",
                "sintaxis": [
                    "fileinput.input(files=None, inplace=False, backup='', *, mode='r', openhook=None, encoding=None, errors=None)"
                ],
                "parametros": [
                    "mode",
                    "encoding",
                    "errors",
                    "backup",
                    "inplace",
                    "openhook",
                    "*",
                    "files"
                ]
            },
            {
                "nombre": "isfirstline",
                "sintaxis": [
                    "fileinput.isfirstline()"
                ],
                "parametros": []
            },
            {
                "nombre": "isstdin",
                "sintaxis": [
                    "fileinput.isstdin()"
                ],
                "parametros": []
            },
            {
                "nombre": "lineno",
                "sintaxis": [
                    "fileinput.lineno()"
                ],
                "parametros": []
            },
            {
                "nombre": "nextfile",
                "sintaxis": [
                    "fileinput.nextfile()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "FileInput",
                "constructores": [
                    {
                        "nombre": "FileInput",
                        "sintaxis": [
                            "class fileinput.FileInput(files=None, inplace=False, backup='', *, mode='r', openhook=None, encoding=None, errors=None)"
                        ],
                        "parametros": [
                            "mode",
                            "encoding",
                            "errors",
                            "backup",
                            "inplace",
                            "openhook",
                            "*",
                            "files"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FileInput"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "fnmatch",
        "funciones": [
            {
                "nombre": "filter",
                "sintaxis": [
                    "fnmatch.filter(names, pattern)"
                ],
                "parametros": [
                    "pattern",
                    "names"
                ]
            },
            {
                "nombre": "fnmatch",
                "sintaxis": [
                    "fnmatch.fnmatch(filename, pattern)"
                ],
                "parametros": [
                    "filename",
                    "pattern"
                ]
            },
            {
                "nombre": "fnmatchcase",
                "sintaxis": [
                    "fnmatch.fnmatchcase(filename, pattern)"
                ],
                "parametros": [
                    "filename",
                    "pattern"
                ]
            },
            {
                "nombre": "translate",
                "sintaxis": [
                    "fnmatch.translate(pattern)"
                ],
                "parametros": [
                    "pattern"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "fractions",
        "funciones": [],
        "clases": [
            {
                "nombre": "Fraction",
                "constructores": [
                    {
                        "nombre": "Fraction",
                        "sintaxis": [
                            "class fractions.Fraction(decimal)",
                            "class fractions.Fraction(other_fraction)",
                            "class fractions.Fraction(numerator=0, denominator=1)",
                            "class fractions.Fraction(string)",
                            "class fractions.Fraction(float)"
                        ],
                        "parametros": [
                            "other_fraction",
                            "numerator",
                            "denominator",
                            "decimal",
                            "float",
                            "string"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "as_integer_ratio",
                        "sintaxis": [
                            "as_integer_ratio()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "from_decimal",
                        "sintaxis": [
                            "from_decimal(dec)"
                        ],
                        "parametros": [
                            "dec"
                        ]
                    },
                    {
                        "nombre": "from_float",
                        "sintaxis": [
                            "from_float(flt)"
                        ],
                        "parametros": [
                            "flt"
                        ]
                    },
                    {
                        "nombre": "limit_denominator",
                        "sintaxis": [
                            "limit_denominator(max_denominator=1000000)"
                        ],
                        "parametros": [
                            "max_denominator"
                        ]
                    },
                    {
                        "nombre": "__ceil__",
                        "sintaxis": [
                            "__ceil__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__floor__",
                        "sintaxis": [
                            "__floor__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__round__",
                        "sintaxis": [
                            "__round__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "denominator",
                        "sintaxis": [
                            "denominator"
                        ]
                    },
                    {
                        "nombre": "numerator",
                        "sintaxis": [
                            "numerator"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Fraction"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "ftplib",
        "funciones": [],
        "clases": [
            {
                "nombre": "FTP",
                "constructores": [
                    {
                        "nombre": "FTP",
                        "sintaxis": [
                            "class ftplib.FTP(host='', user='', passwd='', acct='', timeout=None, source_address=None, *, encoding='utf-8')"
                        ],
                        "parametros": [
                            "encoding",
                            "acct",
                            "passwd",
                            "source_address",
                            "timeout",
                            "host",
                            "*",
                            "user"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "abort",
                        "sintaxis": [
                            "FTP.abort()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "FTP.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "connect",
                        "sintaxis": [
                            "FTP.connect(host='', port=0, timeout=None, source_address=None)"
                        ],
                        "parametros": [
                            "host",
                            "timeout",
                            "source_address",
                            "port"
                        ]
                    },
                    {
                        "nombre": "cwd",
                        "sintaxis": [
                            "FTP.cwd(pathname)"
                        ],
                        "parametros": [
                            "pathname"
                        ]
                    },
                    {
                        "nombre": "delete",
                        "sintaxis": [
                            "FTP.delete(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "dir",
                        "sintaxis": [
                            "FTP.dir(argument[, ...])"
                        ],
                        "parametros": [
                            "...",
                            "argument"
                        ]
                    },
                    {
                        "nombre": "getwelcome",
                        "sintaxis": [
                            "FTP.getwelcome()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "login",
                        "sintaxis": [
                            "FTP.login(user='anonymous', passwd='', acct='')"
                        ],
                        "parametros": [
                            "passwd",
                            "user",
                            "acct"
                        ]
                    },
                    {
                        "nombre": "mkd",
                        "sintaxis": [
                            "FTP.mkd(pathname)"
                        ],
                        "parametros": [
                            "pathname"
                        ]
                    },
                    {
                        "nombre": "mlsd",
                        "sintaxis": [
                            "FTP.mlsd(path='', facts=[])"
                        ],
                        "parametros": [
                            "facts",
                            "path"
                        ]
                    },
                    {
                        "nombre": "nlst",
                        "sintaxis": [
                            "FTP.nlst(argument[, ...])"
                        ],
                        "parametros": [
                            "...",
                            "argument"
                        ]
                    },
                    {
                        "nombre": "ntransfercmd",
                        "sintaxis": [
                            "FTP.ntransfercmd(cmd, rest=None)"
                        ],
                        "parametros": [
                            "cmd",
                            "rest"
                        ]
                    },
                    {
                        "nombre": "pwd",
                        "sintaxis": [
                            "FTP.pwd()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "quit",
                        "sintaxis": [
                            "FTP.quit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "rename",
                        "sintaxis": [
                            "FTP.rename(fromname, toname)"
                        ],
                        "parametros": [
                            "toname",
                            "fromname"
                        ]
                    },
                    {
                        "nombre": "retrbinary",
                        "sintaxis": [
                            "FTP.retrbinary(cmd, callback, blocksize=8192, rest=None)"
                        ],
                        "parametros": [
                            "callback",
                            "cmd",
                            "rest",
                            "blocksize"
                        ]
                    },
                    {
                        "nombre": "retrlines",
                        "sintaxis": [
                            "FTP.retrlines(cmd, callback=None)"
                        ],
                        "parametros": [
                            "callback",
                            "cmd"
                        ]
                    },
                    {
                        "nombre": "rmd",
                        "sintaxis": [
                            "FTP.rmd(dirname)"
                        ],
                        "parametros": [
                            "dirname"
                        ]
                    },
                    {
                        "nombre": "sendcmd",
                        "sintaxis": [
                            "FTP.sendcmd(cmd)"
                        ],
                        "parametros": [
                            "cmd"
                        ]
                    },
                    {
                        "nombre": "set_debuglevel",
                        "sintaxis": [
                            "FTP.set_debuglevel(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "set_pasv",
                        "sintaxis": [
                            "FTP.set_pasv(val)"
                        ],
                        "parametros": [
                            "val"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "FTP.size(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "storbinary",
                        "sintaxis": [
                            "FTP.storbinary(cmd, fp, blocksize=8192, callback=None, rest=None)"
                        ],
                        "parametros": [
                            "callback",
                            "rest",
                            "cmd",
                            "fp",
                            "blocksize"
                        ]
                    },
                    {
                        "nombre": "storlines",
                        "sintaxis": [
                            "FTP.storlines(cmd, fp, callback=None)"
                        ],
                        "parametros": [
                            "callback",
                            "cmd",
                            "fp"
                        ]
                    },
                    {
                        "nombre": "transfercmd",
                        "sintaxis": [
                            "FTP.transfercmd(cmd, rest=None)"
                        ],
                        "parametros": [
                            "cmd",
                            "rest"
                        ]
                    },
                    {
                        "nombre": "voidcmd",
                        "sintaxis": [
                            "FTP.voidcmd(cmd)"
                        ],
                        "parametros": [
                            "cmd"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FTP"
                ]
            },
            {
                "nombre": "FTP_TLS",
                "constructores": [
                    {
                        "nombre": "FTP_TLS",
                        "sintaxis": [
                            "class ftplib.FTP_TLS(host='', user='', passwd='', acct='', keyfile=None, certfile=None, context=None, timeout=None, source_address=None, *, encoding='utf-8')"
                        ],
                        "parametros": [
                            "certfile",
                            "encoding",
                            "acct",
                            "context",
                            "passwd",
                            "source_address",
                            "timeout",
                            "host",
                            "*",
                            "user",
                            "keyfile"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "auth",
                        "sintaxis": [
                            "FTP_TLS.auth()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "ccc",
                        "sintaxis": [
                            "FTP_TLS.ccc()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "prot_c",
                        "sintaxis": [
                            "FTP_TLS.prot_c()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "prot_p",
                        "sintaxis": [
                            "FTP_TLS.prot_p()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "ssl_version",
                        "sintaxis": [
                            "FTP_TLS.ssl_version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FTP_TLS"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "all_errors",
                "sintaxis": [
                    "ftplib.all_errors"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error_perm",
                "sintaxis": [
                    "exception ftplib.error_perm"
                ]
            },
            {
                "nombre": "error_proto",
                "sintaxis": [
                    "exception ftplib.error_proto"
                ]
            },
            {
                "nombre": "error_reply",
                "sintaxis": [
                    "exception ftplib.error_reply"
                ]
            },
            {
                "nombre": "error_temp",
                "sintaxis": [
                    "exception ftplib.error_temp"
                ]
            }
        ]
    },
    {
        "nombre": "functools",
        "funciones": [
            {
                "nombre": "cache",
                "sintaxis": [
                    "@functools.cache(user_function)"
                ],
                "parametros": [
                    "user_function"
                ]
            },
            {
                "nombre": "cached_property",
                "sintaxis": [
                    "@functools.cached_property(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "cmp_to_key",
                "sintaxis": [
                    "functools.cmp_to_key(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "lru_cache",
                "sintaxis": [
                    "@functools.lru_cache(user_function)",
                    "@functools.lru_cache(maxsize=128, typed=False)"
                ],
                "parametros": [
                    "maxsize",
                    "user_function",
                    "typed"
                ]
            },
            {
                "nombre": "partial",
                "sintaxis": [
                    "functools.partial(func, /, *args, **keywords)"
                ],
                "parametros": [
                    "func",
                    "/",
                    "*args",
                    "**keywords"
                ]
            },
            {
                "nombre": "reduce",
                "sintaxis": [
                    "functools.reduce(function, iterable[, initializer])"
                ],
                "parametros": [
                    "iterable",
                    "initializer",
                    "function"
                ]
            },
            {
                "nombre": "singledispatch",
                "sintaxis": [
                    "@functools.singledispatch"
                ],
                "parametros": []
            },
            {
                "nombre": "total_ordering",
                "sintaxis": [
                    "@functools.total_ordering"
                ],
                "parametros": []
            },
            {
                "nombre": "update_wrapper",
                "sintaxis": [
                    "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"
                ],
                "parametros": [
                    "wrapped",
                    "wrapper",
                    "assigned",
                    "updated"
                ]
            },
            {
                "nombre": "wraps",
                "sintaxis": [
                    "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"
                ],
                "parametros": [
                    "wrapped",
                    "assigned",
                    "updated"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "partial",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "args",
                        "sintaxis": [
                            "partial.args"
                        ]
                    },
                    {
                        "nombre": "func",
                        "sintaxis": [
                            "partial.func"
                        ]
                    },
                    {
                        "nombre": "keywords",
                        "sintaxis": [
                            "partial.keywords"
                        ]
                    }
                ],
                "sintaxis": [
                    "class partial"
                ]
            },
            {
                "nombre": "partialmethod",
                "constructores": [
                    {
                        "nombre": "partialmethod",
                        "sintaxis": [
                            "class functools.partialmethod(func, /, *args, **keywords)"
                        ],
                        "parametros": [
                            "func",
                            "/",
                            "*args",
                            "**keywords"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class partialmethod"
                ]
            },
            {
                "nombre": "singledispatchmethod",
                "constructores": [
                    {
                        "nombre": "singledispatchmethod",
                        "sintaxis": [
                            "class functools.singledispatchmethod(func)"
                        ],
                        "parametros": [
                            "func"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class singledispatchmethod"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "gc",
        "funciones": [
            {
                "nombre": "collect",
                "sintaxis": [
                    "gc.collect(generation=2)"
                ],
                "parametros": [
                    "generation"
                ]
            },
            {
                "nombre": "disable",
                "sintaxis": [
                    "gc.disable()"
                ],
                "parametros": []
            },
            {
                "nombre": "enable",
                "sintaxis": [
                    "gc.enable()"
                ],
                "parametros": []
            },
            {
                "nombre": "freeze",
                "sintaxis": [
                    "gc.freeze()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_count",
                "sintaxis": [
                    "gc.get_count()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_debug",
                "sintaxis": [
                    "gc.get_debug()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_freeze_count",
                "sintaxis": [
                    "gc.get_freeze_count()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_objects",
                "sintaxis": [
                    "gc.get_objects(generation=None)"
                ],
                "parametros": [
                    "generation"
                ]
            },
            {
                "nombre": "get_referents",
                "sintaxis": [
                    "gc.get_referents(*objs)"
                ],
                "parametros": [
                    "objs"
                ]
            },
            {
                "nombre": "get_referrers",
                "sintaxis": [
                    "gc.get_referrers(*objs)"
                ],
                "parametros": [
                    "objs"
                ]
            },
            {
                "nombre": "get_stats",
                "sintaxis": [
                    "gc.get_stats()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_threshold",
                "sintaxis": [
                    "gc.get_threshold()"
                ],
                "parametros": []
            },
            {
                "nombre": "isenabled",
                "sintaxis": [
                    "gc.isenabled()"
                ],
                "parametros": []
            },
            {
                "nombre": "is_finalized",
                "sintaxis": [
                    "gc.is_finalized(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "is_tracked",
                "sintaxis": [
                    "gc.is_tracked(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "set_debug",
                "sintaxis": [
                    "gc.set_debug(flags)"
                ],
                "parametros": [
                    "flags"
                ]
            },
            {
                "nombre": "set_threshold",
                "sintaxis": [
                    "gc.set_threshold(threshold0[, threshold1[, threshold2]])"
                ],
                "parametros": [
                    "threshold1",
                    "threshold2",
                    "threshold0"
                ]
            },
            {
                "nombre": "unfreeze",
                "sintaxis": [
                    "gc.unfreeze()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "callbacks",
                "sintaxis": [
                    "gc.callbacks"
                ]
            },
            {
                "nombre": "DEBUG_COLLECTABLE",
                "sintaxis": [
                    "gc.DEBUG_COLLECTABLE"
                ]
            },
            {
                "nombre": "DEBUG_LEAK",
                "sintaxis": [
                    "gc.DEBUG_LEAK"
                ]
            },
            {
                "nombre": "DEBUG_SAVEALL",
                "sintaxis": [
                    "gc.DEBUG_SAVEALL"
                ]
            },
            {
                "nombre": "DEBUG_STATS",
                "sintaxis": [
                    "gc.DEBUG_STATS"
                ]
            },
            {
                "nombre": "DEBUG_UNCOLLECTABLE",
                "sintaxis": [
                    "gc.DEBUG_UNCOLLECTABLE"
                ]
            },
            {
                "nombre": "garbage",
                "sintaxis": [
                    "gc.garbage"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "getopt",
        "funciones": [
            {
                "nombre": "getopt",
                "sintaxis": [
                    "getopt.getopt(args, shortopts, longopts=[])"
                ],
                "parametros": [
                    "args",
                    "longopts",
                    "shortopts"
                ]
            },
            {
                "nombre": "gnu_getopt",
                "sintaxis": [
                    "getopt.gnu_getopt(args, shortopts, longopts=[])"
                ],
                "parametros": [
                    "args",
                    "longopts",
                    "shortopts"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception getopt.error"
                ]
            },
            {
                "nombre": "GetoptError",
                "sintaxis": [
                    "exception getopt.GetoptError"
                ]
            }
        ]
    },
    {
        "nombre": "getpass",
        "funciones": [
            {
                "nombre": "getpass",
                "sintaxis": [
                    "getpass.getpass(prompt='Password: ', stream=None)"
                ],
                "parametros": [
                    "prompt",
                    "stream"
                ]
            },
            {
                "nombre": "getuser",
                "sintaxis": [
                    "getpass.getuser()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "GetPassWarning",
                "sintaxis": [
                    "exception getpass.GetPassWarning"
                ]
            }
        ]
    },
    {
        "nombre": "gettext",
        "funciones": [
            {
                "nombre": "bindtextdomain",
                "sintaxis": [
                    "gettext.bindtextdomain(domain, localedir=None)"
                ],
                "parametros": [
                    "domain",
                    "localedir"
                ]
            },
            {
                "nombre": "bind_textdomain_codeset",
                "sintaxis": [
                    "gettext.bind_textdomain_codeset(domain, codeset=None)"
                ],
                "parametros": [
                    "codeset",
                    "domain"
                ]
            },
            {
                "nombre": "dgettext",
                "sintaxis": [
                    "gettext.dgettext(domain, message)"
                ],
                "parametros": [
                    "message",
                    "domain"
                ]
            },
            {
                "nombre": "dngettext",
                "sintaxis": [
                    "gettext.dngettext(domain, singular, plural, n)"
                ],
                "parametros": [
                    "n",
                    "singular",
                    "domain",
                    "plural"
                ]
            },
            {
                "nombre": "dnpgettext",
                "sintaxis": [
                    "gettext.dnpgettext(domain, context, singular, plural, n)"
                ],
                "parametros": [
                    "context",
                    "n",
                    "singular",
                    "domain",
                    "plural"
                ]
            },
            {
                "nombre": "dpgettext",
                "sintaxis": [
                    "gettext.dpgettext(domain, context, message)"
                ],
                "parametros": [
                    "message",
                    "domain",
                    "context"
                ]
            },
            {
                "nombre": "find",
                "sintaxis": [
                    "gettext.find(domain, localedir=None, languages=None, all=False)"
                ],
                "parametros": [
                    "languages",
                    "all",
                    "domain",
                    "localedir"
                ]
            },
            {
                "nombre": "gettext",
                "sintaxis": [
                    "gettext.gettext(message)"
                ],
                "parametros": [
                    "message"
                ]
            },
            {
                "nombre": "install",
                "sintaxis": [
                    "gettext.install(domain, localedir=None, codeset=None, names=None)"
                ],
                "parametros": [
                    "codeset",
                    "domain",
                    "localedir",
                    "names"
                ]
            },
            {
                "nombre": "ldgettext",
                "sintaxis": [
                    "gettext.ldgettext(domain, message)"
                ],
                "parametros": [
                    "message",
                    "domain"
                ]
            },
            {
                "nombre": "ldngettext",
                "sintaxis": [
                    "gettext.ldngettext(domain, singular, plural, n)"
                ],
                "parametros": [
                    "n",
                    "singular",
                    "domain",
                    "plural"
                ]
            },
            {
                "nombre": "lgettext",
                "sintaxis": [
                    "gettext.lgettext(message)"
                ],
                "parametros": [
                    "message"
                ]
            },
            {
                "nombre": "lngettext",
                "sintaxis": [
                    "gettext.lngettext(singular, plural, n)"
                ],
                "parametros": [
                    "n",
                    "singular",
                    "plural"
                ]
            },
            {
                "nombre": "ngettext",
                "sintaxis": [
                    "gettext.ngettext(singular, plural, n)"
                ],
                "parametros": [
                    "n",
                    "singular",
                    "plural"
                ]
            },
            {
                "nombre": "npgettext",
                "sintaxis": [
                    "gettext.npgettext(context, singular, plural, n)"
                ],
                "parametros": [
                    "n",
                    "singular",
                    "context",
                    "plural"
                ]
            },
            {
                "nombre": "pgettext",
                "sintaxis": [
                    "gettext.pgettext(context, message)"
                ],
                "parametros": [
                    "message",
                    "context"
                ]
            },
            {
                "nombre": "textdomain",
                "sintaxis": [
                    "gettext.textdomain(domain=None)"
                ],
                "parametros": [
                    "domain"
                ]
            },
            {
                "nombre": "translation",
                "sintaxis": [
                    "gettext.translation(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)"
                ],
                "parametros": [
                    "codeset",
                    "localedir",
                    "fallback",
                    "languages",
                    "class_",
                    "domain"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "GNUTranslations",
                "constructores": [
                    {
                        "nombre": "GNUTranslations",
                        "sintaxis": [
                            "class gettext.GNUTranslations"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "gettext",
                        "sintaxis": [
                            "gettext(message)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    },
                    {
                        "nombre": "lgettext",
                        "sintaxis": [
                            "lgettext(message)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    },
                    {
                        "nombre": "lngettext",
                        "sintaxis": [
                            "lngettext(singular, plural, n)"
                        ],
                        "parametros": [
                            "n",
                            "singular",
                            "plural"
                        ]
                    },
                    {
                        "nombre": "ngettext",
                        "sintaxis": [
                            "ngettext(singular, plural, n)"
                        ],
                        "parametros": [
                            "n",
                            "singular",
                            "plural"
                        ]
                    },
                    {
                        "nombre": "npgettext",
                        "sintaxis": [
                            "npgettext(context, singular, plural, n)"
                        ],
                        "parametros": [
                            "n",
                            "singular",
                            "context",
                            "plural"
                        ]
                    },
                    {
                        "nombre": "pgettext",
                        "sintaxis": [
                            "pgettext(context, message)"
                        ],
                        "parametros": [
                            "message",
                            "context"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class GNUTranslations"
                ]
            },
            {
                "nombre": "NullTranslations",
                "constructores": [
                    {
                        "nombre": "NullTranslations",
                        "sintaxis": [
                            "class gettext.NullTranslations(fp=None)"
                        ],
                        "parametros": [
                            "fp"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_fallback",
                        "sintaxis": [
                            "add_fallback(fallback)"
                        ],
                        "parametros": [
                            "fallback"
                        ]
                    },
                    {
                        "nombre": "charset",
                        "sintaxis": [
                            "charset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "gettext",
                        "sintaxis": [
                            "gettext(message)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    },
                    {
                        "nombre": "info",
                        "sintaxis": [
                            "info()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "install",
                        "sintaxis": [
                            "install(names=None)"
                        ],
                        "parametros": [
                            "names"
                        ]
                    },
                    {
                        "nombre": "lgettext",
                        "sintaxis": [
                            "lgettext(message)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    },
                    {
                        "nombre": "lngettext",
                        "sintaxis": [
                            "lngettext(singular, plural, n)"
                        ],
                        "parametros": [
                            "n",
                            "singular",
                            "plural"
                        ]
                    },
                    {
                        "nombre": "ngettext",
                        "sintaxis": [
                            "ngettext(singular, plural, n)"
                        ],
                        "parametros": [
                            "n",
                            "singular",
                            "plural"
                        ]
                    },
                    {
                        "nombre": "npgettext",
                        "sintaxis": [
                            "npgettext(context, singular, plural, n)"
                        ],
                        "parametros": [
                            "n",
                            "singular",
                            "context",
                            "plural"
                        ]
                    },
                    {
                        "nombre": "output_charset",
                        "sintaxis": [
                            "output_charset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "pgettext",
                        "sintaxis": [
                            "pgettext(context, message)"
                        ],
                        "parametros": [
                            "message",
                            "context"
                        ]
                    },
                    {
                        "nombre": "set_output_charset",
                        "sintaxis": [
                            "set_output_charset(charset)"
                        ],
                        "parametros": [
                            "charset"
                        ]
                    },
                    {
                        "nombre": "_parse",
                        "sintaxis": [
                            "_parse(fp)"
                        ],
                        "parametros": [
                            "fp"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class NullTranslations"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "glob",
        "funciones": [
            {
                "nombre": "escape",
                "sintaxis": [
                    "glob.escape(pathname)"
                ],
                "parametros": [
                    "pathname"
                ]
            },
            {
                "nombre": "glob",
                "sintaxis": [
                    "glob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False)"
                ],
                "parametros": [
                    "dir_fd",
                    "root_dir",
                    "pathname",
                    "*",
                    "recursive"
                ]
            },
            {
                "nombre": "iglob",
                "sintaxis": [
                    "glob.iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False)"
                ],
                "parametros": [
                    "dir_fd",
                    "root_dir",
                    "pathname",
                    "*",
                    "recursive"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "graphlib",
        "funciones": [],
        "clases": [
            {
                "nombre": "TopologicalSorter",
                "constructores": [
                    {
                        "nombre": "TopologicalSorter",
                        "sintaxis": [
                            "class graphlib.TopologicalSorter(graph=None)"
                        ],
                        "parametros": [
                            "graph"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "add(node, *predecessors)"
                        ],
                        "parametros": [
                            "predecessors",
                            "node"
                        ]
                    },
                    {
                        "nombre": "done",
                        "sintaxis": [
                            "done(*nodes)"
                        ],
                        "parametros": [
                            "nodes"
                        ]
                    },
                    {
                        "nombre": "get_ready",
                        "sintaxis": [
                            "get_ready()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_active",
                        "sintaxis": [
                            "is_active()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "prepare",
                        "sintaxis": [
                            "prepare()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "static_order",
                        "sintaxis": [
                            "static_order()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class TopologicalSorter"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "CycleError",
                "sintaxis": [
                    "exception graphlib.CycleError"
                ]
            }
        ]
    },
    {
        "nombre": "grp",
        "funciones": [
            {
                "nombre": "getgrall",
                "sintaxis": [
                    "grp.getgrall()"
                ],
                "parametros": []
            },
            {
                "nombre": "getgrgid",
                "sintaxis": [
                    "grp.getgrgid(gid)"
                ],
                "parametros": [
                    "gid"
                ]
            },
            {
                "nombre": "getgrnam",
                "sintaxis": [
                    "grp.getgrnam(name)"
                ],
                "parametros": [
                    "name"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "gzip",
        "funciones": [
            {
                "nombre": "compress",
                "sintaxis": [
                    "gzip.compress(data, compresslevel=9, *, mtime=None)"
                ],
                "parametros": [
                    "mtime",
                    "*",
                    "compresslevel",
                    "data"
                ]
            },
            {
                "nombre": "decompress",
                "sintaxis": [
                    "gzip.decompress(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "encoding",
                    "compresslevel",
                    "errors",
                    "newline"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "GzipFile",
                "constructores": [
                    {
                        "nombre": "GzipFile",
                        "sintaxis": [
                            "class gzip.GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)"
                        ],
                        "parametros": [
                            "mode",
                            "filename",
                            "compresslevel",
                            "fileobj",
                            "mtime"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "peek",
                        "sintaxis": [
                            "peek(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "mtime",
                        "sintaxis": [
                            "mtime"
                        ]
                    }
                ],
                "sintaxis": [
                    "class GzipFile"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "BadGzipFile",
                "sintaxis": [
                    "exception gzip.BadGzipFile"
                ]
            }
        ]
    },
    {
        "nombre": "hashlib",
        "funciones": [
            {
                "nombre": "blake2b",
                "sintaxis": [
                    "hashlib.blake2b(data=b'', *, digest_size=64, key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0, last_node=False, usedforsecurity=True)"
                ],
                "parametros": [
                    "fanout",
                    "digest_size",
                    "depth",
                    "node_offset",
                    "key",
                    "usedforsecurity",
                    "node_depth",
                    "data",
                    "inner_size",
                    "last_node",
                    "leaf_size",
                    "*",
                    "salt",
                    "person"
                ]
            },
            {
                "nombre": "blake2s",
                "sintaxis": [
                    "hashlib.blake2s(data=b'', *, digest_size=32, key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0, last_node=False, usedforsecurity=True)"
                ],
                "parametros": [
                    "fanout",
                    "digest_size",
                    "depth",
                    "node_offset",
                    "key",
                    "usedforsecurity",
                    "node_depth",
                    "data",
                    "inner_size",
                    "last_node",
                    "leaf_size",
                    "*",
                    "salt",
                    "person"
                ]
            },
            {
                "nombre": "new",
                "sintaxis": [
                    "hashlib.new(name, [data, ]*, usedforsecurity=True)"
                ],
                "parametros": [
                    "*",
                    "usedforsecurity",
                    "name",
                    "data"
                ]
            },
            {
                "nombre": "pbkdf2_hmac",
                "sintaxis": [
                    "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)"
                ],
                "parametros": [
                    "password",
                    "dklen",
                    "hash_name",
                    "iterations",
                    "salt"
                ]
            },
            {
                "nombre": "scrypt",
                "sintaxis": [
                    "hashlib.scrypt(password, *, salt, n, r, p, maxmem=0, dklen=64)"
                ],
                "parametros": [
                    "maxmem",
                    "n",
                    "password",
                    "dklen",
                    "p",
                    "r",
                    "*",
                    "salt"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "hash",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "hash.copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "digest",
                        "sintaxis": [
                            "hash.digest()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "hexdigest",
                        "sintaxis": [
                            "hash.hexdigest()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "hash.update(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "hash.name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class hash"
                ]
            },
            {
                "nombre": "shake",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "digest",
                        "sintaxis": [
                            "shake.digest(length)"
                        ],
                        "parametros": [
                            "length"
                        ]
                    },
                    {
                        "nombre": "hexdigest",
                        "sintaxis": [
                            "shake.hexdigest(length)"
                        ],
                        "parametros": [
                            "length"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class shake"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "algorithms_available",
                "sintaxis": [
                    "hashlib.algorithms_available"
                ]
            },
            {
                "nombre": "algorithms_guaranteed",
                "sintaxis": [
                    "hashlib.algorithms_guaranteed"
                ]
            },
            {
                "nombre": "block_size",
                "sintaxis": [
                    "hash.block_size"
                ]
            },
            {
                "nombre": "digest_size",
                "sintaxis": [
                    "hash.digest_size"
                ]
            },
            {
                "nombre": "MAX_DIGEST_SIZE",
                "sintaxis": [
                    "blake2b.MAX_DIGEST_SIZE"
                ]
            },
            {
                "nombre": "MAX_DIGEST_SIZE",
                "sintaxis": [
                    "blake2s.MAX_DIGEST_SIZE"
                ]
            },
            {
                "nombre": "MAX_KEY_SIZE",
                "sintaxis": [
                    "blake2b.MAX_KEY_SIZE"
                ]
            },
            {
                "nombre": "MAX_KEY_SIZE",
                "sintaxis": [
                    "blake2s.MAX_KEY_SIZE"
                ]
            },
            {
                "nombre": "PERSON_SIZE",
                "sintaxis": [
                    "blake2b.PERSON_SIZE"
                ]
            },
            {
                "nombre": "PERSON_SIZE",
                "sintaxis": [
                    "blake2s.PERSON_SIZE"
                ]
            },
            {
                "nombre": "SALT_SIZE",
                "sintaxis": [
                    "blake2b.SALT_SIZE"
                ]
            },
            {
                "nombre": "SALT_SIZE",
                "sintaxis": [
                    "blake2s.SALT_SIZE"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "heapq",
        "funciones": [
            {
                "nombre": "heapify",
                "sintaxis": [
                    "heapq.heapify(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "heappop",
                "sintaxis": [
                    "heapq.heappop(heap)"
                ],
                "parametros": [
                    "heap"
                ]
            },
            {
                "nombre": "heappush",
                "sintaxis": [
                    "heapq.heappush(heap, item)"
                ],
                "parametros": [
                    "heap",
                    "item"
                ]
            },
            {
                "nombre": "heappushpop",
                "sintaxis": [
                    "heapq.heappushpop(heap, item)"
                ],
                "parametros": [
                    "heap",
                    "item"
                ]
            },
            {
                "nombre": "heapreplace",
                "sintaxis": [
                    "heapq.heapreplace(heap, item)"
                ],
                "parametros": [
                    "heap",
                    "item"
                ]
            },
            {
                "nombre": "merge",
                "sintaxis": [
                    "heapq.merge(*iterables, key=None, reverse=False)"
                ],
                "parametros": [
                    "reverse",
                    "iterables",
                    "key"
                ]
            },
            {
                "nombre": "nlargest",
                "sintaxis": [
                    "heapq.nlargest(n, iterable, key=None)"
                ],
                "parametros": [
                    "iterable",
                    "n",
                    "key"
                ]
            },
            {
                "nombre": "nsmallest",
                "sintaxis": [
                    "heapq.nsmallest(n, iterable, key=None)"
                ],
                "parametros": [
                    "iterable",
                    "n",
                    "key"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "hmac",
        "funciones": [
            {
                "nombre": "compare_digest",
                "sintaxis": [
                    "hmac.compare_digest(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "digest",
                "sintaxis": [
                    "hmac.digest(key, msg, digest)"
                ],
                "parametros": [
                    "digest",
                    "msg",
                    "key"
                ]
            },
            {
                "nombre": "new",
                "sintaxis": [
                    "hmac.new(key, msg=None, digestmod='')"
                ],
                "parametros": [
                    "digestmod",
                    "msg",
                    "key"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "HMAC",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "HMAC.copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "digest",
                        "sintaxis": [
                            "HMAC.digest()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "hexdigest",
                        "sintaxis": [
                            "HMAC.hexdigest()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "HMAC.update(msg)"
                        ],
                        "parametros": [
                            "msg"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "block_size",
                        "sintaxis": [
                            "HMAC.block_size"
                        ]
                    },
                    {
                        "nombre": "digest_size",
                        "sintaxis": [
                            "HMAC.digest_size"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "HMAC.name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class HMAC"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "html",
        "funciones": [
            {
                "nombre": "escape",
                "sintaxis": [
                    "html.escape(s, quote=True)"
                ],
                "parametros": [
                    "s",
                    "quote"
                ]
            },
            {
                "nombre": "unescape",
                "sintaxis": [
                    "html.unescape(s)"
                ],
                "parametros": [
                    "s"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "html.entities",
        "funciones": [],
        "clases": [],
        "constantes": [
            {
                "nombre": "codepoint2name",
                "sintaxis": [
                    "html.entities.codepoint2name"
                ]
            },
            {
                "nombre": "entitydefs",
                "sintaxis": [
                    "html.entities.entitydefs"
                ]
            },
            {
                "nombre": "html5",
                "sintaxis": [
                    "html.entities.html5"
                ]
            },
            {
                "nombre": "name2codepoint",
                "sintaxis": [
                    "html.entities.name2codepoint"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "html.parser",
        "funciones": [],
        "clases": [
            {
                "nombre": "HTMLParser",
                "constructores": [
                    {
                        "nombre": "HTMLParser",
                        "sintaxis": [
                            "class html.parser.HTMLParser(*, convert_charrefs=True)"
                        ],
                        "parametros": [
                            "*",
                            "convert_charrefs"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "HTMLParser.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "feed",
                        "sintaxis": [
                            "HTMLParser.feed(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "getpos",
                        "sintaxis": [
                            "HTMLParser.getpos()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_starttag_text",
                        "sintaxis": [
                            "HTMLParser.get_starttag_text()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_charref",
                        "sintaxis": [
                            "HTMLParser.handle_charref(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "handle_comment",
                        "sintaxis": [
                            "HTMLParser.handle_comment(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "handle_data",
                        "sintaxis": [
                            "HTMLParser.handle_data(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "handle_decl",
                        "sintaxis": [
                            "HTMLParser.handle_decl(decl)"
                        ],
                        "parametros": [
                            "decl"
                        ]
                    },
                    {
                        "nombre": "handle_endtag",
                        "sintaxis": [
                            "HTMLParser.handle_endtag(tag)"
                        ],
                        "parametros": [
                            "tag"
                        ]
                    },
                    {
                        "nombre": "handle_entityref",
                        "sintaxis": [
                            "HTMLParser.handle_entityref(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "handle_pi",
                        "sintaxis": [
                            "HTMLParser.handle_pi(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "handle_startendtag",
                        "sintaxis": [
                            "HTMLParser.handle_startendtag(tag, attrs)"
                        ],
                        "parametros": [
                            "attrs",
                            "tag"
                        ]
                    },
                    {
                        "nombre": "handle_starttag",
                        "sintaxis": [
                            "HTMLParser.handle_starttag(tag, attrs)"
                        ],
                        "parametros": [
                            "attrs",
                            "tag"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "HTMLParser.reset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unknown_decl",
                        "sintaxis": [
                            "HTMLParser.unknown_decl(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTMLParser"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "http",
        "funciones": [],
        "clases": [
            {
                "nombre": "HTTPStatus",
                "constructores": [
                    {
                        "nombre": "HTTPStatus",
                        "sintaxis": [
                            "class http.HTTPStatus"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HTTPStatus"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "http.client",
        "funciones": [
            {
                "nombre": "parse_headers",
                "sintaxis": [
                    "http.client.parse_headers(fp)"
                ],
                "parametros": [
                    "fp"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "HTTPConnection",
                "constructores": [
                    {
                        "nombre": "HTTPConnection",
                        "sintaxis": [
                            "class http.client.HTTPConnection(host, port=None, [timeout, ]source_address=None, blocksize=8192)"
                        ],
                        "parametros": [
                            "port",
                            "source_address",
                            "timeout",
                            "host",
                            "blocksize"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "HTTPConnection.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "connect",
                        "sintaxis": [
                            "HTTPConnection.connect()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "endheaders",
                        "sintaxis": [
                            "HTTPConnection.endheaders(message_body=None, *, encode_chunked=False)"
                        ],
                        "parametros": [
                            "encode_chunked",
                            "message_body",
                            "*"
                        ]
                    },
                    {
                        "nombre": "getresponse",
                        "sintaxis": [
                            "HTTPConnection.getresponse()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "putheader",
                        "sintaxis": [
                            "HTTPConnection.putheader(header, argument[, ...])"
                        ],
                        "parametros": [
                            "...",
                            "argument",
                            "header"
                        ]
                    },
                    {
                        "nombre": "putrequest",
                        "sintaxis": [
                            "HTTPConnection.putrequest(method, url, skip_host=False, skip_accept_encoding=False)"
                        ],
                        "parametros": [
                            "skip_accept_encoding",
                            "url",
                            "method",
                            "skip_host"
                        ]
                    },
                    {
                        "nombre": "request",
                        "sintaxis": [
                            "HTTPConnection.request(method, url, body=None, headers={}, *, encode_chunked=False)"
                        ],
                        "parametros": [
                            "encode_chunked",
                            "headers",
                            "url",
                            "body",
                            "method",
                            "*"
                        ]
                    },
                    {
                        "nombre": "send",
                        "sintaxis": [
                            "HTTPConnection.send(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "set_debuglevel",
                        "sintaxis": [
                            "HTTPConnection.set_debuglevel(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "set_tunnel",
                        "sintaxis": [
                            "HTTPConnection.set_tunnel(host, port=None, headers=None)"
                        ],
                        "parametros": [
                            "host",
                            "headers",
                            "port"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "blocksize",
                        "sintaxis": [
                            "HTTPConnection.blocksize"
                        ]
                    }
                ],
                "sintaxis": [
                    "class HTTPConnection"
                ]
            },
            {
                "nombre": "HTTPResponse",
                "constructores": [
                    {
                        "nombre": "HTTPResponse",
                        "sintaxis": [
                            "class http.client.HTTPResponse(sock, debuglevel=0, method=None, url=None)"
                        ],
                        "parametros": [
                            "method",
                            "sock",
                            "url",
                            "debuglevel"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "HTTPResponse.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getheader",
                        "sintaxis": [
                            "HTTPResponse.getheader(name, default=None)"
                        ],
                        "parametros": [
                            "name",
                            "default"
                        ]
                    },
                    {
                        "nombre": "getheaders",
                        "sintaxis": [
                            "HTTPResponse.getheaders()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getstatus",
                        "sintaxis": [
                            "HTTPResponse.getstatus()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "geturl",
                        "sintaxis": [
                            "HTTPResponse.geturl()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "info",
                        "sintaxis": [
                            "HTTPResponse.info()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "HTTPResponse.read([amt])"
                        ],
                        "parametros": [
                            "amt"
                        ]
                    },
                    {
                        "nombre": "readinto",
                        "sintaxis": [
                            "HTTPResponse.readinto(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "closed",
                        "sintaxis": [
                            "HTTPResponse.closed"
                        ]
                    },
                    {
                        "nombre": "debuglevel",
                        "sintaxis": [
                            "HTTPResponse.debuglevel"
                        ]
                    },
                    {
                        "nombre": "headers",
                        "sintaxis": [
                            "HTTPResponse.headers"
                        ]
                    },
                    {
                        "nombre": "msg",
                        "sintaxis": [
                            "HTTPResponse.msg"
                        ]
                    },
                    {
                        "nombre": "reason",
                        "sintaxis": [
                            "HTTPResponse.reason"
                        ]
                    },
                    {
                        "nombre": "status",
                        "sintaxis": [
                            "HTTPResponse.status"
                        ]
                    },
                    {
                        "nombre": "url",
                        "sintaxis": [
                            "HTTPResponse.url"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "HTTPResponse.version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class HTTPResponse"
                ]
            },
            {
                "nombre": "HTTPSConnection",
                "constructores": [
                    {
                        "nombre": "HTTPSConnection",
                        "sintaxis": [
                            "class http.client.HTTPSConnection(host, port=None, key_file=None, cert_file=None, [timeout, ]source_address=None, *, context=None, check_hostname=None, blocksize=8192)"
                        ],
                        "parametros": [
                            "check_hostname",
                            "context",
                            "key_file",
                            "port",
                            "source_address",
                            "cert_file",
                            "timeout",
                            "host",
                            "*",
                            "blocksize"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HTTPSConnection"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "HTTPS_PORT",
                "sintaxis": [
                    "http.client.HTTPS_PORT"
                ]
            },
            {
                "nombre": "HTTP_PORT",
                "sintaxis": [
                    "http.client.HTTP_PORT"
                ]
            },
            {
                "nombre": "responses",
                "sintaxis": [
                    "http.client.responses"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "BadStatusLine",
                "sintaxis": [
                    "exception http.client.BadStatusLine"
                ]
            },
            {
                "nombre": "CannotSendHeader",
                "sintaxis": [
                    "exception http.client.CannotSendHeader"
                ]
            },
            {
                "nombre": "CannotSendRequest",
                "sintaxis": [
                    "exception http.client.CannotSendRequest"
                ]
            },
            {
                "nombre": "HTTPException",
                "sintaxis": [
                    "exception http.client.HTTPException"
                ]
            },
            {
                "nombre": "ImproperConnectionState",
                "sintaxis": [
                    "exception http.client.ImproperConnectionState"
                ]
            },
            {
                "nombre": "IncompleteRead",
                "sintaxis": [
                    "exception http.client.IncompleteRead"
                ]
            },
            {
                "nombre": "InvalidURL",
                "sintaxis": [
                    "exception http.client.InvalidURL"
                ]
            },
            {
                "nombre": "LineTooLong",
                "sintaxis": [
                    "exception http.client.LineTooLong"
                ]
            },
            {
                "nombre": "NotConnected",
                "sintaxis": [
                    "exception http.client.NotConnected"
                ]
            },
            {
                "nombre": "RemoteDisconnected",
                "sintaxis": [
                    "exception http.client.RemoteDisconnected"
                ]
            },
            {
                "nombre": "ResponseNotReady",
                "sintaxis": [
                    "exception http.client.ResponseNotReady"
                ]
            },
            {
                "nombre": "UnimplementedFileMode",
                "sintaxis": [
                    "exception http.client.UnimplementedFileMode"
                ]
            },
            {
                "nombre": "UnknownProtocol",
                "sintaxis": [
                    "exception http.client.UnknownProtocol"
                ]
            },
            {
                "nombre": "UnknownTransferEncoding",
                "sintaxis": [
                    "exception http.client.UnknownTransferEncoding"
                ]
            }
        ]
    },
    {
        "nombre": "http.cookiejar",
        "funciones": [],
        "clases": [
            {
                "nombre": "Cookie",
                "constructores": [
                    {
                        "nombre": "Cookie",
                        "sintaxis": [
                            "class http.cookiejar.Cookie"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_nonstandard_attr",
                        "sintaxis": [
                            "Cookie.get_nonstandard_attr(name, default=None)"
                        ],
                        "parametros": [
                            "name",
                            "default"
                        ]
                    },
                    {
                        "nombre": "has_nonstandard_attr",
                        "sintaxis": [
                            "Cookie.has_nonstandard_attr(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "is_expired",
                        "sintaxis": [
                            "Cookie.is_expired(now=None)"
                        ],
                        "parametros": [
                            "now"
                        ]
                    },
                    {
                        "nombre": "set_nonstandard_attr",
                        "sintaxis": [
                            "Cookie.set_nonstandard_attr(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "comment",
                        "sintaxis": [
                            "Cookie.comment"
                        ]
                    },
                    {
                        "nombre": "comment_url",
                        "sintaxis": [
                            "Cookie.comment_url"
                        ]
                    },
                    {
                        "nombre": "discard",
                        "sintaxis": [
                            "Cookie.discard"
                        ]
                    },
                    {
                        "nombre": "domain_initial_dot",
                        "sintaxis": [
                            "Cookie.domain_initial_dot"
                        ]
                    },
                    {
                        "nombre": "domain_specified",
                        "sintaxis": [
                            "Cookie.domain_specified"
                        ]
                    },
                    {
                        "nombre": "expires",
                        "sintaxis": [
                            "Cookie.expires"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "Cookie.name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "Cookie.path"
                        ]
                    },
                    {
                        "nombre": "port",
                        "sintaxis": [
                            "Cookie.port"
                        ]
                    },
                    {
                        "nombre": "port_specified",
                        "sintaxis": [
                            "Cookie.port_specified"
                        ]
                    },
                    {
                        "nombre": "rfc2109",
                        "sintaxis": [
                            "Cookie.rfc2109"
                        ]
                    },
                    {
                        "nombre": "secure",
                        "sintaxis": [
                            "Cookie.secure"
                        ]
                    },
                    {
                        "nombre": "value",
                        "sintaxis": [
                            "Cookie.value"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "Cookie.version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Cookie"
                ]
            },
            {
                "nombre": "CookieJar",
                "constructores": [
                    {
                        "nombre": "CookieJar",
                        "sintaxis": [
                            "class http.cookiejar.CookieJar(policy=None)"
                        ],
                        "parametros": [
                            "policy"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_cookie_header",
                        "sintaxis": [
                            "CookieJar.add_cookie_header(request)"
                        ],
                        "parametros": [
                            "request"
                        ]
                    },
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "CookieJar.clear([domain[, path[, name]]])"
                        ],
                        "parametros": [
                            "name",
                            "domain",
                            "path"
                        ]
                    },
                    {
                        "nombre": "clear_session_cookies",
                        "sintaxis": [
                            "CookieJar.clear_session_cookies()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "extract_cookies",
                        "sintaxis": [
                            "CookieJar.extract_cookies(response, request)"
                        ],
                        "parametros": [
                            "response",
                            "request"
                        ]
                    },
                    {
                        "nombre": "make_cookies",
                        "sintaxis": [
                            "CookieJar.make_cookies(response, request)"
                        ],
                        "parametros": [
                            "response",
                            "request"
                        ]
                    },
                    {
                        "nombre": "set_cookie",
                        "sintaxis": [
                            "CookieJar.set_cookie(cookie)"
                        ],
                        "parametros": [
                            "cookie"
                        ]
                    },
                    {
                        "nombre": "set_cookie_if_ok",
                        "sintaxis": [
                            "CookieJar.set_cookie_if_ok(cookie, request)"
                        ],
                        "parametros": [
                            "cookie",
                            "request"
                        ]
                    },
                    {
                        "nombre": "set_policy",
                        "sintaxis": [
                            "CookieJar.set_policy(policy)"
                        ],
                        "parametros": [
                            "policy"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class CookieJar"
                ]
            },
            {
                "nombre": "CookiePolicy",
                "constructores": [
                    {
                        "nombre": "CookiePolicy",
                        "sintaxis": [
                            "class http.cookiejar.CookiePolicy"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "domain_return_ok",
                        "sintaxis": [
                            "CookiePolicy.domain_return_ok(domain, request)"
                        ],
                        "parametros": [
                            "domain",
                            "request"
                        ]
                    },
                    {
                        "nombre": "path_return_ok",
                        "sintaxis": [
                            "CookiePolicy.path_return_ok(path, request)"
                        ],
                        "parametros": [
                            "request",
                            "path"
                        ]
                    },
                    {
                        "nombre": "return_ok",
                        "sintaxis": [
                            "CookiePolicy.return_ok(cookie, request)"
                        ],
                        "parametros": [
                            "cookie",
                            "request"
                        ]
                    },
                    {
                        "nombre": "set_ok",
                        "sintaxis": [
                            "CookiePolicy.set_ok(cookie, request)"
                        ],
                        "parametros": [
                            "cookie",
                            "request"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "hide_cookie2",
                        "sintaxis": [
                            "CookiePolicy.hide_cookie2"
                        ]
                    },
                    {
                        "nombre": "netscape",
                        "sintaxis": [
                            "CookiePolicy.netscape"
                        ]
                    },
                    {
                        "nombre": "rfc2965",
                        "sintaxis": [
                            "CookiePolicy.rfc2965"
                        ]
                    }
                ],
                "sintaxis": [
                    "class CookiePolicy"
                ]
            },
            {
                "nombre": "DefaultCookiePolicy",
                "constructores": [
                    {
                        "nombre": "DefaultCookiePolicy",
                        "sintaxis": [
                            "class http.cookiejar.DefaultCookiePolicy(blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, strict_ns_domain=DefaultCookiePolicy.DomainLiberal, strict_ns_set_initial_dollar=False, strict_ns_set_path=False, secure_protocols='https', 'wss')"
                        ],
                        "parametros": [
                            "blocked_domains",
                            "rfc2965",
                            "netscape",
                            "strict_domain",
                            "strict_ns_unverifiable",
                            "strict_ns_set_initial_dollar",
                            "hide_cookie2",
                            "strict_rfc2965_unverifiable",
                            "allowed_domains",
                            "secure_protocols",
                            "strict_ns_domain",
                            "strict_ns_set_path",
                            "rfc2109_as_netscape"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "allowed_domains",
                        "sintaxis": [
                            "DefaultCookiePolicy.allowed_domains()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "blocked_domains",
                        "sintaxis": [
                            "DefaultCookiePolicy.blocked_domains()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_blocked",
                        "sintaxis": [
                            "DefaultCookiePolicy.is_blocked(domain)"
                        ],
                        "parametros": [
                            "domain"
                        ]
                    },
                    {
                        "nombre": "is_not_allowed",
                        "sintaxis": [
                            "DefaultCookiePolicy.is_not_allowed(domain)"
                        ],
                        "parametros": [
                            "domain"
                        ]
                    },
                    {
                        "nombre": "set_allowed_domains",
                        "sintaxis": [
                            "DefaultCookiePolicy.set_allowed_domains(allowed_domains)"
                        ],
                        "parametros": [
                            "allowed_domains"
                        ]
                    },
                    {
                        "nombre": "set_blocked_domains",
                        "sintaxis": [
                            "DefaultCookiePolicy.set_blocked_domains(blocked_domains)"
                        ],
                        "parametros": [
                            "blocked_domains"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "DomainLiberal",
                        "sintaxis": [
                            "DefaultCookiePolicy.DomainLiberal"
                        ]
                    },
                    {
                        "nombre": "DomainRFC2965Match",
                        "sintaxis": [
                            "DefaultCookiePolicy.DomainRFC2965Match"
                        ]
                    },
                    {
                        "nombre": "DomainStrict",
                        "sintaxis": [
                            "DefaultCookiePolicy.DomainStrict"
                        ]
                    },
                    {
                        "nombre": "DomainStrictNoDots",
                        "sintaxis": [
                            "DefaultCookiePolicy.DomainStrictNoDots"
                        ]
                    },
                    {
                        "nombre": "DomainStrictNonDomain",
                        "sintaxis": [
                            "DefaultCookiePolicy.DomainStrictNonDomain"
                        ]
                    },
                    {
                        "nombre": "rfc2109_as_netscape",
                        "sintaxis": [
                            "DefaultCookiePolicy.rfc2109_as_netscape"
                        ]
                    },
                    {
                        "nombre": "strict_domain",
                        "sintaxis": [
                            "DefaultCookiePolicy.strict_domain"
                        ]
                    },
                    {
                        "nombre": "strict_ns_domain",
                        "sintaxis": [
                            "DefaultCookiePolicy.strict_ns_domain"
                        ]
                    },
                    {
                        "nombre": "strict_ns_set_initial_dollar",
                        "sintaxis": [
                            "DefaultCookiePolicy.strict_ns_set_initial_dollar"
                        ]
                    },
                    {
                        "nombre": "strict_ns_set_path",
                        "sintaxis": [
                            "DefaultCookiePolicy.strict_ns_set_path"
                        ]
                    },
                    {
                        "nombre": "strict_ns_unverifiable",
                        "sintaxis": [
                            "DefaultCookiePolicy.strict_ns_unverifiable"
                        ]
                    },
                    {
                        "nombre": "strict_rfc2965_unverifiable",
                        "sintaxis": [
                            "DefaultCookiePolicy.strict_rfc2965_unverifiable"
                        ]
                    }
                ],
                "sintaxis": [
                    "class DefaultCookiePolicy"
                ]
            },
            {
                "nombre": "FileCookieJar",
                "constructores": [
                    {
                        "nombre": "FileCookieJar",
                        "sintaxis": [
                            "class http.cookiejar.FileCookieJar(filename, delayload=None, policy=None)"
                        ],
                        "parametros": [
                            "policy",
                            "filename",
                            "delayload"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "load",
                        "sintaxis": [
                            "FileCookieJar.load(filename=None, ignore_discard=False, ignore_expires=False)"
                        ],
                        "parametros": [
                            "filename",
                            "ignore_discard",
                            "ignore_expires"
                        ]
                    },
                    {
                        "nombre": "revert",
                        "sintaxis": [
                            "FileCookieJar.revert(filename=None, ignore_discard=False, ignore_expires=False)"
                        ],
                        "parametros": [
                            "filename",
                            "ignore_discard",
                            "ignore_expires"
                        ]
                    },
                    {
                        "nombre": "save",
                        "sintaxis": [
                            "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)"
                        ],
                        "parametros": [
                            "filename",
                            "ignore_discard",
                            "ignore_expires"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "delayload",
                        "sintaxis": [
                            "FileCookieJar.delayload"
                        ]
                    },
                    {
                        "nombre": "filename",
                        "sintaxis": [
                            "FileCookieJar.filename"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FileCookieJar"
                ]
            },
            {
                "nombre": "LWPCookieJar",
                "constructores": [
                    {
                        "nombre": "LWPCookieJar",
                        "sintaxis": [
                            "class http.cookiejar.LWPCookieJar(filename, delayload=None, policy=None)"
                        ],
                        "parametros": [
                            "policy",
                            "filename",
                            "delayload"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LWPCookieJar"
                ]
            },
            {
                "nombre": "MozillaCookieJar",
                "constructores": [
                    {
                        "nombre": "MozillaCookieJar",
                        "sintaxis": [
                            "class http.cookiejar.MozillaCookieJar(filename, delayload=None, policy=None)"
                        ],
                        "parametros": [
                            "policy",
                            "filename",
                            "delayload"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MozillaCookieJar"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "LoadError",
                "sintaxis": [
                    "exception http.cookiejar.LoadError"
                ]
            }
        ]
    },
    {
        "nombre": "http.cookies",
        "funciones": [],
        "clases": [
            {
                "nombre": "BaseCookie",
                "constructores": [
                    {
                        "nombre": "BaseCookie",
                        "sintaxis": [
                            "class http.cookies.BaseCookie([input])"
                        ],
                        "parametros": [
                            "input"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "js_output",
                        "sintaxis": [
                            "BaseCookie.js_output(attrs=None)"
                        ],
                        "parametros": [
                            "attrs"
                        ]
                    },
                    {
                        "nombre": "load",
                        "sintaxis": [
                            "BaseCookie.load(rawdata)"
                        ],
                        "parametros": [
                            "rawdata"
                        ]
                    },
                    {
                        "nombre": "output",
                        "sintaxis": [
                            "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')"
                        ],
                        "parametros": [
                            "attrs",
                            "sep",
                            "header"
                        ]
                    },
                    {
                        "nombre": "value_decode",
                        "sintaxis": [
                            "BaseCookie.value_decode(val)"
                        ],
                        "parametros": [
                            "val"
                        ]
                    },
                    {
                        "nombre": "value_encode",
                        "sintaxis": [
                            "BaseCookie.value_encode(val)"
                        ],
                        "parametros": [
                            "val"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BaseCookie"
                ]
            },
            {
                "nombre": "Morsel",
                "constructores": [
                    {
                        "nombre": "Morsel",
                        "sintaxis": [
                            "class http.cookies.Morsel"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "Morsel.copy(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "isReservedKey",
                        "sintaxis": [
                            "Morsel.isReservedKey(K)"
                        ],
                        "parametros": [
                            "K"
                        ]
                    },
                    {
                        "nombre": "js_output",
                        "sintaxis": [
                            "Morsel.js_output(attrs=None)"
                        ],
                        "parametros": [
                            "attrs"
                        ]
                    },
                    {
                        "nombre": "output",
                        "sintaxis": [
                            "Morsel.output(attrs=None, header='Set-Cookie:')"
                        ],
                        "parametros": [
                            "attrs",
                            "header"
                        ]
                    },
                    {
                        "nombre": "OutputString",
                        "sintaxis": [
                            "Morsel.OutputString(attrs=None)"
                        ],
                        "parametros": [
                            "attrs"
                        ]
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "Morsel.set(key, value, coded_value)"
                        ],
                        "parametros": [
                            "coded_value",
                            "value",
                            "key"
                        ]
                    },
                    {
                        "nombre": "setdefault",
                        "sintaxis": [
                            "Morsel.setdefault(key, value=None)"
                        ],
                        "parametros": [
                            "value",
                            "key"
                        ]
                    },
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "Morsel.update(values)"
                        ],
                        "parametros": [
                            "values"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "coded_value",
                        "sintaxis": [
                            "Morsel.coded_value"
                        ]
                    },
                    {
                        "nombre": "key",
                        "sintaxis": [
                            "Morsel.key"
                        ]
                    },
                    {
                        "nombre": "value",
                        "sintaxis": [
                            "Morsel.value"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Morsel"
                ]
            },
            {
                "nombre": "SimpleCookie",
                "constructores": [
                    {
                        "nombre": "SimpleCookie",
                        "sintaxis": [
                            "class http.cookies.SimpleCookie([input])"
                        ],
                        "parametros": [
                            "input"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SimpleCookie"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "CookieError",
                "sintaxis": [
                    "exception http.cookies.CookieError"
                ]
            }
        ]
    },
    {
        "nombre": "http.server",
        "funciones": [],
        "clases": [
            {
                "nombre": "BaseHTTPRequestHandler",
                "constructores": [
                    {
                        "nombre": "BaseHTTPRequestHandler",
                        "sintaxis": [
                            "class http.server.BaseHTTPRequestHandler(request, client_address, server)"
                        ],
                        "parametros": [
                            "server",
                            "request",
                            "client_address"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "address_string",
                        "sintaxis": [
                            "address_string()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "date_time_string",
                        "sintaxis": [
                            "date_time_string(timestamp=None)"
                        ],
                        "parametros": [
                            "timestamp"
                        ]
                    },
                    {
                        "nombre": "end_headers",
                        "sintaxis": [
                            "end_headers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "flush_headers",
                        "sintaxis": [
                            "flush_headers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_expect_100",
                        "sintaxis": [
                            "handle_expect_100()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_one_request",
                        "sintaxis": [
                            "handle_one_request()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "log_date_time_string",
                        "sintaxis": [
                            "log_date_time_string()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "log_error",
                        "sintaxis": [
                            "log_error(...)"
                        ],
                        "parametros": [
                            "..."
                        ]
                    },
                    {
                        "nombre": "log_message",
                        "sintaxis": [
                            "log_message(format, ...)"
                        ],
                        "parametros": [
                            "format",
                            "..."
                        ]
                    },
                    {
                        "nombre": "log_request",
                        "sintaxis": [
                            "log_request(code='-', size='-')"
                        ],
                        "parametros": [
                            "code",
                            "size"
                        ]
                    },
                    {
                        "nombre": "send_error",
                        "sintaxis": [
                            "send_error(code, message=None, explain=None)"
                        ],
                        "parametros": [
                            "code",
                            "message",
                            "explain"
                        ]
                    },
                    {
                        "nombre": "send_header",
                        "sintaxis": [
                            "send_header(keyword, value)"
                        ],
                        "parametros": [
                            "keyword",
                            "value"
                        ]
                    },
                    {
                        "nombre": "send_response",
                        "sintaxis": [
                            "send_response(code, message=None)"
                        ],
                        "parametros": [
                            "code",
                            "message"
                        ]
                    },
                    {
                        "nombre": "send_response_only",
                        "sintaxis": [
                            "send_response_only(code, message=None)"
                        ],
                        "parametros": [
                            "code",
                            "message"
                        ]
                    },
                    {
                        "nombre": "version_string",
                        "sintaxis": [
                            "version_string()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "client_address",
                        "sintaxis": [
                            "client_address"
                        ]
                    },
                    {
                        "nombre": "close_connection",
                        "sintaxis": [
                            "close_connection"
                        ]
                    },
                    {
                        "nombre": "command",
                        "sintaxis": [
                            "command"
                        ]
                    },
                    {
                        "nombre": "error_content_type",
                        "sintaxis": [
                            "error_content_type"
                        ]
                    },
                    {
                        "nombre": "error_message_format",
                        "sintaxis": [
                            "error_message_format"
                        ]
                    },
                    {
                        "nombre": "headers",
                        "sintaxis": [
                            "headers"
                        ]
                    },
                    {
                        "nombre": "MessageClass",
                        "sintaxis": [
                            "MessageClass"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "protocol_version",
                        "sintaxis": [
                            "protocol_version"
                        ]
                    },
                    {
                        "nombre": "requestline",
                        "sintaxis": [
                            "requestline"
                        ]
                    },
                    {
                        "nombre": "request_version",
                        "sintaxis": [
                            "request_version"
                        ]
                    },
                    {
                        "nombre": "responses",
                        "sintaxis": [
                            "responses"
                        ]
                    },
                    {
                        "nombre": "rfile",
                        "sintaxis": [
                            "rfile"
                        ]
                    },
                    {
                        "nombre": "server",
                        "sintaxis": [
                            "server"
                        ]
                    },
                    {
                        "nombre": "server_version",
                        "sintaxis": [
                            "server_version"
                        ]
                    },
                    {
                        "nombre": "sys_version",
                        "sintaxis": [
                            "sys_version"
                        ]
                    },
                    {
                        "nombre": "wfile",
                        "sintaxis": [
                            "wfile"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseHTTPRequestHandler"
                ]
            },
            {
                "nombre": "CGIHTTPRequestHandler",
                "constructores": [
                    {
                        "nombre": "CGIHTTPRequestHandler",
                        "sintaxis": [
                            "class http.server.CGIHTTPRequestHandler(request, client_address, server)"
                        ],
                        "parametros": [
                            "server",
                            "request",
                            "client_address"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "do_POST",
                        "sintaxis": [
                            "do_POST()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "cgi_directories",
                        "sintaxis": [
                            "cgi_directories"
                        ]
                    }
                ],
                "sintaxis": [
                    "class CGIHTTPRequestHandler"
                ]
            },
            {
                "nombre": "HTTPServer",
                "constructores": [
                    {
                        "nombre": "HTTPServer",
                        "sintaxis": [
                            "class http.server.HTTPServer(server_address, RequestHandlerClass)"
                        ],
                        "parametros": [
                            "server_address",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HTTPServer"
                ]
            },
            {
                "nombre": "SimpleHTTPRequestHandler",
                "constructores": [
                    {
                        "nombre": "SimpleHTTPRequestHandler",
                        "sintaxis": [
                            "class http.server.SimpleHTTPRequestHandler(request, client_address, server, directory=None)"
                        ],
                        "parametros": [
                            "server",
                            "directory",
                            "request",
                            "client_address"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "do_GET",
                        "sintaxis": [
                            "do_GET()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "do_HEAD",
                        "sintaxis": [
                            "do_HEAD()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "extensions_map",
                        "sintaxis": [
                            "extensions_map"
                        ]
                    },
                    {
                        "nombre": "server_version",
                        "sintaxis": [
                            "server_version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SimpleHTTPRequestHandler"
                ]
            },
            {
                "nombre": "ThreadingHTTPServer",
                "constructores": [
                    {
                        "nombre": "ThreadingHTTPServer",
                        "sintaxis": [
                            "class http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)"
                        ],
                        "parametros": [
                            "server_address",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ThreadingHTTPServer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "imaplib",
        "funciones": [
            {
                "nombre": "Int2AP",
                "sintaxis": [
                    "imaplib.Int2AP(num)"
                ],
                "parametros": [
                    "num"
                ]
            },
            {
                "nombre": "Internaldate2tuple",
                "sintaxis": [
                    "imaplib.Internaldate2tuple(datestr)"
                ],
                "parametros": [
                    "datestr"
                ]
            },
            {
                "nombre": "ParseFlags",
                "sintaxis": [
                    "imaplib.ParseFlags(flagstr)"
                ],
                "parametros": [
                    "flagstr"
                ]
            },
            {
                "nombre": "Time2Internaldate",
                "sintaxis": [
                    "imaplib.Time2Internaldate(date_time)"
                ],
                "parametros": [
                    "date_time"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "IMAP4",
                "constructores": [
                    {
                        "nombre": "IMAP4",
                        "sintaxis": [
                            "class imaplib.IMAP4(host='', port=IMAP4_PORT, timeout=None)"
                        ],
                        "parametros": [
                            "host",
                            "timeout",
                            "port"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "append",
                        "sintaxis": [
                            "IMAP4.append(mailbox, flags, date_time, message)"
                        ],
                        "parametros": [
                            "flags",
                            "mailbox",
                            "message",
                            "date_time"
                        ]
                    },
                    {
                        "nombre": "authenticate",
                        "sintaxis": [
                            "IMAP4.authenticate(mechanism, authobject)"
                        ],
                        "parametros": [
                            "authobject",
                            "mechanism"
                        ]
                    },
                    {
                        "nombre": "check",
                        "sintaxis": [
                            "IMAP4.check()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "IMAP4.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "IMAP4.copy(message_set, new_mailbox)"
                        ],
                        "parametros": [
                            "new_mailbox",
                            "message_set"
                        ]
                    },
                    {
                        "nombre": "create",
                        "sintaxis": [
                            "IMAP4.create(mailbox)"
                        ],
                        "parametros": [
                            "mailbox"
                        ]
                    },
                    {
                        "nombre": "delete",
                        "sintaxis": [
                            "IMAP4.delete(mailbox)"
                        ],
                        "parametros": [
                            "mailbox"
                        ]
                    },
                    {
                        "nombre": "deleteacl",
                        "sintaxis": [
                            "IMAP4.deleteacl(mailbox, who)"
                        ],
                        "parametros": [
                            "mailbox",
                            "who"
                        ]
                    },
                    {
                        "nombre": "enable",
                        "sintaxis": [
                            "IMAP4.enable(capability)"
                        ],
                        "parametros": [
                            "capability"
                        ]
                    },
                    {
                        "nombre": "expunge",
                        "sintaxis": [
                            "IMAP4.expunge()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fetch",
                        "sintaxis": [
                            "IMAP4.fetch(message_set, message_parts)"
                        ],
                        "parametros": [
                            "message_parts",
                            "message_set"
                        ]
                    },
                    {
                        "nombre": "getacl",
                        "sintaxis": [
                            "IMAP4.getacl(mailbox)"
                        ],
                        "parametros": [
                            "mailbox"
                        ]
                    },
                    {
                        "nombre": "getannotation",
                        "sintaxis": [
                            "IMAP4.getannotation(mailbox, entry, attribute)"
                        ],
                        "parametros": [
                            "mailbox",
                            "attribute",
                            "entry"
                        ]
                    },
                    {
                        "nombre": "getquota",
                        "sintaxis": [
                            "IMAP4.getquota(root)"
                        ],
                        "parametros": [
                            "root"
                        ]
                    },
                    {
                        "nombre": "getquotaroot",
                        "sintaxis": [
                            "IMAP4.getquotaroot(mailbox)"
                        ],
                        "parametros": [
                            "mailbox"
                        ]
                    },
                    {
                        "nombre": "list",
                        "sintaxis": [
                            "IMAP4.list([directory[, pattern]])"
                        ],
                        "parametros": [
                            "pattern",
                            "directory"
                        ]
                    },
                    {
                        "nombre": "login",
                        "sintaxis": [
                            "IMAP4.login(user, password)"
                        ],
                        "parametros": [
                            "password",
                            "user"
                        ]
                    },
                    {
                        "nombre": "login_cram_md5",
                        "sintaxis": [
                            "IMAP4.login_cram_md5(user, password)"
                        ],
                        "parametros": [
                            "password",
                            "user"
                        ]
                    },
                    {
                        "nombre": "logout",
                        "sintaxis": [
                            "IMAP4.logout()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lsub",
                        "sintaxis": [
                            "IMAP4.lsub(directory='\"\"', pattern='*')"
                        ],
                        "parametros": [
                            "pattern",
                            "directory"
                        ]
                    },
                    {
                        "nombre": "myrights",
                        "sintaxis": [
                            "IMAP4.myrights(mailbox)"
                        ],
                        "parametros": [
                            "mailbox"
                        ]
                    },
                    {
                        "nombre": "namespace",
                        "sintaxis": [
                            "IMAP4.namespace()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "noop",
                        "sintaxis": [
                            "IMAP4.noop()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "IMAP4.open(host, port, timeout=None)"
                        ],
                        "parametros": [
                            "host",
                            "timeout",
                            "port"
                        ]
                    },
                    {
                        "nombre": "partial",
                        "sintaxis": [
                            "IMAP4.partial(message_num, message_part, start, length)"
                        ],
                        "parametros": [
                            "message_num",
                            "message_part",
                            "length",
                            "start"
                        ]
                    },
                    {
                        "nombre": "proxyauth",
                        "sintaxis": [
                            "IMAP4.proxyauth(user)"
                        ],
                        "parametros": [
                            "user"
                        ]
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "IMAP4.read(size)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "readline",
                        "sintaxis": [
                            "IMAP4.readline()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "recent",
                        "sintaxis": [
                            "IMAP4.recent()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "rename",
                        "sintaxis": [
                            "IMAP4.rename(oldmailbox, newmailbox)"
                        ],
                        "parametros": [
                            "newmailbox",
                            "oldmailbox"
                        ]
                    },
                    {
                        "nombre": "response",
                        "sintaxis": [
                            "IMAP4.response(code)"
                        ],
                        "parametros": [
                            "code"
                        ]
                    },
                    {
                        "nombre": "search",
                        "sintaxis": [
                            "IMAP4.search(charset, criterion[, ...])"
                        ],
                        "parametros": [
                            "...",
                            "criterion",
                            "charset"
                        ]
                    },
                    {
                        "nombre": "select",
                        "sintaxis": [
                            "IMAP4.select(mailbox='INBOX', readonly=False)"
                        ],
                        "parametros": [
                            "mailbox",
                            "readonly"
                        ]
                    },
                    {
                        "nombre": "send",
                        "sintaxis": [
                            "IMAP4.send(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "setacl",
                        "sintaxis": [
                            "IMAP4.setacl(mailbox, who, what)"
                        ],
                        "parametros": [
                            "what",
                            "mailbox",
                            "who"
                        ]
                    },
                    {
                        "nombre": "setannotation",
                        "sintaxis": [
                            "IMAP4.setannotation(mailbox, entry, attribute[, ...])"
                        ],
                        "parametros": [
                            "mailbox",
                            "attribute",
                            "...",
                            "entry"
                        ]
                    },
                    {
                        "nombre": "setquota",
                        "sintaxis": [
                            "IMAP4.setquota(root, limits)"
                        ],
                        "parametros": [
                            "root",
                            "limits"
                        ]
                    },
                    {
                        "nombre": "shutdown",
                        "sintaxis": [
                            "IMAP4.shutdown()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "socket",
                        "sintaxis": [
                            "IMAP4.socket()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sort",
                        "sintaxis": [
                            "IMAP4.sort(sort_criteria, charset, search_criterion[, ...])"
                        ],
                        "parametros": [
                            "sort_criteria",
                            "...",
                            "charset",
                            "search_criterion"
                        ]
                    },
                    {
                        "nombre": "starttls",
                        "sintaxis": [
                            "IMAP4.starttls(ssl_context=None)"
                        ],
                        "parametros": [
                            "ssl_context"
                        ]
                    },
                    {
                        "nombre": "status",
                        "sintaxis": [
                            "IMAP4.status(mailbox, names)"
                        ],
                        "parametros": [
                            "mailbox",
                            "names"
                        ]
                    },
                    {
                        "nombre": "store",
                        "sintaxis": [
                            "IMAP4.store(message_set, command, flag_list)"
                        ],
                        "parametros": [
                            "message_set",
                            "flag_list",
                            "command"
                        ]
                    },
                    {
                        "nombre": "subscribe",
                        "sintaxis": [
                            "IMAP4.subscribe(mailbox)"
                        ],
                        "parametros": [
                            "mailbox"
                        ]
                    },
                    {
                        "nombre": "thread",
                        "sintaxis": [
                            "IMAP4.thread(threading_algorithm, charset, search_criterion[, ...])"
                        ],
                        "parametros": [
                            "...",
                            "charset",
                            "search_criterion",
                            "threading_algorithm"
                        ]
                    },
                    {
                        "nombre": "uid",
                        "sintaxis": [
                            "IMAP4.uid(command, arg[, ...])"
                        ],
                        "parametros": [
                            "arg",
                            "...",
                            "command"
                        ]
                    },
                    {
                        "nombre": "unselect",
                        "sintaxis": [
                            "IMAP4.unselect()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unsubscribe",
                        "sintaxis": [
                            "IMAP4.unsubscribe(mailbox)"
                        ],
                        "parametros": [
                            "mailbox"
                        ]
                    },
                    {
                        "nombre": "xatom",
                        "sintaxis": [
                            "IMAP4.xatom(name[, ...])"
                        ],
                        "parametros": [
                            "...",
                            "name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "debug",
                        "sintaxis": [
                            "IMAP4.debug"
                        ]
                    },
                    {
                        "nombre": "PROTOCOL_VERSION",
                        "sintaxis": [
                            "IMAP4.PROTOCOL_VERSION"
                        ]
                    },
                    {
                        "nombre": "utf8_enabled",
                        "sintaxis": [
                            "IMAP4.utf8_enabled"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IMAP4"
                ]
            },
            {
                "nombre": "IMAP4_SSL",
                "constructores": [
                    {
                        "nombre": "IMAP4_SSL",
                        "sintaxis": [
                            "class imaplib.IMAP4_SSL(host='', port=IMAP4_SSL_PORT, keyfile=None, certfile=None, ssl_context=None, timeout=None)"
                        ],
                        "parametros": [
                            "certfile",
                            "port",
                            "timeout",
                            "ssl_context",
                            "host",
                            "keyfile"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IMAP4_SSL"
                ]
            },
            {
                "nombre": "IMAP4_stream",
                "constructores": [
                    {
                        "nombre": "IMAP4_stream",
                        "sintaxis": [
                            "class imaplib.IMAP4_stream(command)"
                        ],
                        "parametros": [
                            "command"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IMAP4_stream"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "abort",
                "sintaxis": [
                    "exception IMAP4.abort"
                ]
            },
            {
                "nombre": "error",
                "sintaxis": [
                    "exception IMAP4.error"
                ]
            },
            {
                "nombre": "readonly",
                "sintaxis": [
                    "exception IMAP4.readonly"
                ]
            }
        ]
    },
    {
        "nombre": "imghdr",
        "funciones": [
            {
                "nombre": "what",
                "sintaxis": [
                    "imghdr.what(file, h=None)"
                ],
                "parametros": [
                    "h",
                    "file"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "tests",
                "sintaxis": [
                    "imghdr.tests"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "imp",
        "funciones": [
            {
                "nombre": "acquire_lock",
                "sintaxis": [
                    "imp.acquire_lock()"
                ],
                "parametros": []
            },
            {
                "nombre": "cache_from_source",
                "sintaxis": [
                    "imp.cache_from_source(path, debug_override=None)"
                ],
                "parametros": [
                    "debug_override",
                    "path"
                ]
            },
            {
                "nombre": "find_module",
                "sintaxis": [
                    "imp.find_module(name[, path])"
                ],
                "parametros": [
                    "path",
                    "name"
                ]
            },
            {
                "nombre": "get_magic",
                "sintaxis": [
                    "imp.get_magic()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_suffixes",
                "sintaxis": [
                    "imp.get_suffixes()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_tag",
                "sintaxis": [
                    "imp.get_tag()"
                ],
                "parametros": []
            },
            {
                "nombre": "load_module",
                "sintaxis": [
                    "imp.load_module(name, file, pathname, description)"
                ],
                "parametros": [
                    "description",
                    "file",
                    "pathname",
                    "name"
                ]
            },
            {
                "nombre": "lock_held",
                "sintaxis": [
                    "imp.lock_held()"
                ],
                "parametros": []
            },
            {
                "nombre": "new_module",
                "sintaxis": [
                    "imp.new_module(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "release_lock",
                "sintaxis": [
                    "imp.release_lock()"
                ],
                "parametros": []
            },
            {
                "nombre": "reload",
                "sintaxis": [
                    "imp.reload(module)"
                ],
                "parametros": [
                    "module"
                ]
            },
            {
                "nombre": "source_from_cache",
                "sintaxis": [
                    "imp.source_from_cache(path)"
                ],
                "parametros": [
                    "path"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "NullImporter",
                "constructores": [
                    {
                        "nombre": "NullImporter",
                        "sintaxis": [
                            "class imp.NullImporter(path_string)"
                        ],
                        "parametros": [
                            "path_string"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "find_module(fullname[, path])"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class NullImporter"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "C_BUILTIN",
                "sintaxis": [
                    "imp.C_BUILTIN"
                ]
            },
            {
                "nombre": "C_EXTENSION",
                "sintaxis": [
                    "imp.C_EXTENSION"
                ]
            },
            {
                "nombre": "PKG_DIRECTORY",
                "sintaxis": [
                    "imp.PKG_DIRECTORY"
                ]
            },
            {
                "nombre": "PY_COMPILED",
                "sintaxis": [
                    "imp.PY_COMPILED"
                ]
            },
            {
                "nombre": "PY_FROZEN",
                "sintaxis": [
                    "imp.PY_FROZEN"
                ]
            },
            {
                "nombre": "PY_SOURCE",
                "sintaxis": [
                    "imp.PY_SOURCE"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "importlib",
        "funciones": [
            {
                "nombre": "all_suffixes",
                "sintaxis": [
                    "importlib.machinery.all_suffixes()"
                ],
                "parametros": []
            },
            {
                "nombre": "as_file",
                "sintaxis": [
                    "importlib.resources.as_file(traversable)"
                ],
                "parametros": [
                    "traversable"
                ]
            },
            {
                "nombre": "cache_from_source",
                "sintaxis": [
                    "importlib.util.cache_from_source(path, debug_override=None, *, optimization=None)"
                ],
                "parametros": [
                    "*",
                    "optimization",
                    "debug_override",
                    "path"
                ]
            },
            {
                "nombre": "contents",
                "sintaxis": [
                    "importlib.resources.contents(package)"
                ],
                "parametros": [
                    "package"
                ]
            },
            {
                "nombre": "decode_source",
                "sintaxis": [
                    "importlib.util.decode_source(source_bytes)"
                ],
                "parametros": [
                    "source_bytes"
                ]
            },
            {
                "nombre": "files",
                "sintaxis": [
                    "importlib.resources.files(package)"
                ],
                "parametros": [
                    "package"
                ]
            },
            {
                "nombre": "find_loader",
                "sintaxis": [
                    "importlib.find_loader(name, path=None)"
                ],
                "parametros": [
                    "path",
                    "name"
                ]
            },
            {
                "nombre": "find_spec",
                "sintaxis": [
                    "importlib.util.find_spec(name, package=None)"
                ],
                "parametros": [
                    "package",
                    "name"
                ]
            },
            {
                "nombre": "import_module",
                "sintaxis": [
                    "importlib.import_module(name, package=None)"
                ],
                "parametros": [
                    "package",
                    "name"
                ]
            },
            {
                "nombre": "invalidate_caches",
                "sintaxis": [
                    "importlib.invalidate_caches()"
                ],
                "parametros": []
            },
            {
                "nombre": "is_resource",
                "sintaxis": [
                    "importlib.resources.is_resource(package, name)"
                ],
                "parametros": [
                    "package",
                    "name"
                ]
            },
            {
                "nombre": "module_for_loader",
                "sintaxis": [
                    "@importlib.util.module_for_loader"
                ],
                "parametros": []
            },
            {
                "nombre": "module_from_spec",
                "sintaxis": [
                    "importlib.util.module_from_spec(spec)"
                ],
                "parametros": [
                    "spec"
                ]
            },
            {
                "nombre": "open_binary",
                "sintaxis": [
                    "importlib.resources.open_binary(package, resource)"
                ],
                "parametros": [
                    "package",
                    "resource"
                ]
            },
            {
                "nombre": "open_text",
                "sintaxis": [
                    "importlib.resources.open_text(package, resource, encoding='utf-8', errors='strict')"
                ],
                "parametros": [
                    "package",
                    "encoding",
                    "errors",
                    "resource"
                ]
            },
            {
                "nombre": "path",
                "sintaxis": [
                    "importlib.resources.path(package, resource)"
                ],
                "parametros": [
                    "package",
                    "resource"
                ]
            },
            {
                "nombre": "read_binary",
                "sintaxis": [
                    "importlib.resources.read_binary(package, resource)"
                ],
                "parametros": [
                    "package",
                    "resource"
                ]
            },
            {
                "nombre": "read_text",
                "sintaxis": [
                    "importlib.resources.read_text(package, resource, encoding='utf-8', errors='strict')"
                ],
                "parametros": [
                    "package",
                    "encoding",
                    "errors",
                    "resource"
                ]
            },
            {
                "nombre": "reload",
                "sintaxis": [
                    "importlib.reload(module)"
                ],
                "parametros": [
                    "module"
                ]
            },
            {
                "nombre": "resolve_name",
                "sintaxis": [
                    "importlib.util.resolve_name(name, package)"
                ],
                "parametros": [
                    "package",
                    "name"
                ]
            },
            {
                "nombre": "set_loader",
                "sintaxis": [
                    "@importlib.util.set_loader"
                ],
                "parametros": []
            },
            {
                "nombre": "set_package",
                "sintaxis": [
                    "@importlib.util.set_package"
                ],
                "parametros": []
            },
            {
                "nombre": "source_from_cache",
                "sintaxis": [
                    "importlib.util.source_from_cache(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "source_hash",
                "sintaxis": [
                    "importlib.util.source_hash(source_bytes)"
                ],
                "parametros": [
                    "source_bytes"
                ]
            },
            {
                "nombre": "spec_from_file_location",
                "sintaxis": [
                    "importlib.util.spec_from_file_location(name, location, *, loader=None, submodule_search_locations=None)"
                ],
                "parametros": [
                    "name",
                    "loader",
                    "submodule_search_locations",
                    "*",
                    "location"
                ]
            },
            {
                "nombre": "spec_from_loader",
                "sintaxis": [
                    "importlib.util.spec_from_loader(name, loader, *, origin=None, is_package=None)"
                ],
                "parametros": [
                    "name",
                    "loader",
                    "is_package",
                    "origin",
                    "*"
                ]
            },
            {
                "nombre": "__import__",
                "sintaxis": [
                    "importlib.__import__(name, globals=None, locals=None, fromlist=(), level=0)"
                ],
                "parametros": [
                    "name",
                    "fromlist",
                    "globals",
                    "locals",
                    "level"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BuiltinImporter",
                "constructores": [
                    {
                        "nombre": "BuiltinImporter",
                        "sintaxis": [
                            "class importlib.machinery.BuiltinImporter"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BuiltinImporter"
                ]
            },
            {
                "nombre": "ExecutionLoader",
                "constructores": [
                    {
                        "nombre": "ExecutionLoader",
                        "sintaxis": [
                            "class importlib.abc.ExecutionLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "abstractmethod get_filename(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ExecutionLoader"
                ]
            },
            {
                "nombre": "ExtensionFileLoader",
                "constructores": [
                    {
                        "nombre": "ExtensionFileLoader",
                        "sintaxis": [
                            "class importlib.machinery.ExtensionFileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "create_module",
                        "sintaxis": [
                            "create_module(spec)"
                        ],
                        "parametros": [
                            "spec"
                        ]
                    },
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "get_filename(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ExtensionFileLoader"
                ]
            },
            {
                "nombre": "FileFinder",
                "constructores": [
                    {
                        "nombre": "FileFinder",
                        "sintaxis": [
                            "class importlib.machinery.FileFinder(path, *loader_details)"
                        ],
                        "parametros": [
                            "loader_details",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_loader",
                        "sintaxis": [
                            "find_loader(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "find_spec(fullname, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "invalidate_caches()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "path_hook",
                        "sintaxis": [
                            "classmethod path_hook(*loader_details)"
                        ],
                        "parametros": [
                            "loader_details"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FileFinder"
                ]
            },
            {
                "nombre": "FileLoader",
                "constructores": [
                    {
                        "nombre": "FileLoader",
                        "sintaxis": [
                            "class importlib.abc.FileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_data",
                        "sintaxis": [
                            "abstractmethod get_data(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "abstractmethod get_filename(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FileLoader"
                ]
            },
            {
                "nombre": "Finder",
                "constructores": [
                    {
                        "nombre": "Finder",
                        "sintaxis": [
                            "class importlib.abc.Finder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "abstractmethod find_module(fullname, path=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Finder"
                ]
            },
            {
                "nombre": "FrozenImporter",
                "constructores": [
                    {
                        "nombre": "FrozenImporter",
                        "sintaxis": [
                            "class importlib.machinery.FrozenImporter"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FrozenImporter"
                ]
            },
            {
                "nombre": "importlib.machinery",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "BYTECODE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.BYTECODE_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "DEBUG_BYTECODE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "EXTENSION_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.EXTENSION_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "OPTIMIZED_BYTECODE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "SOURCE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.SOURCE_SUFFIXES"
                        ]
                    }
                ],
                "sintaxis": [
                    "class importlib.machinery"
                ]
            },
            {
                "nombre": "importlib.util",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "MAGIC_NUMBER",
                        "sintaxis": [
                            "importlib.util.MAGIC_NUMBER"
                        ]
                    }
                ],
                "sintaxis": [
                    "class importlib.util"
                ]
            },
            {
                "nombre": "InspectLoader",
                "constructores": [
                    {
                        "nombre": "InspectLoader",
                        "sintaxis": [
                            "class importlib.abc.InspectLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "abstractmethod get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "source_to_code",
                        "sintaxis": [
                            "static source_to_code(data, path='<string>')"
                        ],
                        "parametros": [
                            "path",
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class InspectLoader"
                ]
            },
            {
                "nombre": "LazyLoader",
                "constructores": [
                    {
                        "nombre": "LazyLoader",
                        "sintaxis": [
                            "class importlib.util.LazyLoader(loader)"
                        ],
                        "parametros": [
                            "loader"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "factory",
                        "sintaxis": [
                            "classmethod factory(loader)"
                        ],
                        "parametros": [
                            "loader"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LazyLoader"
                ]
            },
            {
                "nombre": "Loader",
                "constructores": [
                    {
                        "nombre": "Loader",
                        "sintaxis": [
                            "class importlib.abc.Loader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "create_module",
                        "sintaxis": [
                            "create_module(spec)"
                        ],
                        "parametros": [
                            "spec"
                        ]
                    },
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "module_repr",
                        "sintaxis": [
                            "module_repr(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Loader"
                ]
            },
            {
                "nombre": "MetaPathFinder",
                "constructores": [
                    {
                        "nombre": "MetaPathFinder",
                        "sintaxis": [
                            "class importlib.abc.MetaPathFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "find_module(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "find_spec(fullname, path, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target",
                            "path"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "invalidate_caches()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MetaPathFinder"
                ]
            },
            {
                "nombre": "ModuleSpec",
                "constructores": [
                    {
                        "nombre": "ModuleSpec",
                        "sintaxis": [
                            "class importlib.machinery.ModuleSpec(name, loader, *, origin=None, loader_state=None, is_package=None)"
                        ],
                        "parametros": [
                            "loader_state",
                            "name",
                            "loader",
                            "is_package",
                            "origin",
                            "*"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "cached",
                        "sintaxis": [
                            "cached"
                        ]
                    },
                    {
                        "nombre": "has_location",
                        "sintaxis": [
                            "has_location"
                        ]
                    },
                    {
                        "nombre": "loader",
                        "sintaxis": [
                            "loader"
                        ]
                    },
                    {
                        "nombre": "loader_state",
                        "sintaxis": [
                            "loader_state"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "origin",
                        "sintaxis": [
                            "origin"
                        ]
                    },
                    {
                        "nombre": "parent",
                        "sintaxis": [
                            "parent"
                        ]
                    },
                    {
                        "nombre": "submodule_search_locations",
                        "sintaxis": [
                            "submodule_search_locations"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ModuleSpec"
                ]
            },
            {
                "nombre": "PathEntryFinder",
                "constructores": [
                    {
                        "nombre": "PathEntryFinder",
                        "sintaxis": [
                            "class importlib.abc.PathEntryFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_loader",
                        "sintaxis": [
                            "find_loader(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "find_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "find_spec(fullname, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "invalidate_caches()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PathEntryFinder"
                ]
            },
            {
                "nombre": "PathFinder",
                "constructores": [
                    {
                        "nombre": "PathFinder",
                        "sintaxis": [
                            "class importlib.machinery.PathFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "classmethod find_module(fullname, path=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "classmethod find_spec(fullname, path=None, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target",
                            "path"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "classmethod invalidate_caches()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PathFinder"
                ]
            },
            {
                "nombre": "ResourceLoader",
                "constructores": [
                    {
                        "nombre": "ResourceLoader",
                        "sintaxis": [
                            "class importlib.abc.ResourceLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_data",
                        "sintaxis": [
                            "abstractmethod get_data(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ResourceLoader"
                ]
            },
            {
                "nombre": "ResourceReader",
                "constructores": [
                    {
                        "nombre": "ResourceReader",
                        "sintaxis": [
                            "class importlib.abc.ResourceReader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "contents",
                        "sintaxis": [
                            "abstractmethod contents()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_resource",
                        "sintaxis": [
                            "abstractmethod is_resource(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "open_resource",
                        "sintaxis": [
                            "abstractmethod open_resource(resource)"
                        ],
                        "parametros": [
                            "resource"
                        ]
                    },
                    {
                        "nombre": "resource_path",
                        "sintaxis": [
                            "abstractmethod resource_path(resource)"
                        ],
                        "parametros": [
                            "resource"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ResourceReader"
                ]
            },
            {
                "nombre": "SourceFileLoader",
                "constructores": [
                    {
                        "nombre": "SourceFileLoader",
                        "sintaxis": [
                            "class importlib.machinery.SourceFileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(name=None)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path_stats",
                        "sintaxis": [
                            "path_stats(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "set_data",
                        "sintaxis": [
                            "set_data(path, data)"
                        ],
                        "parametros": [
                            "path",
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SourceFileLoader"
                ]
            },
            {
                "nombre": "SourcelessFileLoader",
                "constructores": [
                    {
                        "nombre": "SourcelessFileLoader",
                        "sintaxis": [
                            "class importlib.machinery.SourcelessFileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(name=None)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SourcelessFileLoader"
                ]
            },
            {
                "nombre": "SourceLoader",
                "constructores": [
                    {
                        "nombre": "SourceLoader",
                        "sintaxis": [
                            "class importlib.abc.SourceLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "path_mtime",
                        "sintaxis": [
                            "path_mtime(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "path_stats",
                        "sintaxis": [
                            "path_stats(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "set_data",
                        "sintaxis": [
                            "set_data(path, data)"
                        ],
                        "parametros": [
                            "path",
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SourceLoader"
                ]
            },
            {
                "nombre": "Traversable",
                "constructores": [
                    {
                        "nombre": "Traversable",
                        "sintaxis": [
                            "class importlib.abc.Traversable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "is_dir",
                        "sintaxis": [
                            "abstractmethod is_dir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_file",
                        "sintaxis": [
                            "abstractmethod is_file()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iterdir",
                        "sintaxis": [
                            "abstractmethod iterdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "joinpath",
                        "sintaxis": [
                            "abstractmethod joinpath(child)"
                        ],
                        "parametros": [
                            "child"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "abstractmethod name()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "abstractmethod open(mode='r', *args, **kwargs)"
                        ],
                        "parametros": [
                            "mode",
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "read_bytes",
                        "sintaxis": [
                            "read_bytes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_text",
                        "sintaxis": [
                            "read_text(encoding=None)"
                        ],
                        "parametros": [
                            "encoding"
                        ]
                    },
                    {
                        "nombre": "__truediv__",
                        "sintaxis": [
                            "abstractmethod __truediv__(child)"
                        ],
                        "parametros": [
                            "child"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Traversable"
                ]
            },
            {
                "nombre": "TraversableResources",
                "constructores": [
                    {
                        "nombre": "TraversableResources",
                        "sintaxis": [
                            "class importlib.abc.TraversableResources"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TraversableResources"
                ]
            },
            {
                "nombre": "WindowsRegistryFinder",
                "constructores": [
                    {
                        "nombre": "WindowsRegistryFinder",
                        "sintaxis": [
                            "class importlib.machinery.WindowsRegistryFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class WindowsRegistryFinder"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "Package",
                "sintaxis": [
                    "importlib.resources.Package"
                ]
            },
            {
                "nombre": "Resource",
                "sintaxis": [
                    "importlib.resources.Resource"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "importlib.abc",
        "funciones": [],
        "clases": [
            {
                "nombre": "ExecutionLoader",
                "constructores": [
                    {
                        "nombre": "ExecutionLoader",
                        "sintaxis": [
                            "class importlib.abc.ExecutionLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "abstractmethod get_filename(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ExecutionLoader"
                ]
            },
            {
                "nombre": "FileLoader",
                "constructores": [
                    {
                        "nombre": "FileLoader",
                        "sintaxis": [
                            "class importlib.abc.FileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_data",
                        "sintaxis": [
                            "abstractmethod get_data(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "abstractmethod get_filename(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FileLoader"
                ]
            },
            {
                "nombre": "Finder",
                "constructores": [
                    {
                        "nombre": "Finder",
                        "sintaxis": [
                            "class importlib.abc.Finder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "abstractmethod find_module(fullname, path=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Finder"
                ]
            },
            {
                "nombre": "InspectLoader",
                "constructores": [
                    {
                        "nombre": "InspectLoader",
                        "sintaxis": [
                            "class importlib.abc.InspectLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "abstractmethod get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "source_to_code",
                        "sintaxis": [
                            "static source_to_code(data, path='<string>')"
                        ],
                        "parametros": [
                            "path",
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class InspectLoader"
                ]
            },
            {
                "nombre": "Loader",
                "constructores": [
                    {
                        "nombre": "Loader",
                        "sintaxis": [
                            "class importlib.abc.Loader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "create_module",
                        "sintaxis": [
                            "create_module(spec)"
                        ],
                        "parametros": [
                            "spec"
                        ]
                    },
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "module_repr",
                        "sintaxis": [
                            "module_repr(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Loader"
                ]
            },
            {
                "nombre": "MetaPathFinder",
                "constructores": [
                    {
                        "nombre": "MetaPathFinder",
                        "sintaxis": [
                            "class importlib.abc.MetaPathFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "find_module(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "find_spec(fullname, path, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target",
                            "path"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "invalidate_caches()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MetaPathFinder"
                ]
            },
            {
                "nombre": "PathEntryFinder",
                "constructores": [
                    {
                        "nombre": "PathEntryFinder",
                        "sintaxis": [
                            "class importlib.abc.PathEntryFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_loader",
                        "sintaxis": [
                            "find_loader(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "find_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "find_spec(fullname, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "invalidate_caches()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PathEntryFinder"
                ]
            },
            {
                "nombre": "ResourceLoader",
                "constructores": [
                    {
                        "nombre": "ResourceLoader",
                        "sintaxis": [
                            "class importlib.abc.ResourceLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_data",
                        "sintaxis": [
                            "abstractmethod get_data(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ResourceLoader"
                ]
            },
            {
                "nombre": "ResourceReader",
                "constructores": [
                    {
                        "nombre": "ResourceReader",
                        "sintaxis": [
                            "class importlib.abc.ResourceReader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "contents",
                        "sintaxis": [
                            "abstractmethod contents()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_resource",
                        "sintaxis": [
                            "abstractmethod is_resource(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "open_resource",
                        "sintaxis": [
                            "abstractmethod open_resource(resource)"
                        ],
                        "parametros": [
                            "resource"
                        ]
                    },
                    {
                        "nombre": "resource_path",
                        "sintaxis": [
                            "abstractmethod resource_path(resource)"
                        ],
                        "parametros": [
                            "resource"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ResourceReader"
                ]
            },
            {
                "nombre": "SourceLoader",
                "constructores": [
                    {
                        "nombre": "SourceLoader",
                        "sintaxis": [
                            "class importlib.abc.SourceLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "path_mtime",
                        "sintaxis": [
                            "path_mtime(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "path_stats",
                        "sintaxis": [
                            "path_stats(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "set_data",
                        "sintaxis": [
                            "set_data(path, data)"
                        ],
                        "parametros": [
                            "path",
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SourceLoader"
                ]
            },
            {
                "nombre": "Traversable",
                "constructores": [
                    {
                        "nombre": "Traversable",
                        "sintaxis": [
                            "class importlib.abc.Traversable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "is_dir",
                        "sintaxis": [
                            "abstractmethod is_dir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_file",
                        "sintaxis": [
                            "abstractmethod is_file()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iterdir",
                        "sintaxis": [
                            "abstractmethod iterdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "joinpath",
                        "sintaxis": [
                            "abstractmethod joinpath(child)"
                        ],
                        "parametros": [
                            "child"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "abstractmethod name()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "abstractmethod open(mode='r', *args, **kwargs)"
                        ],
                        "parametros": [
                            "mode",
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "read_bytes",
                        "sintaxis": [
                            "read_bytes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_text",
                        "sintaxis": [
                            "read_text(encoding=None)"
                        ],
                        "parametros": [
                            "encoding"
                        ]
                    },
                    {
                        "nombre": "__truediv__",
                        "sintaxis": [
                            "abstractmethod __truediv__(child)"
                        ],
                        "parametros": [
                            "child"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Traversable"
                ]
            },
            {
                "nombre": "TraversableResources",
                "constructores": [
                    {
                        "nombre": "TraversableResources",
                        "sintaxis": [
                            "class importlib.abc.TraversableResources"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TraversableResources"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "importlib.machinery",
        "funciones": [
            {
                "nombre": "all_suffixes",
                "sintaxis": [
                    "importlib.machinery.all_suffixes()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "BuiltinImporter",
                "constructores": [
                    {
                        "nombre": "BuiltinImporter",
                        "sintaxis": [
                            "class importlib.machinery.BuiltinImporter"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BuiltinImporter"
                ]
            },
            {
                "nombre": "ExtensionFileLoader",
                "constructores": [
                    {
                        "nombre": "ExtensionFileLoader",
                        "sintaxis": [
                            "class importlib.machinery.ExtensionFileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "create_module",
                        "sintaxis": [
                            "create_module(spec)"
                        ],
                        "parametros": [
                            "spec"
                        ]
                    },
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "get_filename(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ExtensionFileLoader"
                ]
            },
            {
                "nombre": "FileFinder",
                "constructores": [
                    {
                        "nombre": "FileFinder",
                        "sintaxis": [
                            "class importlib.machinery.FileFinder(path, *loader_details)"
                        ],
                        "parametros": [
                            "loader_details",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_loader",
                        "sintaxis": [
                            "find_loader(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "find_spec(fullname, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "invalidate_caches()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "path_hook",
                        "sintaxis": [
                            "classmethod path_hook(*loader_details)"
                        ],
                        "parametros": [
                            "loader_details"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FileFinder"
                ]
            },
            {
                "nombre": "FrozenImporter",
                "constructores": [
                    {
                        "nombre": "FrozenImporter",
                        "sintaxis": [
                            "class importlib.machinery.FrozenImporter"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FrozenImporter"
                ]
            },
            {
                "nombre": "importlib.machinery",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "BYTECODE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.BYTECODE_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "DEBUG_BYTECODE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "EXTENSION_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.EXTENSION_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "OPTIMIZED_BYTECODE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"
                        ]
                    },
                    {
                        "nombre": "SOURCE_SUFFIXES",
                        "sintaxis": [
                            "importlib.machinery.SOURCE_SUFFIXES"
                        ]
                    }
                ],
                "sintaxis": [
                    "class importlib.machinery"
                ]
            },
            {
                "nombre": "ModuleSpec",
                "constructores": [
                    {
                        "nombre": "ModuleSpec",
                        "sintaxis": [
                            "class importlib.machinery.ModuleSpec(name, loader, *, origin=None, loader_state=None, is_package=None)"
                        ],
                        "parametros": [
                            "loader_state",
                            "name",
                            "loader",
                            "is_package",
                            "origin",
                            "*"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "cached",
                        "sintaxis": [
                            "cached"
                        ]
                    },
                    {
                        "nombre": "has_location",
                        "sintaxis": [
                            "has_location"
                        ]
                    },
                    {
                        "nombre": "loader",
                        "sintaxis": [
                            "loader"
                        ]
                    },
                    {
                        "nombre": "loader_state",
                        "sintaxis": [
                            "loader_state"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "origin",
                        "sintaxis": [
                            "origin"
                        ]
                    },
                    {
                        "nombre": "parent",
                        "sintaxis": [
                            "parent"
                        ]
                    },
                    {
                        "nombre": "submodule_search_locations",
                        "sintaxis": [
                            "submodule_search_locations"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ModuleSpec"
                ]
            },
            {
                "nombre": "PathFinder",
                "constructores": [
                    {
                        "nombre": "PathFinder",
                        "sintaxis": [
                            "class importlib.machinery.PathFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "classmethod find_module(fullname, path=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "classmethod find_spec(fullname, path=None, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target",
                            "path"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "classmethod invalidate_caches()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PathFinder"
                ]
            },
            {
                "nombre": "SourceFileLoader",
                "constructores": [
                    {
                        "nombre": "SourceFileLoader",
                        "sintaxis": [
                            "class importlib.machinery.SourceFileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(name=None)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path_stats",
                        "sintaxis": [
                            "path_stats(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "set_data",
                        "sintaxis": [
                            "set_data(path, data)"
                        ],
                        "parametros": [
                            "path",
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SourceFileLoader"
                ]
            },
            {
                "nombre": "SourcelessFileLoader",
                "constructores": [
                    {
                        "nombre": "SourcelessFileLoader",
                        "sintaxis": [
                            "class importlib.machinery.SourcelessFileLoader(fullname, path)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(name=None)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SourcelessFileLoader"
                ]
            },
            {
                "nombre": "WindowsRegistryFinder",
                "constructores": [
                    {
                        "nombre": "WindowsRegistryFinder",
                        "sintaxis": [
                            "class importlib.machinery.WindowsRegistryFinder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class WindowsRegistryFinder"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "importlib.metadata",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "importlib.resources",
        "funciones": [
            {
                "nombre": "as_file",
                "sintaxis": [
                    "importlib.resources.as_file(traversable)"
                ],
                "parametros": [
                    "traversable"
                ]
            },
            {
                "nombre": "contents",
                "sintaxis": [
                    "importlib.resources.contents(package)"
                ],
                "parametros": [
                    "package"
                ]
            },
            {
                "nombre": "files",
                "sintaxis": [
                    "importlib.resources.files(package)"
                ],
                "parametros": [
                    "package"
                ]
            },
            {
                "nombre": "is_resource",
                "sintaxis": [
                    "importlib.resources.is_resource(package, name)"
                ],
                "parametros": [
                    "package",
                    "name"
                ]
            },
            {
                "nombre": "open_binary",
                "sintaxis": [
                    "importlib.resources.open_binary(package, resource)"
                ],
                "parametros": [
                    "package",
                    "resource"
                ]
            },
            {
                "nombre": "open_text",
                "sintaxis": [
                    "importlib.resources.open_text(package, resource, encoding='utf-8', errors='strict')"
                ],
                "parametros": [
                    "package",
                    "encoding",
                    "errors",
                    "resource"
                ]
            },
            {
                "nombre": "path",
                "sintaxis": [
                    "importlib.resources.path(package, resource)"
                ],
                "parametros": [
                    "package",
                    "resource"
                ]
            },
            {
                "nombre": "read_binary",
                "sintaxis": [
                    "importlib.resources.read_binary(package, resource)"
                ],
                "parametros": [
                    "package",
                    "resource"
                ]
            },
            {
                "nombre": "read_text",
                "sintaxis": [
                    "importlib.resources.read_text(package, resource, encoding='utf-8', errors='strict')"
                ],
                "parametros": [
                    "package",
                    "encoding",
                    "errors",
                    "resource"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "Package",
                "sintaxis": [
                    "importlib.resources.Package"
                ]
            },
            {
                "nombre": "Resource",
                "sintaxis": [
                    "importlib.resources.Resource"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "importlib.util",
        "funciones": [
            {
                "nombre": "cache_from_source",
                "sintaxis": [
                    "importlib.util.cache_from_source(path, debug_override=None, *, optimization=None)"
                ],
                "parametros": [
                    "*",
                    "optimization",
                    "debug_override",
                    "path"
                ]
            },
            {
                "nombre": "decode_source",
                "sintaxis": [
                    "importlib.util.decode_source(source_bytes)"
                ],
                "parametros": [
                    "source_bytes"
                ]
            },
            {
                "nombre": "find_spec",
                "sintaxis": [
                    "importlib.util.find_spec(name, package=None)"
                ],
                "parametros": [
                    "package",
                    "name"
                ]
            },
            {
                "nombre": "module_for_loader",
                "sintaxis": [
                    "@importlib.util.module_for_loader"
                ],
                "parametros": []
            },
            {
                "nombre": "module_from_spec",
                "sintaxis": [
                    "importlib.util.module_from_spec(spec)"
                ],
                "parametros": [
                    "spec"
                ]
            },
            {
                "nombre": "resolve_name",
                "sintaxis": [
                    "importlib.util.resolve_name(name, package)"
                ],
                "parametros": [
                    "package",
                    "name"
                ]
            },
            {
                "nombre": "set_loader",
                "sintaxis": [
                    "@importlib.util.set_loader"
                ],
                "parametros": []
            },
            {
                "nombre": "set_package",
                "sintaxis": [
                    "@importlib.util.set_package"
                ],
                "parametros": []
            },
            {
                "nombre": "source_from_cache",
                "sintaxis": [
                    "importlib.util.source_from_cache(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "source_hash",
                "sintaxis": [
                    "importlib.util.source_hash(source_bytes)"
                ],
                "parametros": [
                    "source_bytes"
                ]
            },
            {
                "nombre": "spec_from_file_location",
                "sintaxis": [
                    "importlib.util.spec_from_file_location(name, location, *, loader=None, submodule_search_locations=None)"
                ],
                "parametros": [
                    "name",
                    "loader",
                    "submodule_search_locations",
                    "*",
                    "location"
                ]
            },
            {
                "nombre": "spec_from_loader",
                "sintaxis": [
                    "importlib.util.spec_from_loader(name, loader, *, origin=None, is_package=None)"
                ],
                "parametros": [
                    "name",
                    "loader",
                    "is_package",
                    "origin",
                    "*"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "importlib.util",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "MAGIC_NUMBER",
                        "sintaxis": [
                            "importlib.util.MAGIC_NUMBER"
                        ]
                    }
                ],
                "sintaxis": [
                    "class importlib.util"
                ]
            },
            {
                "nombre": "LazyLoader",
                "constructores": [
                    {
                        "nombre": "LazyLoader",
                        "sintaxis": [
                            "class importlib.util.LazyLoader(loader)"
                        ],
                        "parametros": [
                            "loader"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "factory",
                        "sintaxis": [
                            "classmethod factory(loader)"
                        ],
                        "parametros": [
                            "loader"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LazyLoader"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "inspect",
        "funciones": [
            {
                "nombre": "cleandoc",
                "sintaxis": [
                    "inspect.cleandoc(doc)"
                ],
                "parametros": [
                    "doc"
                ]
            },
            {
                "nombre": "currentframe",
                "sintaxis": [
                    "inspect.currentframe()"
                ],
                "parametros": []
            },
            {
                "nombre": "formatargspec",
                "sintaxis": [
                    "inspect.formatargspec(args[, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations[, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns, formatannotations]])"
                ],
                "parametros": [
                    "args",
                    "kwonlyargs",
                    "formatvalue",
                    "formatannotations",
                    "defaults",
                    "formatarg",
                    "varargs",
                    "formatvarkw",
                    "annotations",
                    "formatvarargs",
                    "kwonlydefaults",
                    "varkw",
                    "formatreturns"
                ]
            },
            {
                "nombre": "formatargvalues",
                "sintaxis": [
                    "inspect.formatargvalues(args[, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue])"
                ],
                "parametros": [
                    "args",
                    "formatvalue",
                    "formatarg",
                    "varargs",
                    "formatvarkw",
                    "formatvarargs",
                    "varkw",
                    "locals"
                ]
            },
            {
                "nombre": "getargspec",
                "sintaxis": [
                    "inspect.getargspec(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "getargvalues",
                "sintaxis": [
                    "inspect.getargvalues(frame)"
                ],
                "parametros": [
                    "frame"
                ]
            },
            {
                "nombre": "getattr_static",
                "sintaxis": [
                    "inspect.getattr_static(obj, attr, default=None)"
                ],
                "parametros": [
                    "obj",
                    "default",
                    "attr"
                ]
            },
            {
                "nombre": "getcallargs",
                "sintaxis": [
                    "inspect.getcallargs(func, /, *args, **kwds)"
                ],
                "parametros": [
                    "func",
                    "/",
                    "*args",
                    "**kwds"
                ]
            },
            {
                "nombre": "getclasstree",
                "sintaxis": [
                    "inspect.getclasstree(classes, unique=False)"
                ],
                "parametros": [
                    "unique",
                    "classes"
                ]
            },
            {
                "nombre": "getclosurevars",
                "sintaxis": [
                    "inspect.getclosurevars(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "getcomments",
                "sintaxis": [
                    "inspect.getcomments(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getcoroutinelocals",
                "sintaxis": [
                    "inspect.getcoroutinelocals(coroutine)"
                ],
                "parametros": [
                    "coroutine"
                ]
            },
            {
                "nombre": "getcoroutinestate",
                "sintaxis": [
                    "inspect.getcoroutinestate(coroutine)"
                ],
                "parametros": [
                    "coroutine"
                ]
            },
            {
                "nombre": "getdoc",
                "sintaxis": [
                    "inspect.getdoc(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getfile",
                "sintaxis": [
                    "inspect.getfile(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getframeinfo",
                "sintaxis": [
                    "inspect.getframeinfo(frame, context=1)"
                ],
                "parametros": [
                    "context",
                    "frame"
                ]
            },
            {
                "nombre": "getfullargspec",
                "sintaxis": [
                    "inspect.getfullargspec(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "getgeneratorlocals",
                "sintaxis": [
                    "inspect.getgeneratorlocals(generator)"
                ],
                "parametros": [
                    "generator"
                ]
            },
            {
                "nombre": "getgeneratorstate",
                "sintaxis": [
                    "inspect.getgeneratorstate(generator)"
                ],
                "parametros": [
                    "generator"
                ]
            },
            {
                "nombre": "getinnerframes",
                "sintaxis": [
                    "inspect.getinnerframes(traceback, context=1)"
                ],
                "parametros": [
                    "traceback",
                    "context"
                ]
            },
            {
                "nombre": "getmembers",
                "sintaxis": [
                    "inspect.getmembers(object[, predicate])"
                ],
                "parametros": [
                    "predicate",
                    "object"
                ]
            },
            {
                "nombre": "getmodule",
                "sintaxis": [
                    "inspect.getmodule(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getmodulename",
                "sintaxis": [
                    "inspect.getmodulename(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "getmro",
                "sintaxis": [
                    "inspect.getmro(cls)"
                ],
                "parametros": [
                    "cls"
                ]
            },
            {
                "nombre": "getouterframes",
                "sintaxis": [
                    "inspect.getouterframes(frame, context=1)"
                ],
                "parametros": [
                    "context",
                    "frame"
                ]
            },
            {
                "nombre": "getsource",
                "sintaxis": [
                    "inspect.getsource(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getsourcefile",
                "sintaxis": [
                    "inspect.getsourcefile(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getsourcelines",
                "sintaxis": [
                    "inspect.getsourcelines(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "get_annotations",
                "sintaxis": [
                    "inspect.get_annotations(obj, *, globals=None, locals=None, eval_str=False)"
                ],
                "parametros": [
                    "locals",
                    "obj",
                    "eval_str",
                    "globals",
                    "*"
                ]
            },
            {
                "nombre": "isabstract",
                "sintaxis": [
                    "inspect.isabstract(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isasyncgen",
                "sintaxis": [
                    "inspect.isasyncgen(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isasyncgenfunction",
                "sintaxis": [
                    "inspect.isasyncgenfunction(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isawaitable",
                "sintaxis": [
                    "inspect.isawaitable(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isbuiltin",
                "sintaxis": [
                    "inspect.isbuiltin(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isclass",
                "sintaxis": [
                    "inspect.isclass(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "iscode",
                "sintaxis": [
                    "inspect.iscode(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "iscoroutine",
                "sintaxis": [
                    "inspect.iscoroutine(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "iscoroutinefunction",
                "sintaxis": [
                    "inspect.iscoroutinefunction(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isdatadescriptor",
                "sintaxis": [
                    "inspect.isdatadescriptor(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isframe",
                "sintaxis": [
                    "inspect.isframe(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isfunction",
                "sintaxis": [
                    "inspect.isfunction(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isgenerator",
                "sintaxis": [
                    "inspect.isgenerator(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isgeneratorfunction",
                "sintaxis": [
                    "inspect.isgeneratorfunction(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isgetsetdescriptor",
                "sintaxis": [
                    "inspect.isgetsetdescriptor(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "ismemberdescriptor",
                "sintaxis": [
                    "inspect.ismemberdescriptor(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "ismethod",
                "sintaxis": [
                    "inspect.ismethod(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "ismethoddescriptor",
                "sintaxis": [
                    "inspect.ismethoddescriptor(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "ismodule",
                "sintaxis": [
                    "inspect.ismodule(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isroutine",
                "sintaxis": [
                    "inspect.isroutine(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "istraceback",
                "sintaxis": [
                    "inspect.istraceback(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "signature",
                "sintaxis": [
                    "inspect.signature(callable, *, follow_wrapped=True, globals=None, locals=None, eval_str=False)"
                ],
                "parametros": [
                    "follow_wrapped",
                    "callable",
                    "locals",
                    "eval_str",
                    "globals",
                    "*"
                ]
            },
            {
                "nombre": "stack",
                "sintaxis": [
                    "inspect.stack(context=1)"
                ],
                "parametros": [
                    "context"
                ]
            },
            {
                "nombre": "trace",
                "sintaxis": [
                    "inspect.trace(context=1)"
                ],
                "parametros": [
                    "context"
                ]
            },
            {
                "nombre": "unwrap",
                "sintaxis": [
                    "inspect.unwrap(func, *, stop=None)"
                ],
                "parametros": [
                    "func",
                    "*",
                    "stop"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BoundArguments",
                "constructores": [
                    {
                        "nombre": "BoundArguments",
                        "sintaxis": [
                            "class inspect.BoundArguments"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "apply_defaults",
                        "sintaxis": [
                            "apply_defaults()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "args",
                        "sintaxis": [
                            "args"
                        ]
                    },
                    {
                        "nombre": "arguments",
                        "sintaxis": [
                            "arguments"
                        ]
                    },
                    {
                        "nombre": "kwargs",
                        "sintaxis": [
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "signature",
                        "sintaxis": [
                            "signature"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BoundArguments"
                ]
            },
            {
                "nombre": "kind",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "description",
                        "sintaxis": [
                            "kind.description"
                        ]
                    }
                ],
                "sintaxis": [
                    "class kind"
                ]
            },
            {
                "nombre": "Parameter",
                "constructores": [
                    {
                        "nombre": "Parameter",
                        "sintaxis": [
                            "class inspect.Parameter(name, kind, *, default=Parameter.empty, annotation=Parameter.empty)"
                        ],
                        "parametros": [
                            "name",
                            "annotation",
                            "default",
                            "*",
                            "kind"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "replace(*[, name][, kind][, default][, annotation])"
                        ],
                        "parametros": [
                            "*[, name][, kind][, default][, annotation]"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "annotation",
                        "sintaxis": [
                            "annotation"
                        ]
                    },
                    {
                        "nombre": "default",
                        "sintaxis": [
                            "default"
                        ]
                    },
                    {
                        "nombre": "description",
                        "sintaxis": [
                            "kind.description"
                        ]
                    },
                    {
                        "nombre": "empty",
                        "sintaxis": [
                            "empty"
                        ]
                    },
                    {
                        "nombre": "kind",
                        "sintaxis": [
                            "kind"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Parameter"
                ]
            },
            {
                "nombre": "Signature",
                "constructores": [
                    {
                        "nombre": "Signature",
                        "sintaxis": [
                            "class inspect.Signature(parameters=None, *, return_annotation=Signature.empty)"
                        ],
                        "parametros": [
                            "parameters",
                            "return_annotation",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "bind",
                        "sintaxis": [
                            "bind(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "bind_partial",
                        "sintaxis": [
                            "bind_partial(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "from_callable",
                        "sintaxis": [
                            "classmethod from_callable(obj, *, follow_wrapped=True, globalns=None, localns=None)"
                        ],
                        "parametros": [
                            "follow_wrapped",
                            "localns",
                            "obj",
                            "globalns",
                            "*"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "replace(*[, parameters][, return_annotation])"
                        ],
                        "parametros": [
                            "*[, parameters][, return_annotation]"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "empty",
                        "sintaxis": [
                            "empty"
                        ]
                    },
                    {
                        "nombre": "parameters",
                        "sintaxis": [
                            "parameters"
                        ]
                    },
                    {
                        "nombre": "return_annotation",
                        "sintaxis": [
                            "return_annotation"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Signature"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "CO_ASYNC_GENERATOR",
                "sintaxis": [
                    "inspect.CO_ASYNC_GENERATOR"
                ]
            },
            {
                "nombre": "CO_COROUTINE",
                "sintaxis": [
                    "inspect.CO_COROUTINE"
                ]
            },
            {
                "nombre": "CO_GENERATOR",
                "sintaxis": [
                    "inspect.CO_GENERATOR"
                ]
            },
            {
                "nombre": "CO_ITERABLE_COROUTINE",
                "sintaxis": [
                    "inspect.CO_ITERABLE_COROUTINE"
                ]
            },
            {
                "nombre": "CO_NESTED",
                "sintaxis": [
                    "inspect.CO_NESTED"
                ]
            },
            {
                "nombre": "CO_NEWLOCALS",
                "sintaxis": [
                    "inspect.CO_NEWLOCALS"
                ]
            },
            {
                "nombre": "CO_NOFREE",
                "sintaxis": [
                    "inspect.CO_NOFREE"
                ]
            },
            {
                "nombre": "CO_OPTIMIZED",
                "sintaxis": [
                    "inspect.CO_OPTIMIZED"
                ]
            },
            {
                "nombre": "CO_VARARGS",
                "sintaxis": [
                    "inspect.CO_VARARGS"
                ]
            },
            {
                "nombre": "CO_VARKEYWORDS",
                "sintaxis": [
                    "inspect.CO_VARKEYWORDS"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "io",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "io.open(file, mode='r', buffering=- 1, encoding=None, errors=None, newline=None, closefd=True, opener=None)"
                ],
                "parametros": [
                    "mode",
                    "opener",
                    "errors",
                    "encoding",
                    "buffering",
                    "newline",
                    "closefd",
                    "file"
                ]
            },
            {
                "nombre": "open_code",
                "sintaxis": [
                    "io.open_code(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "text_encoding",
                "sintaxis": [
                    "io.text_encoding(encoding, stacklevel=2)"
                ],
                "parametros": [
                    "stacklevel",
                    "encoding"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BufferedIOBase",
                "constructores": [
                    {
                        "nombre": "BufferedIOBase",
                        "sintaxis": [
                            "class io.BufferedIOBase"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "detach",
                        "sintaxis": [
                            "detach()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read(size=- 1)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "read1",
                        "sintaxis": [
                            "read1([size])"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "readinto",
                        "sintaxis": [
                            "readinto(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    },
                    {
                        "nombre": "readinto1",
                        "sintaxis": [
                            "readinto1(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "raw",
                        "sintaxis": [
                            "raw"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BufferedIOBase"
                ]
            },
            {
                "nombre": "BufferedRandom",
                "constructores": [
                    {
                        "nombre": "BufferedRandom",
                        "sintaxis": [
                            "class io.BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE)"
                        ],
                        "parametros": [
                            "buffer_size",
                            "raw"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BufferedRandom"
                ]
            },
            {
                "nombre": "BufferedReader",
                "constructores": [
                    {
                        "nombre": "BufferedReader",
                        "sintaxis": [
                            "class io.BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)"
                        ],
                        "parametros": [
                            "buffer_size",
                            "raw"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "peek",
                        "sintaxis": [
                            "peek([size])"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read([size])"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "read1",
                        "sintaxis": [
                            "read1([size])"
                        ],
                        "parametros": [
                            "size"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BufferedReader"
                ]
            },
            {
                "nombre": "BufferedRWPair",
                "constructores": [
                    {
                        "nombre": "BufferedRWPair",
                        "sintaxis": [
                            "class io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)"
                        ],
                        "parametros": [
                            "reader",
                            "buffer_size",
                            "writer"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BufferedRWPair"
                ]
            },
            {
                "nombre": "BufferedWriter",
                "constructores": [
                    {
                        "nombre": "BufferedWriter",
                        "sintaxis": [
                            "class io.BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)"
                        ],
                        "parametros": [
                            "buffer_size",
                            "raw"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BufferedWriter"
                ]
            },
            {
                "nombre": "BytesIO",
                "constructores": [
                    {
                        "nombre": "BytesIO",
                        "sintaxis": [
                            "class io.BytesIO([initial_bytes])"
                        ],
                        "parametros": [
                            "initial_bytes"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getbuffer",
                        "sintaxis": [
                            "getbuffer()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getvalue",
                        "sintaxis": [
                            "getvalue()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read1",
                        "sintaxis": [
                            "read1([size])"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "readinto1",
                        "sintaxis": [
                            "readinto1(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BytesIO"
                ]
            },
            {
                "nombre": "FileIO",
                "constructores": [
                    {
                        "nombre": "FileIO",
                        "sintaxis": [
                            "class io.FileIO(name, mode='r', closefd=True, opener=None)"
                        ],
                        "parametros": [
                            "mode",
                            "closefd",
                            "opener",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "mode",
                        "sintaxis": [
                            "mode"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class FileIO"
                ]
            },
            {
                "nombre": "IncrementalNewlineDecoder",
                "constructores": [
                    {
                        "nombre": "IncrementalNewlineDecoder",
                        "sintaxis": [
                            "class io.IncrementalNewlineDecoder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IncrementalNewlineDecoder"
                ]
            },
            {
                "nombre": "IOBase",
                "constructores": [
                    {
                        "nombre": "IOBase",
                        "sintaxis": [
                            "class io.IOBase"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isatty",
                        "sintaxis": [
                            "isatty()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readable",
                        "sintaxis": [
                            "readable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readline",
                        "sintaxis": [
                            "readline(size=- 1)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "readlines",
                        "sintaxis": [
                            "readlines(hint=- 1)"
                        ],
                        "parametros": [
                            "hint"
                        ]
                    },
                    {
                        "nombre": "seek",
                        "sintaxis": [
                            "seek(offset, whence=SEEK_SET)"
                        ],
                        "parametros": [
                            "whence",
                            "offset"
                        ]
                    },
                    {
                        "nombre": "seekable",
                        "sintaxis": [
                            "seekable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "tell()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "truncate",
                        "sintaxis": [
                            "truncate(size=None)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "writable",
                        "sintaxis": [
                            "writable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "writelines",
                        "sintaxis": [
                            "writelines(lines)"
                        ],
                        "parametros": [
                            "lines"
                        ]
                    },
                    {
                        "nombre": "__del__",
                        "sintaxis": [
                            "__del__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "closed",
                        "sintaxis": [
                            "closed"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IOBase"
                ]
            },
            {
                "nombre": "RawIOBase",
                "constructores": [
                    {
                        "nombre": "RawIOBase",
                        "sintaxis": [
                            "class io.RawIOBase"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read(size=- 1)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "readall",
                        "sintaxis": [
                            "readall()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readinto",
                        "sintaxis": [
                            "readinto(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(b)"
                        ],
                        "parametros": [
                            "b"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class RawIOBase"
                ]
            },
            {
                "nombre": "StringIO",
                "constructores": [
                    {
                        "nombre": "StringIO",
                        "sintaxis": [
                            "class io.StringIO(initial_value='', newline='\\n')"
                        ],
                        "parametros": [
                            "initial_value",
                            "newline"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getvalue",
                        "sintaxis": [
                            "getvalue()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class StringIO"
                ]
            },
            {
                "nombre": "TextIOBase",
                "constructores": [
                    {
                        "nombre": "TextIOBase",
                        "sintaxis": [
                            "class io.TextIOBase"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "detach",
                        "sintaxis": [
                            "detach()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read(size=- 1)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "readline",
                        "sintaxis": [
                            "readline(size=- 1)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "seek",
                        "sintaxis": [
                            "seek(offset, whence=SEEK_SET)"
                        ],
                        "parametros": [
                            "whence",
                            "offset"
                        ]
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "tell()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "buffer",
                        "sintaxis": [
                            "buffer"
                        ]
                    },
                    {
                        "nombre": "encoding",
                        "sintaxis": [
                            "encoding"
                        ]
                    },
                    {
                        "nombre": "errors",
                        "sintaxis": [
                            "errors"
                        ]
                    },
                    {
                        "nombre": "newlines",
                        "sintaxis": [
                            "newlines"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TextIOBase"
                ]
            },
            {
                "nombre": "TextIOWrapper",
                "constructores": [
                    {
                        "nombre": "TextIOWrapper",
                        "sintaxis": [
                            "class io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False)"
                        ],
                        "parametros": [
                            "line_buffering",
                            "encoding",
                            "errors",
                            "write_through",
                            "newline",
                            "buffer"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "reconfigure",
                        "sintaxis": [
                            "reconfigure(*[, encoding][, errors][, newline][, line_buffering][, write_through])"
                        ],
                        "parametros": [
                            "*[, encoding][, errors][, newline][,                      line_buffering][, write_through]"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "line_buffering",
                        "sintaxis": [
                            "line_buffering"
                        ]
                    },
                    {
                        "nombre": "write_through",
                        "sintaxis": [
                            "write_through"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TextIOWrapper"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "DEFAULT_BUFFER_SIZE",
                "sintaxis": [
                    "io.DEFAULT_BUFFER_SIZE"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "BlockingIOError",
                "sintaxis": [
                    "exception io.BlockingIOError"
                ]
            },
            {
                "nombre": "UnsupportedOperation",
                "sintaxis": [
                    "exception io.UnsupportedOperation"
                ]
            }
        ]
    },
    {
        "nombre": "ipaddress",
        "funciones": [
            {
                "nombre": "collapse_addresses",
                "sintaxis": [
                    "ipaddress.collapse_addresses(addresses)"
                ],
                "parametros": [
                    "addresses"
                ]
            },
            {
                "nombre": "get_mixed_type_key",
                "sintaxis": [
                    "ipaddress.get_mixed_type_key(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "ip_address",
                "sintaxis": [
                    "ipaddress.ip_address(address)"
                ],
                "parametros": [
                    "address"
                ]
            },
            {
                "nombre": "ip_interface",
                "sintaxis": [
                    "ipaddress.ip_interface(address)"
                ],
                "parametros": [
                    "address"
                ]
            },
            {
                "nombre": "ip_network",
                "sintaxis": [
                    "ipaddress.ip_network(address, strict=True)"
                ],
                "parametros": [
                    "address",
                    "strict"
                ]
            },
            {
                "nombre": "summarize_address_range",
                "sintaxis": [
                    "ipaddress.summarize_address_range(first, last)"
                ],
                "parametros": [
                    "first",
                    "last"
                ]
            },
            {
                "nombre": "v4_int_to_packed",
                "sintaxis": [
                    "ipaddress.v4_int_to_packed(address)"
                ],
                "parametros": [
                    "address"
                ]
            },
            {
                "nombre": "v6_int_to_packed",
                "sintaxis": [
                    "ipaddress.v6_int_to_packed(address)"
                ],
                "parametros": [
                    "address"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "IPv4Address",
                "constructores": [
                    {
                        "nombre": "IPv4Address",
                        "sintaxis": [
                            "class ipaddress.IPv4Address(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "__format__",
                        "sintaxis": [
                            "IPv4Address.__format__(fmt)"
                        ],
                        "parametros": [
                            "fmt"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "compressed",
                        "sintaxis": [
                            "compressed"
                        ]
                    },
                    {
                        "nombre": "exploded",
                        "sintaxis": [
                            "exploded"
                        ]
                    },
                    {
                        "nombre": "is_global",
                        "sintaxis": [
                            "is_global"
                        ]
                    },
                    {
                        "nombre": "is_link_local",
                        "sintaxis": [
                            "is_link_local"
                        ]
                    },
                    {
                        "nombre": "is_loopback",
                        "sintaxis": [
                            "is_loopback"
                        ]
                    },
                    {
                        "nombre": "is_multicast",
                        "sintaxis": [
                            "is_multicast"
                        ]
                    },
                    {
                        "nombre": "is_private",
                        "sintaxis": [
                            "is_private"
                        ]
                    },
                    {
                        "nombre": "is_reserved",
                        "sintaxis": [
                            "is_reserved"
                        ]
                    },
                    {
                        "nombre": "is_unspecified",
                        "sintaxis": [
                            "is_unspecified"
                        ]
                    },
                    {
                        "nombre": "max_prefixlen",
                        "sintaxis": [
                            "max_prefixlen"
                        ]
                    },
                    {
                        "nombre": "packed",
                        "sintaxis": [
                            "packed"
                        ]
                    },
                    {
                        "nombre": "reverse_pointer",
                        "sintaxis": [
                            "reverse_pointer"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IPv4Address"
                ]
            },
            {
                "nombre": "IPv4Interface",
                "constructores": [
                    {
                        "nombre": "IPv4Interface",
                        "sintaxis": [
                            "class ipaddress.IPv4Interface(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "ip",
                        "sintaxis": [
                            "ip"
                        ]
                    },
                    {
                        "nombre": "network",
                        "sintaxis": [
                            "network"
                        ]
                    },
                    {
                        "nombre": "with_hostmask",
                        "sintaxis": [
                            "with_hostmask"
                        ]
                    },
                    {
                        "nombre": "with_netmask",
                        "sintaxis": [
                            "with_netmask"
                        ]
                    },
                    {
                        "nombre": "with_prefixlen",
                        "sintaxis": [
                            "with_prefixlen"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IPv4Interface"
                ]
            },
            {
                "nombre": "IPv4Network",
                "constructores": [
                    {
                        "nombre": "IPv4Network",
                        "sintaxis": [
                            "class ipaddress.IPv4Network(address, strict=True)"
                        ],
                        "parametros": [
                            "address",
                            "strict"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "address_exclude",
                        "sintaxis": [
                            "address_exclude(network)"
                        ],
                        "parametros": [
                            "network"
                        ]
                    },
                    {
                        "nombre": "compare_networks",
                        "sintaxis": [
                            "compare_networks(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "hosts",
                        "sintaxis": [
                            "hosts()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "overlaps",
                        "sintaxis": [
                            "overlaps(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "subnets",
                        "sintaxis": [
                            "subnets(prefixlen_diff=1, new_prefix=None)"
                        ],
                        "parametros": [
                            "new_prefix",
                            "prefixlen_diff"
                        ]
                    },
                    {
                        "nombre": "subnet_of",
                        "sintaxis": [
                            "subnet_of(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "supernet",
                        "sintaxis": [
                            "supernet(prefixlen_diff=1, new_prefix=None)"
                        ],
                        "parametros": [
                            "new_prefix",
                            "prefixlen_diff"
                        ]
                    },
                    {
                        "nombre": "supernet_of",
                        "sintaxis": [
                            "supernet_of(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "broadcast_address",
                        "sintaxis": [
                            "broadcast_address"
                        ]
                    },
                    {
                        "nombre": "compressed",
                        "sintaxis": [
                            "compressed"
                        ]
                    },
                    {
                        "nombre": "exploded",
                        "sintaxis": [
                            "exploded"
                        ]
                    },
                    {
                        "nombre": "hostmask",
                        "sintaxis": [
                            "hostmask"
                        ]
                    },
                    {
                        "nombre": "is_link_local",
                        "sintaxis": [
                            "is_link_local"
                        ]
                    },
                    {
                        "nombre": "is_loopback",
                        "sintaxis": [
                            "is_loopback"
                        ]
                    },
                    {
                        "nombre": "is_multicast",
                        "sintaxis": [
                            "is_multicast"
                        ]
                    },
                    {
                        "nombre": "is_private",
                        "sintaxis": [
                            "is_private"
                        ]
                    },
                    {
                        "nombre": "is_reserved",
                        "sintaxis": [
                            "is_reserved"
                        ]
                    },
                    {
                        "nombre": "is_unspecified",
                        "sintaxis": [
                            "is_unspecified"
                        ]
                    },
                    {
                        "nombre": "max_prefixlen",
                        "sintaxis": [
                            "max_prefixlen"
                        ]
                    },
                    {
                        "nombre": "netmask",
                        "sintaxis": [
                            "netmask"
                        ]
                    },
                    {
                        "nombre": "network_address",
                        "sintaxis": [
                            "network_address"
                        ]
                    },
                    {
                        "nombre": "num_addresses",
                        "sintaxis": [
                            "num_addresses"
                        ]
                    },
                    {
                        "nombre": "prefixlen",
                        "sintaxis": [
                            "prefixlen"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "version"
                        ]
                    },
                    {
                        "nombre": "with_hostmask",
                        "sintaxis": [
                            "with_hostmask"
                        ]
                    },
                    {
                        "nombre": "with_netmask",
                        "sintaxis": [
                            "with_netmask"
                        ]
                    },
                    {
                        "nombre": "with_prefixlen",
                        "sintaxis": [
                            "with_prefixlen"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IPv4Network"
                ]
            },
            {
                "nombre": "IPv6Address",
                "constructores": [
                    {
                        "nombre": "IPv6Address",
                        "sintaxis": [
                            "class ipaddress.IPv6Address(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "__format__",
                        "sintaxis": [
                            "IPv6Address.__format__(fmt)"
                        ],
                        "parametros": [
                            "fmt"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "compressed",
                        "sintaxis": [
                            "compressed"
                        ]
                    },
                    {
                        "nombre": "exploded",
                        "sintaxis": [
                            "exploded"
                        ]
                    },
                    {
                        "nombre": "ipv4_mapped",
                        "sintaxis": [
                            "ipv4_mapped"
                        ]
                    },
                    {
                        "nombre": "is_global",
                        "sintaxis": [
                            "is_global"
                        ]
                    },
                    {
                        "nombre": "is_link_local",
                        "sintaxis": [
                            "is_link_local"
                        ]
                    },
                    {
                        "nombre": "is_loopback",
                        "sintaxis": [
                            "is_loopback"
                        ]
                    },
                    {
                        "nombre": "is_multicast",
                        "sintaxis": [
                            "is_multicast"
                        ]
                    },
                    {
                        "nombre": "is_private",
                        "sintaxis": [
                            "is_private"
                        ]
                    },
                    {
                        "nombre": "is_reserved",
                        "sintaxis": [
                            "is_reserved"
                        ]
                    },
                    {
                        "nombre": "is_site_local",
                        "sintaxis": [
                            "is_site_local"
                        ]
                    },
                    {
                        "nombre": "is_unspecified",
                        "sintaxis": [
                            "is_unspecified"
                        ]
                    },
                    {
                        "nombre": "max_prefixlen",
                        "sintaxis": [
                            "max_prefixlen"
                        ]
                    },
                    {
                        "nombre": "packed",
                        "sintaxis": [
                            "packed"
                        ]
                    },
                    {
                        "nombre": "reverse_pointer",
                        "sintaxis": [
                            "reverse_pointer"
                        ]
                    },
                    {
                        "nombre": "scope_id",
                        "sintaxis": [
                            "scope_id"
                        ]
                    },
                    {
                        "nombre": "sixtofour",
                        "sintaxis": [
                            "sixtofour"
                        ]
                    },
                    {
                        "nombre": "teredo",
                        "sintaxis": [
                            "teredo"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IPv6Address"
                ]
            },
            {
                "nombre": "IPv6Interface",
                "constructores": [
                    {
                        "nombre": "IPv6Interface",
                        "sintaxis": [
                            "class ipaddress.IPv6Interface(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "ip",
                        "sintaxis": [
                            "ip"
                        ]
                    },
                    {
                        "nombre": "network",
                        "sintaxis": [
                            "network"
                        ]
                    },
                    {
                        "nombre": "with_hostmask",
                        "sintaxis": [
                            "with_hostmask"
                        ]
                    },
                    {
                        "nombre": "with_netmask",
                        "sintaxis": [
                            "with_netmask"
                        ]
                    },
                    {
                        "nombre": "with_prefixlen",
                        "sintaxis": [
                            "with_prefixlen"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IPv6Interface"
                ]
            },
            {
                "nombre": "IPv6Network",
                "constructores": [
                    {
                        "nombre": "IPv6Network",
                        "sintaxis": [
                            "class ipaddress.IPv6Network(address, strict=True)"
                        ],
                        "parametros": [
                            "address",
                            "strict"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "address_exclude",
                        "sintaxis": [
                            "address_exclude(network)"
                        ],
                        "parametros": [
                            "network"
                        ]
                    },
                    {
                        "nombre": "compare_networks",
                        "sintaxis": [
                            "compare_networks(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "hosts",
                        "sintaxis": [
                            "hosts()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "overlaps",
                        "sintaxis": [
                            "overlaps(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "subnets",
                        "sintaxis": [
                            "subnets(prefixlen_diff=1, new_prefix=None)"
                        ],
                        "parametros": [
                            "new_prefix",
                            "prefixlen_diff"
                        ]
                    },
                    {
                        "nombre": "subnet_of",
                        "sintaxis": [
                            "subnet_of(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "supernet",
                        "sintaxis": [
                            "supernet(prefixlen_diff=1, new_prefix=None)"
                        ],
                        "parametros": [
                            "new_prefix",
                            "prefixlen_diff"
                        ]
                    },
                    {
                        "nombre": "supernet_of",
                        "sintaxis": [
                            "supernet_of(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "broadcast_address",
                        "sintaxis": [
                            "broadcast_address"
                        ]
                    },
                    {
                        "nombre": "compressed",
                        "sintaxis": [
                            "compressed"
                        ]
                    },
                    {
                        "nombre": "exploded",
                        "sintaxis": [
                            "exploded"
                        ]
                    },
                    {
                        "nombre": "hostmask",
                        "sintaxis": [
                            "hostmask"
                        ]
                    },
                    {
                        "nombre": "is_link_local",
                        "sintaxis": [
                            "is_link_local"
                        ]
                    },
                    {
                        "nombre": "is_loopback",
                        "sintaxis": [
                            "is_loopback"
                        ]
                    },
                    {
                        "nombre": "is_multicast",
                        "sintaxis": [
                            "is_multicast"
                        ]
                    },
                    {
                        "nombre": "is_private",
                        "sintaxis": [
                            "is_private"
                        ]
                    },
                    {
                        "nombre": "is_reserved",
                        "sintaxis": [
                            "is_reserved"
                        ]
                    },
                    {
                        "nombre": "is_site_local",
                        "sintaxis": [
                            "is_site_local"
                        ]
                    },
                    {
                        "nombre": "is_unspecified",
                        "sintaxis": [
                            "is_unspecified"
                        ]
                    },
                    {
                        "nombre": "max_prefixlen",
                        "sintaxis": [
                            "max_prefixlen"
                        ]
                    },
                    {
                        "nombre": "netmask",
                        "sintaxis": [
                            "netmask"
                        ]
                    },
                    {
                        "nombre": "network_address",
                        "sintaxis": [
                            "network_address"
                        ]
                    },
                    {
                        "nombre": "num_addresses",
                        "sintaxis": [
                            "num_addresses"
                        ]
                    },
                    {
                        "nombre": "prefixlen",
                        "sintaxis": [
                            "prefixlen"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "version"
                        ]
                    },
                    {
                        "nombre": "with_hostmask",
                        "sintaxis": [
                            "with_hostmask"
                        ]
                    },
                    {
                        "nombre": "with_netmask",
                        "sintaxis": [
                            "with_netmask"
                        ]
                    },
                    {
                        "nombre": "with_prefixlen",
                        "sintaxis": [
                            "with_prefixlen"
                        ]
                    }
                ],
                "sintaxis": [
                    "class IPv6Network"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "AddressValueError",
                "sintaxis": [
                    "exception ipaddress.AddressValueError(ValueError)"
                ]
            },
            {
                "nombre": "NetmaskValueError",
                "sintaxis": [
                    "exception ipaddress.NetmaskValueError(ValueError)"
                ]
            }
        ]
    },
    {
        "nombre": "itertools",
        "funciones": [
            {
                "nombre": "accumulate",
                "sintaxis": [
                    "itertools.accumulate(iterable[, func, *, initial=None])"
                ],
                "parametros": [
                    "iterable",
                    "*",
                    "func",
                    "initial"
                ]
            },
            {
                "nombre": "chain",
                "sintaxis": [
                    "itertools.chain(*iterables)"
                ],
                "parametros": [
                    "iterables"
                ]
            },
            {
                "nombre": "combinations",
                "sintaxis": [
                    "itertools.combinations(iterable, r)"
                ],
                "parametros": [
                    "iterable",
                    "r"
                ]
            },
            {
                "nombre": "combinations_with_replacement",
                "sintaxis": [
                    "itertools.combinations_with_replacement(iterable, r)"
                ],
                "parametros": [
                    "iterable",
                    "r"
                ]
            },
            {
                "nombre": "compress",
                "sintaxis": [
                    "itertools.compress(data, selectors)"
                ],
                "parametros": [
                    "selectors",
                    "data"
                ]
            },
            {
                "nombre": "count",
                "sintaxis": [
                    "itertools.count(start=0, step=1)"
                ],
                "parametros": [
                    "step",
                    "start"
                ]
            },
            {
                "nombre": "cycle",
                "sintaxis": [
                    "itertools.cycle(iterable)"
                ],
                "parametros": [
                    "iterable"
                ]
            },
            {
                "nombre": "dropwhile",
                "sintaxis": [
                    "itertools.dropwhile(predicate, iterable)"
                ],
                "parametros": [
                    "iterable",
                    "predicate"
                ]
            },
            {
                "nombre": "filterfalse",
                "sintaxis": [
                    "itertools.filterfalse(predicate, iterable)"
                ],
                "parametros": [
                    "iterable",
                    "predicate"
                ]
            },
            {
                "nombre": "groupby",
                "sintaxis": [
                    "itertools.groupby(iterable, key=None)"
                ],
                "parametros": [
                    "iterable",
                    "key"
                ]
            },
            {
                "nombre": "islice",
                "sintaxis": [
                    "itertools.islice(iterable, stop)",
                    "itertools.islice(iterable, start, stop[, step])"
                ],
                "parametros": [
                    "iterable",
                    "step",
                    "stop",
                    "start"
                ]
            },
            {
                "nombre": "pairwise",
                "sintaxis": [
                    "itertools.pairwise(iterable)"
                ],
                "parametros": [
                    "iterable"
                ]
            },
            {
                "nombre": "permutations",
                "sintaxis": [
                    "itertools.permutations(iterable, r=None)"
                ],
                "parametros": [
                    "iterable",
                    "r"
                ]
            },
            {
                "nombre": "product",
                "sintaxis": [
                    "itertools.product(*iterables, repeat=1)"
                ],
                "parametros": [
                    "iterables",
                    "repeat"
                ]
            },
            {
                "nombre": "repeat",
                "sintaxis": [
                    "itertools.repeat(object[, times])"
                ],
                "parametros": [
                    "object",
                    "times"
                ]
            },
            {
                "nombre": "starmap",
                "sintaxis": [
                    "itertools.starmap(function, iterable)"
                ],
                "parametros": [
                    "iterable",
                    "function"
                ]
            },
            {
                "nombre": "takewhile",
                "sintaxis": [
                    "itertools.takewhile(predicate, iterable)"
                ],
                "parametros": [
                    "iterable",
                    "predicate"
                ]
            },
            {
                "nombre": "tee",
                "sintaxis": [
                    "itertools.tee(iterable, n=2)"
                ],
                "parametros": [
                    "iterable",
                    "n"
                ]
            },
            {
                "nombre": "zip_longest",
                "sintaxis": [
                    "itertools.zip_longest(*iterables, fillvalue=None)"
                ],
                "parametros": [
                    "iterables",
                    "fillvalue"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "chain",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "from_iterable",
                        "sintaxis": [
                            "classmethod chain.from_iterable(iterable)"
                        ],
                        "parametros": [
                            "iterable"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class chain"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "json",
        "funciones": [
            {
                "nombre": "dump",
                "sintaxis": [
                    "json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)"
                ],
                "parametros": [
                    "sort_keys",
                    "allow_nan",
                    "ensure_ascii",
                    "separators",
                    "obj",
                    "kw",
                    "skipkeys",
                    "default",
                    "indent",
                    "check_circular",
                    "cls",
                    "*",
                    "fp"
                ]
            },
            {
                "nombre": "dumps",
                "sintaxis": [
                    "json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)"
                ],
                "parametros": [
                    "sort_keys",
                    "allow_nan",
                    "ensure_ascii",
                    "separators",
                    "obj",
                    "kw",
                    "skipkeys",
                    "default",
                    "indent",
                    "check_circular",
                    "cls",
                    "*"
                ]
            },
            {
                "nombre": "load",
                "sintaxis": [
                    "json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)"
                ],
                "parametros": [
                    "kw",
                    "parse_float",
                    "object_hook",
                    "object_pairs_hook",
                    "parse_int",
                    "cls",
                    "*",
                    "fp",
                    "parse_constant"
                ]
            },
            {
                "nombre": "loads",
                "sintaxis": [
                    "json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)"
                ],
                "parametros": [
                    "kw",
                    "s",
                    "object_hook",
                    "parse_float",
                    "parse_int",
                    "object_pairs_hook",
                    "cls",
                    "*",
                    "parse_constant"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "JSONDecoder",
                "constructores": [
                    {
                        "nombre": "JSONDecoder",
                        "sintaxis": [
                            "class json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)"
                        ],
                        "parametros": [
                            "strict",
                            "parse_float",
                            "object_hook",
                            "object_pairs_hook",
                            "parse_int",
                            "*",
                            "parse_constant"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "decode",
                        "sintaxis": [
                            "decode(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    },
                    {
                        "nombre": "raw_decode",
                        "sintaxis": [
                            "raw_decode(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class JSONDecoder"
                ]
            },
            {
                "nombre": "JSONEncoder",
                "constructores": [
                    {
                        "nombre": "JSONEncoder",
                        "sintaxis": [
                            "class json.JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)"
                        ],
                        "parametros": [
                            "sort_keys",
                            "allow_nan",
                            "ensure_ascii",
                            "separators",
                            "skipkeys",
                            "default",
                            "indent",
                            "check_circular",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "default",
                        "sintaxis": [
                            "default(o)"
                        ],
                        "parametros": [
                            "o"
                        ]
                    },
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "encode(o)"
                        ],
                        "parametros": [
                            "o"
                        ]
                    },
                    {
                        "nombre": "iterencode",
                        "sintaxis": [
                            "iterencode(o)"
                        ],
                        "parametros": [
                            "o"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class JSONEncoder"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "JSONDecodeError",
                "sintaxis": [
                    "exception json.JSONDecodeError(msg, doc, pos)"
                ]
            }
        ]
    },
    {
        "nombre": "json.tool",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "keyword",
        "funciones": [
            {
                "nombre": "iskeyword",
                "sintaxis": [
                    "keyword.iskeyword(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "issoftkeyword",
                "sintaxis": [
                    "keyword.issoftkeyword(s)"
                ],
                "parametros": [
                    "s"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "kwlist",
                "sintaxis": [
                    "keyword.kwlist"
                ]
            },
            {
                "nombre": "softkwlist",
                "sintaxis": [
                    "keyword.softkwlist"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "lib2to3",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "linecache",
        "funciones": [
            {
                "nombre": "checkcache",
                "sintaxis": [
                    "linecache.checkcache(filename=None)"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "clearcache",
                "sintaxis": [
                    "linecache.clearcache()"
                ],
                "parametros": []
            },
            {
                "nombre": "getline",
                "sintaxis": [
                    "linecache.getline(filename, lineno, module_globals=None)"
                ],
                "parametros": [
                    "filename",
                    "module_globals",
                    "lineno"
                ]
            },
            {
                "nombre": "lazycache",
                "sintaxis": [
                    "linecache.lazycache(filename, module_globals)"
                ],
                "parametros": [
                    "filename",
                    "module_globals"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "locale",
        "funciones": [
            {
                "nombre": "atof",
                "sintaxis": [
                    "locale.atof(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "atoi",
                "sintaxis": [
                    "locale.atoi(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "bindtextdomain",
                "sintaxis": [
                    "locale.bindtextdomain(domain, dir)"
                ],
                "parametros": [
                    "domain",
                    "dir"
                ]
            },
            {
                "nombre": "currency",
                "sintaxis": [
                    "locale.currency(val, symbol=True, grouping=False, international=False)"
                ],
                "parametros": [
                    "international",
                    "val",
                    "symbol",
                    "grouping"
                ]
            },
            {
                "nombre": "dcgettext",
                "sintaxis": [
                    "locale.dcgettext(domain, msg, category)"
                ],
                "parametros": [
                    "msg",
                    "domain",
                    "category"
                ]
            },
            {
                "nombre": "delocalize",
                "sintaxis": [
                    "locale.delocalize(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "dgettext",
                "sintaxis": [
                    "locale.dgettext(domain, msg)"
                ],
                "parametros": [
                    "msg",
                    "domain"
                ]
            },
            {
                "nombre": "format",
                "sintaxis": [
                    "locale.format(format, val, grouping=False, monetary=False)"
                ],
                "parametros": [
                    "format",
                    "monetary",
                    "val",
                    "grouping"
                ]
            },
            {
                "nombre": "format_string",
                "sintaxis": [
                    "locale.format_string(format, val, grouping=False, monetary=False)"
                ],
                "parametros": [
                    "format",
                    "monetary",
                    "val",
                    "grouping"
                ]
            },
            {
                "nombre": "getdefaultlocale",
                "sintaxis": [
                    "locale.getdefaultlocale([envvars])"
                ],
                "parametros": [
                    "envvars"
                ]
            },
            {
                "nombre": "getlocale",
                "sintaxis": [
                    "locale.getlocale(category=LC_CTYPE)"
                ],
                "parametros": [
                    "category"
                ]
            },
            {
                "nombre": "getpreferredencoding",
                "sintaxis": [
                    "locale.getpreferredencoding(do_setlocale=True)"
                ],
                "parametros": [
                    "do_setlocale"
                ]
            },
            {
                "nombre": "gettext",
                "sintaxis": [
                    "locale.gettext(msg)"
                ],
                "parametros": [
                    "msg"
                ]
            },
            {
                "nombre": "localeconv",
                "sintaxis": [
                    "locale.localeconv()"
                ],
                "parametros": []
            },
            {
                "nombre": "localize",
                "sintaxis": [
                    "locale.localize(string, grouping=False, monetary=False)"
                ],
                "parametros": [
                    "monetary",
                    "grouping",
                    "string"
                ]
            },
            {
                "nombre": "nl_langinfo",
                "sintaxis": [
                    "locale.nl_langinfo(option)"
                ],
                "parametros": [
                    "option"
                ]
            },
            {
                "nombre": "normalize",
                "sintaxis": [
                    "locale.normalize(localename)"
                ],
                "parametros": [
                    "localename"
                ]
            },
            {
                "nombre": "resetlocale",
                "sintaxis": [
                    "locale.resetlocale(category=LC_ALL)"
                ],
                "parametros": [
                    "category"
                ]
            },
            {
                "nombre": "setlocale",
                "sintaxis": [
                    "locale.setlocale(category, locale=None)"
                ],
                "parametros": [
                    "locale",
                    "category"
                ]
            },
            {
                "nombre": "str",
                "sintaxis": [
                    "locale.str(float)"
                ],
                "parametros": [
                    "float"
                ]
            },
            {
                "nombre": "strcoll",
                "sintaxis": [
                    "locale.strcoll(string1, string2)"
                ],
                "parametros": [
                    "string2",
                    "string1"
                ]
            },
            {
                "nombre": "strxfrm",
                "sintaxis": [
                    "locale.strxfrm(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "textdomain",
                "sintaxis": [
                    "locale.textdomain(domain)"
                ],
                "parametros": [
                    "domain"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "ABDAY_1",
                "sintaxis": [
                    "ABDAY_1 ... ABDAY_7"
                ]
            },
            {
                "nombre": "ABDAY_2",
                "sintaxis": [
                    "ABDAY_1 ... ABDAY_7"
                ]
            },
            {
                "nombre": "ABDAY_3",
                "sintaxis": [
                    "ABDAY_1 ... ABDAY_7"
                ]
            },
            {
                "nombre": "ABDAY_4",
                "sintaxis": [
                    "ABDAY_1 ... ABDAY_7"
                ]
            },
            {
                "nombre": "ABDAY_5",
                "sintaxis": [
                    "ABDAY_1 ... ABDAY_7"
                ]
            },
            {
                "nombre": "ABDAY_6",
                "sintaxis": [
                    "ABDAY_1 ... ABDAY_7"
                ]
            },
            {
                "nombre": "ABDAY_7",
                "sintaxis": [
                    "ABDAY_1 ... ABDAY_7"
                ]
            },
            {
                "nombre": "ABMON_1",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_10",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_11",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_12",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_2",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_3",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_4",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_5",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_6",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_7",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_8",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ABMON_9",
                "sintaxis": [
                    "ABMON_1 ... ABMON_12"
                ]
            },
            {
                "nombre": "ALT_DIGITS",
                "sintaxis": [
                    "locale.ALT_DIGITS"
                ]
            },
            {
                "nombre": "CHAR_MAX",
                "sintaxis": [
                    "locale.CHAR_MAX"
                ]
            },
            {
                "nombre": "CODESET",
                "sintaxis": [
                    "locale.CODESET"
                ]
            },
            {
                "nombre": "CRNCYSTR",
                "sintaxis": [
                    "locale.CRNCYSTR"
                ]
            },
            {
                "nombre": "DAY_1",
                "sintaxis": [
                    "DAY_1 ... DAY_7"
                ]
            },
            {
                "nombre": "DAY_2",
                "sintaxis": [
                    "DAY_1 ... DAY_7"
                ]
            },
            {
                "nombre": "DAY_3",
                "sintaxis": [
                    "DAY_1 ... DAY_7"
                ]
            },
            {
                "nombre": "DAY_4",
                "sintaxis": [
                    "DAY_1 ... DAY_7"
                ]
            },
            {
                "nombre": "DAY_5",
                "sintaxis": [
                    "DAY_1 ... DAY_7"
                ]
            },
            {
                "nombre": "DAY_6",
                "sintaxis": [
                    "DAY_1 ... DAY_7"
                ]
            },
            {
                "nombre": "DAY_7",
                "sintaxis": [
                    "DAY_1 ... DAY_7"
                ]
            },
            {
                "nombre": "D_FMT",
                "sintaxis": [
                    "locale.D_FMT"
                ]
            },
            {
                "nombre": "D_T_FMT",
                "sintaxis": [
                    "locale.D_T_FMT"
                ]
            },
            {
                "nombre": "ERA",
                "sintaxis": [
                    "locale.ERA"
                ]
            },
            {
                "nombre": "ERA_D_FMT",
                "sintaxis": [
                    "locale.ERA_D_FMT"
                ]
            },
            {
                "nombre": "ERA_D_T_FMT",
                "sintaxis": [
                    "locale.ERA_D_T_FMT"
                ]
            },
            {
                "nombre": "ERA_T_FMT",
                "sintaxis": [
                    "locale.ERA_T_FMT"
                ]
            },
            {
                "nombre": "LC_ALL",
                "sintaxis": [
                    "locale.LC_ALL"
                ]
            },
            {
                "nombre": "LC_COLLATE",
                "sintaxis": [
                    "locale.LC_COLLATE"
                ]
            },
            {
                "nombre": "LC_CTYPE",
                "sintaxis": [
                    "locale.LC_CTYPE"
                ]
            },
            {
                "nombre": "LC_MESSAGES",
                "sintaxis": [
                    "locale.LC_MESSAGES"
                ]
            },
            {
                "nombre": "LC_MONETARY",
                "sintaxis": [
                    "locale.LC_MONETARY"
                ]
            },
            {
                "nombre": "LC_NUMERIC",
                "sintaxis": [
                    "locale.LC_NUMERIC"
                ]
            },
            {
                "nombre": "LC_TIME",
                "sintaxis": [
                    "locale.LC_TIME"
                ]
            },
            {
                "nombre": "MON_1",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_10",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_11",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_12",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_2",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_3",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_4",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_5",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_6",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_7",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_8",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "MON_9",
                "sintaxis": [
                    "MON_1 ... MON_12"
                ]
            },
            {
                "nombre": "NOEXPR",
                "sintaxis": [
                    "locale.NOEXPR"
                ]
            },
            {
                "nombre": "RADIXCHAR",
                "sintaxis": [
                    "locale.RADIXCHAR"
                ]
            },
            {
                "nombre": "THOUSEP",
                "sintaxis": [
                    "locale.THOUSEP"
                ]
            },
            {
                "nombre": "T_FMT",
                "sintaxis": [
                    "locale.T_FMT"
                ]
            },
            {
                "nombre": "T_FMT_AMPM",
                "sintaxis": [
                    "locale.T_FMT_AMPM"
                ]
            },
            {
                "nombre": "YESEXPR",
                "sintaxis": [
                    "locale.YESEXPR"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception locale.Error"
                ]
            }
        ]
    },
    {
        "nombre": "logging",
        "funciones": [
            {
                "nombre": "addLevelName",
                "sintaxis": [
                    "logging.addLevelName(level, levelName)"
                ],
                "parametros": [
                    "levelName",
                    "level"
                ]
            },
            {
                "nombre": "basicConfig",
                "sintaxis": [
                    "logging.basicConfig(**kwargs)"
                ],
                "parametros": [
                    "kwargs"
                ]
            },
            {
                "nombre": "captureWarnings",
                "sintaxis": [
                    "logging.captureWarnings(capture)"
                ],
                "parametros": [
                    "capture"
                ]
            },
            {
                "nombre": "critical",
                "sintaxis": [
                    "logging.critical(msg, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "msg"
                ]
            },
            {
                "nombre": "debug",
                "sintaxis": [
                    "logging.debug(msg, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "msg"
                ]
            },
            {
                "nombre": "disable",
                "sintaxis": [
                    "logging.disable(level=CRITICAL)"
                ],
                "parametros": [
                    "level"
                ]
            },
            {
                "nombre": "error",
                "sintaxis": [
                    "logging.error(msg, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "msg"
                ]
            },
            {
                "nombre": "exception",
                "sintaxis": [
                    "logging.exception(msg, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "msg"
                ]
            },
            {
                "nombre": "getLevelName",
                "sintaxis": [
                    "logging.getLevelName(level)"
                ],
                "parametros": [
                    "level"
                ]
            },
            {
                "nombre": "getLogger",
                "sintaxis": [
                    "logging.getLogger(name=None)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "getLoggerClass",
                "sintaxis": [
                    "logging.getLoggerClass()"
                ],
                "parametros": []
            },
            {
                "nombre": "getLogRecordFactory",
                "sintaxis": [
                    "logging.getLogRecordFactory()"
                ],
                "parametros": []
            },
            {
                "nombre": "info",
                "sintaxis": [
                    "logging.info(msg, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "msg"
                ]
            },
            {
                "nombre": "log",
                "sintaxis": [
                    "logging.log(level, msg, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "msg",
                    "level"
                ]
            },
            {
                "nombre": "makeLogRecord",
                "sintaxis": [
                    "logging.makeLogRecord(attrdict)"
                ],
                "parametros": [
                    "attrdict"
                ]
            },
            {
                "nombre": "setLoggerClass",
                "sintaxis": [
                    "logging.setLoggerClass(klass)"
                ],
                "parametros": [
                    "klass"
                ]
            },
            {
                "nombre": "setLogRecordFactory",
                "sintaxis": [
                    "logging.setLogRecordFactory(factory)"
                ],
                "parametros": [
                    "factory"
                ]
            },
            {
                "nombre": "shutdown",
                "sintaxis": [
                    "logging.shutdown()"
                ],
                "parametros": []
            },
            {
                "nombre": "warning",
                "sintaxis": [
                    "logging.warning(msg, *args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs",
                    "msg"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Filter",
                "constructores": [
                    {
                        "nombre": "Filter",
                        "sintaxis": [
                            "class logging.Filter(name='')"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "filter",
                        "sintaxis": [
                            "filter(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Filter"
                ]
            },
            {
                "nombre": "Formatter",
                "constructores": [
                    {
                        "nombre": "Formatter",
                        "sintaxis": [
                            "class logging.Formatter(fmt=None, datefmt=None, style='%', validate=True, *, defaults=None)"
                        ],
                        "parametros": [
                            "datefmt",
                            "fmt",
                            "defaults",
                            "style",
                            "*",
                            "validate"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "formatException",
                        "sintaxis": [
                            "formatException(exc_info)"
                        ],
                        "parametros": [
                            "exc_info"
                        ]
                    },
                    {
                        "nombre": "formatStack",
                        "sintaxis": [
                            "formatStack(stack_info)"
                        ],
                        "parametros": [
                            "stack_info"
                        ]
                    },
                    {
                        "nombre": "formatTime",
                        "sintaxis": [
                            "formatTime(record, datefmt=None)"
                        ],
                        "parametros": [
                            "record",
                            "datefmt"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Formatter"
                ]
            },
            {
                "nombre": "Handler",
                "constructores": [
                    {
                        "nombre": "Handler",
                        "sintaxis": [
                            "class logging.Handler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "acquire()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "addFilter",
                        "sintaxis": [
                            "addFilter(filter)"
                        ],
                        "parametros": [
                            "filter"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "createLock",
                        "sintaxis": [
                            "createLock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "filter",
                        "sintaxis": [
                            "filter(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "handleError",
                        "sintaxis": [
                            "handleError(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "removeFilter",
                        "sintaxis": [
                            "removeFilter(filter)"
                        ],
                        "parametros": [
                            "filter"
                        ]
                    },
                    {
                        "nombre": "setFormatter",
                        "sintaxis": [
                            "setFormatter(fmt)"
                        ],
                        "parametros": [
                            "fmt"
                        ]
                    },
                    {
                        "nombre": "setLevel",
                        "sintaxis": [
                            "setLevel(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "__init__",
                        "sintaxis": [
                            "__init__(level=NOTSET)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Handler"
                ]
            },
            {
                "nombre": "Logger",
                "constructores": [
                    {
                        "nombre": "Logger",
                        "sintaxis": [
                            "class logging.Logger"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "addFilter",
                        "sintaxis": [
                            "addFilter(filter)"
                        ],
                        "parametros": [
                            "filter"
                        ]
                    },
                    {
                        "nombre": "addHandler",
                        "sintaxis": [
                            "addHandler(hdlr)"
                        ],
                        "parametros": [
                            "hdlr"
                        ]
                    },
                    {
                        "nombre": "critical",
                        "sintaxis": [
                            "critical(msg, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "debug",
                        "sintaxis": [
                            "debug(msg, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "error",
                        "sintaxis": [
                            "error(msg, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "exception",
                        "sintaxis": [
                            "exception(msg, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "filter",
                        "sintaxis": [
                            "filter(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "findCaller",
                        "sintaxis": [
                            "findCaller(stack_info=False, stacklevel=1)"
                        ],
                        "parametros": [
                            "stacklevel",
                            "stack_info"
                        ]
                    },
                    {
                        "nombre": "getChild",
                        "sintaxis": [
                            "getChild(suffix)"
                        ],
                        "parametros": [
                            "suffix"
                        ]
                    },
                    {
                        "nombre": "getEffectiveLevel",
                        "sintaxis": [
                            "getEffectiveLevel()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "hasHandlers",
                        "sintaxis": [
                            "hasHandlers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "info",
                        "sintaxis": [
                            "info(msg, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "isEnabledFor",
                        "sintaxis": [
                            "isEnabledFor(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "log",
                        "sintaxis": [
                            "log(level, msg, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "msg",
                            "level"
                        ]
                    },
                    {
                        "nombre": "makeRecord",
                        "sintaxis": [
                            "makeRecord(name, level, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)"
                        ],
                        "parametros": [
                            "args",
                            "extra",
                            "lno",
                            "name",
                            "fn",
                            "sinfo",
                            "func",
                            "msg",
                            "exc_info",
                            "level"
                        ]
                    },
                    {
                        "nombre": "removeFilter",
                        "sintaxis": [
                            "removeFilter(filter)"
                        ],
                        "parametros": [
                            "filter"
                        ]
                    },
                    {
                        "nombre": "removeHandler",
                        "sintaxis": [
                            "removeHandler(hdlr)"
                        ],
                        "parametros": [
                            "hdlr"
                        ]
                    },
                    {
                        "nombre": "setLevel",
                        "sintaxis": [
                            "setLevel(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "warning",
                        "sintaxis": [
                            "warning(msg, *args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "msg"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "propagate",
                        "sintaxis": [
                            "propagate"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Logger"
                ]
            },
            {
                "nombre": "LoggerAdapter",
                "constructores": [
                    {
                        "nombre": "LoggerAdapter",
                        "sintaxis": [
                            "class logging.LoggerAdapter(logger, extra)"
                        ],
                        "parametros": [
                            "extra",
                            "logger"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "process",
                        "sintaxis": [
                            "process(msg, kwargs)"
                        ],
                        "parametros": [
                            "kwargs",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LoggerAdapter"
                ]
            },
            {
                "nombre": "logging",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "lastResort",
                        "sintaxis": [
                            "logging.lastResort"
                        ]
                    }
                ],
                "sintaxis": [
                    "class logging"
                ]
            },
            {
                "nombre": "LogRecord",
                "constructores": [
                    {
                        "nombre": "LogRecord",
                        "sintaxis": [
                            "class logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None)"
                        ],
                        "parametros": [
                            "args",
                            "name",
                            "pathname",
                            "lineno",
                            "sinfo",
                            "func",
                            "msg",
                            "exc_info",
                            "level"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getMessage",
                        "sintaxis": [
                            "getMessage()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LogRecord"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "logging.config",
        "funciones": [
            {
                "nombre": "dictConfig",
                "sintaxis": [
                    "logging.config.dictConfig(config)"
                ],
                "parametros": [
                    "config"
                ]
            },
            {
                "nombre": "fileConfig",
                "sintaxis": [
                    "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True, encoding=None)"
                ],
                "parametros": [
                    "disable_existing_loggers",
                    "defaults",
                    "fname",
                    "encoding"
                ]
            },
            {
                "nombre": "listen",
                "sintaxis": [
                    "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)"
                ],
                "parametros": [
                    "verify",
                    "port"
                ]
            },
            {
                "nombre": "stopListening",
                "sintaxis": [
                    "logging.config.stopListening()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "logging.handlers",
        "funciones": [],
        "clases": [
            {
                "nombre": "BaseRotatingHandler",
                "constructores": [
                    {
                        "nombre": "BaseRotatingHandler",
                        "sintaxis": [
                            "class logging.handlers.BaseRotatingHandler(filename, mode, encoding=None, delay=False, errors=None)"
                        ],
                        "parametros": [
                            "mode",
                            "filename",
                            "encoding",
                            "errors",
                            "delay"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "rotate",
                        "sintaxis": [
                            "rotate(source, dest)"
                        ],
                        "parametros": [
                            "dest",
                            "source"
                        ]
                    },
                    {
                        "nombre": "rotation_filename",
                        "sintaxis": [
                            "rotation_filename(default_name)"
                        ],
                        "parametros": [
                            "default_name"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "namer",
                        "sintaxis": [
                            "namer"
                        ]
                    },
                    {
                        "nombre": "rotator",
                        "sintaxis": [
                            "rotator"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseRotatingHandler"
                ]
            },
            {
                "nombre": "BufferingHandler",
                "constructores": [
                    {
                        "nombre": "BufferingHandler",
                        "sintaxis": [
                            "class logging.handlers.BufferingHandler(capacity)"
                        ],
                        "parametros": [
                            "capacity"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "shouldFlush",
                        "sintaxis": [
                            "shouldFlush(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BufferingHandler"
                ]
            },
            {
                "nombre": "DatagramHandler",
                "constructores": [
                    {
                        "nombre": "DatagramHandler",
                        "sintaxis": [
                            "class logging.handlers.DatagramHandler(host, port)"
                        ],
                        "parametros": [
                            "host",
                            "port"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "makeSocket",
                        "sintaxis": [
                            "makeSocket()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "send",
                        "sintaxis": [
                            "send(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DatagramHandler"
                ]
            },
            {
                "nombre": "FileHandler",
                "constructores": [
                    {
                        "nombre": "FileHandler",
                        "sintaxis": [
                            "class logging.FileHandler(filename, mode='a', encoding=None, delay=False, errors=None)"
                        ],
                        "parametros": [
                            "mode",
                            "filename",
                            "encoding",
                            "errors",
                            "delay"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FileHandler"
                ]
            },
            {
                "nombre": "HTTPHandler",
                "constructores": [
                    {
                        "nombre": "HTTPHandler",
                        "sintaxis": [
                            "class logging.handlers.HTTPHandler(host, url, method='GET', secure=False, credentials=None, context=None)"
                        ],
                        "parametros": [
                            "context",
                            "url",
                            "method",
                            "credentials",
                            "host",
                            "secure"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "mapLogRecord",
                        "sintaxis": [
                            "mapLogRecord(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPHandler"
                ]
            },
            {
                "nombre": "MemoryHandler",
                "constructores": [
                    {
                        "nombre": "MemoryHandler",
                        "sintaxis": [
                            "class logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None, flushOnClose=True)"
                        ],
                        "parametros": [
                            "flushOnClose",
                            "flushLevel",
                            "capacity",
                            "target"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setTarget",
                        "sintaxis": [
                            "setTarget(target)"
                        ],
                        "parametros": [
                            "target"
                        ]
                    },
                    {
                        "nombre": "shouldFlush",
                        "sintaxis": [
                            "shouldFlush(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MemoryHandler"
                ]
            },
            {
                "nombre": "NTEventLogHandler",
                "constructores": [
                    {
                        "nombre": "NTEventLogHandler",
                        "sintaxis": [
                            "class logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')"
                        ],
                        "parametros": [
                            "dllname",
                            "logtype",
                            "appname"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "getEventCategory",
                        "sintaxis": [
                            "getEventCategory(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "getEventType",
                        "sintaxis": [
                            "getEventType(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "getMessageID",
                        "sintaxis": [
                            "getMessageID(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class NTEventLogHandler"
                ]
            },
            {
                "nombre": "NullHandler",
                "constructores": [
                    {
                        "nombre": "NullHandler",
                        "sintaxis": [
                            "class logging.NullHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "createLock",
                        "sintaxis": [
                            "createLock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class NullHandler"
                ]
            },
            {
                "nombre": "QueueHandler",
                "constructores": [
                    {
                        "nombre": "QueueHandler",
                        "sintaxis": [
                            "class logging.handlers.QueueHandler(queue)"
                        ],
                        "parametros": [
                            "queue"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "enqueue",
                        "sintaxis": [
                            "enqueue(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "prepare",
                        "sintaxis": [
                            "prepare(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class QueueHandler"
                ]
            },
            {
                "nombre": "QueueListener",
                "constructores": [
                    {
                        "nombre": "QueueListener",
                        "sintaxis": [
                            "class logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)"
                        ],
                        "parametros": [
                            "respect_handler_level",
                            "handlers",
                            "queue"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "dequeue",
                        "sintaxis": [
                            "dequeue(block)"
                        ],
                        "parametros": [
                            "block"
                        ]
                    },
                    {
                        "nombre": "enqueue_sentinel",
                        "sintaxis": [
                            "enqueue_sentinel()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "prepare",
                        "sintaxis": [
                            "prepare(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "start()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "stop",
                        "sintaxis": [
                            "stop()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class QueueListener"
                ]
            },
            {
                "nombre": "RotatingFileHandler",
                "constructores": [
                    {
                        "nombre": "RotatingFileHandler",
                        "sintaxis": [
                            "class logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False, errors=None)"
                        ],
                        "parametros": [
                            "mode",
                            "filename",
                            "encoding",
                            "errors",
                            "maxBytes",
                            "backupCount",
                            "delay"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "doRollover",
                        "sintaxis": [
                            "doRollover()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class RotatingFileHandler"
                ]
            },
            {
                "nombre": "SMTPHandler",
                "constructores": [
                    {
                        "nombre": "SMTPHandler",
                        "sintaxis": [
                            "class logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=1.0)"
                        ],
                        "parametros": [
                            "toaddrs",
                            "subject",
                            "mailhost",
                            "timeout",
                            "credentials",
                            "fromaddr",
                            "secure"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "getSubject",
                        "sintaxis": [
                            "getSubject(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SMTPHandler"
                ]
            },
            {
                "nombre": "SocketHandler",
                "constructores": [
                    {
                        "nombre": "SocketHandler",
                        "sintaxis": [
                            "class logging.handlers.SocketHandler(host, port)"
                        ],
                        "parametros": [
                            "host",
                            "port"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "createSocket",
                        "sintaxis": [
                            "createSocket()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handleError",
                        "sintaxis": [
                            "handleError()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "makePickle",
                        "sintaxis": [
                            "makePickle(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "makeSocket",
                        "sintaxis": [
                            "makeSocket()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "send",
                        "sintaxis": [
                            "send(packet)"
                        ],
                        "parametros": [
                            "packet"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SocketHandler"
                ]
            },
            {
                "nombre": "StreamHandler",
                "constructores": [
                    {
                        "nombre": "StreamHandler",
                        "sintaxis": [
                            "class logging.StreamHandler(stream=None)"
                        ],
                        "parametros": [
                            "stream"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setStream",
                        "sintaxis": [
                            "setStream(stream)"
                        ],
                        "parametros": [
                            "stream"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "terminator",
                        "sintaxis": [
                            "terminator"
                        ]
                    }
                ],
                "sintaxis": [
                    "class StreamHandler"
                ]
            },
            {
                "nombre": "SysLogHandler",
                "constructores": [
                    {
                        "nombre": "SysLogHandler",
                        "sintaxis": [
                            "class logging.handlers.SysLogHandler(address='localhost', SYSLOG_UDP_PORT, facility=LOG_USER, socktype=socket.SOCK_DGRAM)"
                        ],
                        "parametros": [
                            "socktype",
                            "address",
                            "facility"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "encodePriority",
                        "sintaxis": [
                            "encodePriority(facility, priority)"
                        ],
                        "parametros": [
                            "priority",
                            "facility"
                        ]
                    },
                    {
                        "nombre": "mapPriority",
                        "sintaxis": [
                            "mapPriority(levelname)"
                        ],
                        "parametros": [
                            "levelname"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SysLogHandler"
                ]
            },
            {
                "nombre": "TimedRotatingFileHandler",
                "constructores": [
                    {
                        "nombre": "TimedRotatingFileHandler",
                        "sintaxis": [
                            "class logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None, errors=None)"
                        ],
                        "parametros": [
                            "filename",
                            "utc",
                            "encoding",
                            "errors",
                            "backupCount",
                            "atTime",
                            "when",
                            "interval",
                            "delay"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "doRollover",
                        "sintaxis": [
                            "doRollover()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class TimedRotatingFileHandler"
                ]
            },
            {
                "nombre": "WatchedFileHandler",
                "constructores": [
                    {
                        "nombre": "WatchedFileHandler",
                        "sintaxis": [
                            "class logging.handlers.WatchedFileHandler(filename, mode='a', encoding=None, delay=False, errors=None)"
                        ],
                        "parametros": [
                            "mode",
                            "filename",
                            "encoding",
                            "errors",
                            "delay"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "emit",
                        "sintaxis": [
                            "emit(record)"
                        ],
                        "parametros": [
                            "record"
                        ]
                    },
                    {
                        "nombre": "reopenIfNeeded",
                        "sintaxis": [
                            "reopenIfNeeded()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class WatchedFileHandler"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "lzma",
        "funciones": [
            {
                "nombre": "compress",
                "sintaxis": [
                    "lzma.compress(data, format=FORMAT_XZ, check=- 1, preset=None, filters=None)"
                ],
                "parametros": [
                    "format",
                    "check",
                    "data",
                    "preset",
                    "filters"
                ]
            },
            {
                "nombre": "decompress",
                "sintaxis": [
                    "lzma.decompress(data, format=FORMAT_AUTO, memlimit=None, filters=None)"
                ],
                "parametros": [
                    "format",
                    "memlimit",
                    "filters",
                    "data"
                ]
            },
            {
                "nombre": "is_check_supported",
                "sintaxis": [
                    "lzma.is_check_supported(check)"
                ],
                "parametros": [
                    "check"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "lzma.open(filename, mode='rb', *, format=None, check=- 1, preset=None, filters=None, encoding=None, errors=None, newline=None)"
                ],
                "parametros": [
                    "mode",
                    "filename",
                    "format",
                    "encoding",
                    "errors",
                    "check",
                    "newline",
                    "preset",
                    "*",
                    "filters"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "LZMACompressor",
                "constructores": [
                    {
                        "nombre": "LZMACompressor",
                        "sintaxis": [
                            "class lzma.LZMACompressor(format=FORMAT_XZ, check=- 1, preset=None, filters=None)"
                        ],
                        "parametros": [
                            "preset",
                            "format",
                            "filters",
                            "check"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "compress",
                        "sintaxis": [
                            "compress(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LZMACompressor"
                ]
            },
            {
                "nombre": "LZMADecompressor",
                "constructores": [
                    {
                        "nombre": "LZMADecompressor",
                        "sintaxis": [
                            "class lzma.LZMADecompressor(format=FORMAT_AUTO, memlimit=None, filters=None)"
                        ],
                        "parametros": [
                            "format",
                            "memlimit",
                            "filters"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "decompress",
                        "sintaxis": [
                            "decompress(data, max_length=- 1)"
                        ],
                        "parametros": [
                            "max_length",
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "check",
                        "sintaxis": [
                            "check"
                        ]
                    },
                    {
                        "nombre": "eof",
                        "sintaxis": [
                            "eof"
                        ]
                    },
                    {
                        "nombre": "needs_input",
                        "sintaxis": [
                            "needs_input"
                        ]
                    },
                    {
                        "nombre": "unused_data",
                        "sintaxis": [
                            "unused_data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class LZMADecompressor"
                ]
            },
            {
                "nombre": "LZMAFile",
                "constructores": [
                    {
                        "nombre": "LZMAFile",
                        "sintaxis": [
                            "class lzma.LZMAFile(filename=None, mode='r', *, format=None, check=- 1, preset=None, filters=None)"
                        ],
                        "parametros": [
                            "mode",
                            "filename",
                            "format",
                            "check",
                            "preset",
                            "*",
                            "filters"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "peek",
                        "sintaxis": [
                            "peek(size=- 1)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LZMAFile"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "LZMAError",
                "sintaxis": [
                    "exception lzma.LZMAError"
                ]
            }
        ]
    },
    {
        "nombre": "mailbox",
        "funciones": [],
        "clases": [
            {
                "nombre": "Babyl",
                "constructores": [
                    {
                        "nombre": "Babyl",
                        "sintaxis": [
                            "class mailbox.Babyl(path, factory=None, create=True)"
                        ],
                        "parametros": [
                            "create",
                            "factory",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_file",
                        "sintaxis": [
                            "get_file(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_labels",
                        "sintaxis": [
                            "get_labels()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lock",
                        "sintaxis": [
                            "lock()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Babyl"
                ]
            },
            {
                "nombre": "BabylMessage",
                "constructores": [
                    {
                        "nombre": "BabylMessage",
                        "sintaxis": [
                            "class mailbox.BabylMessage(message=None)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_label",
                        "sintaxis": [
                            "add_label(label)"
                        ],
                        "parametros": [
                            "label"
                        ]
                    },
                    {
                        "nombre": "get_labels",
                        "sintaxis": [
                            "get_labels()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_visible",
                        "sintaxis": [
                            "get_visible()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove_label",
                        "sintaxis": [
                            "remove_label(label)"
                        ],
                        "parametros": [
                            "label"
                        ]
                    },
                    {
                        "nombre": "set_labels",
                        "sintaxis": [
                            "set_labels(labels)"
                        ],
                        "parametros": [
                            "labels"
                        ]
                    },
                    {
                        "nombre": "set_visible",
                        "sintaxis": [
                            "set_visible(visible)"
                        ],
                        "parametros": [
                            "visible"
                        ]
                    },
                    {
                        "nombre": "update_visible",
                        "sintaxis": [
                            "update_visible()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BabylMessage"
                ]
            },
            {
                "nombre": "Mailbox",
                "constructores": [
                    {
                        "nombre": "Mailbox",
                        "sintaxis": [
                            "class mailbox.Mailbox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "add(message)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    },
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get(key, default=None)"
                        ],
                        "parametros": [
                            "default",
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_bytes",
                        "sintaxis": [
                            "get_bytes(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_file",
                        "sintaxis": [
                            "get_file(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_message",
                        "sintaxis": [
                            "get_message(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_string",
                        "sintaxis": [
                            "get_string(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "iteritems",
                        "sintaxis": [
                            "iteritems()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iterkeys",
                        "sintaxis": [
                            "iterkeys()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "itervalues",
                        "sintaxis": [
                            "itervalues()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lock",
                        "sintaxis": [
                            "lock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "pop",
                        "sintaxis": [
                            "pop(key, default=None)"
                        ],
                        "parametros": [
                            "default",
                            "key"
                        ]
                    },
                    {
                        "nombre": "popitem",
                        "sintaxis": [
                            "popitem()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove",
                        "sintaxis": [
                            "remove(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "unlock",
                        "sintaxis": [
                            "unlock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "update(arg)"
                        ],
                        "parametros": [
                            "arg"
                        ]
                    },
                    {
                        "nombre": "__contains__",
                        "sintaxis": [
                            "__contains__(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "__len__",
                        "sintaxis": [
                            "__len__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__setitem__",
                        "sintaxis": [
                            "__setitem__(key, message)"
                        ],
                        "parametros": [
                            "message",
                            "key"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Mailbox"
                ]
            },
            {
                "nombre": "Maildir",
                "constructores": [
                    {
                        "nombre": "Maildir",
                        "sintaxis": [
                            "class mailbox.Maildir(dirname, factory=None, create=True)"
                        ],
                        "parametros": [
                            "dirname",
                            "factory",
                            "create"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "add(message)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    },
                    {
                        "nombre": "add_folder",
                        "sintaxis": [
                            "add_folder(folder)"
                        ],
                        "parametros": [
                            "folder"
                        ]
                    },
                    {
                        "nombre": "clean",
                        "sintaxis": [
                            "clean()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_file",
                        "sintaxis": [
                            "get_file(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_folder",
                        "sintaxis": [
                            "get_folder(folder)"
                        ],
                        "parametros": [
                            "folder"
                        ]
                    },
                    {
                        "nombre": "list_folders",
                        "sintaxis": [
                            "list_folders()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lock",
                        "sintaxis": [
                            "lock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove_folder",
                        "sintaxis": [
                            "remove_folder(folder)"
                        ],
                        "parametros": [
                            "folder"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Maildir"
                ]
            },
            {
                "nombre": "MaildirMessage",
                "constructores": [
                    {
                        "nombre": "MaildirMessage",
                        "sintaxis": [
                            "class mailbox.MaildirMessage(message=None)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_flag",
                        "sintaxis": [
                            "add_flag(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "get_date",
                        "sintaxis": [
                            "get_date()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_flags",
                        "sintaxis": [
                            "get_flags()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_info",
                        "sintaxis": [
                            "get_info()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_subdir",
                        "sintaxis": [
                            "get_subdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove_flag",
                        "sintaxis": [
                            "remove_flag(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "set_date",
                        "sintaxis": [
                            "set_date(date)"
                        ],
                        "parametros": [
                            "date"
                        ]
                    },
                    {
                        "nombre": "set_flags",
                        "sintaxis": [
                            "set_flags(flags)"
                        ],
                        "parametros": [
                            "flags"
                        ]
                    },
                    {
                        "nombre": "set_info",
                        "sintaxis": [
                            "set_info(info)"
                        ],
                        "parametros": [
                            "info"
                        ]
                    },
                    {
                        "nombre": "set_subdir",
                        "sintaxis": [
                            "set_subdir(subdir)"
                        ],
                        "parametros": [
                            "subdir"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MaildirMessage"
                ]
            },
            {
                "nombre": "mbox",
                "constructores": [
                    {
                        "nombre": "mbox",
                        "sintaxis": [
                            "class mailbox.mbox(path, factory=None, create=True)"
                        ],
                        "parametros": [
                            "create",
                            "factory",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_file",
                        "sintaxis": [
                            "get_file(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "lock",
                        "sintaxis": [
                            "lock()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class mbox"
                ]
            },
            {
                "nombre": "mboxMessage",
                "constructores": [
                    {
                        "nombre": "mboxMessage",
                        "sintaxis": [
                            "class mailbox.mboxMessage(message=None)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_flag",
                        "sintaxis": [
                            "add_flag(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "get_flags",
                        "sintaxis": [
                            "get_flags()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_from",
                        "sintaxis": [
                            "get_from()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove_flag",
                        "sintaxis": [
                            "remove_flag(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "set_flags",
                        "sintaxis": [
                            "set_flags(flags)"
                        ],
                        "parametros": [
                            "flags"
                        ]
                    },
                    {
                        "nombre": "set_from",
                        "sintaxis": [
                            "set_from(from_, time_=None)"
                        ],
                        "parametros": [
                            "from_",
                            "time_"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class mboxMessage"
                ]
            },
            {
                "nombre": "Message",
                "constructores": [
                    {
                        "nombre": "Message",
                        "sintaxis": [
                            "class mailbox.Message(message=None)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Message"
                ]
            },
            {
                "nombre": "MH",
                "constructores": [
                    {
                        "nombre": "MH",
                        "sintaxis": [
                            "class mailbox.MH(path, factory=None, create=True)"
                        ],
                        "parametros": [
                            "create",
                            "factory",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_folder",
                        "sintaxis": [
                            "add_folder(folder)"
                        ],
                        "parametros": [
                            "folder"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_file",
                        "sintaxis": [
                            "get_file(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_folder",
                        "sintaxis": [
                            "get_folder(folder)"
                        ],
                        "parametros": [
                            "folder"
                        ]
                    },
                    {
                        "nombre": "get_sequences",
                        "sintaxis": [
                            "get_sequences()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "list_folders",
                        "sintaxis": [
                            "list_folders()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lock",
                        "sintaxis": [
                            "lock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "pack",
                        "sintaxis": [
                            "pack()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove",
                        "sintaxis": [
                            "remove(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "remove_folder",
                        "sintaxis": [
                            "remove_folder(folder)"
                        ],
                        "parametros": [
                            "folder"
                        ]
                    },
                    {
                        "nombre": "set_sequences",
                        "sintaxis": [
                            "set_sequences(sequences)"
                        ],
                        "parametros": [
                            "sequences"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MH"
                ]
            },
            {
                "nombre": "MHMessage",
                "constructores": [
                    {
                        "nombre": "MHMessage",
                        "sintaxis": [
                            "class mailbox.MHMessage(message=None)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_sequence",
                        "sintaxis": [
                            "add_sequence(sequence)"
                        ],
                        "parametros": [
                            "sequence"
                        ]
                    },
                    {
                        "nombre": "get_sequences",
                        "sintaxis": [
                            "get_sequences()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove_sequence",
                        "sintaxis": [
                            "remove_sequence(sequence)"
                        ],
                        "parametros": [
                            "sequence"
                        ]
                    },
                    {
                        "nombre": "set_sequences",
                        "sintaxis": [
                            "set_sequences(sequences)"
                        ],
                        "parametros": [
                            "sequences"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MHMessage"
                ]
            },
            {
                "nombre": "MMDF",
                "constructores": [
                    {
                        "nombre": "MMDF",
                        "sintaxis": [
                            "class mailbox.MMDF(path, factory=None, create=True)"
                        ],
                        "parametros": [
                            "create",
                            "factory",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_file",
                        "sintaxis": [
                            "get_file(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    },
                    {
                        "nombre": "lock",
                        "sintaxis": [
                            "lock()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MMDF"
                ]
            },
            {
                "nombre": "MMDFMessage",
                "constructores": [
                    {
                        "nombre": "MMDFMessage",
                        "sintaxis": [
                            "class mailbox.MMDFMessage(message=None)"
                        ],
                        "parametros": [
                            "message"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_flag",
                        "sintaxis": [
                            "add_flag(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "get_flags",
                        "sintaxis": [
                            "get_flags()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_from",
                        "sintaxis": [
                            "get_from()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove_flag",
                        "sintaxis": [
                            "remove_flag(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "set_flags",
                        "sintaxis": [
                            "set_flags(flags)"
                        ],
                        "parametros": [
                            "flags"
                        ]
                    },
                    {
                        "nombre": "set_from",
                        "sintaxis": [
                            "set_from(from_, time_=None)"
                        ],
                        "parametros": [
                            "from_",
                            "time_"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MMDFMessage"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception mailbox.Error"
                ]
            },
            {
                "nombre": "ExternalClashError",
                "sintaxis": [
                    "exception mailbox.ExternalClashError"
                ]
            },
            {
                "nombre": "FormatError",
                "sintaxis": [
                    "exception mailbox.FormatError"
                ]
            },
            {
                "nombre": "NoSuchMailboxError",
                "sintaxis": [
                    "exception mailbox.NoSuchMailboxError"
                ]
            },
            {
                "nombre": "NotEmptyError",
                "sintaxis": [
                    "exception mailbox.NotEmptyError"
                ]
            }
        ]
    },
    {
        "nombre": "mailcap",
        "funciones": [
            {
                "nombre": "findmatch",
                "sintaxis": [
                    "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[])"
                ],
                "parametros": [
                    "MIMEtype",
                    "filename",
                    "key",
                    "plist",
                    "caps"
                ]
            },
            {
                "nombre": "getcaps",
                "sintaxis": [
                    "mailcap.getcaps()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "marshal",
        "funciones": [
            {
                "nombre": "dump",
                "sintaxis": [
                    "marshal.dump(value, file[, version])"
                ],
                "parametros": [
                    "version",
                    "file",
                    "value"
                ]
            },
            {
                "nombre": "dumps",
                "sintaxis": [
                    "marshal.dumps(value[, version])"
                ],
                "parametros": [
                    "version",
                    "value"
                ]
            },
            {
                "nombre": "load",
                "sintaxis": [
                    "marshal.load(file)"
                ],
                "parametros": [
                    "file"
                ]
            },
            {
                "nombre": "loads",
                "sintaxis": [
                    "marshal.loads(bytes)"
                ],
                "parametros": [
                    "bytes"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "version",
                "sintaxis": [
                    "marshal.version"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "math",
        "funciones": [
            {
                "nombre": "acos",
                "sintaxis": [
                    "math.acos(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "acosh",
                "sintaxis": [
                    "math.acosh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "asin",
                "sintaxis": [
                    "math.asin(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "asinh",
                "sintaxis": [
                    "math.asinh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "atan",
                "sintaxis": [
                    "math.atan(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "atan2",
                "sintaxis": [
                    "math.atan2(y, x)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "atanh",
                "sintaxis": [
                    "math.atanh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "ceil",
                "sintaxis": [
                    "math.ceil(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "comb",
                "sintaxis": [
                    "math.comb(n, k)"
                ],
                "parametros": [
                    "n",
                    "k"
                ]
            },
            {
                "nombre": "copysign",
                "sintaxis": [
                    "math.copysign(x, y)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "cos",
                "sintaxis": [
                    "math.cos(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "cosh",
                "sintaxis": [
                    "math.cosh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "degrees",
                "sintaxis": [
                    "math.degrees(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "dist",
                "sintaxis": [
                    "math.dist(p, q)"
                ],
                "parametros": [
                    "q",
                    "p"
                ]
            },
            {
                "nombre": "erf",
                "sintaxis": [
                    "math.erf(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "erfc",
                "sintaxis": [
                    "math.erfc(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "exp",
                "sintaxis": [
                    "math.exp(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "expm1",
                "sintaxis": [
                    "math.expm1(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "fabs",
                "sintaxis": [
                    "math.fabs(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "factorial",
                "sintaxis": [
                    "math.factorial(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "floor",
                "sintaxis": [
                    "math.floor(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "fmod",
                "sintaxis": [
                    "math.fmod(x, y)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "frexp",
                "sintaxis": [
                    "math.frexp(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "fsum",
                "sintaxis": [
                    "math.fsum(iterable)"
                ],
                "parametros": [
                    "iterable"
                ]
            },
            {
                "nombre": "gamma",
                "sintaxis": [
                    "math.gamma(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "gcd",
                "sintaxis": [
                    "math.gcd(*integers)"
                ],
                "parametros": [
                    "integers"
                ]
            },
            {
                "nombre": "hypot",
                "sintaxis": [
                    "math.hypot(*coordinates)"
                ],
                "parametros": [
                    "coordinates"
                ]
            },
            {
                "nombre": "isclose",
                "sintaxis": [
                    "math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)"
                ],
                "parametros": [
                    "abs_tol",
                    "a",
                    "b",
                    "*",
                    "rel_tol"
                ]
            },
            {
                "nombre": "isfinite",
                "sintaxis": [
                    "math.isfinite(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "isinf",
                "sintaxis": [
                    "math.isinf(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "isnan",
                "sintaxis": [
                    "math.isnan(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "isqrt",
                "sintaxis": [
                    "math.isqrt(n)"
                ],
                "parametros": [
                    "n"
                ]
            },
            {
                "nombre": "lcm",
                "sintaxis": [
                    "math.lcm(*integers)"
                ],
                "parametros": [
                    "integers"
                ]
            },
            {
                "nombre": "ldexp",
                "sintaxis": [
                    "math.ldexp(x, i)"
                ],
                "parametros": [
                    "i",
                    "x"
                ]
            },
            {
                "nombre": "lgamma",
                "sintaxis": [
                    "math.lgamma(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "log",
                "sintaxis": [
                    "math.log(x[, base])"
                ],
                "parametros": [
                    "base",
                    "x"
                ]
            },
            {
                "nombre": "log10",
                "sintaxis": [
                    "math.log10(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "log1p",
                "sintaxis": [
                    "math.log1p(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "log2",
                "sintaxis": [
                    "math.log2(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "modf",
                "sintaxis": [
                    "math.modf(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "nextafter",
                "sintaxis": [
                    "math.nextafter(x, y)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "perm",
                "sintaxis": [
                    "math.perm(n, k=None)"
                ],
                "parametros": [
                    "n",
                    "k"
                ]
            },
            {
                "nombre": "pow",
                "sintaxis": [
                    "math.pow(x, y)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "prod",
                "sintaxis": [
                    "math.prod(iterable, *, start=1)"
                ],
                "parametros": [
                    "iterable",
                    "*",
                    "start"
                ]
            },
            {
                "nombre": "radians",
                "sintaxis": [
                    "math.radians(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "remainder",
                "sintaxis": [
                    "math.remainder(x, y)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "sin",
                "sintaxis": [
                    "math.sin(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "sinh",
                "sintaxis": [
                    "math.sinh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "sqrt",
                "sintaxis": [
                    "math.sqrt(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "tan",
                "sintaxis": [
                    "math.tan(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "tanh",
                "sintaxis": [
                    "math.tanh(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "trunc",
                "sintaxis": [
                    "math.trunc(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "ulp",
                "sintaxis": [
                    "math.ulp(x)"
                ],
                "parametros": [
                    "x"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "e",
                "sintaxis": [
                    "math.e"
                ]
            },
            {
                "nombre": "inf",
                "sintaxis": [
                    "math.inf"
                ]
            },
            {
                "nombre": "nan",
                "sintaxis": [
                    "math.nan"
                ]
            },
            {
                "nombre": "pi",
                "sintaxis": [
                    "math.pi"
                ]
            },
            {
                "nombre": "tau",
                "sintaxis": [
                    "math.tau"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "mimetypes",
        "funciones": [
            {
                "nombre": "add_type",
                "sintaxis": [
                    "mimetypes.add_type(type, ext, strict=True)"
                ],
                "parametros": [
                    "strict",
                    "ext",
                    "type"
                ]
            },
            {
                "nombre": "guess_all_extensions",
                "sintaxis": [
                    "mimetypes.guess_all_extensions(type, strict=True)"
                ],
                "parametros": [
                    "strict",
                    "type"
                ]
            },
            {
                "nombre": "guess_extension",
                "sintaxis": [
                    "mimetypes.guess_extension(type, strict=True)"
                ],
                "parametros": [
                    "strict",
                    "type"
                ]
            },
            {
                "nombre": "guess_type",
                "sintaxis": [
                    "mimetypes.guess_type(url, strict=True)"
                ],
                "parametros": [
                    "strict",
                    "url"
                ]
            },
            {
                "nombre": "init",
                "sintaxis": [
                    "mimetypes.init(files=None)"
                ],
                "parametros": [
                    "files"
                ]
            },
            {
                "nombre": "read_mime_types",
                "sintaxis": [
                    "mimetypes.read_mime_types(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "MimeTypes",
                "constructores": [
                    {
                        "nombre": "MimeTypes",
                        "sintaxis": [
                            "class mimetypes.MimeTypes(filenames=(), strict=True)"
                        ],
                        "parametros": [
                            "filenames",
                            "strict"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "guess_all_extensions",
                        "sintaxis": [
                            "guess_all_extensions(type, strict=True)"
                        ],
                        "parametros": [
                            "strict",
                            "type"
                        ]
                    },
                    {
                        "nombre": "guess_extension",
                        "sintaxis": [
                            "guess_extension(type, strict=True)"
                        ],
                        "parametros": [
                            "strict",
                            "type"
                        ]
                    },
                    {
                        "nombre": "guess_type",
                        "sintaxis": [
                            "guess_type(url, strict=True)"
                        ],
                        "parametros": [
                            "strict",
                            "url"
                        ]
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read(filename, strict=True)"
                        ],
                        "parametros": [
                            "filename",
                            "strict"
                        ]
                    },
                    {
                        "nombre": "readfp",
                        "sintaxis": [
                            "readfp(fp, strict=True)"
                        ],
                        "parametros": [
                            "strict",
                            "fp"
                        ]
                    },
                    {
                        "nombre": "read_windows_registry",
                        "sintaxis": [
                            "read_windows_registry(strict=True)"
                        ],
                        "parametros": [
                            "strict"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "encodings_map",
                        "sintaxis": [
                            "encodings_map"
                        ]
                    },
                    {
                        "nombre": "suffix_map",
                        "sintaxis": [
                            "suffix_map"
                        ]
                    },
                    {
                        "nombre": "types_map",
                        "sintaxis": [
                            "types_map"
                        ]
                    },
                    {
                        "nombre": "types_map_inv",
                        "sintaxis": [
                            "types_map_inv"
                        ]
                    }
                ],
                "sintaxis": [
                    "class MimeTypes"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "common_types",
                "sintaxis": [
                    "mimetypes.common_types"
                ]
            },
            {
                "nombre": "encodings_map",
                "sintaxis": [
                    "mimetypes.encodings_map"
                ]
            },
            {
                "nombre": "inited",
                "sintaxis": [
                    "mimetypes.inited"
                ]
            },
            {
                "nombre": "knownfiles",
                "sintaxis": [
                    "mimetypes.knownfiles"
                ]
            },
            {
                "nombre": "suffix_map",
                "sintaxis": [
                    "mimetypes.suffix_map"
                ]
            },
            {
                "nombre": "types_map",
                "sintaxis": [
                    "mimetypes.types_map"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "mmap",
        "funciones": [],
        "clases": [
            {
                "nombre": "mmap",
                "constructores": [
                    {
                        "nombre": "mmap",
                        "sintaxis": [
                            "class mmap.mmap(fileno, length, flags=MAP_SHARED, prot=PROT_WRITE|PROT_READ, access=ACCESS_DEFAULT[, offset])",
                            "class mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT[, offset])"
                        ],
                        "parametros": [
                            "prot",
                            "tagname",
                            "flags",
                            "length",
                            "fileno",
                            "access",
                            "offset"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "find",
                        "sintaxis": [
                            "find(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "flush([offset[, size]])"
                        ],
                        "parametros": [
                            "size",
                            "offset"
                        ]
                    },
                    {
                        "nombre": "madvise",
                        "sintaxis": [
                            "madvise(option[, start[, length]])"
                        ],
                        "parametros": [
                            "start",
                            "length",
                            "option"
                        ]
                    },
                    {
                        "nombre": "move",
                        "sintaxis": [
                            "move(dest, src, count)"
                        ],
                        "parametros": [
                            "dest",
                            "src",
                            "count"
                        ]
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read([n])"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "readline",
                        "sintaxis": [
                            "readline()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_byte",
                        "sintaxis": [
                            "read_byte()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "resize",
                        "sintaxis": [
                            "resize(newsize)"
                        ],
                        "parametros": [
                            "newsize"
                        ]
                    },
                    {
                        "nombre": "rfind",
                        "sintaxis": [
                            "rfind(sub[, start[, end]])"
                        ],
                        "parametros": [
                            "end",
                            "sub",
                            "start"
                        ]
                    },
                    {
                        "nombre": "seek",
                        "sintaxis": [
                            "seek(pos[, whence])"
                        ],
                        "parametros": [
                            "whence",
                            "pos"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "size()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "tell()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(bytes)"
                        ],
                        "parametros": [
                            "bytes"
                        ]
                    },
                    {
                        "nombre": "write_byte",
                        "sintaxis": [
                            "write_byte(byte)"
                        ],
                        "parametros": [
                            "byte"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "closed",
                        "sintaxis": [
                            "closed"
                        ]
                    }
                ],
                "sintaxis": [
                    "class mmap"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "MADV_NORMAL",
                "sintaxis": [
                    "mmap.MADV_NORMAL"
                ]
            },
            {
                "nombre": "MAP_SHARED",
                "sintaxis": [
                    "mmap.MAP_SHARED"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "modulefinder",
        "funciones": [
            {
                "nombre": "AddPackagePath",
                "sintaxis": [
                    "modulefinder.AddPackagePath(pkg_name, path)"
                ],
                "parametros": [
                    "path",
                    "pkg_name"
                ]
            },
            {
                "nombre": "ReplacePackage",
                "sintaxis": [
                    "modulefinder.ReplacePackage(oldname, newname)"
                ],
                "parametros": [
                    "newname",
                    "oldname"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "ModuleFinder",
                "constructores": [
                    {
                        "nombre": "ModuleFinder",
                        "sintaxis": [
                            "class modulefinder.ModuleFinder(path=None, debug=0, excludes=[], replace_paths=[])"
                        ],
                        "parametros": [
                            "excludes",
                            "replace_paths",
                            "debug",
                            "path"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "report",
                        "sintaxis": [
                            "report()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run_script",
                        "sintaxis": [
                            "run_script(pathname)"
                        ],
                        "parametros": [
                            "pathname"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "modules",
                        "sintaxis": [
                            "modules"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ModuleFinder"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "msilib",
        "funciones": [
            {
                "nombre": "add_data",
                "sintaxis": [
                    "msilib.add_data(database, table, records)"
                ],
                "parametros": [
                    "database",
                    "records",
                    "table"
                ]
            },
            {
                "nombre": "add_stream",
                "sintaxis": [
                    "msilib.add_stream(database, name, path)"
                ],
                "parametros": [
                    "database",
                    "path",
                    "name"
                ]
            },
            {
                "nombre": "add_tables",
                "sintaxis": [
                    "msilib.add_tables(database, module)"
                ],
                "parametros": [
                    "database",
                    "module"
                ]
            },
            {
                "nombre": "CreateRecord",
                "sintaxis": [
                    "msilib.CreateRecord(count)"
                ],
                "parametros": [
                    "count"
                ]
            },
            {
                "nombre": "FCICreate",
                "sintaxis": [
                    "msilib.FCICreate(cabname, files)"
                ],
                "parametros": [
                    "cabname",
                    "files"
                ]
            },
            {
                "nombre": "gen_uuid",
                "sintaxis": [
                    "msilib.gen_uuid()"
                ],
                "parametros": []
            },
            {
                "nombre": "init_database",
                "sintaxis": [
                    "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)"
                ],
                "parametros": [
                    "ProductCode",
                    "Manufacturer",
                    "name",
                    "ProductVersion",
                    "schema",
                    "ProductName"
                ]
            },
            {
                "nombre": "OpenDatabase",
                "sintaxis": [
                    "msilib.OpenDatabase(path, persist)"
                ],
                "parametros": [
                    "persist",
                    "path"
                ]
            },
            {
                "nombre": "UuidCreate",
                "sintaxis": [
                    "msilib.UuidCreate()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "Binary",
                "constructores": [
                    {
                        "nombre": "Binary",
                        "sintaxis": [
                            "class msilib.Binary(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Binary"
                ]
            },
            {
                "nombre": "CAB",
                "constructores": [
                    {
                        "nombre": "CAB",
                        "sintaxis": [
                            "class msilib.CAB(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "append",
                        "sintaxis": [
                            "append(full, file, logical)"
                        ],
                        "parametros": [
                            "logical",
                            "full",
                            "file"
                        ]
                    },
                    {
                        "nombre": "commit",
                        "sintaxis": [
                            "commit(database)"
                        ],
                        "parametros": [
                            "database"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class CAB"
                ]
            },
            {
                "nombre": "Control",
                "constructores": [
                    {
                        "nombre": "Control",
                        "sintaxis": [
                            "class msilib.Control(dlg, name)"
                        ],
                        "parametros": [
                            "name",
                            "dlg"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "condition",
                        "sintaxis": [
                            "condition(action, condition)"
                        ],
                        "parametros": [
                            "action",
                            "condition"
                        ]
                    },
                    {
                        "nombre": "event",
                        "sintaxis": [
                            "event(event, argument, condition=1, ordering=None)"
                        ],
                        "parametros": [
                            "event",
                            "ordering",
                            "argument",
                            "condition"
                        ]
                    },
                    {
                        "nombre": "mapping",
                        "sintaxis": [
                            "mapping(event, attribute)"
                        ],
                        "parametros": [
                            "event",
                            "attribute"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Control"
                ]
            },
            {
                "nombre": "Database",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "Close",
                        "sintaxis": [
                            "Database.Close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Commit",
                        "sintaxis": [
                            "Database.Commit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "GetSummaryInformation",
                        "sintaxis": [
                            "Database.GetSummaryInformation(count)"
                        ],
                        "parametros": [
                            "count"
                        ]
                    },
                    {
                        "nombre": "OpenView",
                        "sintaxis": [
                            "Database.OpenView(sql)"
                        ],
                        "parametros": [
                            "sql"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Database"
                ]
            },
            {
                "nombre": "Dialog",
                "constructores": [
                    {
                        "nombre": "Dialog",
                        "sintaxis": [
                            "class msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)"
                        ],
                        "parametros": [
                            "title",
                            "name",
                            "first",
                            "cancel",
                            "y",
                            "attr",
                            "default",
                            "h",
                            "db",
                            "w",
                            "x"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "bitmap",
                        "sintaxis": [
                            "bitmap(name, x, y, width, height, text)"
                        ],
                        "parametros": [
                            "name",
                            "y",
                            "width",
                            "text",
                            "height",
                            "x"
                        ]
                    },
                    {
                        "nombre": "checkbox",
                        "sintaxis": [
                            "checkbox(name, x, y, width, height, attributes, property, text, next_control)"
                        ],
                        "parametros": [
                            "attributes",
                            "name",
                            "property",
                            "y",
                            "next_control",
                            "width",
                            "text",
                            "height",
                            "x"
                        ]
                    },
                    {
                        "nombre": "control",
                        "sintaxis": [
                            "control(name, type, x, y, width, height, attributes, property, text, control_next, help)"
                        ],
                        "parametros": [
                            "control_next",
                            "attributes",
                            "type",
                            "help",
                            "name",
                            "property",
                            "y",
                            "width",
                            "text",
                            "height",
                            "x"
                        ]
                    },
                    {
                        "nombre": "line",
                        "sintaxis": [
                            "line(name, x, y, width, height)"
                        ],
                        "parametros": [
                            "name",
                            "y",
                            "width",
                            "height",
                            "x"
                        ]
                    },
                    {
                        "nombre": "pushbutton",
                        "sintaxis": [
                            "pushbutton(name, x, y, width, height, attributes, text, next_control)"
                        ],
                        "parametros": [
                            "attributes",
                            "name",
                            "y",
                            "next_control",
                            "width",
                            "text",
                            "height",
                            "x"
                        ]
                    },
                    {
                        "nombre": "radiogroup",
                        "sintaxis": [
                            "radiogroup(name, x, y, width, height, attributes, property, text, next_control)"
                        ],
                        "parametros": [
                            "attributes",
                            "name",
                            "property",
                            "y",
                            "next_control",
                            "width",
                            "text",
                            "height",
                            "x"
                        ]
                    },
                    {
                        "nombre": "text",
                        "sintaxis": [
                            "text(name, x, y, width, height, attributes, text)"
                        ],
                        "parametros": [
                            "attributes",
                            "name",
                            "y",
                            "width",
                            "text",
                            "height",
                            "x"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Dialog"
                ]
            },
            {
                "nombre": "Directory",
                "constructores": [
                    {
                        "nombre": "Directory",
                        "sintaxis": [
                            "class msilib.Directory(database, cab, basedir, physical, logical, default[, componentflags])"
                        ],
                        "parametros": [
                            "physical",
                            "default",
                            "componentflags",
                            "cab",
                            "database",
                            "logical",
                            "basedir"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_file",
                        "sintaxis": [
                            "add_file(file, src=None, version=None, language=None)"
                        ],
                        "parametros": [
                            "version",
                            "language",
                            "file",
                            "src"
                        ]
                    },
                    {
                        "nombre": "glob",
                        "sintaxis": [
                            "glob(pattern, exclude=None)"
                        ],
                        "parametros": [
                            "exclude",
                            "pattern"
                        ]
                    },
                    {
                        "nombre": "remove_pyc",
                        "sintaxis": [
                            "remove_pyc()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "start_component",
                        "sintaxis": [
                            "start_component(component=None, feature=None, flags=None, keyfile=None, uuid=None)"
                        ],
                        "parametros": [
                            "flags",
                            "uuid",
                            "component",
                            "feature",
                            "keyfile"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Directory"
                ]
            },
            {
                "nombre": "Feature",
                "constructores": [
                    {
                        "nombre": "Feature",
                        "sintaxis": [
                            "class msilib.Feature(db, id, title, desc, display, level=1, parent=None, directory=None, attributes=0)"
                        ],
                        "parametros": [
                            "title",
                            "attributes",
                            "display",
                            "id",
                            "directory",
                            "parent",
                            "db",
                            "desc",
                            "level"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "set_current",
                        "sintaxis": [
                            "set_current()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Feature"
                ]
            },
            {
                "nombre": "RadioButtonGroup",
                "constructores": [
                    {
                        "nombre": "RadioButtonGroup",
                        "sintaxis": [
                            "class msilib.RadioButtonGroup(dlg, name, property)"
                        ],
                        "parametros": [
                            "name",
                            "dlg",
                            "property"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "add(name, x, y, width, height, text, value=None)"
                        ],
                        "parametros": [
                            "name",
                            "y",
                            "value",
                            "width",
                            "text",
                            "height",
                            "x"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class RadioButtonGroup"
                ]
            },
            {
                "nombre": "Record",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "ClearData",
                        "sintaxis": [
                            "Record.ClearData()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "GetFieldCount",
                        "sintaxis": [
                            "Record.GetFieldCount()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "GetInteger",
                        "sintaxis": [
                            "Record.GetInteger(field)"
                        ],
                        "parametros": [
                            "field"
                        ]
                    },
                    {
                        "nombre": "GetString",
                        "sintaxis": [
                            "Record.GetString(field)"
                        ],
                        "parametros": [
                            "field"
                        ]
                    },
                    {
                        "nombre": "SetInteger",
                        "sintaxis": [
                            "Record.SetInteger(field, value)"
                        ],
                        "parametros": [
                            "value",
                            "field"
                        ]
                    },
                    {
                        "nombre": "SetStream",
                        "sintaxis": [
                            "Record.SetStream(field, value)"
                        ],
                        "parametros": [
                            "value",
                            "field"
                        ]
                    },
                    {
                        "nombre": "SetString",
                        "sintaxis": [
                            "Record.SetString(field, value)"
                        ],
                        "parametros": [
                            "value",
                            "field"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Record"
                ]
            },
            {
                "nombre": "SummaryInformation",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "GetProperty",
                        "sintaxis": [
                            "SummaryInformation.GetProperty(field)"
                        ],
                        "parametros": [
                            "field"
                        ]
                    },
                    {
                        "nombre": "GetPropertyCount",
                        "sintaxis": [
                            "SummaryInformation.GetPropertyCount()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Persist",
                        "sintaxis": [
                            "SummaryInformation.Persist()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "SetProperty",
                        "sintaxis": [
                            "SummaryInformation.SetProperty(field, value)"
                        ],
                        "parametros": [
                            "value",
                            "field"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SummaryInformation"
                ]
            },
            {
                "nombre": "View",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "Close",
                        "sintaxis": [
                            "View.Close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Execute",
                        "sintaxis": [
                            "View.Execute(params)"
                        ],
                        "parametros": [
                            "params"
                        ]
                    },
                    {
                        "nombre": "Fetch",
                        "sintaxis": [
                            "View.Fetch()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "GetColumnInfo",
                        "sintaxis": [
                            "View.GetColumnInfo(kind)"
                        ],
                        "parametros": [
                            "kind"
                        ]
                    },
                    {
                        "nombre": "Modify",
                        "sintaxis": [
                            "View.Modify(kind, data)"
                        ],
                        "parametros": [
                            "kind",
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class View"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "schema",
                "sintaxis": [
                    "msilib.schema"
                ]
            },
            {
                "nombre": "sequence",
                "sintaxis": [
                    "msilib.sequence"
                ]
            },
            {
                "nombre": "text",
                "sintaxis": [
                    "msilib.text"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "msvcrt",
        "funciones": [
            {
                "nombre": "getch",
                "sintaxis": [
                    "msvcrt.getch()"
                ],
                "parametros": []
            },
            {
                "nombre": "getche",
                "sintaxis": [
                    "msvcrt.getche()"
                ],
                "parametros": []
            },
            {
                "nombre": "getwch",
                "sintaxis": [
                    "msvcrt.getwch()"
                ],
                "parametros": []
            },
            {
                "nombre": "getwche",
                "sintaxis": [
                    "msvcrt.getwche()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_osfhandle",
                "sintaxis": [
                    "msvcrt.get_osfhandle(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "heapmin",
                "sintaxis": [
                    "msvcrt.heapmin()"
                ],
                "parametros": []
            },
            {
                "nombre": "kbhit",
                "sintaxis": [
                    "msvcrt.kbhit()"
                ],
                "parametros": []
            },
            {
                "nombre": "locking",
                "sintaxis": [
                    "msvcrt.locking(fd, mode, nbytes)"
                ],
                "parametros": [
                    "fd",
                    "nbytes",
                    "mode"
                ]
            },
            {
                "nombre": "open_osfhandle",
                "sintaxis": [
                    "msvcrt.open_osfhandle(handle, flags)"
                ],
                "parametros": [
                    "flags",
                    "handle"
                ]
            },
            {
                "nombre": "putch",
                "sintaxis": [
                    "msvcrt.putch(char)"
                ],
                "parametros": [
                    "char"
                ]
            },
            {
                "nombre": "putwch",
                "sintaxis": [
                    "msvcrt.putwch(unicode_char)"
                ],
                "parametros": [
                    "unicode_char"
                ]
            },
            {
                "nombre": "setmode",
                "sintaxis": [
                    "msvcrt.setmode(fd, flags)"
                ],
                "parametros": [
                    "fd",
                    "flags"
                ]
            },
            {
                "nombre": "ungetch",
                "sintaxis": [
                    "msvcrt.ungetch(char)"
                ],
                "parametros": [
                    "char"
                ]
            },
            {
                "nombre": "ungetwch",
                "sintaxis": [
                    "msvcrt.ungetwch(unicode_char)"
                ],
                "parametros": [
                    "unicode_char"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "LK_LOCK",
                "sintaxis": [
                    "msvcrt.LK_LOCK"
                ]
            },
            {
                "nombre": "LK_NBLCK",
                "sintaxis": [
                    "msvcrt.LK_NBLCK"
                ]
            },
            {
                "nombre": "LK_UNLCK",
                "sintaxis": [
                    "msvcrt.LK_UNLCK"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "multiprocessing",
        "funciones": [
            {
                "nombre": "active_children",
                "sintaxis": [
                    "multiprocessing.active_children()"
                ],
                "parametros": []
            },
            {
                "nombre": "answer_challenge",
                "sintaxis": [
                    "multiprocessing.connection.answer_challenge(connection, authkey)"
                ],
                "parametros": [
                    "authkey",
                    "connection"
                ]
            },
            {
                "nombre": "Array",
                "sintaxis": [
                    "multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)"
                ],
                "parametros": [
                    "lock",
                    "size_or_initializer",
                    "typecode_or_type",
                    "*"
                ]
            },
            {
                "nombre": "Array",
                "sintaxis": [
                    "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)"
                ],
                "parametros": [
                    "lock",
                    "size_or_initializer",
                    "typecode_or_type",
                    "*"
                ]
            },
            {
                "nombre": "Client",
                "sintaxis": [
                    "multiprocessing.connection.Client(address[, family[, authkey]])"
                ],
                "parametros": [
                    "address",
                    "authkey",
                    "family"
                ]
            },
            {
                "nombre": "copy",
                "sintaxis": [
                    "multiprocessing.sharedctypes.copy(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "cpu_count",
                "sintaxis": [
                    "multiprocessing.cpu_count()"
                ],
                "parametros": []
            },
            {
                "nombre": "current_process",
                "sintaxis": [
                    "multiprocessing.current_process()"
                ],
                "parametros": []
            },
            {
                "nombre": "deliver_challenge",
                "sintaxis": [
                    "multiprocessing.connection.deliver_challenge(connection, authkey)"
                ],
                "parametros": [
                    "authkey",
                    "connection"
                ]
            },
            {
                "nombre": "freeze_support",
                "sintaxis": [
                    "multiprocessing.freeze_support()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_all_start_methods",
                "sintaxis": [
                    "multiprocessing.get_all_start_methods()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_context",
                "sintaxis": [
                    "multiprocessing.get_context(method=None)"
                ],
                "parametros": [
                    "method"
                ]
            },
            {
                "nombre": "get_logger",
                "sintaxis": [
                    "multiprocessing.get_logger()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_start_method",
                "sintaxis": [
                    "multiprocessing.get_start_method(allow_none=False)"
                ],
                "parametros": [
                    "allow_none"
                ]
            },
            {
                "nombre": "log_to_stderr",
                "sintaxis": [
                    "multiprocessing.log_to_stderr(level=None)"
                ],
                "parametros": [
                    "level"
                ]
            },
            {
                "nombre": "Manager",
                "sintaxis": [
                    "multiprocessing.Manager()"
                ],
                "parametros": []
            },
            {
                "nombre": "parent_process",
                "sintaxis": [
                    "multiprocessing.parent_process()"
                ],
                "parametros": []
            },
            {
                "nombre": "Pipe",
                "sintaxis": [
                    "multiprocessing.Pipe([duplex])"
                ],
                "parametros": [
                    "duplex"
                ]
            },
            {
                "nombre": "RawArray",
                "sintaxis": [
                    "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)"
                ],
                "parametros": [
                    "size_or_initializer",
                    "typecode_or_type"
                ]
            },
            {
                "nombre": "RawValue",
                "sintaxis": [
                    "multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)"
                ],
                "parametros": [
                    "args",
                    "typecode_or_type"
                ]
            },
            {
                "nombre": "set_executable",
                "sintaxis": [
                    "multiprocessing.set_executable()"
                ],
                "parametros": []
            },
            {
                "nombre": "set_start_method",
                "sintaxis": [
                    "multiprocessing.set_start_method(method)"
                ],
                "parametros": [
                    "method"
                ]
            },
            {
                "nombre": "synchronized",
                "sintaxis": [
                    "multiprocessing.sharedctypes.synchronized(obj[, lock])"
                ],
                "parametros": [
                    "obj",
                    "lock"
                ]
            },
            {
                "nombre": "Value",
                "sintaxis": [
                    "multiprocessing.Value(typecode_or_type, *args, lock=True)"
                ],
                "parametros": [
                    "args",
                    "lock",
                    "typecode_or_type"
                ]
            },
            {
                "nombre": "Value",
                "sintaxis": [
                    "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)"
                ],
                "parametros": [
                    "args",
                    "lock",
                    "typecode_or_type"
                ]
            },
            {
                "nombre": "wait",
                "sintaxis": [
                    "multiprocessing.connection.wait(object_list, timeout=None)"
                ],
                "parametros": [
                    "timeout",
                    "object_list"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "AsyncResult",
                "constructores": [
                    {
                        "nombre": "AsyncResult",
                        "sintaxis": [
                            "class multiprocessing.pool.AsyncResult"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "ready",
                        "sintaxis": [
                            "ready()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "successful",
                        "sintaxis": [
                            "successful()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "wait",
                        "sintaxis": [
                            "wait([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AsyncResult"
                ]
            },
            {
                "nombre": "Barrier",
                "constructores": [
                    {
                        "nombre": "Barrier",
                        "sintaxis": [
                            "class multiprocessing.Barrier(parties[, action[, timeout]])"
                        ],
                        "parametros": [
                            "action",
                            "timeout",
                            "parties"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Barrier"
                ]
            },
            {
                "nombre": "BaseManager",
                "constructores": [
                    {
                        "nombre": "BaseManager",
                        "sintaxis": [
                            "class multiprocessing.managers.BaseManager([address[, authkey]])"
                        ],
                        "parametros": [
                            "address",
                            "authkey"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "connect",
                        "sintaxis": [
                            "connect()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_server",
                        "sintaxis": [
                            "get_server()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "register",
                        "sintaxis": [
                            "register(typeid[, callable[, proxytype[, exposed[, method_to_typeid[, create_method]]]]])"
                        ],
                        "parametros": [
                            "proxytype",
                            "create_method",
                            "callable",
                            "typeid",
                            "exposed",
                            "method_to_typeid"
                        ]
                    },
                    {
                        "nombre": "shutdown",
                        "sintaxis": [
                            "shutdown()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "start([initializer[, initargs]])"
                        ],
                        "parametros": [
                            "initializer",
                            "initargs"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "address",
                        "sintaxis": [
                            "address"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseManager"
                ]
            },
            {
                "nombre": "BaseProxy",
                "constructores": [
                    {
                        "nombre": "BaseProxy",
                        "sintaxis": [
                            "class multiprocessing.managers.BaseProxy"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "_callmethod",
                        "sintaxis": [
                            "_callmethod(methodname[, args[, kwds]])"
                        ],
                        "parametros": [
                            "args",
                            "methodname",
                            "kwds"
                        ]
                    },
                    {
                        "nombre": "_getvalue",
                        "sintaxis": [
                            "_getvalue()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__repr__",
                        "sintaxis": [
                            "__repr__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__str__",
                        "sintaxis": [
                            "__str__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BaseProxy"
                ]
            },
            {
                "nombre": "BoundedSemaphore",
                "constructores": [
                    {
                        "nombre": "BoundedSemaphore",
                        "sintaxis": [
                            "class multiprocessing.BoundedSemaphore([value])"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BoundedSemaphore"
                ]
            },
            {
                "nombre": "Condition",
                "constructores": [
                    {
                        "nombre": "Condition",
                        "sintaxis": [
                            "class multiprocessing.Condition([lock])"
                        ],
                        "parametros": [
                            "lock"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Condition"
                ]
            },
            {
                "nombre": "Connection",
                "constructores": [
                    {
                        "nombre": "Connection",
                        "sintaxis": [
                            "class multiprocessing.connection.Connection"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "poll",
                        "sintaxis": [
                            "poll([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "recv",
                        "sintaxis": [
                            "recv()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "recv_bytes",
                        "sintaxis": [
                            "recv_bytes([maxlength])"
                        ],
                        "parametros": [
                            "maxlength"
                        ]
                    },
                    {
                        "nombre": "recv_bytes_into",
                        "sintaxis": [
                            "recv_bytes_into(buffer[, offset])"
                        ],
                        "parametros": [
                            "buffer",
                            "offset"
                        ]
                    },
                    {
                        "nombre": "send",
                        "sintaxis": [
                            "send(obj)"
                        ],
                        "parametros": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "send_bytes",
                        "sintaxis": [
                            "send_bytes(buffer[, offset[, size]])"
                        ],
                        "parametros": [
                            "buffer",
                            "size",
                            "offset"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Connection"
                ]
            },
            {
                "nombre": "Event",
                "constructores": [
                    {
                        "nombre": "Event",
                        "sintaxis": [
                            "class multiprocessing.Event"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Event"
                ]
            },
            {
                "nombre": "JoinableQueue",
                "constructores": [
                    {
                        "nombre": "JoinableQueue",
                        "sintaxis": [
                            "class multiprocessing.JoinableQueue([maxsize])"
                        ],
                        "parametros": [
                            "maxsize"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "join()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "task_done",
                        "sintaxis": [
                            "task_done()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class JoinableQueue"
                ]
            },
            {
                "nombre": "Listener",
                "constructores": [
                    {
                        "nombre": "Listener",
                        "sintaxis": [
                            "class multiprocessing.connection.Listener([address[, family[, backlog[, authkey]]]])"
                        ],
                        "parametros": [
                            "address",
                            "authkey",
                            "backlog",
                            "family"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "accept",
                        "sintaxis": [
                            "accept()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "address",
                        "sintaxis": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "last_accepted",
                        "sintaxis": [
                            "last_accepted"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Listener"
                ]
            },
            {
                "nombre": "Lock",
                "constructores": [
                    {
                        "nombre": "Lock",
                        "sintaxis": [
                            "class multiprocessing.Lock"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "acquire(block=True, timeout=None)"
                        ],
                        "parametros": [
                            "block",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Lock"
                ]
            },
            {
                "nombre": "Namespace",
                "constructores": [
                    {
                        "nombre": "Namespace",
                        "sintaxis": [
                            "class multiprocessing.managers.Namespace"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Namespace"
                ]
            },
            {
                "nombre": "Pool",
                "constructores": [
                    {
                        "nombre": "Pool",
                        "sintaxis": [
                            "class multiprocessing.pool.Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])"
                        ],
                        "parametros": [
                            "initializer",
                            "initargs",
                            "context",
                            "processes",
                            "maxtasksperchild"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "apply",
                        "sintaxis": [
                            "apply(func[, args[, kwds]])"
                        ],
                        "parametros": [
                            "args",
                            "func",
                            "kwds"
                        ]
                    },
                    {
                        "nombre": "apply_async",
                        "sintaxis": [
                            "apply_async(func[, args[, kwds[, callback[, error_callback]]]])"
                        ],
                        "parametros": [
                            "args",
                            "callback",
                            "error_callback",
                            "kwds",
                            "func"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "imap",
                        "sintaxis": [
                            "imap(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "imap_unordered",
                        "sintaxis": [
                            "imap_unordered(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "join()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "map",
                        "sintaxis": [
                            "map(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "map_async",
                        "sintaxis": [
                            "map_async(func, iterable[, chunksize[, callback[, error_callback]]])"
                        ],
                        "parametros": [
                            "error_callback",
                            "callback",
                            "chunksize",
                            "func",
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "starmap",
                        "sintaxis": [
                            "starmap(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "starmap_async",
                        "sintaxis": [
                            "starmap_async(func, iterable[, chunksize[, callback[, error_callback]]])"
                        ],
                        "parametros": [
                            "error_callback",
                            "callback",
                            "chunksize",
                            "func",
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "terminate",
                        "sintaxis": [
                            "terminate()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Pool"
                ]
            },
            {
                "nombre": "Process",
                "constructores": [
                    {
                        "nombre": "Process",
                        "sintaxis": [
                            "class multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "name",
                            "daemon",
                            "group",
                            "target",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_alive",
                        "sintaxis": [
                            "is_alive()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "join([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "kill",
                        "sintaxis": [
                            "kill()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "start()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "terminate",
                        "sintaxis": [
                            "terminate()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "authkey",
                        "sintaxis": [
                            "authkey"
                        ]
                    },
                    {
                        "nombre": "daemon",
                        "sintaxis": [
                            "daemon"
                        ]
                    },
                    {
                        "nombre": "exitcode",
                        "sintaxis": [
                            "exitcode"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "pid",
                        "sintaxis": [
                            "pid"
                        ]
                    },
                    {
                        "nombre": "sentinel",
                        "sintaxis": [
                            "sentinel"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Process"
                ]
            },
            {
                "nombre": "Queue",
                "constructores": [
                    {
                        "nombre": "Queue",
                        "sintaxis": [
                            "class multiprocessing.Queue([maxsize])"
                        ],
                        "parametros": [
                            "maxsize"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cancel_join_thread",
                        "sintaxis": [
                            "cancel_join_thread()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "empty",
                        "sintaxis": [
                            "empty()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "full",
                        "sintaxis": [
                            "full()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get([block[, timeout]])"
                        ],
                        "parametros": [
                            "block",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "get_nowait",
                        "sintaxis": [
                            "get_nowait()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "join_thread",
                        "sintaxis": [
                            "join_thread()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "put",
                        "sintaxis": [
                            "put(obj[, block[, timeout]])"
                        ],
                        "parametros": [
                            "block",
                            "obj",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "put_nowait",
                        "sintaxis": [
                            "put_nowait(obj)"
                        ],
                        "parametros": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "qsize",
                        "sintaxis": [
                            "qsize()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Queue"
                ]
            },
            {
                "nombre": "RLock",
                "constructores": [
                    {
                        "nombre": "RLock",
                        "sintaxis": [
                            "class multiprocessing.RLock"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "acquire(block=True, timeout=None)"
                        ],
                        "parametros": [
                            "block",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class RLock"
                ]
            },
            {
                "nombre": "Semaphore",
                "constructores": [
                    {
                        "nombre": "Semaphore",
                        "sintaxis": [
                            "class multiprocessing.Semaphore([value])"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Semaphore"
                ]
            },
            {
                "nombre": "SimpleQueue",
                "constructores": [
                    {
                        "nombre": "SimpleQueue",
                        "sintaxis": [
                            "class multiprocessing.SimpleQueue"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "empty",
                        "sintaxis": [
                            "empty()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "put",
                        "sintaxis": [
                            "put(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SimpleQueue"
                ]
            },
            {
                "nombre": "SyncManager",
                "constructores": [
                    {
                        "nombre": "SyncManager",
                        "sintaxis": [
                            "class multiprocessing.managers.SyncManager"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "Array",
                        "sintaxis": [
                            "Array(typecode, sequence)"
                        ],
                        "parametros": [
                            "typecode",
                            "sequence"
                        ]
                    },
                    {
                        "nombre": "Barrier",
                        "sintaxis": [
                            "Barrier(parties[, action[, timeout]])"
                        ],
                        "parametros": [
                            "action",
                            "timeout",
                            "parties"
                        ]
                    },
                    {
                        "nombre": "BoundedSemaphore",
                        "sintaxis": [
                            "BoundedSemaphore([value])"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "Condition",
                        "sintaxis": [
                            "Condition([lock])"
                        ],
                        "parametros": [
                            "lock"
                        ]
                    },
                    {
                        "nombre": "dict",
                        "sintaxis": [
                            "dict()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Event",
                        "sintaxis": [
                            "Event()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "list",
                        "sintaxis": [
                            "list()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Lock",
                        "sintaxis": [
                            "Lock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Namespace",
                        "sintaxis": [
                            "Namespace()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Queue",
                        "sintaxis": [
                            "Queue([maxsize])"
                        ],
                        "parametros": [
                            "maxsize"
                        ]
                    },
                    {
                        "nombre": "RLock",
                        "sintaxis": [
                            "RLock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Semaphore",
                        "sintaxis": [
                            "Semaphore([value])"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "Value",
                        "sintaxis": [
                            "Value(typecode, value)"
                        ],
                        "parametros": [
                            "value",
                            "typecode"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SyncManager"
                ]
            },
            {
                "nombre": "ThreadPool",
                "constructores": [
                    {
                        "nombre": "ThreadPool",
                        "sintaxis": [
                            "class multiprocessing.pool.ThreadPool([processes[, initializer[, initargs]]])"
                        ],
                        "parametros": [
                            "initializer",
                            "initargs",
                            "processes"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ThreadPool"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "AuthenticationError",
                "sintaxis": [
                    "exception multiprocessing.AuthenticationError"
                ]
            },
            {
                "nombre": "BufferTooShort",
                "sintaxis": [
                    "exception multiprocessing.BufferTooShort"
                ]
            },
            {
                "nombre": "ProcessError",
                "sintaxis": [
                    "exception multiprocessing.ProcessError"
                ]
            },
            {
                "nombre": "TimeoutError",
                "sintaxis": [
                    "exception multiprocessing.TimeoutError"
                ]
            }
        ]
    },
    {
        "nombre": "multiprocessing.connection",
        "funciones": [
            {
                "nombre": "answer_challenge",
                "sintaxis": [
                    "multiprocessing.connection.answer_challenge(connection, authkey)"
                ],
                "parametros": [
                    "authkey",
                    "connection"
                ]
            },
            {
                "nombre": "Client",
                "sintaxis": [
                    "multiprocessing.connection.Client(address[, family[, authkey]])"
                ],
                "parametros": [
                    "address",
                    "authkey",
                    "family"
                ]
            },
            {
                "nombre": "deliver_challenge",
                "sintaxis": [
                    "multiprocessing.connection.deliver_challenge(connection, authkey)"
                ],
                "parametros": [
                    "authkey",
                    "connection"
                ]
            },
            {
                "nombre": "wait",
                "sintaxis": [
                    "multiprocessing.connection.wait(object_list, timeout=None)"
                ],
                "parametros": [
                    "timeout",
                    "object_list"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Listener",
                "constructores": [
                    {
                        "nombre": "Listener",
                        "sintaxis": [
                            "class multiprocessing.connection.Listener([address[, family[, backlog[, authkey]]]])"
                        ],
                        "parametros": [
                            "address",
                            "authkey",
                            "backlog",
                            "family"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "accept",
                        "sintaxis": [
                            "accept()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "address",
                        "sintaxis": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "last_accepted",
                        "sintaxis": [
                            "last_accepted"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Listener"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "multiprocessing.dummy",
        "funciones": [],
        "clases": [
            {
                "nombre": "ThreadPool",
                "constructores": [
                    {
                        "nombre": "ThreadPool",
                        "sintaxis": [
                            "class multiprocessing.pool.ThreadPool([processes[, initializer[, initargs]]])"
                        ],
                        "parametros": [
                            "initializer",
                            "initargs",
                            "processes"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ThreadPool"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "multiprocessing.managers",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "multiprocessing.pool",
        "funciones": [],
        "clases": [
            {
                "nombre": "AsyncResult",
                "constructores": [
                    {
                        "nombre": "AsyncResult",
                        "sintaxis": [
                            "class multiprocessing.pool.AsyncResult"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "ready",
                        "sintaxis": [
                            "ready()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "successful",
                        "sintaxis": [
                            "successful()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "wait",
                        "sintaxis": [
                            "wait([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AsyncResult"
                ]
            },
            {
                "nombre": "Pool",
                "constructores": [
                    {
                        "nombre": "Pool",
                        "sintaxis": [
                            "class multiprocessing.pool.Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])"
                        ],
                        "parametros": [
                            "initializer",
                            "initargs",
                            "context",
                            "processes",
                            "maxtasksperchild"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "apply",
                        "sintaxis": [
                            "apply(func[, args[, kwds]])"
                        ],
                        "parametros": [
                            "args",
                            "func",
                            "kwds"
                        ]
                    },
                    {
                        "nombre": "apply_async",
                        "sintaxis": [
                            "apply_async(func[, args[, kwds[, callback[, error_callback]]]])"
                        ],
                        "parametros": [
                            "args",
                            "callback",
                            "error_callback",
                            "kwds",
                            "func"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "imap",
                        "sintaxis": [
                            "imap(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "imap_unordered",
                        "sintaxis": [
                            "imap_unordered(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "join()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "map",
                        "sintaxis": [
                            "map(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "map_async",
                        "sintaxis": [
                            "map_async(func, iterable[, chunksize[, callback[, error_callback]]])"
                        ],
                        "parametros": [
                            "error_callback",
                            "callback",
                            "chunksize",
                            "func",
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "starmap",
                        "sintaxis": [
                            "starmap(func, iterable[, chunksize])"
                        ],
                        "parametros": [
                            "func",
                            "iterable",
                            "chunksize"
                        ]
                    },
                    {
                        "nombre": "starmap_async",
                        "sintaxis": [
                            "starmap_async(func, iterable[, chunksize[, callback[, error_callback]]])"
                        ],
                        "parametros": [
                            "error_callback",
                            "callback",
                            "chunksize",
                            "func",
                            "iterable"
                        ]
                    },
                    {
                        "nombre": "terminate",
                        "sintaxis": [
                            "terminate()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Pool"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "multiprocessing.shared_memory",
        "funciones": [],
        "clases": [
            {
                "nombre": "ShareableList",
                "constructores": [
                    {
                        "nombre": "ShareableList",
                        "sintaxis": [
                            "class multiprocessing.shared_memory.ShareableList(sequence=None, *, name=None)"
                        ],
                        "parametros": [
                            "*",
                            "name",
                            "sequence"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "count(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "index(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "shm",
                        "sintaxis": [
                            "shm"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ShareableList"
                ]
            },
            {
                "nombre": "SharedMemory",
                "constructores": [
                    {
                        "nombre": "SharedMemory",
                        "sintaxis": [
                            "class multiprocessing.shared_memory.SharedMemory(name=None, create=False, size=0)"
                        ],
                        "parametros": [
                            "create",
                            "size",
                            "name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unlink",
                        "sintaxis": [
                            "unlink()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "buf",
                        "sintaxis": [
                            "buf"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "size"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SharedMemory"
                ]
            },
            {
                "nombre": "SharedMemoryManager",
                "constructores": [
                    {
                        "nombre": "SharedMemoryManager",
                        "sintaxis": [
                            "class multiprocessing.managers.SharedMemoryManager([address[, authkey]])"
                        ],
                        "parametros": [
                            "address",
                            "authkey"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "ShareableList",
                        "sintaxis": [
                            "ShareableList(sequence)"
                        ],
                        "parametros": [
                            "sequence"
                        ]
                    },
                    {
                        "nombre": "SharedMemory",
                        "sintaxis": [
                            "SharedMemory(size)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SharedMemoryManager"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "multiprocessing.sharedctypes",
        "funciones": [
            {
                "nombre": "Array",
                "sintaxis": [
                    "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)"
                ],
                "parametros": [
                    "lock",
                    "size_or_initializer",
                    "typecode_or_type",
                    "*"
                ]
            },
            {
                "nombre": "copy",
                "sintaxis": [
                    "multiprocessing.sharedctypes.copy(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "RawArray",
                "sintaxis": [
                    "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)"
                ],
                "parametros": [
                    "size_or_initializer",
                    "typecode_or_type"
                ]
            },
            {
                "nombre": "RawValue",
                "sintaxis": [
                    "multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)"
                ],
                "parametros": [
                    "args",
                    "typecode_or_type"
                ]
            },
            {
                "nombre": "synchronized",
                "sintaxis": [
                    "multiprocessing.sharedctypes.synchronized(obj[, lock])"
                ],
                "parametros": [
                    "obj",
                    "lock"
                ]
            },
            {
                "nombre": "Value",
                "sintaxis": [
                    "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)"
                ],
                "parametros": [
                    "args",
                    "lock",
                    "typecode_or_type"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "netrc",
        "funciones": [],
        "clases": [
            {
                "nombre": "netrc",
                "constructores": [
                    {
                        "nombre": "netrc",
                        "sintaxis": [
                            "class netrc.netrc([file])"
                        ],
                        "parametros": [
                            "file"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "authenticators",
                        "sintaxis": [
                            "netrc.authenticators(host)"
                        ],
                        "parametros": [
                            "host"
                        ]
                    },
                    {
                        "nombre": "__repr__",
                        "sintaxis": [
                            "netrc.__repr__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "hosts",
                        "sintaxis": [
                            "netrc.hosts"
                        ]
                    },
                    {
                        "nombre": "macros",
                        "sintaxis": [
                            "netrc.macros"
                        ]
                    }
                ],
                "sintaxis": [
                    "class netrc"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "NetrcParseError",
                "sintaxis": [
                    "exception netrc.NetrcParseError"
                ]
            }
        ]
    },
    {
        "nombre": "nis",
        "funciones": [
            {
                "nombre": "cat",
                "sintaxis": [
                    "nis.cat(mapname, domain=default_domain)"
                ],
                "parametros": [
                    "mapname",
                    "domain"
                ]
            },
            {
                "nombre": "get_default_domain",
                "sintaxis": [
                    "nis.get_default_domain()"
                ],
                "parametros": []
            },
            {
                "nombre": "maps",
                "sintaxis": [
                    "nis.maps(domain=default_domain)"
                ],
                "parametros": [
                    "domain"
                ]
            },
            {
                "nombre": "match",
                "sintaxis": [
                    "nis.match(key, mapname, domain=default_domain)"
                ],
                "parametros": [
                    "mapname",
                    "domain",
                    "key"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception nis.error"
                ]
            }
        ]
    },
    {
        "nombre": "nntplib",
        "funciones": [
            {
                "nombre": "decode_header",
                "sintaxis": [
                    "nntplib.decode_header(header_str)"
                ],
                "parametros": [
                    "header_str"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "NNTP",
                "constructores": [
                    {
                        "nombre": "NNTP",
                        "sintaxis": [
                            "class nntplib.NNTP(host, port=119, user=None, password=None, readermode=None, usenetrc=False[, timeout])"
                        ],
                        "parametros": [
                            "usenetrc",
                            "port",
                            "readermode",
                            "password",
                            "timeout",
                            "host",
                            "user"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "article",
                        "sintaxis": [
                            "NNTP.article(message_spec=None, *, file=None)"
                        ],
                        "parametros": [
                            "*",
                            "file",
                            "message_spec"
                        ]
                    },
                    {
                        "nombre": "body",
                        "sintaxis": [
                            "NNTP.body(message_spec=None, *, file=None)"
                        ],
                        "parametros": [
                            "*",
                            "file",
                            "message_spec"
                        ]
                    },
                    {
                        "nombre": "date",
                        "sintaxis": [
                            "NNTP.date()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "description",
                        "sintaxis": [
                            "NNTP.description(group)"
                        ],
                        "parametros": [
                            "group"
                        ]
                    },
                    {
                        "nombre": "descriptions",
                        "sintaxis": [
                            "NNTP.descriptions(grouppattern)"
                        ],
                        "parametros": [
                            "grouppattern"
                        ]
                    },
                    {
                        "nombre": "getcapabilities",
                        "sintaxis": [
                            "NNTP.getcapabilities()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getwelcome",
                        "sintaxis": [
                            "NNTP.getwelcome()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "group",
                        "sintaxis": [
                            "NNTP.group(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "head",
                        "sintaxis": [
                            "NNTP.head(message_spec=None, *, file=None)"
                        ],
                        "parametros": [
                            "*",
                            "file",
                            "message_spec"
                        ]
                    },
                    {
                        "nombre": "help",
                        "sintaxis": [
                            "NNTP.help(*, file=None)"
                        ],
                        "parametros": [
                            "*",
                            "file"
                        ]
                    },
                    {
                        "nombre": "ihave",
                        "sintaxis": [
                            "NNTP.ihave(message_id, data)"
                        ],
                        "parametros": [
                            "message_id",
                            "data"
                        ]
                    },
                    {
                        "nombre": "last",
                        "sintaxis": [
                            "NNTP.last()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "list",
                        "sintaxis": [
                            "NNTP.list(group_pattern=None, *, file=None)"
                        ],
                        "parametros": [
                            "group_pattern",
                            "*",
                            "file"
                        ]
                    },
                    {
                        "nombre": "login",
                        "sintaxis": [
                            "NNTP.login(user=None, password=None, usenetrc=True)"
                        ],
                        "parametros": [
                            "usenetrc",
                            "password",
                            "user"
                        ]
                    },
                    {
                        "nombre": "newgroups",
                        "sintaxis": [
                            "NNTP.newgroups(date, *, file=None)"
                        ],
                        "parametros": [
                            "date",
                            "*",
                            "file"
                        ]
                    },
                    {
                        "nombre": "newnews",
                        "sintaxis": [
                            "NNTP.newnews(group, date, *, file=None)"
                        ],
                        "parametros": [
                            "date",
                            "group",
                            "file",
                            "*"
                        ]
                    },
                    {
                        "nombre": "next",
                        "sintaxis": [
                            "NNTP.next()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "over",
                        "sintaxis": [
                            "NNTP.over(message_spec, *, file=None)"
                        ],
                        "parametros": [
                            "*",
                            "file",
                            "message_spec"
                        ]
                    },
                    {
                        "nombre": "post",
                        "sintaxis": [
                            "NNTP.post(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "quit",
                        "sintaxis": [
                            "NNTP.quit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_debuglevel",
                        "sintaxis": [
                            "NNTP.set_debuglevel(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "slave",
                        "sintaxis": [
                            "NNTP.slave()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "starttls",
                        "sintaxis": [
                            "NNTP.starttls(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "stat",
                        "sintaxis": [
                            "NNTP.stat(message_spec=None)"
                        ],
                        "parametros": [
                            "message_spec"
                        ]
                    },
                    {
                        "nombre": "xhdr",
                        "sintaxis": [
                            "NNTP.xhdr(hdr, str, *, file=None)"
                        ],
                        "parametros": [
                            "hdr",
                            "*",
                            "str",
                            "file"
                        ]
                    },
                    {
                        "nombre": "xover",
                        "sintaxis": [
                            "NNTP.xover(start, end, *, file=None)"
                        ],
                        "parametros": [
                            "end",
                            "*",
                            "file",
                            "start"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "nntp_implementation",
                        "sintaxis": [
                            "NNTP.nntp_implementation"
                        ]
                    },
                    {
                        "nombre": "nntp_version",
                        "sintaxis": [
                            "NNTP.nntp_version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class NNTP"
                ]
            },
            {
                "nombre": "NNTP_SSL",
                "constructores": [
                    {
                        "nombre": "NNTP_SSL",
                        "sintaxis": [
                            "class nntplib.NNTP_SSL(host, port=563, user=None, password=None, ssl_context=None, readermode=None, usenetrc=False[, timeout])"
                        ],
                        "parametros": [
                            "usenetrc",
                            "port",
                            "password",
                            "readermode",
                            "timeout",
                            "ssl_context",
                            "host",
                            "user"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NNTP_SSL"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "NNTPDataError",
                "sintaxis": [
                    "exception nntplib.NNTPDataError"
                ]
            },
            {
                "nombre": "NNTPError",
                "sintaxis": [
                    "exception nntplib.NNTPError"
                ]
            },
            {
                "nombre": "NNTPPermanentError",
                "sintaxis": [
                    "exception nntplib.NNTPPermanentError"
                ]
            },
            {
                "nombre": "NNTPProtocolError",
                "sintaxis": [
                    "exception nntplib.NNTPProtocolError"
                ]
            },
            {
                "nombre": "NNTPReplyError",
                "sintaxis": [
                    "exception nntplib.NNTPReplyError"
                ]
            },
            {
                "nombre": "NNTPTemporaryError",
                "sintaxis": [
                    "exception nntplib.NNTPTemporaryError"
                ]
            }
        ]
    },
    {
        "nombre": "numbers",
        "funciones": [],
        "clases": [
            {
                "nombre": "Complex",
                "constructores": [
                    {
                        "nombre": "Complex",
                        "sintaxis": [
                            "class numbers.Complex"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "conjugate",
                        "sintaxis": [
                            "abstractmethod conjugate()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "imag",
                        "sintaxis": [
                            "imag"
                        ]
                    },
                    {
                        "nombre": "real",
                        "sintaxis": [
                            "real"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Complex"
                ]
            },
            {
                "nombre": "Integral",
                "constructores": [
                    {
                        "nombre": "Integral",
                        "sintaxis": [
                            "class numbers.Integral"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Integral"
                ]
            },
            {
                "nombre": "Number",
                "constructores": [
                    {
                        "nombre": "Number",
                        "sintaxis": [
                            "class numbers.Number"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Number"
                ]
            },
            {
                "nombre": "Rational",
                "constructores": [
                    {
                        "nombre": "Rational",
                        "sintaxis": [
                            "class numbers.Rational"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "denominator",
                        "sintaxis": [
                            "denominator"
                        ]
                    },
                    {
                        "nombre": "numerator",
                        "sintaxis": [
                            "numerator"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Rational"
                ]
            },
            {
                "nombre": "Real",
                "constructores": [
                    {
                        "nombre": "Real",
                        "sintaxis": [
                            "class numbers.Real"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Real"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "operator",
        "funciones": [
            {
                "nombre": "abs",
                "sintaxis": [
                    "operator.abs(obj)",
                    "operator.__abs__(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "add",
                "sintaxis": [
                    "operator.add(a, b)",
                    "operator.__add__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "and_",
                "sintaxis": [
                    "operator.and_(a, b)",
                    "operator.__and__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "attrgetter",
                "sintaxis": [
                    "operator.attrgetter(attr)",
                    "operator.attrgetter(*attrs)"
                ],
                "parametros": [
                    "attrs",
                    "attr"
                ]
            },
            {
                "nombre": "concat",
                "sintaxis": [
                    "operator.concat(a, b)",
                    "operator.__concat__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "contains",
                "sintaxis": [
                    "operator.contains(a, b)",
                    "operator.__contains__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "countOf",
                "sintaxis": [
                    "operator.countOf(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "delitem",
                "sintaxis": [
                    "operator.delitem(a, b)",
                    "operator.__delitem__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "floordiv",
                "sintaxis": [
                    "operator.floordiv(a, b)",
                    "operator.__floordiv__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "getitem",
                "sintaxis": [
                    "operator.getitem(a, b)",
                    "operator.__getitem__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "iadd",
                "sintaxis": [
                    "operator.iadd(a, b)",
                    "operator.__iadd__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "iand",
                "sintaxis": [
                    "operator.iand(a, b)",
                    "operator.__iand__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "iconcat",
                "sintaxis": [
                    "operator.iconcat(a, b)",
                    "operator.__iconcat__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "ifloordiv",
                "sintaxis": [
                    "operator.ifloordiv(a, b)",
                    "operator.__ifloordiv__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "ilshift",
                "sintaxis": [
                    "operator.ilshift(a, b)",
                    "operator.__ilshift__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "imatmul",
                "sintaxis": [
                    "operator.imatmul(a, b)",
                    "operator.__imatmul__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "imod",
                "sintaxis": [
                    "operator.imod(a, b)",
                    "operator.__imod__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "imul",
                "sintaxis": [
                    "operator.imul(a, b)",
                    "operator.__imul__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "index",
                "sintaxis": [
                    "operator.index(a)",
                    "operator.__index__(a)"
                ],
                "parametros": [
                    "a"
                ]
            },
            {
                "nombre": "indexOf",
                "sintaxis": [
                    "operator.indexOf(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "inv",
                "sintaxis": [
                    "operator.inv(obj)",
                    "operator.invert(obj)",
                    "operator.__inv__(obj)",
                    "operator.__invert__(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "ior",
                "sintaxis": [
                    "operator.ior(a, b)",
                    "operator.__ior__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "ipow",
                "sintaxis": [
                    "operator.ipow(a, b)",
                    "operator.__ipow__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "irshift",
                "sintaxis": [
                    "operator.irshift(a, b)",
                    "operator.__irshift__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "isub",
                "sintaxis": [
                    "operator.isub(a, b)",
                    "operator.__isub__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "is_",
                "sintaxis": [
                    "operator.is_(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "is_not",
                "sintaxis": [
                    "operator.is_not(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "itemgetter",
                "sintaxis": [
                    "operator.itemgetter(item)",
                    "operator.itemgetter(*items)"
                ],
                "parametros": [
                    "items",
                    "item"
                ]
            },
            {
                "nombre": "itruediv",
                "sintaxis": [
                    "operator.itruediv(a, b)",
                    "operator.__itruediv__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "ixor",
                "sintaxis": [
                    "operator.ixor(a, b)",
                    "operator.__ixor__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "length_hint",
                "sintaxis": [
                    "operator.length_hint(obj, default=0)"
                ],
                "parametros": [
                    "obj",
                    "default"
                ]
            },
            {
                "nombre": "lshift",
                "sintaxis": [
                    "operator.lshift(a, b)",
                    "operator.__lshift__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "lt",
                "sintaxis": [
                    "operator.lt(a, b)",
                    "operator.le(a, b)",
                    "operator.eq(a, b)",
                    "operator.ne(a, b)",
                    "operator.ge(a, b)",
                    "operator.gt(a, b)",
                    "operator.__lt__(a, b)",
                    "operator.__le__(a, b)",
                    "operator.__eq__(a, b)",
                    "operator.__ne__(a, b)",
                    "operator.__ge__(a, b)",
                    "operator.__gt__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "matmul",
                "sintaxis": [
                    "operator.matmul(a, b)",
                    "operator.__matmul__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "methodcaller",
                "sintaxis": [
                    "operator.methodcaller(name, /, *args, **kwargs)"
                ],
                "parametros": [
                    "**kwargs",
                    "/",
                    "*args",
                    "name"
                ]
            },
            {
                "nombre": "mod",
                "sintaxis": [
                    "operator.mod(a, b)",
                    "operator.__mod__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "mul",
                "sintaxis": [
                    "operator.mul(a, b)",
                    "operator.__mul__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "neg",
                "sintaxis": [
                    "operator.neg(obj)",
                    "operator.__neg__(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "not_",
                "sintaxis": [
                    "operator.not_(obj)",
                    "operator.__not__(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "or_",
                "sintaxis": [
                    "operator.or_(a, b)",
                    "operator.__or__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "pos",
                "sintaxis": [
                    "operator.pos(obj)",
                    "operator.__pos__(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "pow",
                "sintaxis": [
                    "operator.pow(a, b)",
                    "operator.__pow__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "rshift",
                "sintaxis": [
                    "operator.rshift(a, b)",
                    "operator.__rshift__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "setitem",
                "sintaxis": [
                    "operator.setitem(a, b, c)",
                    "operator.__setitem__(a, b, c)"
                ],
                "parametros": [
                    "c",
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "sub",
                "sintaxis": [
                    "operator.sub(a, b)",
                    "operator.__sub__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "truediv",
                "sintaxis": [
                    "operator.truediv(a, b)",
                    "operator.__truediv__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "truth",
                "sintaxis": [
                    "operator.truth(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "xor",
                "sintaxis": [
                    "operator.xor(a, b)",
                    "operator.__xor__(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "optparse",
        "funciones": [],
        "clases": [
            {
                "nombre": "Option",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "action",
                        "sintaxis": [
                            "Option.action"
                        ]
                    },
                    {
                        "nombre": "ACTIONS",
                        "sintaxis": [
                            "Option.ACTIONS"
                        ]
                    },
                    {
                        "nombre": "ALWAYS_TYPED_ACTIONS",
                        "sintaxis": [
                            "Option.ALWAYS_TYPED_ACTIONS"
                        ]
                    },
                    {
                        "nombre": "callback",
                        "sintaxis": [
                            "Option.callback"
                        ]
                    },
                    {
                        "nombre": "callback_args",
                        "sintaxis": [
                            "Option.callback_args"
                        ]
                    },
                    {
                        "nombre": "choices",
                        "sintaxis": [
                            "Option.choices"
                        ]
                    },
                    {
                        "nombre": "const",
                        "sintaxis": [
                            "Option.const"
                        ]
                    },
                    {
                        "nombre": "default",
                        "sintaxis": [
                            "Option.default"
                        ]
                    },
                    {
                        "nombre": "dest",
                        "sintaxis": [
                            "Option.dest"
                        ]
                    },
                    {
                        "nombre": "help",
                        "sintaxis": [
                            "Option.help"
                        ]
                    },
                    {
                        "nombre": "metavar",
                        "sintaxis": [
                            "Option.metavar"
                        ]
                    },
                    {
                        "nombre": "nargs",
                        "sintaxis": [
                            "Option.nargs"
                        ]
                    },
                    {
                        "nombre": "STORE_ACTIONS",
                        "sintaxis": [
                            "Option.STORE_ACTIONS"
                        ]
                    },
                    {
                        "nombre": "type",
                        "sintaxis": [
                            "Option.type"
                        ]
                    },
                    {
                        "nombre": "TYPED_ACTIONS",
                        "sintaxis": [
                            "Option.TYPED_ACTIONS"
                        ]
                    },
                    {
                        "nombre": "TYPES",
                        "sintaxis": [
                            "Option.TYPES"
                        ]
                    },
                    {
                        "nombre": "TYPE_CHECKER",
                        "sintaxis": [
                            "Option.TYPE_CHECKER"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Option"
                ]
            },
            {
                "nombre": "OptionGroup",
                "constructores": [
                    {
                        "nombre": "OptionGroup",
                        "sintaxis": [
                            "class optparse.OptionGroup(parser, title, description=None)"
                        ],
                        "parametros": [
                            "title",
                            "description",
                            "parser"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class OptionGroup"
                ]
            },
            {
                "nombre": "OptionParser",
                "constructores": [
                    {
                        "nombre": "OptionParser",
                        "sintaxis": [
                            "class optparse.OptionParser(...)"
                        ],
                        "parametros": [
                            "..."
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_option",
                        "sintaxis": [
                            "OptionParser.add_option(option)",
                            "OptionParser.add_option(*opt_str, attr=value, ...)"
                        ],
                        "parametros": [
                            "*opt_str",
                            "...",
                            "attr",
                            "option"
                        ]
                    },
                    {
                        "nombre": "disable_interspersed_args",
                        "sintaxis": [
                            "OptionParser.disable_interspersed_args()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "enable_interspersed_args",
                        "sintaxis": [
                            "OptionParser.enable_interspersed_args()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_option",
                        "sintaxis": [
                            "OptionParser.get_option(opt_str)"
                        ],
                        "parametros": [
                            "opt_str"
                        ]
                    },
                    {
                        "nombre": "get_option_group",
                        "sintaxis": [
                            "OptionParser.get_option_group(opt_str)"
                        ],
                        "parametros": [
                            "opt_str"
                        ]
                    },
                    {
                        "nombre": "get_usage",
                        "sintaxis": [
                            "OptionParser.get_usage()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_version",
                        "sintaxis": [
                            "OptionParser.get_version()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "has_option",
                        "sintaxis": [
                            "OptionParser.has_option(opt_str)"
                        ],
                        "parametros": [
                            "opt_str"
                        ]
                    },
                    {
                        "nombre": "print_usage",
                        "sintaxis": [
                            "OptionParser.print_usage(file=None)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    },
                    {
                        "nombre": "print_version",
                        "sintaxis": [
                            "OptionParser.print_version(file=None)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    },
                    {
                        "nombre": "remove_option",
                        "sintaxis": [
                            "OptionParser.remove_option(opt_str)"
                        ],
                        "parametros": [
                            "opt_str"
                        ]
                    },
                    {
                        "nombre": "set_defaults",
                        "sintaxis": [
                            "OptionParser.set_defaults(dest=value, ...)"
                        ],
                        "parametros": [
                            "...",
                            "dest"
                        ]
                    },
                    {
                        "nombre": "set_usage",
                        "sintaxis": [
                            "OptionParser.set_usage(usage)"
                        ],
                        "parametros": [
                            "usage"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class OptionParser"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "os",
        "funciones": [
            {
                "nombre": "abort",
                "sintaxis": [
                    "os.abort()"
                ],
                "parametros": []
            },
            {
                "nombre": "access",
                "sintaxis": [
                    "os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)"
                ],
                "parametros": [
                    "mode",
                    "effective_ids",
                    "dir_fd",
                    "follow_symlinks",
                    "path",
                    "*"
                ]
            },
            {
                "nombre": "add_dll_directory",
                "sintaxis": [
                    "os.add_dll_directory(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "chdir",
                "sintaxis": [
                    "os.chdir(path)",
                    "os.fchdir(fd)",
                    "os.getcwd()"
                ],
                "parametros": [
                    "fd",
                    "path"
                ]
            },
            {
                "nombre": "chdir",
                "sintaxis": [
                    "os.chdir(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "chflags",
                "sintaxis": [
                    "os.chflags(path, flags, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "flags",
                    "*",
                    "follow_symlinks",
                    "path"
                ]
            },
            {
                "nombre": "chmod",
                "sintaxis": [
                    "os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)"
                ],
                "parametros": [
                    "mode",
                    "dir_fd",
                    "follow_symlinks",
                    "path",
                    "*"
                ]
            },
            {
                "nombre": "chown",
                "sintaxis": [
                    "os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)"
                ],
                "parametros": [
                    "gid",
                    "dir_fd",
                    "follow_symlinks",
                    "path",
                    "*",
                    "uid"
                ]
            },
            {
                "nombre": "chroot",
                "sintaxis": [
                    "os.chroot(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "close",
                "sintaxis": [
                    "os.close(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "closerange",
                "sintaxis": [
                    "os.closerange(fd_low, fd_high)"
                ],
                "parametros": [
                    "fd_high",
                    "fd_low"
                ]
            },
            {
                "nombre": "confstr",
                "sintaxis": [
                    "os.confstr(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "copy_file_range",
                "sintaxis": [
                    "os.copy_file_range(src, dst, count, offset_src=None, offset_dst=None)"
                ],
                "parametros": [
                    "count",
                    "offset_src",
                    "dst",
                    "src",
                    "offset_dst"
                ]
            },
            {
                "nombre": "cpu_count",
                "sintaxis": [
                    "os.cpu_count()"
                ],
                "parametros": []
            },
            {
                "nombre": "ctermid",
                "sintaxis": [
                    "os.ctermid()"
                ],
                "parametros": []
            },
            {
                "nombre": "device_encoding",
                "sintaxis": [
                    "os.device_encoding(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "dup",
                "sintaxis": [
                    "os.dup(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "dup2",
                "sintaxis": [
                    "os.dup2(fd, fd2, inheritable=True)"
                ],
                "parametros": [
                    "fd",
                    "inheritable",
                    "fd2"
                ]
            },
            {
                "nombre": "eventfd",
                "sintaxis": [
                    "os.eventfd(initval[, flags=os.EFD_CLOEXEC])"
                ],
                "parametros": [
                    "flags",
                    "initval"
                ]
            },
            {
                "nombre": "eventfd_read",
                "sintaxis": [
                    "os.eventfd_read(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "eventfd_write",
                "sintaxis": [
                    "os.eventfd_write(fd, value)"
                ],
                "parametros": [
                    "fd",
                    "value"
                ]
            },
            {
                "nombre": "execl",
                "sintaxis": [
                    "os.execl(path, arg0, arg1, ...)",
                    "os.execle(path, arg0, arg1, ..., env)",
                    "os.execlp(file, arg0, arg1, ...)",
                    "os.execlpe(file, arg0, arg1, ..., env)",
                    "os.execv(path, args)",
                    "os.execve(path, args, env)",
                    "os.execvp(file, args)",
                    "os.execvpe(file, args, env)"
                ],
                "parametros": [
                    "args",
                    "...",
                    "env",
                    "arg0",
                    "arg1",
                    "path",
                    "file"
                ]
            },
            {
                "nombre": "fchdir",
                "sintaxis": [
                    "os.fchdir(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "fchmod",
                "sintaxis": [
                    "os.fchmod(fd, mode)"
                ],
                "parametros": [
                    "fd",
                    "mode"
                ]
            },
            {
                "nombre": "fchown",
                "sintaxis": [
                    "os.fchown(fd, uid, gid)"
                ],
                "parametros": [
                    "fd",
                    "uid",
                    "gid"
                ]
            },
            {
                "nombre": "fdatasync",
                "sintaxis": [
                    "os.fdatasync(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "fdopen",
                "sintaxis": [
                    "os.fdopen(fd, *args, **kwargs)"
                ],
                "parametros": [
                    "fd",
                    "args",
                    "kwargs"
                ]
            },
            {
                "nombre": "fork",
                "sintaxis": [
                    "os.fork()"
                ],
                "parametros": []
            },
            {
                "nombre": "forkpty",
                "sintaxis": [
                    "os.forkpty()"
                ],
                "parametros": []
            },
            {
                "nombre": "fpathconf",
                "sintaxis": [
                    "os.fpathconf(fd, name)"
                ],
                "parametros": [
                    "fd",
                    "name"
                ]
            },
            {
                "nombre": "fsdecode",
                "sintaxis": [
                    "os.fsdecode(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "fsencode",
                "sintaxis": [
                    "os.fsencode(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "fspath",
                "sintaxis": [
                    "os.fspath(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "fstat",
                "sintaxis": [
                    "os.fstat(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "fstatvfs",
                "sintaxis": [
                    "os.fstatvfs(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "fsync",
                "sintaxis": [
                    "os.fsync(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "ftruncate",
                "sintaxis": [
                    "os.ftruncate(fd, length)"
                ],
                "parametros": [
                    "fd",
                    "length"
                ]
            },
            {
                "nombre": "fwalk",
                "sintaxis": [
                    "os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)"
                ],
                "parametros": [
                    "top",
                    "dir_fd",
                    "follow_symlinks",
                    "topdown",
                    "*",
                    "onerror"
                ]
            },
            {
                "nombre": "getcwd",
                "sintaxis": [
                    "os.getcwd()"
                ],
                "parametros": []
            },
            {
                "nombre": "getcwdb",
                "sintaxis": [
                    "os.getcwdb()"
                ],
                "parametros": []
            },
            {
                "nombre": "getegid",
                "sintaxis": [
                    "os.getegid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getenv",
                "sintaxis": [
                    "os.getenv(key, default=None)"
                ],
                "parametros": [
                    "default",
                    "key"
                ]
            },
            {
                "nombre": "getenvb",
                "sintaxis": [
                    "os.getenvb(key, default=None)"
                ],
                "parametros": [
                    "default",
                    "key"
                ]
            },
            {
                "nombre": "geteuid",
                "sintaxis": [
                    "os.geteuid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getgid",
                "sintaxis": [
                    "os.getgid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getgrouplist",
                "sintaxis": [
                    "os.getgrouplist(user, group)"
                ],
                "parametros": [
                    "group",
                    "user"
                ]
            },
            {
                "nombre": "getgroups",
                "sintaxis": [
                    "os.getgroups()"
                ],
                "parametros": []
            },
            {
                "nombre": "getloadavg",
                "sintaxis": [
                    "os.getloadavg()"
                ],
                "parametros": []
            },
            {
                "nombre": "getlogin",
                "sintaxis": [
                    "os.getlogin()"
                ],
                "parametros": []
            },
            {
                "nombre": "getpgid",
                "sintaxis": [
                    "os.getpgid(pid)"
                ],
                "parametros": [
                    "pid"
                ]
            },
            {
                "nombre": "getpgrp",
                "sintaxis": [
                    "os.getpgrp()"
                ],
                "parametros": []
            },
            {
                "nombre": "getpid",
                "sintaxis": [
                    "os.getpid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getppid",
                "sintaxis": [
                    "os.getppid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getpriority",
                "sintaxis": [
                    "os.getpriority(which, who)"
                ],
                "parametros": [
                    "who",
                    "which"
                ]
            },
            {
                "nombre": "getrandom",
                "sintaxis": [
                    "os.getrandom(size, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "size"
                ]
            },
            {
                "nombre": "getresgid",
                "sintaxis": [
                    "os.getresgid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getresuid",
                "sintaxis": [
                    "os.getresuid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getsid",
                "sintaxis": [
                    "os.getsid(pid)"
                ],
                "parametros": [
                    "pid"
                ]
            },
            {
                "nombre": "getuid",
                "sintaxis": [
                    "os.getuid()"
                ],
                "parametros": []
            },
            {
                "nombre": "getxattr",
                "sintaxis": [
                    "os.getxattr(path, attribute, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "attribute",
                    "follow_symlinks",
                    "path",
                    "*"
                ]
            },
            {
                "nombre": "get_blocking",
                "sintaxis": [
                    "os.get_blocking(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "get_exec_path",
                "sintaxis": [
                    "os.get_exec_path(env=None)"
                ],
                "parametros": [
                    "env"
                ]
            },
            {
                "nombre": "get_handle_inheritable",
                "sintaxis": [
                    "os.get_handle_inheritable(handle)"
                ],
                "parametros": [
                    "handle"
                ]
            },
            {
                "nombre": "get_inheritable",
                "sintaxis": [
                    "os.get_inheritable(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "get_terminal_size",
                "sintaxis": [
                    "os.get_terminal_size(fd=STDOUT_FILENO)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "initgroups",
                "sintaxis": [
                    "os.initgroups(username, gid)"
                ],
                "parametros": [
                    "username",
                    "gid"
                ]
            },
            {
                "nombre": "isatty",
                "sintaxis": [
                    "os.isatty(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "kill",
                "sintaxis": [
                    "os.kill(pid, sig)"
                ],
                "parametros": [
                    "sig",
                    "pid"
                ]
            },
            {
                "nombre": "killpg",
                "sintaxis": [
                    "os.killpg(pgid, sig)"
                ],
                "parametros": [
                    "sig",
                    "pgid"
                ]
            },
            {
                "nombre": "lchflags",
                "sintaxis": [
                    "os.lchflags(path, flags)"
                ],
                "parametros": [
                    "flags",
                    "path"
                ]
            },
            {
                "nombre": "lchmod",
                "sintaxis": [
                    "os.lchmod(path, mode)"
                ],
                "parametros": [
                    "mode",
                    "path"
                ]
            },
            {
                "nombre": "lchown",
                "sintaxis": [
                    "os.lchown(path, uid, gid)"
                ],
                "parametros": [
                    "uid",
                    "gid",
                    "path"
                ]
            },
            {
                "nombre": "link",
                "sintaxis": [
                    "os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)"
                ],
                "parametros": [
                    "follow_symlinks",
                    "dst_dir_fd",
                    "src_dir_fd",
                    "dst",
                    "*",
                    "src"
                ]
            },
            {
                "nombre": "listdir",
                "sintaxis": [
                    "os.listdir(path='.')"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "listxattr",
                "sintaxis": [
                    "os.listxattr(path=None, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "*",
                    "follow_symlinks",
                    "path"
                ]
            },
            {
                "nombre": "lockf",
                "sintaxis": [
                    "os.lockf(fd, cmd, len)"
                ],
                "parametros": [
                    "fd",
                    "len",
                    "cmd"
                ]
            },
            {
                "nombre": "lseek",
                "sintaxis": [
                    "os.lseek(fd, pos, how)"
                ],
                "parametros": [
                    "fd",
                    "pos",
                    "how"
                ]
            },
            {
                "nombre": "lstat",
                "sintaxis": [
                    "os.lstat(path, *, dir_fd=None)"
                ],
                "parametros": [
                    "dir_fd",
                    "*",
                    "path"
                ]
            },
            {
                "nombre": "major",
                "sintaxis": [
                    "os.major(device)"
                ],
                "parametros": [
                    "device"
                ]
            },
            {
                "nombre": "makedev",
                "sintaxis": [
                    "os.makedev(major, minor)"
                ],
                "parametros": [
                    "minor",
                    "major"
                ]
            },
            {
                "nombre": "makedirs",
                "sintaxis": [
                    "os.makedirs(name, mode=511, exist_ok=False)"
                ],
                "parametros": [
                    "mode",
                    "exist_ok",
                    "name"
                ]
            },
            {
                "nombre": "memfd_create",
                "sintaxis": [
                    "os.memfd_create(name[, flags=os.MFD_CLOEXEC])"
                ],
                "parametros": [
                    "flags",
                    "name"
                ]
            },
            {
                "nombre": "minor",
                "sintaxis": [
                    "os.minor(device)"
                ],
                "parametros": [
                    "device"
                ]
            },
            {
                "nombre": "mkdir",
                "sintaxis": [
                    "os.mkdir(path, mode=511, *, dir_fd=None)"
                ],
                "parametros": [
                    "mode",
                    "dir_fd",
                    "*",
                    "path"
                ]
            },
            {
                "nombre": "mkfifo",
                "sintaxis": [
                    "os.mkfifo(path, mode=438, *, dir_fd=None)"
                ],
                "parametros": [
                    "mode",
                    "dir_fd",
                    "*",
                    "path"
                ]
            },
            {
                "nombre": "mknod",
                "sintaxis": [
                    "os.mknod(path, mode=384, device=0, *, dir_fd=None)"
                ],
                "parametros": [
                    "mode",
                    "dir_fd",
                    "device",
                    "path",
                    "*"
                ]
            },
            {
                "nombre": "nice",
                "sintaxis": [
                    "os.nice(increment)"
                ],
                "parametros": [
                    "increment"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "os.open(path, flags, mode=511, *, dir_fd=None)"
                ],
                "parametros": [
                    "mode",
                    "flags",
                    "dir_fd",
                    "path",
                    "*"
                ]
            },
            {
                "nombre": "openpty",
                "sintaxis": [
                    "os.openpty()"
                ],
                "parametros": []
            },
            {
                "nombre": "pathconf",
                "sintaxis": [
                    "os.pathconf(path, name)"
                ],
                "parametros": [
                    "name",
                    "path"
                ]
            },
            {
                "nombre": "pidfd_open",
                "sintaxis": [
                    "os.pidfd_open(pid, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "pid"
                ]
            },
            {
                "nombre": "pipe",
                "sintaxis": [
                    "os.pipe()"
                ],
                "parametros": []
            },
            {
                "nombre": "pipe2",
                "sintaxis": [
                    "os.pipe2(flags)"
                ],
                "parametros": [
                    "flags"
                ]
            },
            {
                "nombre": "plock",
                "sintaxis": [
                    "os.plock(op)"
                ],
                "parametros": [
                    "op"
                ]
            },
            {
                "nombre": "popen",
                "sintaxis": [
                    "os.popen(cmd, mode='r', buffering=- 1)"
                ],
                "parametros": [
                    "mode",
                    "cmd",
                    "buffering"
                ]
            },
            {
                "nombre": "posix_fadvise",
                "sintaxis": [
                    "os.posix_fadvise(fd, offset, len, advice)"
                ],
                "parametros": [
                    "fd",
                    "advice",
                    "len",
                    "offset"
                ]
            },
            {
                "nombre": "posix_fallocate",
                "sintaxis": [
                    "os.posix_fallocate(fd, offset, len)"
                ],
                "parametros": [
                    "fd",
                    "len",
                    "offset"
                ]
            },
            {
                "nombre": "posix_spawn",
                "sintaxis": [
                    "os.posix_spawn(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False, setsid=False, setsigmask=(), setsigdef=(), scheduler=None)"
                ],
                "parametros": [
                    "setsigmask",
                    "argv",
                    "env",
                    "resetids",
                    "file_actions",
                    "path",
                    "setsigdef",
                    "setpgroup",
                    "scheduler",
                    "*",
                    "setsid"
                ]
            },
            {
                "nombre": "posix_spawnp",
                "sintaxis": [
                    "os.posix_spawnp(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False, setsid=False, setsigmask=(), setsigdef=(), scheduler=None)"
                ],
                "parametros": [
                    "setsigmask",
                    "argv",
                    "env",
                    "resetids",
                    "file_actions",
                    "path",
                    "setsigdef",
                    "setpgroup",
                    "scheduler",
                    "*",
                    "setsid"
                ]
            },
            {
                "nombre": "pread",
                "sintaxis": [
                    "os.pread(fd, n, offset)"
                ],
                "parametros": [
                    "fd",
                    "n",
                    "offset"
                ]
            },
            {
                "nombre": "preadv",
                "sintaxis": [
                    "os.preadv(fd, buffers, offset, flags=0)"
                ],
                "parametros": [
                    "fd",
                    "flags",
                    "offset",
                    "buffers"
                ]
            },
            {
                "nombre": "putenv",
                "sintaxis": [
                    "os.putenv(key, value)"
                ],
                "parametros": [
                    "value",
                    "key"
                ]
            },
            {
                "nombre": "pwrite",
                "sintaxis": [
                    "os.pwrite(fd, str, offset)"
                ],
                "parametros": [
                    "fd",
                    "offset",
                    "str"
                ]
            },
            {
                "nombre": "pwritev",
                "sintaxis": [
                    "os.pwritev(fd, buffers, offset, flags=0)"
                ],
                "parametros": [
                    "fd",
                    "flags",
                    "offset",
                    "buffers"
                ]
            },
            {
                "nombre": "read",
                "sintaxis": [
                    "os.read(fd, n)"
                ],
                "parametros": [
                    "fd",
                    "n"
                ]
            },
            {
                "nombre": "readlink",
                "sintaxis": [
                    "os.readlink(path, *, dir_fd=None)"
                ],
                "parametros": [
                    "dir_fd",
                    "*",
                    "path"
                ]
            },
            {
                "nombre": "readv",
                "sintaxis": [
                    "os.readv(fd, buffers)"
                ],
                "parametros": [
                    "fd",
                    "buffers"
                ]
            },
            {
                "nombre": "register_at_fork",
                "sintaxis": [
                    "os.register_at_fork(*, before=None, after_in_parent=None, after_in_child=None)"
                ],
                "parametros": [
                    "after_in_parent",
                    "*",
                    "before",
                    "after_in_child"
                ]
            },
            {
                "nombre": "remove",
                "sintaxis": [
                    "os.remove(path, *, dir_fd=None)"
                ],
                "parametros": [
                    "dir_fd",
                    "*",
                    "path"
                ]
            },
            {
                "nombre": "removedirs",
                "sintaxis": [
                    "os.removedirs(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "removexattr",
                "sintaxis": [
                    "os.removexattr(path, attribute, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "attribute",
                    "follow_symlinks",
                    "path",
                    "*"
                ]
            },
            {
                "nombre": "rename",
                "sintaxis": [
                    "os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)"
                ],
                "parametros": [
                    "dst_dir_fd",
                    "src_dir_fd",
                    "dst",
                    "*",
                    "src"
                ]
            },
            {
                "nombre": "renames",
                "sintaxis": [
                    "os.renames(old, new)"
                ],
                "parametros": [
                    "old",
                    "new"
                ]
            },
            {
                "nombre": "replace",
                "sintaxis": [
                    "os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)"
                ],
                "parametros": [
                    "dst_dir_fd",
                    "src_dir_fd",
                    "dst",
                    "*",
                    "src"
                ]
            },
            {
                "nombre": "rmdir",
                "sintaxis": [
                    "os.rmdir(path, *, dir_fd=None)"
                ],
                "parametros": [
                    "dir_fd",
                    "*",
                    "path"
                ]
            },
            {
                "nombre": "scandir",
                "sintaxis": [
                    "os.scandir(path='.')"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "sched_getaffinity",
                "sintaxis": [
                    "os.sched_getaffinity(pid)"
                ],
                "parametros": [
                    "pid"
                ]
            },
            {
                "nombre": "sched_getparam",
                "sintaxis": [
                    "os.sched_getparam(pid)"
                ],
                "parametros": [
                    "pid"
                ]
            },
            {
                "nombre": "sched_getscheduler",
                "sintaxis": [
                    "os.sched_getscheduler(pid)"
                ],
                "parametros": [
                    "pid"
                ]
            },
            {
                "nombre": "sched_get_priority_max",
                "sintaxis": [
                    "os.sched_get_priority_max(policy)"
                ],
                "parametros": [
                    "policy"
                ]
            },
            {
                "nombre": "sched_get_priority_min",
                "sintaxis": [
                    "os.sched_get_priority_min(policy)"
                ],
                "parametros": [
                    "policy"
                ]
            },
            {
                "nombre": "sched_rr_get_interval",
                "sintaxis": [
                    "os.sched_rr_get_interval(pid)"
                ],
                "parametros": [
                    "pid"
                ]
            },
            {
                "nombre": "sched_setaffinity",
                "sintaxis": [
                    "os.sched_setaffinity(pid, mask)"
                ],
                "parametros": [
                    "mask",
                    "pid"
                ]
            },
            {
                "nombre": "sched_setparam",
                "sintaxis": [
                    "os.sched_setparam(pid, param)"
                ],
                "parametros": [
                    "param",
                    "pid"
                ]
            },
            {
                "nombre": "sched_setscheduler",
                "sintaxis": [
                    "os.sched_setscheduler(pid, policy, param)"
                ],
                "parametros": [
                    "policy",
                    "param",
                    "pid"
                ]
            },
            {
                "nombre": "sched_yield",
                "sintaxis": [
                    "os.sched_yield()"
                ],
                "parametros": []
            },
            {
                "nombre": "sendfile",
                "sintaxis": [
                    "os.sendfile(out_fd, in_fd, offset, count)",
                    "os.sendfile(out_fd, in_fd, offset, count, headers=(), trailers=(), flags=0)"
                ],
                "parametros": [
                    "headers",
                    "count",
                    "flags",
                    "in_fd",
                    "trailers",
                    "out_fd",
                    "offset"
                ]
            },
            {
                "nombre": "setegid",
                "sintaxis": [
                    "os.setegid(egid)"
                ],
                "parametros": [
                    "egid"
                ]
            },
            {
                "nombre": "seteuid",
                "sintaxis": [
                    "os.seteuid(euid)"
                ],
                "parametros": [
                    "euid"
                ]
            },
            {
                "nombre": "setgid",
                "sintaxis": [
                    "os.setgid(gid)"
                ],
                "parametros": [
                    "gid"
                ]
            },
            {
                "nombre": "setgroups",
                "sintaxis": [
                    "os.setgroups(groups)"
                ],
                "parametros": [
                    "groups"
                ]
            },
            {
                "nombre": "setpgid",
                "sintaxis": [
                    "os.setpgid(pid, pgrp)"
                ],
                "parametros": [
                    "pgrp",
                    "pid"
                ]
            },
            {
                "nombre": "setpgrp",
                "sintaxis": [
                    "os.setpgrp()"
                ],
                "parametros": []
            },
            {
                "nombre": "setpriority",
                "sintaxis": [
                    "os.setpriority(which, who, priority)"
                ],
                "parametros": [
                    "priority",
                    "who",
                    "which"
                ]
            },
            {
                "nombre": "setregid",
                "sintaxis": [
                    "os.setregid(rgid, egid)"
                ],
                "parametros": [
                    "rgid",
                    "egid"
                ]
            },
            {
                "nombre": "setresgid",
                "sintaxis": [
                    "os.setresgid(rgid, egid, sgid)"
                ],
                "parametros": [
                    "sgid",
                    "rgid",
                    "egid"
                ]
            },
            {
                "nombre": "setresuid",
                "sintaxis": [
                    "os.setresuid(ruid, euid, suid)"
                ],
                "parametros": [
                    "euid",
                    "ruid",
                    "suid"
                ]
            },
            {
                "nombre": "setreuid",
                "sintaxis": [
                    "os.setreuid(ruid, euid)"
                ],
                "parametros": [
                    "euid",
                    "ruid"
                ]
            },
            {
                "nombre": "setsid",
                "sintaxis": [
                    "os.setsid()"
                ],
                "parametros": []
            },
            {
                "nombre": "setuid",
                "sintaxis": [
                    "os.setuid(uid)"
                ],
                "parametros": [
                    "uid"
                ]
            },
            {
                "nombre": "setxattr",
                "sintaxis": [
                    "os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "flags",
                    "follow_symlinks",
                    "value",
                    "path",
                    "*",
                    "attribute"
                ]
            },
            {
                "nombre": "set_blocking",
                "sintaxis": [
                    "os.set_blocking(fd, blocking)"
                ],
                "parametros": [
                    "fd",
                    "blocking"
                ]
            },
            {
                "nombre": "set_handle_inheritable",
                "sintaxis": [
                    "os.set_handle_inheritable(handle, inheritable)"
                ],
                "parametros": [
                    "handle",
                    "inheritable"
                ]
            },
            {
                "nombre": "set_inheritable",
                "sintaxis": [
                    "os.set_inheritable(fd, inheritable)"
                ],
                "parametros": [
                    "fd",
                    "inheritable"
                ]
            },
            {
                "nombre": "spawnl",
                "sintaxis": [
                    "os.spawnl(mode, path, ...)",
                    "os.spawnle(mode, path, ..., env)",
                    "os.spawnlp(mode, file, ...)",
                    "os.spawnlpe(mode, file, ..., env)",
                    "os.spawnv(mode, path, args)",
                    "os.spawnve(mode, path, args, env)",
                    "os.spawnvp(mode, file, args)",
                    "os.spawnvpe(mode, file, args, env)"
                ],
                "parametros": [
                    "mode",
                    "args",
                    "...",
                    "env",
                    "path",
                    "file"
                ]
            },
            {
                "nombre": "splice",
                "sintaxis": [
                    "os.splice(src, dst, count, offset_src=None, offset_dst=None)"
                ],
                "parametros": [
                    "count",
                    "offset_src",
                    "dst",
                    "src",
                    "offset_dst"
                ]
            },
            {
                "nombre": "startfile",
                "sintaxis": [
                    "os.startfile(path[, operation][, arguments][, cwd][, show_cmd])"
                ],
                "parametros": [
                    "arguments",
                    "show_cmd",
                    "path",
                    "operation",
                    "cwd"
                ]
            },
            {
                "nombre": "stat",
                "sintaxis": [
                    "os.stat(path, *, dir_fd=None, follow_symlinks=True)"
                ],
                "parametros": [
                    "dir_fd",
                    "*",
                    "follow_symlinks",
                    "path"
                ]
            },
            {
                "nombre": "statvfs",
                "sintaxis": [
                    "os.statvfs(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "strerror",
                "sintaxis": [
                    "os.strerror(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "symlink",
                "sintaxis": [
                    "os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)"
                ],
                "parametros": [
                    "dir_fd",
                    "dst",
                    "target_is_directory",
                    "*",
                    "src"
                ]
            },
            {
                "nombre": "sync",
                "sintaxis": [
                    "os.sync()"
                ],
                "parametros": []
            },
            {
                "nombre": "sysconf",
                "sintaxis": [
                    "os.sysconf(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "system",
                "sintaxis": [
                    "os.system(command)"
                ],
                "parametros": [
                    "command"
                ]
            },
            {
                "nombre": "tcgetpgrp",
                "sintaxis": [
                    "os.tcgetpgrp(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "tcsetpgrp",
                "sintaxis": [
                    "os.tcsetpgrp(fd, pg)"
                ],
                "parametros": [
                    "fd",
                    "pg"
                ]
            },
            {
                "nombre": "times",
                "sintaxis": [
                    "os.times()"
                ],
                "parametros": []
            },
            {
                "nombre": "truncate",
                "sintaxis": [
                    "os.truncate(path, length)"
                ],
                "parametros": [
                    "path",
                    "length"
                ]
            },
            {
                "nombre": "ttyname",
                "sintaxis": [
                    "os.ttyname(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "umask",
                "sintaxis": [
                    "os.umask(mask)"
                ],
                "parametros": [
                    "mask"
                ]
            },
            {
                "nombre": "uname",
                "sintaxis": [
                    "os.uname()"
                ],
                "parametros": []
            },
            {
                "nombre": "unlink",
                "sintaxis": [
                    "os.unlink(path, *, dir_fd=None)"
                ],
                "parametros": [
                    "dir_fd",
                    "*",
                    "path"
                ]
            },
            {
                "nombre": "unsetenv",
                "sintaxis": [
                    "os.unsetenv(key)"
                ],
                "parametros": [
                    "key"
                ]
            },
            {
                "nombre": "urandom",
                "sintaxis": [
                    "os.urandom(size)"
                ],
                "parametros": [
                    "size"
                ]
            },
            {
                "nombre": "utime",
                "sintaxis": [
                    "os.utime(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)"
                ],
                "parametros": [
                    "times",
                    "ns",
                    "dir_fd",
                    "follow_symlinks",
                    "path",
                    "*"
                ]
            },
            {
                "nombre": "wait",
                "sintaxis": [
                    "os.wait()"
                ],
                "parametros": []
            },
            {
                "nombre": "wait3",
                "sintaxis": [
                    "os.wait3(options)"
                ],
                "parametros": [
                    "options"
                ]
            },
            {
                "nombre": "wait4",
                "sintaxis": [
                    "os.wait4(pid, options)"
                ],
                "parametros": [
                    "pid",
                    "options"
                ]
            },
            {
                "nombre": "waitid",
                "sintaxis": [
                    "os.waitid(idtype, id, options)"
                ],
                "parametros": [
                    "options",
                    "idtype",
                    "id"
                ]
            },
            {
                "nombre": "waitpid",
                "sintaxis": [
                    "os.waitpid(pid, options)"
                ],
                "parametros": [
                    "pid",
                    "options"
                ]
            },
            {
                "nombre": "waitstatus_to_exitcode",
                "sintaxis": [
                    "os.waitstatus_to_exitcode(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "walk",
                "sintaxis": [
                    "os.walk(top, topdown=True, onerror=None, followlinks=False)"
                ],
                "parametros": [
                    "top",
                    "followlinks",
                    "onerror",
                    "topdown"
                ]
            },
            {
                "nombre": "WCOREDUMP",
                "sintaxis": [
                    "os.WCOREDUMP(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "WEXITSTATUS",
                "sintaxis": [
                    "os.WEXITSTATUS(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "WIFCONTINUED",
                "sintaxis": [
                    "os.WIFCONTINUED(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "WIFEXITED",
                "sintaxis": [
                    "os.WIFEXITED(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "WIFSIGNALED",
                "sintaxis": [
                    "os.WIFSIGNALED(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "WIFSTOPPED",
                "sintaxis": [
                    "os.WIFSTOPPED(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "write",
                "sintaxis": [
                    "os.write(fd, str)"
                ],
                "parametros": [
                    "fd",
                    "str"
                ]
            },
            {
                "nombre": "writev",
                "sintaxis": [
                    "os.writev(fd, buffers)"
                ],
                "parametros": [
                    "fd",
                    "buffers"
                ]
            },
            {
                "nombre": "WSTOPSIG",
                "sintaxis": [
                    "os.WSTOPSIG(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "WTERMSIG",
                "sintaxis": [
                    "os.WTERMSIG(status)"
                ],
                "parametros": [
                    "status"
                ]
            },
            {
                "nombre": "_exit",
                "sintaxis": [
                    "os._exit(n)"
                ],
                "parametros": [
                    "n"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "DirEntry",
                "constructores": [
                    {
                        "nombre": "DirEntry",
                        "sintaxis": [
                            "class os.DirEntry"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "inode",
                        "sintaxis": [
                            "inode()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_dir",
                        "sintaxis": [
                            "is_dir(*, follow_symlinks=True)"
                        ],
                        "parametros": [
                            "*",
                            "follow_symlinks"
                        ]
                    },
                    {
                        "nombre": "is_file",
                        "sintaxis": [
                            "is_file(*, follow_symlinks=True)"
                        ],
                        "parametros": [
                            "*",
                            "follow_symlinks"
                        ]
                    },
                    {
                        "nombre": "is_symlink",
                        "sintaxis": [
                            "is_symlink()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "stat",
                        "sintaxis": [
                            "stat(*, follow_symlinks=True)"
                        ],
                        "parametros": [
                            "*",
                            "follow_symlinks"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "path",
                        "sintaxis": [
                            "path"
                        ]
                    }
                ],
                "sintaxis": [
                    "class DirEntry"
                ]
            },
            {
                "nombre": "PathLike",
                "constructores": [
                    {
                        "nombre": "PathLike",
                        "sintaxis": [
                            "class os.PathLike"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "__fspath__",
                        "sintaxis": [
                            "abstractmethod __fspath__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PathLike"
                ]
            },
            {
                "nombre": "scandir",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "scandir.close()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class scandir"
                ]
            },
            {
                "nombre": "sched_param",
                "constructores": [
                    {
                        "nombre": "sched_param",
                        "sintaxis": [
                            "class os.sched_param(sched_priority)"
                        ],
                        "parametros": [
                            "sched_priority"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "sched_priority",
                        "sintaxis": [
                            "sched_priority"
                        ]
                    }
                ],
                "sintaxis": [
                    "class sched_param"
                ]
            },
            {
                "nombre": "stat_result",
                "constructores": [
                    {
                        "nombre": "stat_result",
                        "sintaxis": [
                            "class os.stat_result"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "st_atime",
                        "sintaxis": [
                            "st_atime"
                        ]
                    },
                    {
                        "nombre": "st_atime_ns",
                        "sintaxis": [
                            "st_atime_ns"
                        ]
                    },
                    {
                        "nombre": "st_birthtime",
                        "sintaxis": [
                            "st_birthtime"
                        ]
                    },
                    {
                        "nombre": "st_blksize",
                        "sintaxis": [
                            "st_blksize"
                        ]
                    },
                    {
                        "nombre": "st_blocks",
                        "sintaxis": [
                            "st_blocks"
                        ]
                    },
                    {
                        "nombre": "st_creator",
                        "sintaxis": [
                            "st_creator"
                        ]
                    },
                    {
                        "nombre": "st_ctime",
                        "sintaxis": [
                            "st_ctime"
                        ]
                    },
                    {
                        "nombre": "st_ctime_ns",
                        "sintaxis": [
                            "st_ctime_ns"
                        ]
                    },
                    {
                        "nombre": "st_dev",
                        "sintaxis": [
                            "st_dev"
                        ]
                    },
                    {
                        "nombre": "st_file_attributes",
                        "sintaxis": [
                            "st_file_attributes"
                        ]
                    },
                    {
                        "nombre": "st_flags",
                        "sintaxis": [
                            "st_flags"
                        ]
                    },
                    {
                        "nombre": "st_fstype",
                        "sintaxis": [
                            "st_fstype"
                        ]
                    },
                    {
                        "nombre": "st_gen",
                        "sintaxis": [
                            "st_gen"
                        ]
                    },
                    {
                        "nombre": "st_gid",
                        "sintaxis": [
                            "st_gid"
                        ]
                    },
                    {
                        "nombre": "st_ino",
                        "sintaxis": [
                            "st_ino"
                        ]
                    },
                    {
                        "nombre": "st_mode",
                        "sintaxis": [
                            "st_mode"
                        ]
                    },
                    {
                        "nombre": "st_mtime",
                        "sintaxis": [
                            "st_mtime"
                        ]
                    },
                    {
                        "nombre": "st_mtime_ns",
                        "sintaxis": [
                            "st_mtime_ns"
                        ]
                    },
                    {
                        "nombre": "st_nlink",
                        "sintaxis": [
                            "st_nlink"
                        ]
                    },
                    {
                        "nombre": "st_rdev",
                        "sintaxis": [
                            "st_rdev"
                        ]
                    },
                    {
                        "nombre": "st_reparse_tag",
                        "sintaxis": [
                            "st_reparse_tag"
                        ]
                    },
                    {
                        "nombre": "st_rsize",
                        "sintaxis": [
                            "st_rsize"
                        ]
                    },
                    {
                        "nombre": "st_size",
                        "sintaxis": [
                            "st_size"
                        ]
                    },
                    {
                        "nombre": "st_type",
                        "sintaxis": [
                            "st_type"
                        ]
                    },
                    {
                        "nombre": "st_uid",
                        "sintaxis": [
                            "st_uid"
                        ]
                    }
                ],
                "sintaxis": [
                    "class stat_result"
                ]
            },
            {
                "nombre": "terminal_size",
                "constructores": [
                    {
                        "nombre": "terminal_size",
                        "sintaxis": [
                            "class os.terminal_size"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "columns",
                        "sintaxis": [
                            "columns"
                        ]
                    },
                    {
                        "nombre": "lines",
                        "sintaxis": [
                            "lines"
                        ]
                    }
                ],
                "sintaxis": [
                    "class terminal_size"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "altsep",
                "sintaxis": [
                    "os.altsep"
                ]
            },
            {
                "nombre": "CLD_EXITED",
                "sintaxis": [
                    "os.CLD_EXITED"
                ]
            },
            {
                "nombre": "confstr_names",
                "sintaxis": [
                    "os.confstr_names"
                ]
            },
            {
                "nombre": "curdir",
                "sintaxis": [
                    "os.curdir"
                ]
            },
            {
                "nombre": "defpath",
                "sintaxis": [
                    "os.defpath"
                ]
            },
            {
                "nombre": "devnull",
                "sintaxis": [
                    "os.devnull"
                ]
            },
            {
                "nombre": "EFD_CLOEXEC",
                "sintaxis": [
                    "os.EFD_CLOEXEC"
                ]
            },
            {
                "nombre": "EFD_NONBLOCK",
                "sintaxis": [
                    "os.EFD_NONBLOCK"
                ]
            },
            {
                "nombre": "EFD_SEMAPHORE",
                "sintaxis": [
                    "os.EFD_SEMAPHORE"
                ]
            },
            {
                "nombre": "environ",
                "sintaxis": [
                    "os.environ"
                ]
            },
            {
                "nombre": "environb",
                "sintaxis": [
                    "os.environb"
                ]
            },
            {
                "nombre": "extsep",
                "sintaxis": [
                    "os.extsep"
                ]
            },
            {
                "nombre": "EX_CANTCREAT",
                "sintaxis": [
                    "os.EX_CANTCREAT"
                ]
            },
            {
                "nombre": "EX_CONFIG",
                "sintaxis": [
                    "os.EX_CONFIG"
                ]
            },
            {
                "nombre": "EX_DATAERR",
                "sintaxis": [
                    "os.EX_DATAERR"
                ]
            },
            {
                "nombre": "EX_IOERR",
                "sintaxis": [
                    "os.EX_IOERR"
                ]
            },
            {
                "nombre": "EX_NOHOST",
                "sintaxis": [
                    "os.EX_NOHOST"
                ]
            },
            {
                "nombre": "EX_NOINPUT",
                "sintaxis": [
                    "os.EX_NOINPUT"
                ]
            },
            {
                "nombre": "EX_NOPERM",
                "sintaxis": [
                    "os.EX_NOPERM"
                ]
            },
            {
                "nombre": "EX_NOTFOUND",
                "sintaxis": [
                    "os.EX_NOTFOUND"
                ]
            },
            {
                "nombre": "EX_NOUSER",
                "sintaxis": [
                    "os.EX_NOUSER"
                ]
            },
            {
                "nombre": "EX_OK",
                "sintaxis": [
                    "os.EX_OK"
                ]
            },
            {
                "nombre": "EX_OSERR",
                "sintaxis": [
                    "os.EX_OSERR"
                ]
            },
            {
                "nombre": "EX_OSFILE",
                "sintaxis": [
                    "os.EX_OSFILE"
                ]
            },
            {
                "nombre": "EX_PROTOCOL",
                "sintaxis": [
                    "os.EX_PROTOCOL"
                ]
            },
            {
                "nombre": "EX_SOFTWARE",
                "sintaxis": [
                    "os.EX_SOFTWARE"
                ]
            },
            {
                "nombre": "EX_TEMPFAIL",
                "sintaxis": [
                    "os.EX_TEMPFAIL"
                ]
            },
            {
                "nombre": "EX_UNAVAILABLE",
                "sintaxis": [
                    "os.EX_UNAVAILABLE"
                ]
            },
            {
                "nombre": "EX_USAGE",
                "sintaxis": [
                    "os.EX_USAGE"
                ]
            },
            {
                "nombre": "F_LOCK",
                "sintaxis": [
                    "os.F_LOCK"
                ]
            },
            {
                "nombre": "F_OK",
                "sintaxis": [
                    "os.F_OK"
                ]
            },
            {
                "nombre": "GRND_NONBLOCK",
                "sintaxis": [
                    "os.GRND_NONBLOCK"
                ]
            },
            {
                "nombre": "GRND_RANDOM",
                "sintaxis": [
                    "os.GRND_RANDOM"
                ]
            },
            {
                "nombre": "linesep",
                "sintaxis": [
                    "os.linesep"
                ]
            },
            {
                "nombre": "MFD_CLOEXEC",
                "sintaxis": [
                    "os.MFD_CLOEXEC"
                ]
            },
            {
                "nombre": "name",
                "sintaxis": [
                    "os.name"
                ]
            },
            {
                "nombre": "O_ASYNC",
                "sintaxis": [
                    "os.O_ASYNC"
                ]
            },
            {
                "nombre": "O_BINARY",
                "sintaxis": [
                    "os.O_BINARY"
                ]
            },
            {
                "nombre": "O_DSYNC",
                "sintaxis": [
                    "os.O_DSYNC"
                ]
            },
            {
                "nombre": "O_EVTONLY",
                "sintaxis": [
                    "os.O_EVTONLY"
                ]
            },
            {
                "nombre": "O_RDONLY",
                "sintaxis": [
                    "os.O_RDONLY"
                ]
            },
            {
                "nombre": "pardir",
                "sintaxis": [
                    "os.pardir"
                ]
            },
            {
                "nombre": "pathconf_names",
                "sintaxis": [
                    "os.pathconf_names"
                ]
            },
            {
                "nombre": "pathsep",
                "sintaxis": [
                    "os.pathsep"
                ]
            },
            {
                "nombre": "POSIX_FADV_NORMAL",
                "sintaxis": [
                    "os.POSIX_FADV_NORMAL"
                ]
            },
            {
                "nombre": "POSIX_SPAWN_CLOSE",
                "sintaxis": [
                    "os.POSIX_SPAWN_CLOSE"
                ]
            },
            {
                "nombre": "POSIX_SPAWN_DUP2",
                "sintaxis": [
                    "os.POSIX_SPAWN_DUP2"
                ]
            },
            {
                "nombre": "POSIX_SPAWN_OPEN",
                "sintaxis": [
                    "os.POSIX_SPAWN_OPEN"
                ]
            },
            {
                "nombre": "PRIO_PROCESS",
                "sintaxis": [
                    "os.PRIO_PROCESS"
                ]
            },
            {
                "nombre": "P_DETACH",
                "sintaxis": [
                    "os.P_DETACH"
                ]
            },
            {
                "nombre": "P_NOWAIT",
                "sintaxis": [
                    "os.P_NOWAIT"
                ]
            },
            {
                "nombre": "P_PID",
                "sintaxis": [
                    "os.P_PID"
                ]
            },
            {
                "nombre": "P_PIDFD",
                "sintaxis": [
                    "os.P_PIDFD"
                ]
            },
            {
                "nombre": "P_WAIT",
                "sintaxis": [
                    "os.P_WAIT"
                ]
            },
            {
                "nombre": "RTLD_LAZY",
                "sintaxis": [
                    "os.RTLD_LAZY"
                ]
            },
            {
                "nombre": "RWF_APPEND",
                "sintaxis": [
                    "os.RWF_APPEND"
                ]
            },
            {
                "nombre": "RWF_DSYNC",
                "sintaxis": [
                    "os.RWF_DSYNC"
                ]
            },
            {
                "nombre": "RWF_HIPRI",
                "sintaxis": [
                    "os.RWF_HIPRI"
                ]
            },
            {
                "nombre": "RWF_NOWAIT",
                "sintaxis": [
                    "os.RWF_NOWAIT"
                ]
            },
            {
                "nombre": "RWF_SYNC",
                "sintaxis": [
                    "os.RWF_SYNC"
                ]
            },
            {
                "nombre": "SCHED_BATCH",
                "sintaxis": [
                    "os.SCHED_BATCH"
                ]
            },
            {
                "nombre": "SCHED_FIFO",
                "sintaxis": [
                    "os.SCHED_FIFO"
                ]
            },
            {
                "nombre": "SCHED_IDLE",
                "sintaxis": [
                    "os.SCHED_IDLE"
                ]
            },
            {
                "nombre": "SCHED_OTHER",
                "sintaxis": [
                    "os.SCHED_OTHER"
                ]
            },
            {
                "nombre": "SCHED_RESET_ON_FORK",
                "sintaxis": [
                    "os.SCHED_RESET_ON_FORK"
                ]
            },
            {
                "nombre": "SCHED_RR",
                "sintaxis": [
                    "os.SCHED_RR"
                ]
            },
            {
                "nombre": "SCHED_SPORADIC",
                "sintaxis": [
                    "os.SCHED_SPORADIC"
                ]
            },
            {
                "nombre": "SEEK_SET",
                "sintaxis": [
                    "os.SEEK_SET"
                ]
            },
            {
                "nombre": "sep",
                "sintaxis": [
                    "os.sep"
                ]
            },
            {
                "nombre": "SF_NODISKIO",
                "sintaxis": [
                    "os.SF_NODISKIO"
                ]
            },
            {
                "nombre": "SPLICE_F_MOVE",
                "sintaxis": [
                    "os.SPLICE_F_MOVE"
                ]
            },
            {
                "nombre": "supports_bytes_environ",
                "sintaxis": [
                    "os.supports_bytes_environ"
                ]
            },
            {
                "nombre": "supports_dir_fd",
                "sintaxis": [
                    "os.supports_dir_fd"
                ]
            },
            {
                "nombre": "supports_effective_ids",
                "sintaxis": [
                    "os.supports_effective_ids"
                ]
            },
            {
                "nombre": "supports_fd",
                "sintaxis": [
                    "os.supports_fd"
                ]
            },
            {
                "nombre": "supports_follow_symlinks",
                "sintaxis": [
                    "os.supports_follow_symlinks"
                ]
            },
            {
                "nombre": "sysconf_names",
                "sintaxis": [
                    "os.sysconf_names"
                ]
            },
            {
                "nombre": "WCONTINUED",
                "sintaxis": [
                    "os.WCONTINUED"
                ]
            },
            {
                "nombre": "WEXITED",
                "sintaxis": [
                    "os.WEXITED"
                ]
            },
            {
                "nombre": "WNOHANG",
                "sintaxis": [
                    "os.WNOHANG"
                ]
            },
            {
                "nombre": "WUNTRACED",
                "sintaxis": [
                    "os.WUNTRACED"
                ]
            },
            {
                "nombre": "XATTR_CREATE",
                "sintaxis": [
                    "os.XATTR_CREATE"
                ]
            },
            {
                "nombre": "XATTR_REPLACE",
                "sintaxis": [
                    "os.XATTR_REPLACE"
                ]
            },
            {
                "nombre": "XATTR_SIZE_MAX",
                "sintaxis": [
                    "os.XATTR_SIZE_MAX"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception os.error"
                ]
            }
        ]
    },
    {
        "nombre": "os.path",
        "funciones": [
            {
                "nombre": "abspath",
                "sintaxis": [
                    "os.path.abspath(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "basename",
                "sintaxis": [
                    "os.path.basename(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "commonpath",
                "sintaxis": [
                    "os.path.commonpath(paths)"
                ],
                "parametros": [
                    "paths"
                ]
            },
            {
                "nombre": "commonprefix",
                "sintaxis": [
                    "os.path.commonprefix(list)"
                ],
                "parametros": [
                    "list"
                ]
            },
            {
                "nombre": "dirname",
                "sintaxis": [
                    "os.path.dirname(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "exists",
                "sintaxis": [
                    "os.path.exists(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "expanduser",
                "sintaxis": [
                    "os.path.expanduser(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "expandvars",
                "sintaxis": [
                    "os.path.expandvars(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "getatime",
                "sintaxis": [
                    "os.path.getatime(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "getctime",
                "sintaxis": [
                    "os.path.getctime(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "getmtime",
                "sintaxis": [
                    "os.path.getmtime(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "getsize",
                "sintaxis": [
                    "os.path.getsize(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "isabs",
                "sintaxis": [
                    "os.path.isabs(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "isdir",
                "sintaxis": [
                    "os.path.isdir(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "isfile",
                "sintaxis": [
                    "os.path.isfile(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "islink",
                "sintaxis": [
                    "os.path.islink(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "ismount",
                "sintaxis": [
                    "os.path.ismount(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "join",
                "sintaxis": [
                    "os.path.join(path, *paths)"
                ],
                "parametros": [
                    "paths",
                    "path"
                ]
            },
            {
                "nombre": "lexists",
                "sintaxis": [
                    "os.path.lexists(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "normcase",
                "sintaxis": [
                    "os.path.normcase(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "normpath",
                "sintaxis": [
                    "os.path.normpath(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "realpath",
                "sintaxis": [
                    "os.path.realpath(path, *, strict=False)"
                ],
                "parametros": [
                    "*",
                    "strict",
                    "path"
                ]
            },
            {
                "nombre": "relpath",
                "sintaxis": [
                    "os.path.relpath(path, start=os.curdir)"
                ],
                "parametros": [
                    "path",
                    "start"
                ]
            },
            {
                "nombre": "samefile",
                "sintaxis": [
                    "os.path.samefile(path1, path2)"
                ],
                "parametros": [
                    "path1",
                    "path2"
                ]
            },
            {
                "nombre": "sameopenfile",
                "sintaxis": [
                    "os.path.sameopenfile(fp1, fp2)"
                ],
                "parametros": [
                    "fp1",
                    "fp2"
                ]
            },
            {
                "nombre": "samestat",
                "sintaxis": [
                    "os.path.samestat(stat1, stat2)"
                ],
                "parametros": [
                    "stat1",
                    "stat2"
                ]
            },
            {
                "nombre": "split",
                "sintaxis": [
                    "os.path.split(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "splitdrive",
                "sintaxis": [
                    "os.path.splitdrive(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "splitext",
                "sintaxis": [
                    "os.path.splitext(path)"
                ],
                "parametros": [
                    "path"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "supports_unicode_filenames",
                "sintaxis": [
                    "os.path.supports_unicode_filenames"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "ossaudiodev",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "ossaudiodev.open(mode)",
                    "ossaudiodev.open(device, mode)"
                ],
                "parametros": [
                    "mode",
                    "device"
                ]
            },
            {
                "nombre": "openmixer",
                "sintaxis": [
                    "ossaudiodev.openmixer([device])"
                ],
                "parametros": [
                    "device"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "oss_audio_device",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "bufsize",
                        "sintaxis": [
                            "oss_audio_device.bufsize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "channels",
                        "sintaxis": [
                            "oss_audio_device.channels(nchannels)"
                        ],
                        "parametros": [
                            "nchannels"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "oss_audio_device.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "oss_audio_device.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getfmts",
                        "sintaxis": [
                            "oss_audio_device.getfmts()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "nonblock",
                        "sintaxis": [
                            "oss_audio_device.nonblock()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "obufcount",
                        "sintaxis": [
                            "oss_audio_device.obufcount()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "obuffree",
                        "sintaxis": [
                            "oss_audio_device.obuffree()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "post",
                        "sintaxis": [
                            "oss_audio_device.post()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "oss_audio_device.read(size)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "oss_audio_device.reset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setfmt",
                        "sintaxis": [
                            "oss_audio_device.setfmt(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "setparameters",
                        "sintaxis": [
                            "oss_audio_device.setparameters(format, nchannels, samplerate[, strict=False])"
                        ],
                        "parametros": [
                            "format",
                            "nchannels",
                            "strict",
                            "samplerate"
                        ]
                    },
                    {
                        "nombre": "speed",
                        "sintaxis": [
                            "oss_audio_device.speed(samplerate)"
                        ],
                        "parametros": [
                            "samplerate"
                        ]
                    },
                    {
                        "nombre": "sync",
                        "sintaxis": [
                            "oss_audio_device.sync()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "oss_audio_device.write(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "writeall",
                        "sintaxis": [
                            "oss_audio_device.writeall(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "closed",
                        "sintaxis": [
                            "oss_audio_device.closed"
                        ]
                    },
                    {
                        "nombre": "mode",
                        "sintaxis": [
                            "oss_audio_device.mode"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "oss_audio_device.name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class oss_audio_device"
                ]
            },
            {
                "nombre": "oss_mixer_device",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "oss_mixer_device.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "controls",
                        "sintaxis": [
                            "oss_mixer_device.controls()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "oss_mixer_device.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "oss_mixer_device.get(control)"
                        ],
                        "parametros": [
                            "control"
                        ]
                    },
                    {
                        "nombre": "get_recsrc",
                        "sintaxis": [
                            "oss_mixer_device.get_recsrc()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "reccontrols",
                        "sintaxis": [
                            "oss_mixer_device.reccontrols()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "oss_mixer_device.set(control, (left, right))"
                        ],
                        "parametros": [
                            "control",
                            "(left",
                            "right)"
                        ]
                    },
                    {
                        "nombre": "set_recsrc",
                        "sintaxis": [
                            "oss_mixer_device.set_recsrc(bitmask)"
                        ],
                        "parametros": [
                            "bitmask"
                        ]
                    },
                    {
                        "nombre": "stereocontrols",
                        "sintaxis": [
                            "oss_mixer_device.stereocontrols()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class oss_mixer_device"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "OSSAudioError",
                "sintaxis": [
                    "exception ossaudiodev.OSSAudioError"
                ]
            }
        ]
    },
    {
        "nombre": "pathlib",
        "funciones": [],
        "clases": [
            {
                "nombre": "Path",
                "constructores": [
                    {
                        "nombre": "Path",
                        "sintaxis": [
                            "class pathlib.Path(*pathsegments)"
                        ],
                        "parametros": [
                            "pathsegments"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "chmod",
                        "sintaxis": [
                            "Path.chmod(mode, *, follow_symlinks=True)"
                        ],
                        "parametros": [
                            "mode",
                            "*",
                            "follow_symlinks"
                        ]
                    },
                    {
                        "nombre": "cwd",
                        "sintaxis": [
                            "classmethod Path.cwd()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "exists",
                        "sintaxis": [
                            "Path.exists()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "expanduser",
                        "sintaxis": [
                            "Path.expanduser()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "glob",
                        "sintaxis": [
                            "Path.glob(pattern)"
                        ],
                        "parametros": [
                            "pattern"
                        ]
                    },
                    {
                        "nombre": "group",
                        "sintaxis": [
                            "Path.group()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "hardlink_to",
                        "sintaxis": [
                            "Path.hardlink_to(target)"
                        ],
                        "parametros": [
                            "target"
                        ]
                    },
                    {
                        "nombre": "home",
                        "sintaxis": [
                            "classmethod Path.home()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_block_device",
                        "sintaxis": [
                            "Path.is_block_device()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_char_device",
                        "sintaxis": [
                            "Path.is_char_device()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_dir",
                        "sintaxis": [
                            "Path.is_dir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_fifo",
                        "sintaxis": [
                            "Path.is_fifo()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_file",
                        "sintaxis": [
                            "Path.is_file()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_mount",
                        "sintaxis": [
                            "Path.is_mount()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_socket",
                        "sintaxis": [
                            "Path.is_socket()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_symlink",
                        "sintaxis": [
                            "Path.is_symlink()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iterdir",
                        "sintaxis": [
                            "Path.iterdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lchmod",
                        "sintaxis": [
                            "Path.lchmod(mode)"
                        ],
                        "parametros": [
                            "mode"
                        ]
                    },
                    {
                        "nombre": "link_to",
                        "sintaxis": [
                            "Path.link_to(target)"
                        ],
                        "parametros": [
                            "target"
                        ]
                    },
                    {
                        "nombre": "lstat",
                        "sintaxis": [
                            "Path.lstat()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "mkdir",
                        "sintaxis": [
                            "Path.mkdir(mode=511, parents=False, exist_ok=False)"
                        ],
                        "parametros": [
                            "mode",
                            "parents",
                            "exist_ok"
                        ]
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "Path.open(mode='r', buffering=- 1, encoding=None, errors=None, newline=None)"
                        ],
                        "parametros": [
                            "mode",
                            "errors",
                            "encoding",
                            "buffering",
                            "newline"
                        ]
                    },
                    {
                        "nombre": "owner",
                        "sintaxis": [
                            "Path.owner()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readlink",
                        "sintaxis": [
                            "Path.readlink()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_bytes",
                        "sintaxis": [
                            "Path.read_bytes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_text",
                        "sintaxis": [
                            "Path.read_text(encoding=None, errors=None)"
                        ],
                        "parametros": [
                            "encoding",
                            "errors"
                        ]
                    },
                    {
                        "nombre": "rename",
                        "sintaxis": [
                            "Path.rename(target)"
                        ],
                        "parametros": [
                            "target"
                        ]
                    },
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "Path.replace(target)"
                        ],
                        "parametros": [
                            "target"
                        ]
                    },
                    {
                        "nombre": "resolve",
                        "sintaxis": [
                            "Path.resolve(strict=False)"
                        ],
                        "parametros": [
                            "strict"
                        ]
                    },
                    {
                        "nombre": "rglob",
                        "sintaxis": [
                            "Path.rglob(pattern)"
                        ],
                        "parametros": [
                            "pattern"
                        ]
                    },
                    {
                        "nombre": "rmdir",
                        "sintaxis": [
                            "Path.rmdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "samefile",
                        "sintaxis": [
                            "Path.samefile(other_path)"
                        ],
                        "parametros": [
                            "other_path"
                        ]
                    },
                    {
                        "nombre": "stat",
                        "sintaxis": [
                            "Path.stat(*, follow_symlinks=True)"
                        ],
                        "parametros": [
                            "*",
                            "follow_symlinks"
                        ]
                    },
                    {
                        "nombre": "symlink_to",
                        "sintaxis": [
                            "Path.symlink_to(target, target_is_directory=False)"
                        ],
                        "parametros": [
                            "target_is_directory",
                            "target"
                        ]
                    },
                    {
                        "nombre": "touch",
                        "sintaxis": [
                            "Path.touch(mode=438, exist_ok=True)"
                        ],
                        "parametros": [
                            "mode",
                            "exist_ok"
                        ]
                    },
                    {
                        "nombre": "unlink",
                        "sintaxis": [
                            "Path.unlink(missing_ok=False)"
                        ],
                        "parametros": [
                            "missing_ok"
                        ]
                    },
                    {
                        "nombre": "write_bytes",
                        "sintaxis": [
                            "Path.write_bytes(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "write_text",
                        "sintaxis": [
                            "Path.write_text(data, encoding=None, errors=None, newline=None)"
                        ],
                        "parametros": [
                            "encoding",
                            "newline",
                            "errors",
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Path"
                ]
            },
            {
                "nombre": "PosixPath",
                "constructores": [
                    {
                        "nombre": "PosixPath",
                        "sintaxis": [
                            "class pathlib.PosixPath(*pathsegments)"
                        ],
                        "parametros": [
                            "pathsegments"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PosixPath"
                ]
            },
            {
                "nombre": "PurePath",
                "constructores": [
                    {
                        "nombre": "PurePath",
                        "sintaxis": [
                            "class pathlib.PurePath(*pathsegments)"
                        ],
                        "parametros": [
                            "pathsegments"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "as_posix",
                        "sintaxis": [
                            "PurePath.as_posix()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "as_uri",
                        "sintaxis": [
                            "PurePath.as_uri()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_absolute",
                        "sintaxis": [
                            "PurePath.is_absolute()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_relative_to",
                        "sintaxis": [
                            "PurePath.is_relative_to(*other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "is_reserved",
                        "sintaxis": [
                            "PurePath.is_reserved()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "joinpath",
                        "sintaxis": [
                            "PurePath.joinpath(*other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "match",
                        "sintaxis": [
                            "PurePath.match(pattern)"
                        ],
                        "parametros": [
                            "pattern"
                        ]
                    },
                    {
                        "nombre": "relative_to",
                        "sintaxis": [
                            "PurePath.relative_to(*other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "with_name",
                        "sintaxis": [
                            "PurePath.with_name(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "with_stem",
                        "sintaxis": [
                            "PurePath.with_stem(stem)"
                        ],
                        "parametros": [
                            "stem"
                        ]
                    },
                    {
                        "nombre": "with_suffix",
                        "sintaxis": [
                            "PurePath.with_suffix(suffix)"
                        ],
                        "parametros": [
                            "suffix"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PurePath"
                ]
            },
            {
                "nombre": "PurePosixPath",
                "constructores": [
                    {
                        "nombre": "PurePosixPath",
                        "sintaxis": [
                            "class pathlib.PurePosixPath(*pathsegments)"
                        ],
                        "parametros": [
                            "pathsegments"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PurePosixPath"
                ]
            },
            {
                "nombre": "PureWindowsPath",
                "constructores": [
                    {
                        "nombre": "PureWindowsPath",
                        "sintaxis": [
                            "class pathlib.PureWindowsPath(*pathsegments)"
                        ],
                        "parametros": [
                            "pathsegments"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PureWindowsPath"
                ]
            },
            {
                "nombre": "WindowsPath",
                "constructores": [
                    {
                        "nombre": "WindowsPath",
                        "sintaxis": [
                            "class pathlib.WindowsPath(*pathsegments)"
                        ],
                        "parametros": [
                            "pathsegments"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class WindowsPath"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "anchor",
                "sintaxis": [
                    "PurePath.anchor"
                ]
            },
            {
                "nombre": "drive",
                "sintaxis": [
                    "PurePath.drive"
                ]
            },
            {
                "nombre": "name",
                "sintaxis": [
                    "PurePath.name"
                ]
            },
            {
                "nombre": "parent",
                "sintaxis": [
                    "PurePath.parent"
                ]
            },
            {
                "nombre": "parents",
                "sintaxis": [
                    "PurePath.parents"
                ]
            },
            {
                "nombre": "parts",
                "sintaxis": [
                    "PurePath.parts"
                ]
            },
            {
                "nombre": "root",
                "sintaxis": [
                    "PurePath.root"
                ]
            },
            {
                "nombre": "stem",
                "sintaxis": [
                    "PurePath.stem"
                ]
            },
            {
                "nombre": "suffix",
                "sintaxis": [
                    "PurePath.suffix"
                ]
            },
            {
                "nombre": "suffixes",
                "sintaxis": [
                    "PurePath.suffixes"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "pdb",
        "funciones": [
            {
                "nombre": "pm",
                "sintaxis": [
                    "pdb.pm()"
                ],
                "parametros": []
            },
            {
                "nombre": "post_mortem",
                "sintaxis": [
                    "pdb.post_mortem(traceback=None)"
                ],
                "parametros": [
                    "traceback"
                ]
            },
            {
                "nombre": "run",
                "sintaxis": [
                    "pdb.run(statement, globals=None, locals=None)"
                ],
                "parametros": [
                    "globals",
                    "statement",
                    "locals"
                ]
            },
            {
                "nombre": "runcall",
                "sintaxis": [
                    "pdb.runcall(function, *args, **kwds)"
                ],
                "parametros": [
                    "args",
                    "kwds",
                    "function"
                ]
            },
            {
                "nombre": "runeval",
                "sintaxis": [
                    "pdb.runeval(expression, globals=None, locals=None)"
                ],
                "parametros": [
                    "globals",
                    "expression",
                    "locals"
                ]
            },
            {
                "nombre": "set_trace",
                "sintaxis": [
                    "pdb.set_trace(*, header=None)"
                ],
                "parametros": [
                    "*",
                    "header"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Pdb",
                "constructores": [
                    {
                        "nombre": "Pdb",
                        "sintaxis": [
                            "class pdb.Pdb(completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False, readrc=True)"
                        ],
                        "parametros": [
                            "stdout",
                            "stdin",
                            "completekey",
                            "nosigint",
                            "readrc",
                            "skip"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(statement, globals=None, locals=None)"
                        ],
                        "parametros": [
                            "globals",
                            "statement",
                            "locals"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Pdb"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "pickle",
        "funciones": [
            {
                "nombre": "dump",
                "sintaxis": [
                    "pickle.dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None)"
                ],
                "parametros": [
                    "protocol",
                    "buffer_callback",
                    "obj",
                    "*",
                    "fix_imports",
                    "file"
                ]
            },
            {
                "nombre": "dumps",
                "sintaxis": [
                    "pickle.dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None)"
                ],
                "parametros": [
                    "protocol",
                    "buffer_callback",
                    "obj",
                    "fix_imports",
                    "*"
                ]
            },
            {
                "nombre": "load",
                "sintaxis": [
                    "pickle.load(file, *, fix_imports=True, encoding='ASCII', errors='strict', buffers=None)"
                ],
                "parametros": [
                    "errors",
                    "encoding",
                    "*",
                    "fix_imports",
                    "buffers",
                    "file"
                ]
            },
            {
                "nombre": "loads",
                "sintaxis": [
                    "pickle.loads(data, /, *, fix_imports=True, encoding=\"ASCII\", errors=\"strict\", buffers=None)"
                ],
                "parametros": [
                    "/",
                    "encoding",
                    "errors",
                    "data",
                    "fix_imports",
                    "buffers",
                    "*"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "object",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "__getnewargs_ex__",
                        "sintaxis": [
                            "object.__getnewargs_ex__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__getnewargs__",
                        "sintaxis": [
                            "object.__getnewargs__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__getstate__",
                        "sintaxis": [
                            "object.__getstate__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__reduce_ex__",
                        "sintaxis": [
                            "object.__reduce_ex__(protocol)"
                        ],
                        "parametros": [
                            "protocol"
                        ]
                    },
                    {
                        "nombre": "__reduce__",
                        "sintaxis": [
                            "object.__reduce__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__setstate__",
                        "sintaxis": [
                            "object.__setstate__(state)"
                        ],
                        "parametros": [
                            "state"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class object"
                ]
            },
            {
                "nombre": "PickleBuffer",
                "constructores": [
                    {
                        "nombre": "PickleBuffer",
                        "sintaxis": [
                            "class pickle.PickleBuffer(buffer)"
                        ],
                        "parametros": [
                            "buffer"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "raw",
                        "sintaxis": [
                            "raw()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PickleBuffer"
                ]
            },
            {
                "nombre": "Pickler",
                "constructores": [
                    {
                        "nombre": "Pickler",
                        "sintaxis": [
                            "class pickle.Pickler(file, protocol=None, *, fix_imports=True, buffer_callback=None)"
                        ],
                        "parametros": [
                            "protocol",
                            "buffer_callback",
                            "*",
                            "fix_imports",
                            "file"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "dump",
                        "sintaxis": [
                            "dump(obj)"
                        ],
                        "parametros": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "persistent_id",
                        "sintaxis": [
                            "persistent_id(obj)"
                        ],
                        "parametros": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "reducer_override",
                        "sintaxis": [
                            "reducer_override(self, obj)"
                        ],
                        "parametros": [
                            "self",
                            "obj"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "dispatch_table",
                        "sintaxis": [
                            "dispatch_table"
                        ]
                    },
                    {
                        "nombre": "fast",
                        "sintaxis": [
                            "fast"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Pickler"
                ]
            },
            {
                "nombre": "Unpickler",
                "constructores": [
                    {
                        "nombre": "Unpickler",
                        "sintaxis": [
                            "class pickle.Unpickler(file, *, fix_imports=True, encoding='ASCII', errors='strict', buffers=None)"
                        ],
                        "parametros": [
                            "errors",
                            "encoding",
                            "*",
                            "fix_imports",
                            "buffers",
                            "file"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find_class",
                        "sintaxis": [
                            "find_class(module, name)"
                        ],
                        "parametros": [
                            "name",
                            "module"
                        ]
                    },
                    {
                        "nombre": "load",
                        "sintaxis": [
                            "load()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "persistent_load",
                        "sintaxis": [
                            "persistent_load(pid)"
                        ],
                        "parametros": [
                            "pid"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Unpickler"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "DEFAULT_PROTOCOL",
                "sintaxis": [
                    "pickle.DEFAULT_PROTOCOL"
                ]
            },
            {
                "nombre": "HIGHEST_PROTOCOL",
                "sintaxis": [
                    "pickle.HIGHEST_PROTOCOL"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "PickleError",
                "sintaxis": [
                    "exception pickle.PickleError"
                ]
            },
            {
                "nombre": "PicklingError",
                "sintaxis": [
                    "exception pickle.PicklingError"
                ]
            },
            {
                "nombre": "UnpicklingError",
                "sintaxis": [
                    "exception pickle.UnpicklingError"
                ]
            }
        ]
    },
    {
        "nombre": "pickletools",
        "funciones": [
            {
                "nombre": "dis",
                "sintaxis": [
                    "pickletools.dis(pickle, out=None, memo=None, indentlevel=4, annotate=0)"
                ],
                "parametros": [
                    "out",
                    "pickle",
                    "annotate",
                    "indentlevel",
                    "memo"
                ]
            },
            {
                "nombre": "genops",
                "sintaxis": [
                    "pickletools.genops(pickle)"
                ],
                "parametros": [
                    "pickle"
                ]
            },
            {
                "nombre": "optimize",
                "sintaxis": [
                    "pickletools.optimize(picklestring)"
                ],
                "parametros": [
                    "picklestring"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "pipes",
        "funciones": [],
        "clases": [
            {
                "nombre": "Template",
                "constructores": [
                    {
                        "nombre": "Template",
                        "sintaxis": [
                            "class pipes.Template"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "append",
                        "sintaxis": [
                            "Template.append(cmd, kind)"
                        ],
                        "parametros": [
                            "cmd",
                            "kind"
                        ]
                    },
                    {
                        "nombre": "clone",
                        "sintaxis": [
                            "Template.clone()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "Template.copy(infile, outfile)"
                        ],
                        "parametros": [
                            "infile",
                            "outfile"
                        ]
                    },
                    {
                        "nombre": "debug",
                        "sintaxis": [
                            "Template.debug(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "Template.open(file, mode)"
                        ],
                        "parametros": [
                            "mode",
                            "file"
                        ]
                    },
                    {
                        "nombre": "prepend",
                        "sintaxis": [
                            "Template.prepend(cmd, kind)"
                        ],
                        "parametros": [
                            "cmd",
                            "kind"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "Template.reset()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Template"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "pkgutil",
        "funciones": [
            {
                "nombre": "extend_path",
                "sintaxis": [
                    "pkgutil.extend_path(path, name)"
                ],
                "parametros": [
                    "name",
                    "path"
                ]
            },
            {
                "nombre": "find_loader",
                "sintaxis": [
                    "pkgutil.find_loader(fullname)"
                ],
                "parametros": [
                    "fullname"
                ]
            },
            {
                "nombre": "get_data",
                "sintaxis": [
                    "pkgutil.get_data(package, resource)"
                ],
                "parametros": [
                    "package",
                    "resource"
                ]
            },
            {
                "nombre": "get_importer",
                "sintaxis": [
                    "pkgutil.get_importer(path_item)"
                ],
                "parametros": [
                    "path_item"
                ]
            },
            {
                "nombre": "get_loader",
                "sintaxis": [
                    "pkgutil.get_loader(module_or_name)"
                ],
                "parametros": [
                    "module_or_name"
                ]
            },
            {
                "nombre": "iter_importers",
                "sintaxis": [
                    "pkgutil.iter_importers(fullname='')"
                ],
                "parametros": [
                    "fullname"
                ]
            },
            {
                "nombre": "iter_modules",
                "sintaxis": [
                    "pkgutil.iter_modules(path=None, prefix='')"
                ],
                "parametros": [
                    "prefix",
                    "path"
                ]
            },
            {
                "nombre": "resolve_name",
                "sintaxis": [
                    "pkgutil.resolve_name(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "walk_packages",
                "sintaxis": [
                    "pkgutil.walk_packages(path=None, prefix='', onerror=None)"
                ],
                "parametros": [
                    "prefix",
                    "path",
                    "onerror"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "ImpImporter",
                "constructores": [
                    {
                        "nombre": "ImpImporter",
                        "sintaxis": [
                            "class pkgutil.ImpImporter(dirname=None)"
                        ],
                        "parametros": [
                            "dirname"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ImpImporter"
                ]
            },
            {
                "nombre": "ImpLoader",
                "constructores": [
                    {
                        "nombre": "ImpLoader",
                        "sintaxis": [
                            "class pkgutil.ImpLoader(fullname, file, filename, etc)"
                        ],
                        "parametros": [
                            "filename",
                            "file",
                            "fullname",
                            "etc"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ImpLoader"
                ]
            },
            {
                "nombre": "ModuleInfo",
                "constructores": [
                    {
                        "nombre": "ModuleInfo",
                        "sintaxis": [
                            "class pkgutil.ModuleInfo(module_finder, name, ispkg)"
                        ],
                        "parametros": [
                            "ispkg",
                            "module_finder",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ModuleInfo"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "platform",
        "funciones": [
            {
                "nombre": "architecture",
                "sintaxis": [
                    "platform.architecture(executable=sys.executable, bits='', linkage='')"
                ],
                "parametros": [
                    "executable",
                    "bits",
                    "linkage"
                ]
            },
            {
                "nombre": "freedesktop_os_release",
                "sintaxis": [
                    "platform.freedesktop_os_release()"
                ],
                "parametros": []
            },
            {
                "nombre": "java_ver",
                "sintaxis": [
                    "platform.java_ver(release='', vendor='', vminfo='', '', '', osinfo='', '', '')"
                ],
                "parametros": [
                    "release",
                    "osinfo",
                    "vendor",
                    "vminfo"
                ]
            },
            {
                "nombre": "libc_ver",
                "sintaxis": [
                    "platform.libc_ver(executable=sys.executable, lib='', version='', chunksize=16384)"
                ],
                "parametros": [
                    "version",
                    "executable",
                    "chunksize",
                    "lib"
                ]
            },
            {
                "nombre": "machine",
                "sintaxis": [
                    "platform.machine()"
                ],
                "parametros": []
            },
            {
                "nombre": "mac_ver",
                "sintaxis": [
                    "platform.mac_ver(release='', versioninfo='', '', '', machine='')"
                ],
                "parametros": [
                    "release",
                    "machine",
                    "versioninfo"
                ]
            },
            {
                "nombre": "node",
                "sintaxis": [
                    "platform.node()"
                ],
                "parametros": []
            },
            {
                "nombre": "platform",
                "sintaxis": [
                    "platform.platform(aliased=0, terse=0)"
                ],
                "parametros": [
                    "aliased",
                    "terse"
                ]
            },
            {
                "nombre": "processor",
                "sintaxis": [
                    "platform.processor()"
                ],
                "parametros": []
            },
            {
                "nombre": "python_branch",
                "sintaxis": [
                    "platform.python_branch()"
                ],
                "parametros": []
            },
            {
                "nombre": "python_build",
                "sintaxis": [
                    "platform.python_build()"
                ],
                "parametros": []
            },
            {
                "nombre": "python_compiler",
                "sintaxis": [
                    "platform.python_compiler()"
                ],
                "parametros": []
            },
            {
                "nombre": "python_implementation",
                "sintaxis": [
                    "platform.python_implementation()"
                ],
                "parametros": []
            },
            {
                "nombre": "python_revision",
                "sintaxis": [
                    "platform.python_revision()"
                ],
                "parametros": []
            },
            {
                "nombre": "python_version",
                "sintaxis": [
                    "platform.python_version()"
                ],
                "parametros": []
            },
            {
                "nombre": "python_version_tuple",
                "sintaxis": [
                    "platform.python_version_tuple()"
                ],
                "parametros": []
            },
            {
                "nombre": "release",
                "sintaxis": [
                    "platform.release()"
                ],
                "parametros": []
            },
            {
                "nombre": "system",
                "sintaxis": [
                    "platform.system()"
                ],
                "parametros": []
            },
            {
                "nombre": "system_alias",
                "sintaxis": [
                    "platform.system_alias(system, release, version)"
                ],
                "parametros": [
                    "release",
                    "version",
                    "system"
                ]
            },
            {
                "nombre": "uname",
                "sintaxis": [
                    "platform.uname()"
                ],
                "parametros": []
            },
            {
                "nombre": "version",
                "sintaxis": [
                    "platform.version()"
                ],
                "parametros": []
            },
            {
                "nombre": "win32_edition",
                "sintaxis": [
                    "platform.win32_edition()"
                ],
                "parametros": []
            },
            {
                "nombre": "win32_is_iot",
                "sintaxis": [
                    "platform.win32_is_iot()"
                ],
                "parametros": []
            },
            {
                "nombre": "win32_ver",
                "sintaxis": [
                    "platform.win32_ver(release='', version='', csd='', ptype='')"
                ],
                "parametros": [
                    "release",
                    "ptype",
                    "version",
                    "csd"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "plistlib",
        "funciones": [
            {
                "nombre": "dump",
                "sintaxis": [
                    "plistlib.dump(value, fp, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)"
                ],
                "parametros": [
                    "sort_keys",
                    "fmt",
                    "value",
                    "skipkeys",
                    "*",
                    "fp"
                ]
            },
            {
                "nombre": "dumps",
                "sintaxis": [
                    "plistlib.dumps(value, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)"
                ],
                "parametros": [
                    "sort_keys",
                    "fmt",
                    "skipkeys",
                    "value",
                    "*"
                ]
            },
            {
                "nombre": "load",
                "sintaxis": [
                    "plistlib.load(fp, *, fmt=None, dict_type=dict)"
                ],
                "parametros": [
                    "dict_type",
                    "fmt",
                    "*",
                    "fp"
                ]
            },
            {
                "nombre": "loads",
                "sintaxis": [
                    "plistlib.loads(data, *, fmt=None, dict_type=dict)"
                ],
                "parametros": [
                    "dict_type",
                    "fmt",
                    "*",
                    "data"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "UID",
                "constructores": [
                    {
                        "nombre": "UID",
                        "sintaxis": [
                            "class plistlib.UID(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class UID"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "FMT_BINARY",
                "sintaxis": [
                    "plistlib.FMT_BINARY"
                ]
            },
            {
                "nombre": "FMT_XML",
                "sintaxis": [
                    "plistlib.FMT_XML"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "poplib",
        "funciones": [],
        "clases": [
            {
                "nombre": "POP3",
                "constructores": [
                    {
                        "nombre": "POP3",
                        "sintaxis": [
                            "class poplib.POP3(host, port=POP3_PORT[, timeout])"
                        ],
                        "parametros": [
                            "host",
                            "timeout",
                            "port"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "apop",
                        "sintaxis": [
                            "POP3.apop(user, secret)"
                        ],
                        "parametros": [
                            "secret",
                            "user"
                        ]
                    },
                    {
                        "nombre": "capa",
                        "sintaxis": [
                            "POP3.capa()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "dele",
                        "sintaxis": [
                            "POP3.dele(which)"
                        ],
                        "parametros": [
                            "which"
                        ]
                    },
                    {
                        "nombre": "getwelcome",
                        "sintaxis": [
                            "POP3.getwelcome()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "list",
                        "sintaxis": [
                            "POP3.list([which])"
                        ],
                        "parametros": [
                            "which"
                        ]
                    },
                    {
                        "nombre": "noop",
                        "sintaxis": [
                            "POP3.noop()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "pass_",
                        "sintaxis": [
                            "POP3.pass_(password)"
                        ],
                        "parametros": [
                            "password"
                        ]
                    },
                    {
                        "nombre": "quit",
                        "sintaxis": [
                            "POP3.quit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "retr",
                        "sintaxis": [
                            "POP3.retr(which)"
                        ],
                        "parametros": [
                            "which"
                        ]
                    },
                    {
                        "nombre": "rpop",
                        "sintaxis": [
                            "POP3.rpop(user)"
                        ],
                        "parametros": [
                            "user"
                        ]
                    },
                    {
                        "nombre": "rset",
                        "sintaxis": [
                            "POP3.rset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_debuglevel",
                        "sintaxis": [
                            "POP3.set_debuglevel(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "stat",
                        "sintaxis": [
                            "POP3.stat()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "stls",
                        "sintaxis": [
                            "POP3.stls(context=None)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "top",
                        "sintaxis": [
                            "POP3.top(which, howmuch)"
                        ],
                        "parametros": [
                            "howmuch",
                            "which"
                        ]
                    },
                    {
                        "nombre": "uidl",
                        "sintaxis": [
                            "POP3.uidl(which=None)"
                        ],
                        "parametros": [
                            "which"
                        ]
                    },
                    {
                        "nombre": "user",
                        "sintaxis": [
                            "POP3.user(username)"
                        ],
                        "parametros": [
                            "username"
                        ]
                    },
                    {
                        "nombre": "utf8",
                        "sintaxis": [
                            "POP3.utf8()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class POP3"
                ]
            },
            {
                "nombre": "POP3_SSL",
                "constructores": [
                    {
                        "nombre": "POP3_SSL",
                        "sintaxis": [
                            "class poplib.POP3_SSL(host, port=POP3_SSL_PORT, keyfile=None, certfile=None, timeout=None, context=None)"
                        ],
                        "parametros": [
                            "certfile",
                            "context",
                            "port",
                            "timeout",
                            "host",
                            "keyfile"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class POP3_SSL"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error_proto",
                "sintaxis": [
                    "exception poplib.error_proto"
                ]
            }
        ]
    },
    {
        "nombre": "posix",
        "funciones": [],
        "clases": [],
        "constantes": [
            {
                "nombre": "environ",
                "sintaxis": [
                    "posix.environ"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "pprint",
        "funciones": [
            {
                "nombre": "isreadable",
                "sintaxis": [
                    "pprint.isreadable(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "isrecursive",
                "sintaxis": [
                    "pprint.isrecursive(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "pformat",
                "sintaxis": [
                    "pprint.pformat(object, indent=1, width=80, depth=None, *, compact=False, sort_dicts=True, underscore_numbers=False)"
                ],
                "parametros": [
                    "compact",
                    "depth",
                    "indent",
                    "width",
                    "object",
                    "sort_dicts",
                    "underscore_numbers",
                    "*"
                ]
            },
            {
                "nombre": "pp",
                "sintaxis": [
                    "pprint.pp(object, *args, sort_dicts=False, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "sort_dicts",
                    "kwargs",
                    "object"
                ]
            },
            {
                "nombre": "pprint",
                "sintaxis": [
                    "pprint.pprint(object, stream=None, indent=1, width=80, depth=None, *, compact=False, sort_dicts=True, underscore_numbers=False)"
                ],
                "parametros": [
                    "compact",
                    "depth",
                    "indent",
                    "width",
                    "object",
                    "stream",
                    "sort_dicts",
                    "underscore_numbers",
                    "*"
                ]
            },
            {
                "nombre": "saferepr",
                "sintaxis": [
                    "pprint.saferepr(object)"
                ],
                "parametros": [
                    "object"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "PrettyPrinter",
                "constructores": [
                    {
                        "nombre": "PrettyPrinter",
                        "sintaxis": [
                            "class pprint.PrettyPrinter(indent=1, width=80, depth=None, stream=None, *, compact=False, sort_dicts=True, underscore_numbers=False)"
                        ],
                        "parametros": [
                            "compact",
                            "depth",
                            "indent",
                            "width",
                            "stream",
                            "sort_dicts",
                            "underscore_numbers",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "PrettyPrinter.format(object, context, maxlevels, level)"
                        ],
                        "parametros": [
                            "maxlevels",
                            "object",
                            "level",
                            "context"
                        ]
                    },
                    {
                        "nombre": "isreadable",
                        "sintaxis": [
                            "PrettyPrinter.isreadable(object)"
                        ],
                        "parametros": [
                            "object"
                        ]
                    },
                    {
                        "nombre": "isrecursive",
                        "sintaxis": [
                            "PrettyPrinter.isrecursive(object)"
                        ],
                        "parametros": [
                            "object"
                        ]
                    },
                    {
                        "nombre": "pformat",
                        "sintaxis": [
                            "PrettyPrinter.pformat(object)"
                        ],
                        "parametros": [
                            "object"
                        ]
                    },
                    {
                        "nombre": "pprint",
                        "sintaxis": [
                            "PrettyPrinter.pprint(object)"
                        ],
                        "parametros": [
                            "object"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PrettyPrinter"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "profile",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "pstats",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "pty",
        "funciones": [
            {
                "nombre": "fork",
                "sintaxis": [
                    "pty.fork()"
                ],
                "parametros": []
            },
            {
                "nombre": "openpty",
                "sintaxis": [
                    "pty.openpty()"
                ],
                "parametros": []
            },
            {
                "nombre": "spawn",
                "sintaxis": [
                    "pty.spawn(argv[, master_read[, stdin_read]])"
                ],
                "parametros": [
                    "master_read",
                    "argv",
                    "stdin_read"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "pwd",
        "funciones": [
            {
                "nombre": "getpwall",
                "sintaxis": [
                    "pwd.getpwall()"
                ],
                "parametros": []
            },
            {
                "nombre": "getpwnam",
                "sintaxis": [
                    "pwd.getpwnam(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "getpwuid",
                "sintaxis": [
                    "pwd.getpwuid(uid)"
                ],
                "parametros": [
                    "uid"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "py_compile",
        "funciones": [
            {
                "nombre": "compile",
                "sintaxis": [
                    "py_compile.compile(file, cfile=None, dfile=None, doraise=False, optimize=- 1, invalidation_mode=PycInvalidationMode.TIMESTAMP, quiet=0)"
                ],
                "parametros": [
                    "doraise",
                    "quiet",
                    "invalidation_mode",
                    "optimize",
                    "file",
                    "dfile",
                    "cfile"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "PycInvalidationMode",
                "constructores": [
                    {
                        "nombre": "PycInvalidationMode",
                        "sintaxis": [
                            "class py_compile.PycInvalidationMode"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "CHECKED_HASH",
                        "sintaxis": [
                            "CHECKED_HASH"
                        ]
                    },
                    {
                        "nombre": "TIMESTAMP",
                        "sintaxis": [
                            "TIMESTAMP"
                        ]
                    },
                    {
                        "nombre": "UNCHECKED_HASH",
                        "sintaxis": [
                            "UNCHECKED_HASH"
                        ]
                    }
                ],
                "sintaxis": [
                    "class PycInvalidationMode"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "PyCompileError",
                "sintaxis": [
                    "exception py_compile.PyCompileError"
                ]
            }
        ]
    },
    {
        "nombre": "pyclbr",
        "funciones": [
            {
                "nombre": "readmodule",
                "sintaxis": [
                    "pyclbr.readmodule(module, path=None)"
                ],
                "parametros": [
                    "path",
                    "module"
                ]
            },
            {
                "nombre": "readmodule_ex",
                "sintaxis": [
                    "pyclbr.readmodule_ex(module, path=None)"
                ],
                "parametros": [
                    "path",
                    "module"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Class",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "children",
                        "sintaxis": [
                            "Class.children"
                        ]
                    },
                    {
                        "nombre": "file",
                        "sintaxis": [
                            "Class.file"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "Class.lineno"
                        ]
                    },
                    {
                        "nombre": "methods",
                        "sintaxis": [
                            "Class.methods"
                        ]
                    },
                    {
                        "nombre": "module",
                        "sintaxis": [
                            "Class.module"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "Class.name"
                        ]
                    },
                    {
                        "nombre": "parent",
                        "sintaxis": [
                            "Class.parent"
                        ]
                    },
                    {
                        "nombre": "super",
                        "sintaxis": [
                            "Class.super"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Class"
                ]
            },
            {
                "nombre": "Function",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "children",
                        "sintaxis": [
                            "Function.children"
                        ]
                    },
                    {
                        "nombre": "file",
                        "sintaxis": [
                            "Function.file"
                        ]
                    },
                    {
                        "nombre": "is_async",
                        "sintaxis": [
                            "Function.is_async"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "Function.lineno"
                        ]
                    },
                    {
                        "nombre": "module",
                        "sintaxis": [
                            "Function.module"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "Function.name"
                        ]
                    },
                    {
                        "nombre": "parent",
                        "sintaxis": [
                            "Function.parent"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Function"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "pydoc",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "queue",
        "funciones": [],
        "clases": [
            {
                "nombre": "LifoQueue",
                "constructores": [
                    {
                        "nombre": "LifoQueue",
                        "sintaxis": [
                            "class queue.LifoQueue(maxsize=0)"
                        ],
                        "parametros": [
                            "maxsize"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LifoQueue"
                ]
            },
            {
                "nombre": "PriorityQueue",
                "constructores": [
                    {
                        "nombre": "PriorityQueue",
                        "sintaxis": [
                            "class queue.PriorityQueue(maxsize=0)"
                        ],
                        "parametros": [
                            "maxsize"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PriorityQueue"
                ]
            },
            {
                "nombre": "Queue",
                "constructores": [
                    {
                        "nombre": "Queue",
                        "sintaxis": [
                            "class queue.Queue(maxsize=0)"
                        ],
                        "parametros": [
                            "maxsize"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "empty",
                        "sintaxis": [
                            "Queue.empty()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "full",
                        "sintaxis": [
                            "Queue.full()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "Queue.get(block=True, timeout=None)"
                        ],
                        "parametros": [
                            "block",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "get_nowait",
                        "sintaxis": [
                            "Queue.get_nowait()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "Queue.join()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "put",
                        "sintaxis": [
                            "Queue.put(item, block=True, timeout=None)"
                        ],
                        "parametros": [
                            "block",
                            "timeout",
                            "item"
                        ]
                    },
                    {
                        "nombre": "put_nowait",
                        "sintaxis": [
                            "Queue.put_nowait(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "qsize",
                        "sintaxis": [
                            "Queue.qsize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "task_done",
                        "sintaxis": [
                            "Queue.task_done()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Queue"
                ]
            },
            {
                "nombre": "SimpleQueue",
                "constructores": [
                    {
                        "nombre": "SimpleQueue",
                        "sintaxis": [
                            "class queue.SimpleQueue"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "empty",
                        "sintaxis": [
                            "SimpleQueue.empty()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "SimpleQueue.get(block=True, timeout=None)"
                        ],
                        "parametros": [
                            "block",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "get_nowait",
                        "sintaxis": [
                            "SimpleQueue.get_nowait()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "put",
                        "sintaxis": [
                            "SimpleQueue.put(item, block=True, timeout=None)"
                        ],
                        "parametros": [
                            "block",
                            "timeout",
                            "item"
                        ]
                    },
                    {
                        "nombre": "put_nowait",
                        "sintaxis": [
                            "SimpleQueue.put_nowait(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "qsize",
                        "sintaxis": [
                            "SimpleQueue.qsize()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SimpleQueue"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Empty",
                "sintaxis": [
                    "exception queue.Empty"
                ]
            },
            {
                "nombre": "Full",
                "sintaxis": [
                    "exception queue.Full"
                ]
            }
        ]
    },
    {
        "nombre": "quopri",
        "funciones": [
            {
                "nombre": "decode",
                "sintaxis": [
                    "quopri.decode(input, output, header=False)"
                ],
                "parametros": [
                    "output",
                    "header",
                    "input"
                ]
            },
            {
                "nombre": "decodestring",
                "sintaxis": [
                    "quopri.decodestring(s, header=False)"
                ],
                "parametros": [
                    "s",
                    "header"
                ]
            },
            {
                "nombre": "encode",
                "sintaxis": [
                    "quopri.encode(input, output, quotetabs, header=False)"
                ],
                "parametros": [
                    "output",
                    "header",
                    "quotetabs",
                    "input"
                ]
            },
            {
                "nombre": "encodestring",
                "sintaxis": [
                    "quopri.encodestring(s, quotetabs=False, header=False)"
                ],
                "parametros": [
                    "s",
                    "quotetabs",
                    "header"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "random",
        "funciones": [
            {
                "nombre": "betavariate",
                "sintaxis": [
                    "random.betavariate(alpha, beta)"
                ],
                "parametros": [
                    "alpha",
                    "beta"
                ]
            },
            {
                "nombre": "choice",
                "sintaxis": [
                    "random.choice(seq)"
                ],
                "parametros": [
                    "seq"
                ]
            },
            {
                "nombre": "choices",
                "sintaxis": [
                    "random.choices(population, weights=None, *, cum_weights=None, k=1)"
                ],
                "parametros": [
                    "*",
                    "cum_weights",
                    "k",
                    "weights",
                    "population"
                ]
            },
            {
                "nombre": "expovariate",
                "sintaxis": [
                    "random.expovariate(lambd)"
                ],
                "parametros": [
                    "lambd"
                ]
            },
            {
                "nombre": "gammavariate",
                "sintaxis": [
                    "random.gammavariate(alpha, beta)"
                ],
                "parametros": [
                    "alpha",
                    "beta"
                ]
            },
            {
                "nombre": "gauss",
                "sintaxis": [
                    "random.gauss(mu, sigma)"
                ],
                "parametros": [
                    "mu",
                    "sigma"
                ]
            },
            {
                "nombre": "getrandbits",
                "sintaxis": [
                    "random.getrandbits(k)"
                ],
                "parametros": [
                    "k"
                ]
            },
            {
                "nombre": "getstate",
                "sintaxis": [
                    "random.getstate()"
                ],
                "parametros": []
            },
            {
                "nombre": "lognormvariate",
                "sintaxis": [
                    "random.lognormvariate(mu, sigma)"
                ],
                "parametros": [
                    "mu",
                    "sigma"
                ]
            },
            {
                "nombre": "normalvariate",
                "sintaxis": [
                    "random.normalvariate(mu, sigma)"
                ],
                "parametros": [
                    "mu",
                    "sigma"
                ]
            },
            {
                "nombre": "paretovariate",
                "sintaxis": [
                    "random.paretovariate(alpha)"
                ],
                "parametros": [
                    "alpha"
                ]
            },
            {
                "nombre": "randbytes",
                "sintaxis": [
                    "random.randbytes(n)"
                ],
                "parametros": [
                    "n"
                ]
            },
            {
                "nombre": "randint",
                "sintaxis": [
                    "random.randint(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "random",
                "sintaxis": [
                    "random.random()"
                ],
                "parametros": []
            },
            {
                "nombre": "randrange",
                "sintaxis": [
                    "random.randrange(stop)",
                    "random.randrange(start, stop[, step])"
                ],
                "parametros": [
                    "step",
                    "stop",
                    "start"
                ]
            },
            {
                "nombre": "sample",
                "sintaxis": [
                    "random.sample(population, k, *, counts=None)"
                ],
                "parametros": [
                    "population",
                    "counts",
                    "k",
                    "*"
                ]
            },
            {
                "nombre": "seed",
                "sintaxis": [
                    "random.seed(a=None, version=2)"
                ],
                "parametros": [
                    "version",
                    "a"
                ]
            },
            {
                "nombre": "setstate",
                "sintaxis": [
                    "random.setstate(state)"
                ],
                "parametros": [
                    "state"
                ]
            },
            {
                "nombre": "shuffle",
                "sintaxis": [
                    "random.shuffle(x[, random])"
                ],
                "parametros": [
                    "random",
                    "x"
                ]
            },
            {
                "nombre": "triangular",
                "sintaxis": [
                    "random.triangular(low, high, mode)"
                ],
                "parametros": [
                    "mode",
                    "high",
                    "low"
                ]
            },
            {
                "nombre": "uniform",
                "sintaxis": [
                    "random.uniform(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "vonmisesvariate",
                "sintaxis": [
                    "random.vonmisesvariate(mu, kappa)"
                ],
                "parametros": [
                    "mu",
                    "kappa"
                ]
            },
            {
                "nombre": "weibullvariate",
                "sintaxis": [
                    "random.weibullvariate(alpha, beta)"
                ],
                "parametros": [
                    "alpha",
                    "beta"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Random",
                "constructores": [
                    {
                        "nombre": "Random",
                        "sintaxis": [
                            "class random.Random([seed])"
                        ],
                        "parametros": [
                            "seed"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Random"
                ]
            },
            {
                "nombre": "SystemRandom",
                "constructores": [
                    {
                        "nombre": "SystemRandom",
                        "sintaxis": [
                            "class random.SystemRandom([seed])"
                        ],
                        "parametros": [
                            "seed"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SystemRandom"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "re",
        "funciones": [
            {
                "nombre": "compile",
                "sintaxis": [
                    "re.compile(pattern, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "pattern"
                ]
            },
            {
                "nombre": "escape",
                "sintaxis": [
                    "re.escape(pattern)"
                ],
                "parametros": [
                    "pattern"
                ]
            },
            {
                "nombre": "findall",
                "sintaxis": [
                    "re.findall(pattern, string, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "pattern",
                    "string"
                ]
            },
            {
                "nombre": "finditer",
                "sintaxis": [
                    "re.finditer(pattern, string, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "pattern",
                    "string"
                ]
            },
            {
                "nombre": "fullmatch",
                "sintaxis": [
                    "re.fullmatch(pattern, string, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "pattern",
                    "string"
                ]
            },
            {
                "nombre": "match",
                "sintaxis": [
                    "re.match(pattern, string, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "pattern",
                    "string"
                ]
            },
            {
                "nombre": "purge",
                "sintaxis": [
                    "re.purge()"
                ],
                "parametros": []
            },
            {
                "nombre": "search",
                "sintaxis": [
                    "re.search(pattern, string, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "pattern",
                    "string"
                ]
            },
            {
                "nombre": "split",
                "sintaxis": [
                    "re.split(pattern, string, maxsplit=0, flags=0)"
                ],
                "parametros": [
                    "maxsplit",
                    "flags",
                    "pattern",
                    "string"
                ]
            },
            {
                "nombre": "sub",
                "sintaxis": [
                    "re.sub(pattern, repl, string, count=0, flags=0)"
                ],
                "parametros": [
                    "count",
                    "flags",
                    "pattern",
                    "string",
                    "repl"
                ]
            },
            {
                "nombre": "subn",
                "sintaxis": [
                    "re.subn(pattern, repl, string, count=0, flags=0)"
                ],
                "parametros": [
                    "count",
                    "flags",
                    "pattern",
                    "string",
                    "repl"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Match",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "end",
                        "sintaxis": [
                            "Match.end([group])"
                        ],
                        "parametros": [
                            "group"
                        ]
                    },
                    {
                        "nombre": "expand",
                        "sintaxis": [
                            "Match.expand(template)"
                        ],
                        "parametros": [
                            "template"
                        ]
                    },
                    {
                        "nombre": "group",
                        "sintaxis": [
                            "Match.group([group1, ...])"
                        ],
                        "parametros": [
                            "group1",
                            "..."
                        ]
                    },
                    {
                        "nombre": "groupdict",
                        "sintaxis": [
                            "Match.groupdict(default=None)"
                        ],
                        "parametros": [
                            "default"
                        ]
                    },
                    {
                        "nombre": "groups",
                        "sintaxis": [
                            "Match.groups(default=None)"
                        ],
                        "parametros": [
                            "default"
                        ]
                    },
                    {
                        "nombre": "span",
                        "sintaxis": [
                            "Match.span([group])"
                        ],
                        "parametros": [
                            "group"
                        ]
                    },
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "Match.start([group])"
                        ],
                        "parametros": [
                            "group"
                        ]
                    },
                    {
                        "nombre": "__getitem__",
                        "sintaxis": [
                            "Match.__getitem__(g)"
                        ],
                        "parametros": [
                            "g"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "endpos",
                        "sintaxis": [
                            "Match.endpos"
                        ]
                    },
                    {
                        "nombre": "lastgroup",
                        "sintaxis": [
                            "Match.lastgroup"
                        ]
                    },
                    {
                        "nombre": "lastindex",
                        "sintaxis": [
                            "Match.lastindex"
                        ]
                    },
                    {
                        "nombre": "pos",
                        "sintaxis": [
                            "Match.pos"
                        ]
                    },
                    {
                        "nombre": "re",
                        "sintaxis": [
                            "Match.re"
                        ]
                    },
                    {
                        "nombre": "string",
                        "sintaxis": [
                            "Match.string"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Match"
                ]
            },
            {
                "nombre": "Pattern",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "findall",
                        "sintaxis": [
                            "Pattern.findall(string[, pos[, endpos]])"
                        ],
                        "parametros": [
                            "pos",
                            "string",
                            "endpos"
                        ]
                    },
                    {
                        "nombre": "finditer",
                        "sintaxis": [
                            "Pattern.finditer(string[, pos[, endpos]])"
                        ],
                        "parametros": [
                            "pos",
                            "string",
                            "endpos"
                        ]
                    },
                    {
                        "nombre": "fullmatch",
                        "sintaxis": [
                            "Pattern.fullmatch(string[, pos[, endpos]])"
                        ],
                        "parametros": [
                            "pos",
                            "string",
                            "endpos"
                        ]
                    },
                    {
                        "nombre": "match",
                        "sintaxis": [
                            "Pattern.match(string[, pos[, endpos]])"
                        ],
                        "parametros": [
                            "pos",
                            "string",
                            "endpos"
                        ]
                    },
                    {
                        "nombre": "search",
                        "sintaxis": [
                            "Pattern.search(string[, pos[, endpos]])"
                        ],
                        "parametros": [
                            "pos",
                            "string",
                            "endpos"
                        ]
                    },
                    {
                        "nombre": "split",
                        "sintaxis": [
                            "Pattern.split(string, maxsplit=0)"
                        ],
                        "parametros": [
                            "maxsplit",
                            "string"
                        ]
                    },
                    {
                        "nombre": "sub",
                        "sintaxis": [
                            "Pattern.sub(repl, string, count=0)"
                        ],
                        "parametros": [
                            "count",
                            "repl",
                            "string"
                        ]
                    },
                    {
                        "nombre": "subn",
                        "sintaxis": [
                            "Pattern.subn(repl, string, count=0)"
                        ],
                        "parametros": [
                            "count",
                            "repl",
                            "string"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "flags",
                        "sintaxis": [
                            "Pattern.flags"
                        ]
                    },
                    {
                        "nombre": "groupindex",
                        "sintaxis": [
                            "Pattern.groupindex"
                        ]
                    },
                    {
                        "nombre": "groups",
                        "sintaxis": [
                            "Pattern.groups"
                        ]
                    },
                    {
                        "nombre": "pattern",
                        "sintaxis": [
                            "Pattern.pattern"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Pattern"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "A",
                "sintaxis": [
                    "re.A"
                ]
            },
            {
                "nombre": "DEBUG",
                "sintaxis": [
                    "re.DEBUG"
                ]
            },
            {
                "nombre": "I",
                "sintaxis": [
                    "re.I"
                ]
            },
            {
                "nombre": "L",
                "sintaxis": [
                    "re.L"
                ]
            },
            {
                "nombre": "M",
                "sintaxis": [
                    "re.M"
                ]
            },
            {
                "nombre": "S",
                "sintaxis": [
                    "re.S"
                ]
            },
            {
                "nombre": "X",
                "sintaxis": [
                    "re.X"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception re.error(msg, pattern=None, pos=None)"
                ]
            }
        ]
    },
    {
        "nombre": "readline",
        "funciones": [
            {
                "nombre": "add_history",
                "sintaxis": [
                    "readline.add_history(line)"
                ],
                "parametros": [
                    "line"
                ]
            },
            {
                "nombre": "append_history_file",
                "sintaxis": [
                    "readline.append_history_file(nelements[, filename])"
                ],
                "parametros": [
                    "filename",
                    "nelements"
                ]
            },
            {
                "nombre": "clear_history",
                "sintaxis": [
                    "readline.clear_history()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_begidx",
                "sintaxis": [
                    "readline.get_begidx()",
                    "readline.get_endidx()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_completer",
                "sintaxis": [
                    "readline.get_completer()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_completion_type",
                "sintaxis": [
                    "readline.get_completion_type()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_current_history_length",
                "sintaxis": [
                    "readline.get_current_history_length()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_history_item",
                "sintaxis": [
                    "readline.get_history_item(index)"
                ],
                "parametros": [
                    "index"
                ]
            },
            {
                "nombre": "get_history_length",
                "sintaxis": [
                    "readline.get_history_length()",
                    "readline.set_history_length(length)"
                ],
                "parametros": [
                    "length"
                ]
            },
            {
                "nombre": "get_line_buffer",
                "sintaxis": [
                    "readline.get_line_buffer()"
                ],
                "parametros": []
            },
            {
                "nombre": "insert_text",
                "sintaxis": [
                    "readline.insert_text(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "parse_and_bind",
                "sintaxis": [
                    "readline.parse_and_bind(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "read_history_file",
                "sintaxis": [
                    "readline.read_history_file([filename])"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "read_init_file",
                "sintaxis": [
                    "readline.read_init_file([filename])"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "redisplay",
                "sintaxis": [
                    "readline.redisplay()"
                ],
                "parametros": []
            },
            {
                "nombre": "remove_history_item",
                "sintaxis": [
                    "readline.remove_history_item(pos)"
                ],
                "parametros": [
                    "pos"
                ]
            },
            {
                "nombre": "replace_history_item",
                "sintaxis": [
                    "readline.replace_history_item(pos, line)"
                ],
                "parametros": [
                    "line",
                    "pos"
                ]
            },
            {
                "nombre": "set_auto_history",
                "sintaxis": [
                    "readline.set_auto_history(enabled)"
                ],
                "parametros": [
                    "enabled"
                ]
            },
            {
                "nombre": "set_completer",
                "sintaxis": [
                    "readline.set_completer([function])"
                ],
                "parametros": [
                    "function"
                ]
            },
            {
                "nombre": "set_completer_delims",
                "sintaxis": [
                    "readline.set_completer_delims(string)",
                    "readline.get_completer_delims()"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "set_completion_display_matches_hook",
                "sintaxis": [
                    "readline.set_completion_display_matches_hook([function])"
                ],
                "parametros": [
                    "function"
                ]
            },
            {
                "nombre": "set_pre_input_hook",
                "sintaxis": [
                    "readline.set_pre_input_hook([function])"
                ],
                "parametros": [
                    "function"
                ]
            },
            {
                "nombre": "set_startup_hook",
                "sintaxis": [
                    "readline.set_startup_hook([function])"
                ],
                "parametros": [
                    "function"
                ]
            },
            {
                "nombre": "write_history_file",
                "sintaxis": [
                    "readline.write_history_file([filename])"
                ],
                "parametros": [
                    "filename"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "reprlib",
        "funciones": [
            {
                "nombre": "recursive_repr",
                "sintaxis": [
                    "@reprlib.recursive_repr(fillvalue='...')"
                ],
                "parametros": [
                    "fillvalue"
                ]
            },
            {
                "nombre": "repr",
                "sintaxis": [
                    "reprlib.repr(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Repr",
                "constructores": [
                    {
                        "nombre": "Repr",
                        "sintaxis": [
                            "class reprlib.Repr"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "repr",
                        "sintaxis": [
                            "Repr.repr(obj)"
                        ],
                        "parametros": [
                            "obj"
                        ]
                    },
                    {
                        "nombre": "repr1",
                        "sintaxis": [
                            "Repr.repr1(obj, level)"
                        ],
                        "parametros": [
                            "obj",
                            "level"
                        ]
                    },
                    {
                        "nombre": "repr_TYPE",
                        "sintaxis": [
                            "Repr.repr_TYPE(obj, level)"
                        ],
                        "parametros": [
                            "obj",
                            "level"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "maxdict",
                        "sintaxis": [
                            "Repr.maxdict"
                        ]
                    },
                    {
                        "nombre": "maxlevel",
                        "sintaxis": [
                            "Repr.maxlevel"
                        ]
                    },
                    {
                        "nombre": "maxlong",
                        "sintaxis": [
                            "Repr.maxlong"
                        ]
                    },
                    {
                        "nombre": "maxother",
                        "sintaxis": [
                            "Repr.maxother"
                        ]
                    },
                    {
                        "nombre": "maxstring",
                        "sintaxis": [
                            "Repr.maxstring"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Repr"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "aRepr",
                "sintaxis": [
                    "reprlib.aRepr"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "resource",
        "funciones": [
            {
                "nombre": "getpagesize",
                "sintaxis": [
                    "resource.getpagesize()"
                ],
                "parametros": []
            },
            {
                "nombre": "getrlimit",
                "sintaxis": [
                    "resource.getrlimit(resource)"
                ],
                "parametros": [
                    "resource"
                ]
            },
            {
                "nombre": "getrusage",
                "sintaxis": [
                    "resource.getrusage(who)"
                ],
                "parametros": [
                    "who"
                ]
            },
            {
                "nombre": "prlimit",
                "sintaxis": [
                    "resource.prlimit(pid, resource[, limits])"
                ],
                "parametros": [
                    "pid",
                    "limits",
                    "resource"
                ]
            },
            {
                "nombre": "setrlimit",
                "sintaxis": [
                    "resource.setrlimit(resource, limits)"
                ],
                "parametros": [
                    "limits",
                    "resource"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "RLIMIT_AS",
                "sintaxis": [
                    "resource.RLIMIT_AS"
                ]
            },
            {
                "nombre": "RLIMIT_CORE",
                "sintaxis": [
                    "resource.RLIMIT_CORE"
                ]
            },
            {
                "nombre": "RLIMIT_CPU",
                "sintaxis": [
                    "resource.RLIMIT_CPU"
                ]
            },
            {
                "nombre": "RLIMIT_DATA",
                "sintaxis": [
                    "resource.RLIMIT_DATA"
                ]
            },
            {
                "nombre": "RLIMIT_FSIZE",
                "sintaxis": [
                    "resource.RLIMIT_FSIZE"
                ]
            },
            {
                "nombre": "RLIMIT_KQUEUES",
                "sintaxis": [
                    "resource.RLIMIT_KQUEUES"
                ]
            },
            {
                "nombre": "RLIMIT_MEMLOCK",
                "sintaxis": [
                    "resource.RLIMIT_MEMLOCK"
                ]
            },
            {
                "nombre": "RLIMIT_MSGQUEUE",
                "sintaxis": [
                    "resource.RLIMIT_MSGQUEUE"
                ]
            },
            {
                "nombre": "RLIMIT_NICE",
                "sintaxis": [
                    "resource.RLIMIT_NICE"
                ]
            },
            {
                "nombre": "RLIMIT_NOFILE",
                "sintaxis": [
                    "resource.RLIMIT_NOFILE"
                ]
            },
            {
                "nombre": "RLIMIT_NPROC",
                "sintaxis": [
                    "resource.RLIMIT_NPROC"
                ]
            },
            {
                "nombre": "RLIMIT_NPTS",
                "sintaxis": [
                    "resource.RLIMIT_NPTS"
                ]
            },
            {
                "nombre": "RLIMIT_OFILE",
                "sintaxis": [
                    "resource.RLIMIT_OFILE"
                ]
            },
            {
                "nombre": "RLIMIT_RSS",
                "sintaxis": [
                    "resource.RLIMIT_RSS"
                ]
            },
            {
                "nombre": "RLIMIT_RTPRIO",
                "sintaxis": [
                    "resource.RLIMIT_RTPRIO"
                ]
            },
            {
                "nombre": "RLIMIT_RTTIME",
                "sintaxis": [
                    "resource.RLIMIT_RTTIME"
                ]
            },
            {
                "nombre": "RLIMIT_SBSIZE",
                "sintaxis": [
                    "resource.RLIMIT_SBSIZE"
                ]
            },
            {
                "nombre": "RLIMIT_SIGPENDING",
                "sintaxis": [
                    "resource.RLIMIT_SIGPENDING"
                ]
            },
            {
                "nombre": "RLIMIT_STACK",
                "sintaxis": [
                    "resource.RLIMIT_STACK"
                ]
            },
            {
                "nombre": "RLIMIT_SWAP",
                "sintaxis": [
                    "resource.RLIMIT_SWAP"
                ]
            },
            {
                "nombre": "RLIMIT_VMEM",
                "sintaxis": [
                    "resource.RLIMIT_VMEM"
                ]
            },
            {
                "nombre": "RLIM_INFINITY",
                "sintaxis": [
                    "resource.RLIM_INFINITY"
                ]
            },
            {
                "nombre": "RUSAGE_BOTH",
                "sintaxis": [
                    "resource.RUSAGE_BOTH"
                ]
            },
            {
                "nombre": "RUSAGE_CHILDREN",
                "sintaxis": [
                    "resource.RUSAGE_CHILDREN"
                ]
            },
            {
                "nombre": "RUSAGE_SELF",
                "sintaxis": [
                    "resource.RUSAGE_SELF"
                ]
            },
            {
                "nombre": "RUSAGE_THREAD",
                "sintaxis": [
                    "resource.RUSAGE_THREAD"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception resource.error"
                ]
            }
        ]
    },
    {
        "nombre": "rlcompleter",
        "funciones": [],
        "clases": [
            {
                "nombre": "Completer",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "complete",
                        "sintaxis": [
                            "Completer.complete(text, state)"
                        ],
                        "parametros": [
                            "state",
                            "text"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Completer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "runpy",
        "funciones": [
            {
                "nombre": "run_module",
                "sintaxis": [
                    "runpy.run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)"
                ],
                "parametros": [
                    "run_name",
                    "init_globals",
                    "alter_sys",
                    "mod_name"
                ]
            },
            {
                "nombre": "run_path",
                "sintaxis": [
                    "runpy.run_path(file_path, init_globals=None, run_name=None)"
                ],
                "parametros": [
                    "run_name",
                    "file_path",
                    "init_globals"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "sched",
        "funciones": [],
        "clases": [
            {
                "nombre": "scheduler",
                "constructores": [
                    {
                        "nombre": "scheduler",
                        "sintaxis": [
                            "class sched.scheduler(timefunc=time.monotonic, delayfunc=time.sleep)"
                        ],
                        "parametros": [
                            "timefunc",
                            "delayfunc"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cancel",
                        "sintaxis": [
                            "scheduler.cancel(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "empty",
                        "sintaxis": [
                            "scheduler.empty()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "enter",
                        "sintaxis": [
                            "scheduler.enter(delay, priority, action, argument=(), kwargs={})"
                        ],
                        "parametros": [
                            "kwargs",
                            "argument",
                            "priority",
                            "action",
                            "delay"
                        ]
                    },
                    {
                        "nombre": "enterabs",
                        "sintaxis": [
                            "scheduler.enterabs(time, priority, action, argument=(), kwargs={})"
                        ],
                        "parametros": [
                            "kwargs",
                            "argument",
                            "time",
                            "priority",
                            "action"
                        ]
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "scheduler.run(blocking=True)"
                        ],
                        "parametros": [
                            "blocking"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "queue",
                        "sintaxis": [
                            "scheduler.queue"
                        ]
                    }
                ],
                "sintaxis": [
                    "class scheduler"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "secrets",
        "funciones": [
            {
                "nombre": "choice",
                "sintaxis": [
                    "secrets.choice(sequence)"
                ],
                "parametros": [
                    "sequence"
                ]
            },
            {
                "nombre": "compare_digest",
                "sintaxis": [
                    "secrets.compare_digest(a, b)"
                ],
                "parametros": [
                    "b",
                    "a"
                ]
            },
            {
                "nombre": "randbelow",
                "sintaxis": [
                    "secrets.randbelow(n)"
                ],
                "parametros": [
                    "n"
                ]
            },
            {
                "nombre": "randbits",
                "sintaxis": [
                    "secrets.randbits(k)"
                ],
                "parametros": [
                    "k"
                ]
            },
            {
                "nombre": "token_bytes",
                "sintaxis": [
                    "secrets.token_bytes([nbytes=None])"
                ],
                "parametros": [
                    "nbytes"
                ]
            },
            {
                "nombre": "token_hex",
                "sintaxis": [
                    "secrets.token_hex([nbytes=None])"
                ],
                "parametros": [
                    "nbytes"
                ]
            },
            {
                "nombre": "token_urlsafe",
                "sintaxis": [
                    "secrets.token_urlsafe([nbytes=None])"
                ],
                "parametros": [
                    "nbytes"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "SystemRandom",
                "constructores": [
                    {
                        "nombre": "SystemRandom",
                        "sintaxis": [
                            "class secrets.SystemRandom"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SystemRandom"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "select",
        "funciones": [
            {
                "nombre": "devpoll",
                "sintaxis": [
                    "select.devpoll()"
                ],
                "parametros": []
            },
            {
                "nombre": "epoll",
                "sintaxis": [
                    "select.epoll(sizehint=- 1, flags=0)"
                ],
                "parametros": [
                    "sizehint",
                    "flags"
                ]
            },
            {
                "nombre": "kevent",
                "sintaxis": [
                    "select.kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD, fflags=0, data=0, udata=0)"
                ],
                "parametros": [
                    "udata",
                    "ident",
                    "flags",
                    "data",
                    "filter",
                    "fflags"
                ]
            },
            {
                "nombre": "kqueue",
                "sintaxis": [
                    "select.kqueue()"
                ],
                "parametros": []
            },
            {
                "nombre": "poll",
                "sintaxis": [
                    "select.poll()"
                ],
                "parametros": []
            },
            {
                "nombre": "select",
                "sintaxis": [
                    "select.select(rlist, wlist, xlist[, timeout])"
                ],
                "parametros": [
                    "rlist",
                    "timeout",
                    "xlist",
                    "wlist"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "devpoll",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "devpoll.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "devpoll.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "modify",
                        "sintaxis": [
                            "devpoll.modify(fd[, eventmask])"
                        ],
                        "parametros": [
                            "fd",
                            "eventmask"
                        ]
                    },
                    {
                        "nombre": "poll",
                        "sintaxis": [
                            "devpoll.poll([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "register",
                        "sintaxis": [
                            "devpoll.register(fd[, eventmask])"
                        ],
                        "parametros": [
                            "fd",
                            "eventmask"
                        ]
                    },
                    {
                        "nombre": "unregister",
                        "sintaxis": [
                            "devpoll.unregister(fd)"
                        ],
                        "parametros": [
                            "fd"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "closed",
                        "sintaxis": [
                            "devpoll.closed"
                        ]
                    }
                ],
                "sintaxis": [
                    "class devpoll"
                ]
            },
            {
                "nombre": "epoll",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "epoll.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "epoll.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromfd",
                        "sintaxis": [
                            "epoll.fromfd(fd)"
                        ],
                        "parametros": [
                            "fd"
                        ]
                    },
                    {
                        "nombre": "modify",
                        "sintaxis": [
                            "epoll.modify(fd, eventmask)"
                        ],
                        "parametros": [
                            "fd",
                            "eventmask"
                        ]
                    },
                    {
                        "nombre": "poll",
                        "sintaxis": [
                            "epoll.poll(timeout=None, maxevents=- 1)"
                        ],
                        "parametros": [
                            "maxevents",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "register",
                        "sintaxis": [
                            "epoll.register(fd[, eventmask])"
                        ],
                        "parametros": [
                            "fd",
                            "eventmask"
                        ]
                    },
                    {
                        "nombre": "unregister",
                        "sintaxis": [
                            "epoll.unregister(fd)"
                        ],
                        "parametros": [
                            "fd"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "closed",
                        "sintaxis": [
                            "epoll.closed"
                        ]
                    }
                ],
                "sintaxis": [
                    "class epoll"
                ]
            },
            {
                "nombre": "kevent",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "kevent.data"
                        ]
                    },
                    {
                        "nombre": "fflags",
                        "sintaxis": [
                            "kevent.fflags"
                        ]
                    },
                    {
                        "nombre": "filter",
                        "sintaxis": [
                            "kevent.filter"
                        ]
                    },
                    {
                        "nombre": "flags",
                        "sintaxis": [
                            "kevent.flags"
                        ]
                    },
                    {
                        "nombre": "ident",
                        "sintaxis": [
                            "kevent.ident"
                        ]
                    },
                    {
                        "nombre": "udata",
                        "sintaxis": [
                            "kevent.udata"
                        ]
                    }
                ],
                "sintaxis": [
                    "class kevent"
                ]
            },
            {
                "nombre": "kqueue",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "kqueue.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "control",
                        "sintaxis": [
                            "kqueue.control(changelist, max_events[, timeout]) \u2192 eventlist"
                        ],
                        "parametros": [
                            "timeout",
                            "changelist",
                            "max_events"
                        ]
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "kqueue.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fromfd",
                        "sintaxis": [
                            "kqueue.fromfd(fd)"
                        ],
                        "parametros": [
                            "fd"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "closed",
                        "sintaxis": [
                            "kqueue.closed"
                        ]
                    }
                ],
                "sintaxis": [
                    "class kqueue"
                ]
            },
            {
                "nombre": "poll",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "modify",
                        "sintaxis": [
                            "poll.modify(fd, eventmask)"
                        ],
                        "parametros": [
                            "fd",
                            "eventmask"
                        ]
                    },
                    {
                        "nombre": "poll",
                        "sintaxis": [
                            "poll.poll([timeout])"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "register",
                        "sintaxis": [
                            "poll.register(fd[, eventmask])"
                        ],
                        "parametros": [
                            "fd",
                            "eventmask"
                        ]
                    },
                    {
                        "nombre": "unregister",
                        "sintaxis": [
                            "poll.unregister(fd)"
                        ],
                        "parametros": [
                            "fd"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class poll"
                ]
            },
            {
                "nombre": "select",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "PIPE_BUF",
                        "sintaxis": [
                            "select.PIPE_BUF"
                        ]
                    }
                ],
                "sintaxis": [
                    "class select"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception select.error"
                ]
            }
        ]
    },
    {
        "nombre": "selectors",
        "funciones": [],
        "clases": [
            {
                "nombre": "BaseSelector",
                "constructores": [
                    {
                        "nombre": "BaseSelector",
                        "sintaxis": [
                            "class selectors.BaseSelector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_key",
                        "sintaxis": [
                            "get_key(fileobj)"
                        ],
                        "parametros": [
                            "fileobj"
                        ]
                    },
                    {
                        "nombre": "get_map",
                        "sintaxis": [
                            "abstractmethod get_map()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "modify",
                        "sintaxis": [
                            "modify(fileobj, events, data=None)"
                        ],
                        "parametros": [
                            "fileobj",
                            "events",
                            "data"
                        ]
                    },
                    {
                        "nombre": "register",
                        "sintaxis": [
                            "abstractmethod register(fileobj, events, data=None)"
                        ],
                        "parametros": [
                            "fileobj",
                            "events",
                            "data"
                        ]
                    },
                    {
                        "nombre": "select",
                        "sintaxis": [
                            "abstractmethod select(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "unregister",
                        "sintaxis": [
                            "abstractmethod unregister(fileobj)"
                        ],
                        "parametros": [
                            "fileobj"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BaseSelector"
                ]
            },
            {
                "nombre": "DefaultSelector",
                "constructores": [
                    {
                        "nombre": "DefaultSelector",
                        "sintaxis": [
                            "class selectors.DefaultSelector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DefaultSelector"
                ]
            },
            {
                "nombre": "DevpollSelector",
                "constructores": [
                    {
                        "nombre": "DevpollSelector",
                        "sintaxis": [
                            "class selectors.DevpollSelector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "fileno()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DevpollSelector"
                ]
            },
            {
                "nombre": "EpollSelector",
                "constructores": [
                    {
                        "nombre": "EpollSelector",
                        "sintaxis": [
                            "class selectors.EpollSelector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "fileno()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class EpollSelector"
                ]
            },
            {
                "nombre": "KqueueSelector",
                "constructores": [
                    {
                        "nombre": "KqueueSelector",
                        "sintaxis": [
                            "class selectors.KqueueSelector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "fileno()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class KqueueSelector"
                ]
            },
            {
                "nombre": "PollSelector",
                "constructores": [
                    {
                        "nombre": "PollSelector",
                        "sintaxis": [
                            "class selectors.PollSelector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PollSelector"
                ]
            },
            {
                "nombre": "SelectorKey",
                "constructores": [
                    {
                        "nombre": "SelectorKey",
                        "sintaxis": [
                            "class selectors.SelectorKey"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "events",
                        "sintaxis": [
                            "events"
                        ]
                    },
                    {
                        "nombre": "fd",
                        "sintaxis": [
                            "fd"
                        ]
                    },
                    {
                        "nombre": "fileobj",
                        "sintaxis": [
                            "fileobj"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SelectorKey"
                ]
            },
            {
                "nombre": "SelectSelector",
                "constructores": [
                    {
                        "nombre": "SelectSelector",
                        "sintaxis": [
                            "class selectors.SelectSelector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SelectSelector"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "shelve",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "shelve.open(filename, flag='c', protocol=None, writeback=False)"
                ],
                "parametros": [
                    "filename",
                    "flag",
                    "writeback",
                    "protocol"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BsdDbShelf",
                "constructores": [
                    {
                        "nombre": "BsdDbShelf",
                        "sintaxis": [
                            "class shelve.BsdDbShelf(dict, protocol=None, writeback=False, keyencoding='utf-8')"
                        ],
                        "parametros": [
                            "writeback",
                            "keyencoding",
                            "dict",
                            "protocol"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BsdDbShelf"
                ]
            },
            {
                "nombre": "DbfilenameShelf",
                "constructores": [
                    {
                        "nombre": "DbfilenameShelf",
                        "sintaxis": [
                            "class shelve.DbfilenameShelf(filename, flag='c', protocol=None, writeback=False)"
                        ],
                        "parametros": [
                            "filename",
                            "flag",
                            "writeback",
                            "protocol"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DbfilenameShelf"
                ]
            },
            {
                "nombre": "Shelf",
                "constructores": [
                    {
                        "nombre": "Shelf",
                        "sintaxis": [
                            "class shelve.Shelf(dict, protocol=None, writeback=False, keyencoding='utf-8')"
                        ],
                        "parametros": [
                            "writeback",
                            "keyencoding",
                            "dict",
                            "protocol"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "Shelf.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sync",
                        "sintaxis": [
                            "Shelf.sync()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Shelf"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "shlex",
        "funciones": [
            {
                "nombre": "join",
                "sintaxis": [
                    "shlex.join(split_command)"
                ],
                "parametros": [
                    "split_command"
                ]
            },
            {
                "nombre": "quote",
                "sintaxis": [
                    "shlex.quote(s)"
                ],
                "parametros": [
                    "s"
                ]
            },
            {
                "nombre": "split",
                "sintaxis": [
                    "shlex.split(s, comments=False, posix=True)"
                ],
                "parametros": [
                    "s",
                    "comments",
                    "posix"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "shlex",
                "constructores": [
                    {
                        "nombre": "shlex",
                        "sintaxis": [
                            "class shlex.shlex(instream=None, infile=None, posix=False, punctuation_chars=False)"
                        ],
                        "parametros": [
                            "infile",
                            "instream",
                            "posix",
                            "punctuation_chars"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "error_leader",
                        "sintaxis": [
                            "shlex.error_leader(infile=None, lineno=None)"
                        ],
                        "parametros": [
                            "infile",
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "get_token",
                        "sintaxis": [
                            "shlex.get_token()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "pop_source",
                        "sintaxis": [
                            "shlex.pop_source()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "push_source",
                        "sintaxis": [
                            "shlex.push_source(newstream, newfile=None)"
                        ],
                        "parametros": [
                            "newfile",
                            "newstream"
                        ]
                    },
                    {
                        "nombre": "push_token",
                        "sintaxis": [
                            "shlex.push_token(str)"
                        ],
                        "parametros": [
                            "str"
                        ]
                    },
                    {
                        "nombre": "read_token",
                        "sintaxis": [
                            "shlex.read_token()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sourcehook",
                        "sintaxis": [
                            "shlex.sourcehook(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "commenters",
                        "sintaxis": [
                            "shlex.commenters"
                        ]
                    },
                    {
                        "nombre": "debug",
                        "sintaxis": [
                            "shlex.debug"
                        ]
                    },
                    {
                        "nombre": "eof",
                        "sintaxis": [
                            "shlex.eof"
                        ]
                    },
                    {
                        "nombre": "escape",
                        "sintaxis": [
                            "shlex.escape"
                        ]
                    },
                    {
                        "nombre": "escapedquotes",
                        "sintaxis": [
                            "shlex.escapedquotes"
                        ]
                    },
                    {
                        "nombre": "infile",
                        "sintaxis": [
                            "shlex.infile"
                        ]
                    },
                    {
                        "nombre": "instream",
                        "sintaxis": [
                            "shlex.instream"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "shlex.lineno"
                        ]
                    },
                    {
                        "nombre": "punctuation_chars",
                        "sintaxis": [
                            "shlex.punctuation_chars"
                        ]
                    },
                    {
                        "nombre": "quotes",
                        "sintaxis": [
                            "shlex.quotes"
                        ]
                    },
                    {
                        "nombre": "source",
                        "sintaxis": [
                            "shlex.source"
                        ]
                    },
                    {
                        "nombre": "token",
                        "sintaxis": [
                            "shlex.token"
                        ]
                    },
                    {
                        "nombre": "whitespace",
                        "sintaxis": [
                            "shlex.whitespace"
                        ]
                    },
                    {
                        "nombre": "whitespace_split",
                        "sintaxis": [
                            "shlex.whitespace_split"
                        ]
                    },
                    {
                        "nombre": "wordchars",
                        "sintaxis": [
                            "shlex.wordchars"
                        ]
                    }
                ],
                "sintaxis": [
                    "class shlex"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "shutil",
        "funciones": [
            {
                "nombre": "chown",
                "sintaxis": [
                    "shutil.chown(path, user=None, group=None)"
                ],
                "parametros": [
                    "group",
                    "user",
                    "path"
                ]
            },
            {
                "nombre": "copy",
                "sintaxis": [
                    "shutil.copy(src, dst, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "dst",
                    "*",
                    "follow_symlinks",
                    "src"
                ]
            },
            {
                "nombre": "copy2",
                "sintaxis": [
                    "shutil.copy2(src, dst, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "dst",
                    "*",
                    "follow_symlinks",
                    "src"
                ]
            },
            {
                "nombre": "copyfile",
                "sintaxis": [
                    "shutil.copyfile(src, dst, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "dst",
                    "*",
                    "follow_symlinks",
                    "src"
                ]
            },
            {
                "nombre": "copyfileobj",
                "sintaxis": [
                    "shutil.copyfileobj(fsrc, fdst[, length])"
                ],
                "parametros": [
                    "fdst",
                    "fsrc",
                    "length"
                ]
            },
            {
                "nombre": "copymode",
                "sintaxis": [
                    "shutil.copymode(src, dst, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "dst",
                    "*",
                    "follow_symlinks",
                    "src"
                ]
            },
            {
                "nombre": "copystat",
                "sintaxis": [
                    "shutil.copystat(src, dst, *, follow_symlinks=True)"
                ],
                "parametros": [
                    "dst",
                    "*",
                    "follow_symlinks",
                    "src"
                ]
            },
            {
                "nombre": "copytree",
                "sintaxis": [
                    "shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False, dirs_exist_ok=False)"
                ],
                "parametros": [
                    "ignore",
                    "dirs_exist_ok",
                    "copy_function",
                    "symlinks",
                    "ignore_dangling_symlinks",
                    "dst",
                    "src"
                ]
            },
            {
                "nombre": "disk_usage",
                "sintaxis": [
                    "shutil.disk_usage(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "get_archive_formats",
                "sintaxis": [
                    "shutil.get_archive_formats()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_terminal_size",
                "sintaxis": [
                    "shutil.get_terminal_size(fallback=columns, lines)"
                ],
                "parametros": [
                    "fallback"
                ]
            },
            {
                "nombre": "get_unpack_formats",
                "sintaxis": [
                    "shutil.get_unpack_formats()"
                ],
                "parametros": []
            },
            {
                "nombre": "ignore_patterns",
                "sintaxis": [
                    "shutil.ignore_patterns(*patterns)"
                ],
                "parametros": [
                    "patterns"
                ]
            },
            {
                "nombre": "make_archive",
                "sintaxis": [
                    "shutil.make_archive(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]])"
                ],
                "parametros": [
                    "format",
                    "base_dir",
                    "dry_run",
                    "logger",
                    "base_name",
                    "root_dir",
                    "owner",
                    "group",
                    "verbose"
                ]
            },
            {
                "nombre": "move",
                "sintaxis": [
                    "shutil.move(src, dst, copy_function=copy2)"
                ],
                "parametros": [
                    "dst",
                    "src",
                    "copy_function"
                ]
            },
            {
                "nombre": "register_archive_format",
                "sintaxis": [
                    "shutil.register_archive_format(name, function[, extra_args[, description]])"
                ],
                "parametros": [
                    "description",
                    "extra_args",
                    "name",
                    "function"
                ]
            },
            {
                "nombre": "register_unpack_format",
                "sintaxis": [
                    "shutil.register_unpack_format(name, extensions, function[, extra_args[, description]])"
                ],
                "parametros": [
                    "description",
                    "name",
                    "function",
                    "extensions",
                    "extra_args"
                ]
            },
            {
                "nombre": "rmtree",
                "sintaxis": [
                    "shutil.rmtree(path, ignore_errors=False, onerror=None)"
                ],
                "parametros": [
                    "ignore_errors",
                    "path",
                    "onerror"
                ]
            },
            {
                "nombre": "unpack_archive",
                "sintaxis": [
                    "shutil.unpack_archive(filename[, extract_dir[, format]])"
                ],
                "parametros": [
                    "extract_dir",
                    "filename",
                    "format"
                ]
            },
            {
                "nombre": "unregister_archive_format",
                "sintaxis": [
                    "shutil.unregister_archive_format(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "unregister_unpack_format",
                "sintaxis": [
                    "shutil.unregister_unpack_format(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "which",
                "sintaxis": [
                    "shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None)"
                ],
                "parametros": [
                    "mode",
                    "cmd",
                    "path"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "rmtree",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "avoids_symlink_attacks",
                        "sintaxis": [
                            "rmtree.avoids_symlink_attacks"
                        ]
                    }
                ],
                "sintaxis": [
                    "class rmtree"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception shutil.Error"
                ]
            },
            {
                "nombre": "SameFileError",
                "sintaxis": [
                    "exception shutil.SameFileError"
                ]
            }
        ]
    },
    {
        "nombre": "signal",
        "funciones": [
            {
                "nombre": "alarm",
                "sintaxis": [
                    "signal.alarm(time)"
                ],
                "parametros": [
                    "time"
                ]
            },
            {
                "nombre": "getitimer",
                "sintaxis": [
                    "signal.getitimer(which)"
                ],
                "parametros": [
                    "which"
                ]
            },
            {
                "nombre": "getsignal",
                "sintaxis": [
                    "signal.getsignal(signalnum)"
                ],
                "parametros": [
                    "signalnum"
                ]
            },
            {
                "nombre": "pause",
                "sintaxis": [
                    "signal.pause()"
                ],
                "parametros": []
            },
            {
                "nombre": "pidfd_send_signal",
                "sintaxis": [
                    "signal.pidfd_send_signal(pidfd, sig, siginfo=None, flags=0)"
                ],
                "parametros": [
                    "flags",
                    "sig",
                    "siginfo",
                    "pidfd"
                ]
            },
            {
                "nombre": "pthread_kill",
                "sintaxis": [
                    "signal.pthread_kill(thread_id, signalnum)"
                ],
                "parametros": [
                    "thread_id",
                    "signalnum"
                ]
            },
            {
                "nombre": "pthread_sigmask",
                "sintaxis": [
                    "signal.pthread_sigmask(how, mask)"
                ],
                "parametros": [
                    "how",
                    "mask"
                ]
            },
            {
                "nombre": "raise_signal",
                "sintaxis": [
                    "signal.raise_signal(signum)"
                ],
                "parametros": [
                    "signum"
                ]
            },
            {
                "nombre": "setitimer",
                "sintaxis": [
                    "signal.setitimer(which, seconds, interval=0.0)"
                ],
                "parametros": [
                    "seconds",
                    "interval",
                    "which"
                ]
            },
            {
                "nombre": "set_wakeup_fd",
                "sintaxis": [
                    "signal.set_wakeup_fd(fd, *, warn_on_full_buffer=True)"
                ],
                "parametros": [
                    "fd",
                    "*",
                    "warn_on_full_buffer"
                ]
            },
            {
                "nombre": "siginterrupt",
                "sintaxis": [
                    "signal.siginterrupt(signalnum, flag)"
                ],
                "parametros": [
                    "signalnum",
                    "flag"
                ]
            },
            {
                "nombre": "signal",
                "sintaxis": [
                    "signal.signal(signalnum, handler)"
                ],
                "parametros": [
                    "signalnum",
                    "handler"
                ]
            },
            {
                "nombre": "sigpending",
                "sintaxis": [
                    "signal.sigpending()"
                ],
                "parametros": []
            },
            {
                "nombre": "sigtimedwait",
                "sintaxis": [
                    "signal.sigtimedwait(sigset, timeout)"
                ],
                "parametros": [
                    "timeout",
                    "sigset"
                ]
            },
            {
                "nombre": "sigwait",
                "sintaxis": [
                    "signal.sigwait(sigset)"
                ],
                "parametros": [
                    "sigset"
                ]
            },
            {
                "nombre": "sigwaitinfo",
                "sintaxis": [
                    "signal.sigwaitinfo(sigset)"
                ],
                "parametros": [
                    "sigset"
                ]
            },
            {
                "nombre": "strsignal",
                "sintaxis": [
                    "signal.strsignal(signalnum)"
                ],
                "parametros": [
                    "signalnum"
                ]
            },
            {
                "nombre": "valid_signals",
                "sintaxis": [
                    "signal.valid_signals()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "CTRL_BREAK_EVENT",
                "sintaxis": [
                    "signal.CTRL_BREAK_EVENT"
                ]
            },
            {
                "nombre": "CTRL_C_EVENT",
                "sintaxis": [
                    "signal.CTRL_C_EVENT"
                ]
            },
            {
                "nombre": "ITIMER_PROF",
                "sintaxis": [
                    "signal.ITIMER_PROF"
                ]
            },
            {
                "nombre": "ITIMER_REAL",
                "sintaxis": [
                    "signal.ITIMER_REAL"
                ]
            },
            {
                "nombre": "ITIMER_VIRTUAL",
                "sintaxis": [
                    "signal.ITIMER_VIRTUAL"
                ]
            },
            {
                "nombre": "NSIG",
                "sintaxis": [
                    "signal.NSIG"
                ]
            },
            {
                "nombre": "SIG",
                "sintaxis": [
                    "SIG*"
                ]
            },
            {
                "nombre": "SIGABRT",
                "sintaxis": [
                    "signal.SIGABRT"
                ]
            },
            {
                "nombre": "SIGALRM",
                "sintaxis": [
                    "signal.SIGALRM"
                ]
            },
            {
                "nombre": "SIGBREAK",
                "sintaxis": [
                    "signal.SIGBREAK"
                ]
            },
            {
                "nombre": "SIGBUS",
                "sintaxis": [
                    "signal.SIGBUS"
                ]
            },
            {
                "nombre": "SIGCHLD",
                "sintaxis": [
                    "signal.SIGCHLD"
                ]
            },
            {
                "nombre": "SIGCLD",
                "sintaxis": [
                    "signal.SIGCLD"
                ]
            },
            {
                "nombre": "SIGCONT",
                "sintaxis": [
                    "signal.SIGCONT"
                ]
            },
            {
                "nombre": "SIGFPE",
                "sintaxis": [
                    "signal.SIGFPE"
                ]
            },
            {
                "nombre": "SIGHUP",
                "sintaxis": [
                    "signal.SIGHUP"
                ]
            },
            {
                "nombre": "SIGILL",
                "sintaxis": [
                    "signal.SIGILL"
                ]
            },
            {
                "nombre": "SIGINT",
                "sintaxis": [
                    "signal.SIGINT"
                ]
            },
            {
                "nombre": "SIGKILL",
                "sintaxis": [
                    "signal.SIGKILL"
                ]
            },
            {
                "nombre": "SIGPIPE",
                "sintaxis": [
                    "signal.SIGPIPE"
                ]
            },
            {
                "nombre": "SIGSEGV",
                "sintaxis": [
                    "signal.SIGSEGV"
                ]
            },
            {
                "nombre": "SIGTERM",
                "sintaxis": [
                    "signal.SIGTERM"
                ]
            },
            {
                "nombre": "SIGUSR1",
                "sintaxis": [
                    "signal.SIGUSR1"
                ]
            },
            {
                "nombre": "SIGUSR2",
                "sintaxis": [
                    "signal.SIGUSR2"
                ]
            },
            {
                "nombre": "SIGWINCH",
                "sintaxis": [
                    "signal.SIGWINCH"
                ]
            },
            {
                "nombre": "SIG_BLOCK",
                "sintaxis": [
                    "signal.SIG_BLOCK"
                ]
            },
            {
                "nombre": "SIG_DFL",
                "sintaxis": [
                    "signal.SIG_DFL"
                ]
            },
            {
                "nombre": "SIG_IGN",
                "sintaxis": [
                    "signal.SIG_IGN"
                ]
            },
            {
                "nombre": "SIG_SETMASK",
                "sintaxis": [
                    "signal.SIG_SETMASK"
                ]
            },
            {
                "nombre": "SIG_UNBLOCK",
                "sintaxis": [
                    "signal.SIG_UNBLOCK"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "ItimerError",
                "sintaxis": [
                    "exception signal.ItimerError"
                ]
            }
        ]
    },
    {
        "nombre": "site",
        "funciones": [
            {
                "nombre": "addsitedir",
                "sintaxis": [
                    "site.addsitedir(sitedir, known_paths=None)"
                ],
                "parametros": [
                    "known_paths",
                    "sitedir"
                ]
            },
            {
                "nombre": "getsitepackages",
                "sintaxis": [
                    "site.getsitepackages()"
                ],
                "parametros": []
            },
            {
                "nombre": "getuserbase",
                "sintaxis": [
                    "site.getuserbase()"
                ],
                "parametros": []
            },
            {
                "nombre": "getusersitepackages",
                "sintaxis": [
                    "site.getusersitepackages()"
                ],
                "parametros": []
            },
            {
                "nombre": "main",
                "sintaxis": [
                    "site.main()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "ENABLE_USER_SITE",
                "sintaxis": [
                    "site.ENABLE_USER_SITE"
                ]
            },
            {
                "nombre": "PREFIXES",
                "sintaxis": [
                    "site.PREFIXES"
                ]
            },
            {
                "nombre": "USER_BASE",
                "sintaxis": [
                    "site.USER_BASE"
                ]
            },
            {
                "nombre": "USER_SITE",
                "sintaxis": [
                    "site.USER_SITE"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "smtpd",
        "funciones": [],
        "clases": [
            {
                "nombre": "DebuggingServer",
                "constructores": [
                    {
                        "nombre": "DebuggingServer",
                        "sintaxis": [
                            "class smtpd.DebuggingServer(localaddr, remoteaddr)"
                        ],
                        "parametros": [
                            "localaddr",
                            "remoteaddr"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DebuggingServer"
                ]
            },
            {
                "nombre": "MailmanProxy",
                "constructores": [
                    {
                        "nombre": "MailmanProxy",
                        "sintaxis": [
                            "class smtpd.MailmanProxy(localaddr, remoteaddr)"
                        ],
                        "parametros": [
                            "localaddr",
                            "remoteaddr"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MailmanProxy"
                ]
            },
            {
                "nombre": "PureProxy",
                "constructores": [
                    {
                        "nombre": "PureProxy",
                        "sintaxis": [
                            "class smtpd.PureProxy(localaddr, remoteaddr)"
                        ],
                        "parametros": [
                            "localaddr",
                            "remoteaddr"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PureProxy"
                ]
            },
            {
                "nombre": "SMTPChannel",
                "constructores": [
                    {
                        "nombre": "SMTPChannel",
                        "sintaxis": [
                            "class smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False)"
                        ],
                        "parametros": [
                            "conn",
                            "addr",
                            "server",
                            "map",
                            "enable_SMTPUTF8",
                            "data_size_limit",
                            "decode_data"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "addr",
                        "sintaxis": [
                            "addr"
                        ]
                    },
                    {
                        "nombre": "conn",
                        "sintaxis": [
                            "conn"
                        ]
                    },
                    {
                        "nombre": "fqdn",
                        "sintaxis": [
                            "fqdn"
                        ]
                    },
                    {
                        "nombre": "mailfrom",
                        "sintaxis": [
                            "mailfrom"
                        ]
                    },
                    {
                        "nombre": "peer",
                        "sintaxis": [
                            "peer"
                        ]
                    },
                    {
                        "nombre": "rcpttos",
                        "sintaxis": [
                            "rcpttos"
                        ]
                    },
                    {
                        "nombre": "received_data",
                        "sintaxis": [
                            "received_data"
                        ]
                    },
                    {
                        "nombre": "received_lines",
                        "sintaxis": [
                            "received_lines"
                        ]
                    },
                    {
                        "nombre": "seen_greeting",
                        "sintaxis": [
                            "seen_greeting"
                        ]
                    },
                    {
                        "nombre": "smtp_server",
                        "sintaxis": [
                            "smtp_server"
                        ]
                    },
                    {
                        "nombre": "smtp_state",
                        "sintaxis": [
                            "smtp_state"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SMTPChannel"
                ]
            },
            {
                "nombre": "SMTPServer",
                "constructores": [
                    {
                        "nombre": "SMTPServer",
                        "sintaxis": [
                            "class smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False)"
                        ],
                        "parametros": [
                            "localaddr",
                            "remoteaddr",
                            "enable_SMTPUTF8",
                            "map",
                            "data_size_limit",
                            "decode_data"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "process_message",
                        "sintaxis": [
                            "process_message(peer, mailfrom, rcpttos, data, **kwargs)"
                        ],
                        "parametros": [
                            "kwargs",
                            "data",
                            "rcpttos",
                            "peer",
                            "mailfrom"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "channel_class",
                        "sintaxis": [
                            "channel_class"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SMTPServer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "smtplib",
        "funciones": [],
        "clases": [
            {
                "nombre": "LMTP",
                "constructores": [
                    {
                        "nombre": "LMTP",
                        "sintaxis": [
                            "class smtplib.LMTP(host='', port=LMTP_PORT, local_hostname=None, source_address=None[, timeout])"
                        ],
                        "parametros": [
                            "port",
                            "source_address",
                            "timeout",
                            "local_hostname",
                            "host"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LMTP"
                ]
            },
            {
                "nombre": "SMTP",
                "constructores": [
                    {
                        "nombre": "SMTP",
                        "sintaxis": [
                            "class smtplib.SMTP(host='', port=0, local_hostname=None, [timeout, ]source_address=None)"
                        ],
                        "parametros": [
                            "port",
                            "source_address",
                            "timeout",
                            "local_hostname",
                            "host"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "auth",
                        "sintaxis": [
                            "SMTP.auth(mechanism, authobject, *, initial_response_ok=True)"
                        ],
                        "parametros": [
                            "authobject",
                            "*",
                            "mechanism",
                            "initial_response_ok"
                        ]
                    },
                    {
                        "nombre": "connect",
                        "sintaxis": [
                            "SMTP.connect(host='localhost', port=0)"
                        ],
                        "parametros": [
                            "host",
                            "port"
                        ]
                    },
                    {
                        "nombre": "docmd",
                        "sintaxis": [
                            "SMTP.docmd(cmd, args='')"
                        ],
                        "parametros": [
                            "args",
                            "cmd"
                        ]
                    },
                    {
                        "nombre": "ehlo",
                        "sintaxis": [
                            "SMTP.ehlo(name='')"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "ehlo_or_helo_if_needed",
                        "sintaxis": [
                            "SMTP.ehlo_or_helo_if_needed()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "has_extn",
                        "sintaxis": [
                            "SMTP.has_extn(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "helo",
                        "sintaxis": [
                            "SMTP.helo(name='')"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "login",
                        "sintaxis": [
                            "SMTP.login(user, password, *, initial_response_ok=True)"
                        ],
                        "parametros": [
                            "password",
                            "user",
                            "*",
                            "initial_response_ok"
                        ]
                    },
                    {
                        "nombre": "quit",
                        "sintaxis": [
                            "SMTP.quit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "sendmail",
                        "sintaxis": [
                            "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=(), rcpt_options=())"
                        ],
                        "parametros": [
                            "from_addr",
                            "mail_options",
                            "to_addrs",
                            "rcpt_options",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "send_message",
                        "sintaxis": [
                            "SMTP.send_message(msg, from_addr=None, to_addrs=None, mail_options=(), rcpt_options=())"
                        ],
                        "parametros": [
                            "from_addr",
                            "mail_options",
                            "to_addrs",
                            "rcpt_options",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "set_debuglevel",
                        "sintaxis": [
                            "SMTP.set_debuglevel(level)"
                        ],
                        "parametros": [
                            "level"
                        ]
                    },
                    {
                        "nombre": "starttls",
                        "sintaxis": [
                            "SMTP.starttls(keyfile=None, certfile=None, context=None)"
                        ],
                        "parametros": [
                            "certfile",
                            "context",
                            "keyfile"
                        ]
                    },
                    {
                        "nombre": "verify",
                        "sintaxis": [
                            "SMTP.verify(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SMTP"
                ]
            },
            {
                "nombre": "SMTP_SSL",
                "constructores": [
                    {
                        "nombre": "SMTP_SSL",
                        "sintaxis": [
                            "class smtplib.SMTP_SSL(host='', port=0, local_hostname=None, keyfile=None, certfile=None, [timeout, ]context=None, source_address=None)"
                        ],
                        "parametros": [
                            "certfile",
                            "context",
                            "port",
                            "source_address",
                            "timeout",
                            "local_hostname",
                            "host",
                            "keyfile"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SMTP_SSL"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "SMTPAuthenticationError",
                "sintaxis": [
                    "exception smtplib.SMTPAuthenticationError"
                ]
            },
            {
                "nombre": "SMTPConnectError",
                "sintaxis": [
                    "exception smtplib.SMTPConnectError"
                ]
            },
            {
                "nombre": "SMTPDataError",
                "sintaxis": [
                    "exception smtplib.SMTPDataError"
                ]
            },
            {
                "nombre": "SMTPException",
                "sintaxis": [
                    "exception smtplib.SMTPException"
                ]
            },
            {
                "nombre": "SMTPHeloError",
                "sintaxis": [
                    "exception smtplib.SMTPHeloError"
                ]
            },
            {
                "nombre": "SMTPNotSupportedError",
                "sintaxis": [
                    "exception smtplib.SMTPNotSupportedError"
                ]
            },
            {
                "nombre": "SMTPRecipientsRefused",
                "sintaxis": [
                    "exception smtplib.SMTPRecipientsRefused"
                ]
            },
            {
                "nombre": "SMTPResponseException",
                "sintaxis": [
                    "exception smtplib.SMTPResponseException"
                ]
            },
            {
                "nombre": "SMTPSenderRefused",
                "sintaxis": [
                    "exception smtplib.SMTPSenderRefused"
                ]
            },
            {
                "nombre": "SMTPServerDisconnected",
                "sintaxis": [
                    "exception smtplib.SMTPServerDisconnected"
                ]
            }
        ]
    },
    {
        "nombre": "sndhdr",
        "funciones": [
            {
                "nombre": "what",
                "sintaxis": [
                    "sndhdr.what(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "whathdr",
                "sintaxis": [
                    "sndhdr.whathdr(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "socket",
        "funciones": [
            {
                "nombre": "close",
                "sintaxis": [
                    "socket.close(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "CMSG_LEN",
                "sintaxis": [
                    "socket.CMSG_LEN(length)"
                ],
                "parametros": [
                    "length"
                ]
            },
            {
                "nombre": "CMSG_SPACE",
                "sintaxis": [
                    "socket.CMSG_SPACE(length)"
                ],
                "parametros": [
                    "length"
                ]
            },
            {
                "nombre": "create_connection",
                "sintaxis": [
                    "socket.create_connection(address[, timeout[, source_address]])"
                ],
                "parametros": [
                    "address",
                    "timeout",
                    "source_address"
                ]
            },
            {
                "nombre": "create_server",
                "sintaxis": [
                    "socket.create_server(address, *, family=AF_INET, backlog=None, reuse_port=False, dualstack_ipv6=False)"
                ],
                "parametros": [
                    "reuse_port",
                    "address",
                    "dualstack_ipv6",
                    "*",
                    "backlog",
                    "family"
                ]
            },
            {
                "nombre": "fromfd",
                "sintaxis": [
                    "socket.fromfd(fd, family, type, proto=0)"
                ],
                "parametros": [
                    "fd",
                    "proto",
                    "type",
                    "family"
                ]
            },
            {
                "nombre": "fromshare",
                "sintaxis": [
                    "socket.fromshare(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "getaddrinfo",
                "sintaxis": [
                    "socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)"
                ],
                "parametros": [
                    "proto",
                    "type",
                    "port",
                    "flags",
                    "host",
                    "family"
                ]
            },
            {
                "nombre": "getdefaulttimeout",
                "sintaxis": [
                    "socket.getdefaulttimeout()"
                ],
                "parametros": []
            },
            {
                "nombre": "getfqdn",
                "sintaxis": [
                    "socket.getfqdn([name])"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "gethostbyaddr",
                "sintaxis": [
                    "socket.gethostbyaddr(ip_address)"
                ],
                "parametros": [
                    "ip_address"
                ]
            },
            {
                "nombre": "gethostbyname",
                "sintaxis": [
                    "socket.gethostbyname(hostname)"
                ],
                "parametros": [
                    "hostname"
                ]
            },
            {
                "nombre": "gethostbyname_ex",
                "sintaxis": [
                    "socket.gethostbyname_ex(hostname)"
                ],
                "parametros": [
                    "hostname"
                ]
            },
            {
                "nombre": "gethostname",
                "sintaxis": [
                    "socket.gethostname()"
                ],
                "parametros": []
            },
            {
                "nombre": "getnameinfo",
                "sintaxis": [
                    "socket.getnameinfo(sockaddr, flags)"
                ],
                "parametros": [
                    "flags",
                    "sockaddr"
                ]
            },
            {
                "nombre": "getprotobyname",
                "sintaxis": [
                    "socket.getprotobyname(protocolname)"
                ],
                "parametros": [
                    "protocolname"
                ]
            },
            {
                "nombre": "getservbyname",
                "sintaxis": [
                    "socket.getservbyname(servicename[, protocolname])"
                ],
                "parametros": [
                    "servicename",
                    "protocolname"
                ]
            },
            {
                "nombre": "getservbyport",
                "sintaxis": [
                    "socket.getservbyport(port[, protocolname])"
                ],
                "parametros": [
                    "port",
                    "protocolname"
                ]
            },
            {
                "nombre": "has_dualstack_ipv6",
                "sintaxis": [
                    "socket.has_dualstack_ipv6()"
                ],
                "parametros": []
            },
            {
                "nombre": "htonl",
                "sintaxis": [
                    "socket.htonl(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "htons",
                "sintaxis": [
                    "socket.htons(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "if_indextoname",
                "sintaxis": [
                    "socket.if_indextoname(if_index)"
                ],
                "parametros": [
                    "if_index"
                ]
            },
            {
                "nombre": "if_nameindex",
                "sintaxis": [
                    "socket.if_nameindex()"
                ],
                "parametros": []
            },
            {
                "nombre": "if_nametoindex",
                "sintaxis": [
                    "socket.if_nametoindex(if_name)"
                ],
                "parametros": [
                    "if_name"
                ]
            },
            {
                "nombre": "inet_aton",
                "sintaxis": [
                    "socket.inet_aton(ip_string)"
                ],
                "parametros": [
                    "ip_string"
                ]
            },
            {
                "nombre": "inet_ntoa",
                "sintaxis": [
                    "socket.inet_ntoa(packed_ip)"
                ],
                "parametros": [
                    "packed_ip"
                ]
            },
            {
                "nombre": "inet_ntop",
                "sintaxis": [
                    "socket.inet_ntop(address_family, packed_ip)"
                ],
                "parametros": [
                    "address_family",
                    "packed_ip"
                ]
            },
            {
                "nombre": "inet_pton",
                "sintaxis": [
                    "socket.inet_pton(address_family, ip_string)"
                ],
                "parametros": [
                    "ip_string",
                    "address_family"
                ]
            },
            {
                "nombre": "ntohl",
                "sintaxis": [
                    "socket.ntohl(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "ntohs",
                "sintaxis": [
                    "socket.ntohs(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "recv_fds",
                "sintaxis": [
                    "socket.recv_fds(sock, bufsize, maxfds[, flags])"
                ],
                "parametros": [
                    "maxfds",
                    "sock",
                    "flags",
                    "bufsize"
                ]
            },
            {
                "nombre": "send_fds",
                "sintaxis": [
                    "socket.send_fds(sock, buffers, fds[, flags[, address]])"
                ],
                "parametros": [
                    "flags",
                    "fds",
                    "address",
                    "buffers",
                    "sock"
                ]
            },
            {
                "nombre": "setdefaulttimeout",
                "sintaxis": [
                    "socket.setdefaulttimeout(timeout)"
                ],
                "parametros": [
                    "timeout"
                ]
            },
            {
                "nombre": "sethostname",
                "sintaxis": [
                    "socket.sethostname(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "socket",
                "sintaxis": [
                    "socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)"
                ],
                "parametros": [
                    "proto",
                    "fileno",
                    "type",
                    "family"
                ]
            },
            {
                "nombre": "socketpair",
                "sintaxis": [
                    "socket.socketpair([family[, type[, proto]]])"
                ],
                "parametros": [
                    "proto",
                    "type",
                    "family"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "socket",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "accept",
                        "sintaxis": [
                            "socket.accept()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "bind",
                        "sintaxis": [
                            "socket.bind(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "socket.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "connect",
                        "sintaxis": [
                            "socket.connect(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "connect_ex",
                        "sintaxis": [
                            "socket.connect_ex(address)"
                        ],
                        "parametros": [
                            "address"
                        ]
                    },
                    {
                        "nombre": "detach",
                        "sintaxis": [
                            "socket.detach()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "dup",
                        "sintaxis": [
                            "socket.dup()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "socket.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getblocking",
                        "sintaxis": [
                            "socket.getblocking()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getpeername",
                        "sintaxis": [
                            "socket.getpeername()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getsockname",
                        "sintaxis": [
                            "socket.getsockname()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getsockopt",
                        "sintaxis": [
                            "socket.getsockopt(level, optname[, buflen])"
                        ],
                        "parametros": [
                            "optname",
                            "buflen",
                            "level"
                        ]
                    },
                    {
                        "nombre": "gettimeout",
                        "sintaxis": [
                            "socket.gettimeout()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_inheritable",
                        "sintaxis": [
                            "socket.get_inheritable()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "ioctl",
                        "sintaxis": [
                            "socket.ioctl(control, option)"
                        ],
                        "parametros": [
                            "control",
                            "option"
                        ]
                    },
                    {
                        "nombre": "listen",
                        "sintaxis": [
                            "socket.listen([backlog])"
                        ],
                        "parametros": [
                            "backlog"
                        ]
                    },
                    {
                        "nombre": "makefile",
                        "sintaxis": [
                            "socket.makefile(mode='r', buffering=None, *, encoding=None, errors=None, newline=None)"
                        ],
                        "parametros": [
                            "mode",
                            "errors",
                            "encoding",
                            "buffering",
                            "newline",
                            "*"
                        ]
                    },
                    {
                        "nombre": "recv",
                        "sintaxis": [
                            "socket.recv(bufsize[, flags])"
                        ],
                        "parametros": [
                            "flags",
                            "bufsize"
                        ]
                    },
                    {
                        "nombre": "recvfrom",
                        "sintaxis": [
                            "socket.recvfrom(bufsize[, flags])"
                        ],
                        "parametros": [
                            "flags",
                            "bufsize"
                        ]
                    },
                    {
                        "nombre": "recvfrom_into",
                        "sintaxis": [
                            "socket.recvfrom_into(buffer[, nbytes[, flags]])"
                        ],
                        "parametros": [
                            "flags",
                            "buffer",
                            "nbytes"
                        ]
                    },
                    {
                        "nombre": "recvmsg",
                        "sintaxis": [
                            "socket.recvmsg(bufsize[, ancbufsize[, flags]])"
                        ],
                        "parametros": [
                            "flags",
                            "ancbufsize",
                            "bufsize"
                        ]
                    },
                    {
                        "nombre": "recvmsg_into",
                        "sintaxis": [
                            "socket.recvmsg_into(buffers[, ancbufsize[, flags]])"
                        ],
                        "parametros": [
                            "flags",
                            "ancbufsize",
                            "buffers"
                        ]
                    },
                    {
                        "nombre": "recv_into",
                        "sintaxis": [
                            "socket.recv_into(buffer[, nbytes[, flags]])"
                        ],
                        "parametros": [
                            "flags",
                            "buffer",
                            "nbytes"
                        ]
                    },
                    {
                        "nombre": "send",
                        "sintaxis": [
                            "socket.send(bytes[, flags])"
                        ],
                        "parametros": [
                            "flags",
                            "bytes"
                        ]
                    },
                    {
                        "nombre": "sendall",
                        "sintaxis": [
                            "socket.sendall(bytes[, flags])"
                        ],
                        "parametros": [
                            "flags",
                            "bytes"
                        ]
                    },
                    {
                        "nombre": "sendfile",
                        "sintaxis": [
                            "socket.sendfile(file, offset=0, count=None)"
                        ],
                        "parametros": [
                            "file",
                            "offset",
                            "count"
                        ]
                    },
                    {
                        "nombre": "sendmsg",
                        "sintaxis": [
                            "socket.sendmsg(buffers[, ancdata[, flags[, address]]])"
                        ],
                        "parametros": [
                            "flags",
                            "address",
                            "buffers",
                            "ancdata"
                        ]
                    },
                    {
                        "nombre": "sendmsg_afalg",
                        "sintaxis": [
                            "socket.sendmsg_afalg([msg, ]*, op[, iv[, assoclen[, flags]]])"
                        ],
                        "parametros": [
                            "iv",
                            "op",
                            "flags",
                            "assoclen",
                            "*",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "sendto",
                        "sintaxis": [
                            "socket.sendto(bytes, address)",
                            "socket.sendto(bytes, flags, address)"
                        ],
                        "parametros": [
                            "flags",
                            "address",
                            "bytes"
                        ]
                    },
                    {
                        "nombre": "setblocking",
                        "sintaxis": [
                            "socket.setblocking(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "setsockopt",
                        "sintaxis": [
                            "socket.setsockopt(level, optname, value: buffer)",
                            "socket.setsockopt(level, optname, value: int)",
                            "socket.setsockopt(level, optname, None, optlen: int)"
                        ],
                        "parametros": [
                            "optlen: int",
                            "value",
                            "None",
                            "optname",
                            "level"
                        ]
                    },
                    {
                        "nombre": "settimeout",
                        "sintaxis": [
                            "socket.settimeout(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "set_inheritable",
                        "sintaxis": [
                            "socket.set_inheritable(inheritable)"
                        ],
                        "parametros": [
                            "inheritable"
                        ]
                    },
                    {
                        "nombre": "share",
                        "sintaxis": [
                            "socket.share(process_id)"
                        ],
                        "parametros": [
                            "process_id"
                        ]
                    },
                    {
                        "nombre": "shutdown",
                        "sintaxis": [
                            "socket.shutdown(how)"
                        ],
                        "parametros": [
                            "how"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "family",
                        "sintaxis": [
                            "socket.family"
                        ]
                    },
                    {
                        "nombre": "proto",
                        "sintaxis": [
                            "socket.proto"
                        ]
                    },
                    {
                        "nombre": "type",
                        "sintaxis": [
                            "socket.type"
                        ]
                    }
                ],
                "sintaxis": [
                    "class socket"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "AF_ALG",
                "sintaxis": [
                    "socket.AF_ALG"
                ]
            },
            {
                "nombre": "AF_CAN",
                "sintaxis": [
                    "socket.AF_CAN"
                ]
            },
            {
                "nombre": "AF_LINK",
                "sintaxis": [
                    "socket.AF_LINK"
                ]
            },
            {
                "nombre": "AF_PACKET",
                "sintaxis": [
                    "socket.AF_PACKET"
                ]
            },
            {
                "nombre": "AF_QIPCRTR",
                "sintaxis": [
                    "socket.AF_QIPCRTR"
                ]
            },
            {
                "nombre": "AF_RDS",
                "sintaxis": [
                    "socket.AF_RDS"
                ]
            },
            {
                "nombre": "AF_UNIX",
                "sintaxis": [
                    "socket.AF_UNIX"
                ]
            },
            {
                "nombre": "AF_VSOCK",
                "sintaxis": [
                    "socket.AF_VSOCK"
                ]
            },
            {
                "nombre": "BDADDR_ANY",
                "sintaxis": [
                    "socket.BDADDR_ANY"
                ]
            },
            {
                "nombre": "CAN_BCM",
                "sintaxis": [
                    "socket.CAN_BCM"
                ]
            },
            {
                "nombre": "CAN_ISOTP",
                "sintaxis": [
                    "socket.CAN_ISOTP"
                ]
            },
            {
                "nombre": "CAN_J1939",
                "sintaxis": [
                    "socket.CAN_J1939"
                ]
            },
            {
                "nombre": "CAN_RAW_FD_FRAMES",
                "sintaxis": [
                    "socket.CAN_RAW_FD_FRAMES"
                ]
            },
            {
                "nombre": "CAN_RAW_JOIN_FILTERS",
                "sintaxis": [
                    "socket.CAN_RAW_JOIN_FILTERS"
                ]
            },
            {
                "nombre": "has_ipv6",
                "sintaxis": [
                    "socket.has_ipv6"
                ]
            },
            {
                "nombre": "HCI_FILTER",
                "sintaxis": [
                    "socket.HCI_FILTER"
                ]
            },
            {
                "nombre": "SIO_RCVALL",
                "sintaxis": [
                    "socket.SIO_RCVALL"
                ]
            },
            {
                "nombre": "SocketType",
                "sintaxis": [
                    "socket.SocketType"
                ]
            },
            {
                "nombre": "SOCK_CLOEXEC",
                "sintaxis": [
                    "socket.SOCK_CLOEXEC"
                ]
            },
            {
                "nombre": "SOCK_STREAM",
                "sintaxis": [
                    "socket.SOCK_STREAM"
                ]
            },
            {
                "nombre": "SO_",
                "sintaxis": [
                    "SO_*"
                ]
            },
            {
                "nombre": "TIPC_",
                "sintaxis": [
                    "TIPC_*"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception socket.error"
                ]
            },
            {
                "nombre": "gaierror",
                "sintaxis": [
                    "exception socket.gaierror"
                ]
            },
            {
                "nombre": "herror",
                "sintaxis": [
                    "exception socket.herror"
                ]
            },
            {
                "nombre": "timeout",
                "sintaxis": [
                    "exception socket.timeout"
                ]
            }
        ]
    },
    {
        "nombre": "socketserver",
        "funciones": [],
        "clases": [
            {
                "nombre": "BaseRequestHandler",
                "constructores": [
                    {
                        "nombre": "BaseRequestHandler",
                        "sintaxis": [
                            "class socketserver.BaseRequestHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "finish",
                        "sintaxis": [
                            "finish()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setup",
                        "sintaxis": [
                            "setup()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BaseRequestHandler"
                ]
            },
            {
                "nombre": "BaseServer",
                "constructores": [
                    {
                        "nombre": "BaseServer",
                        "sintaxis": [
                            "class socketserver.BaseServer(server_address, RequestHandlerClass)"
                        ],
                        "parametros": [
                            "server_address",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "finish_request",
                        "sintaxis": [
                            "finish_request(request, client_address)"
                        ],
                        "parametros": [
                            "request",
                            "client_address"
                        ]
                    },
                    {
                        "nombre": "get_request",
                        "sintaxis": [
                            "get_request()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_error",
                        "sintaxis": [
                            "handle_error(request, client_address)"
                        ],
                        "parametros": [
                            "request",
                            "client_address"
                        ]
                    },
                    {
                        "nombre": "handle_request",
                        "sintaxis": [
                            "handle_request()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle_timeout",
                        "sintaxis": [
                            "handle_timeout()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "process_request",
                        "sintaxis": [
                            "process_request(request, client_address)"
                        ],
                        "parametros": [
                            "request",
                            "client_address"
                        ]
                    },
                    {
                        "nombre": "server_activate",
                        "sintaxis": [
                            "server_activate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "server_bind",
                        "sintaxis": [
                            "server_bind()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "server_close",
                        "sintaxis": [
                            "server_close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "serve_forever",
                        "sintaxis": [
                            "serve_forever(poll_interval=0.5)"
                        ],
                        "parametros": [
                            "poll_interval"
                        ]
                    },
                    {
                        "nombre": "service_actions",
                        "sintaxis": [
                            "service_actions()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "shutdown",
                        "sintaxis": [
                            "shutdown()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "verify_request",
                        "sintaxis": [
                            "verify_request(request, client_address)"
                        ],
                        "parametros": [
                            "request",
                            "client_address"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "address_family",
                        "sintaxis": [
                            "address_family"
                        ]
                    },
                    {
                        "nombre": "allow_reuse_address",
                        "sintaxis": [
                            "allow_reuse_address"
                        ]
                    },
                    {
                        "nombre": "RequestHandlerClass",
                        "sintaxis": [
                            "RequestHandlerClass"
                        ]
                    },
                    {
                        "nombre": "request_queue_size",
                        "sintaxis": [
                            "request_queue_size"
                        ]
                    },
                    {
                        "nombre": "server_address",
                        "sintaxis": [
                            "server_address"
                        ]
                    },
                    {
                        "nombre": "socket",
                        "sintaxis": [
                            "socket"
                        ]
                    },
                    {
                        "nombre": "socket_type",
                        "sintaxis": [
                            "socket_type"
                        ]
                    },
                    {
                        "nombre": "timeout",
                        "sintaxis": [
                            "timeout"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseServer"
                ]
            },
            {
                "nombre": "ForkingMixIn",
                "constructores": [
                    {
                        "nombre": "ForkingMixIn",
                        "sintaxis": [
                            "class socketserver.ForkingMixIn",
                            "class socketserver.ThreadingMixIn"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ForkingMixIn"
                ]
            },
            {
                "nombre": "ForkingTCPServer",
                "constructores": [
                    {
                        "nombre": "ForkingTCPServer",
                        "sintaxis": [
                            "class socketserver.ThreadingUDPServer",
                            "class socketserver.ForkingUDPServer",
                            "class socketserver.ForkingTCPServer",
                            "class socketserver.ThreadingTCPServer"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ForkingTCPServer"
                ]
            },
            {
                "nombre": "StreamRequestHandler",
                "constructores": [
                    {
                        "nombre": "StreamRequestHandler",
                        "sintaxis": [
                            "class socketserver.DatagramRequestHandler",
                            "class socketserver.StreamRequestHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class StreamRequestHandler"
                ]
            },
            {
                "nombre": "TCPServer",
                "constructores": [
                    {
                        "nombre": "TCPServer",
                        "sintaxis": [
                            "class socketserver.TCPServer(server_address, RequestHandlerClass, bind_and_activate=True)"
                        ],
                        "parametros": [
                            "server_address",
                            "bind_and_activate",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TCPServer"
                ]
            },
            {
                "nombre": "UDPServer",
                "constructores": [
                    {
                        "nombre": "UDPServer",
                        "sintaxis": [
                            "class socketserver.UDPServer(server_address, RequestHandlerClass, bind_and_activate=True)"
                        ],
                        "parametros": [
                            "server_address",
                            "bind_and_activate",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class UDPServer"
                ]
            },
            {
                "nombre": "UnixStreamServer",
                "constructores": [
                    {
                        "nombre": "UnixStreamServer",
                        "sintaxis": [
                            "class socketserver.UnixDatagramServer(server_address, RequestHandlerClass, bind_and_activate=True)",
                            "class socketserver.UnixStreamServer(server_address, RequestHandlerClass, bind_and_activate=True)"
                        ],
                        "parametros": [
                            "server_address",
                            "bind_and_activate",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class UnixStreamServer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "spwd",
        "funciones": [
            {
                "nombre": "getspall",
                "sintaxis": [
                    "spwd.getspall()"
                ],
                "parametros": []
            },
            {
                "nombre": "getspnam",
                "sintaxis": [
                    "spwd.getspnam(name)"
                ],
                "parametros": [
                    "name"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "sqlite3",
        "funciones": [
            {
                "nombre": "complete_statement",
                "sintaxis": [
                    "sqlite3.complete_statement(sql)"
                ],
                "parametros": [
                    "sql"
                ]
            },
            {
                "nombre": "connect",
                "sintaxis": [
                    "sqlite3.connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri])"
                ],
                "parametros": [
                    "cached_statements",
                    "factory",
                    "timeout",
                    "detect_types",
                    "isolation_level",
                    "check_same_thread",
                    "uri",
                    "database"
                ]
            },
            {
                "nombre": "enable_callback_tracebacks",
                "sintaxis": [
                    "sqlite3.enable_callback_tracebacks(flag)"
                ],
                "parametros": [
                    "flag"
                ]
            },
            {
                "nombre": "register_adapter",
                "sintaxis": [
                    "sqlite3.register_adapter(type, callable)"
                ],
                "parametros": [
                    "type",
                    "callable"
                ]
            },
            {
                "nombre": "register_converter",
                "sintaxis": [
                    "sqlite3.register_converter(typename, callable)"
                ],
                "parametros": [
                    "typename",
                    "callable"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Connection",
                "constructores": [
                    {
                        "nombre": "Connection",
                        "sintaxis": [
                            "class sqlite3.Connection"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "backup",
                        "sintaxis": [
                            "backup(target, *, pages=- 1, progress=None, name='main', sleep=0.25)"
                        ],
                        "parametros": [
                            "sleep",
                            "progress",
                            "name",
                            "pages",
                            "target",
                            "*"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "commit",
                        "sintaxis": [
                            "commit()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "create_aggregate",
                        "sintaxis": [
                            "create_aggregate(name, num_params, aggregate_class)"
                        ],
                        "parametros": [
                            "aggregate_class",
                            "num_params",
                            "name"
                        ]
                    },
                    {
                        "nombre": "create_collation",
                        "sintaxis": [
                            "create_collation(name, callable)"
                        ],
                        "parametros": [
                            "callable",
                            "name"
                        ]
                    },
                    {
                        "nombre": "create_function",
                        "sintaxis": [
                            "create_function(name, num_params, func, *, deterministic=False)"
                        ],
                        "parametros": [
                            "name",
                            "deterministic",
                            "num_params",
                            "func",
                            "*"
                        ]
                    },
                    {
                        "nombre": "cursor",
                        "sintaxis": [
                            "cursor(factory=Cursor)"
                        ],
                        "parametros": [
                            "factory"
                        ]
                    },
                    {
                        "nombre": "enable_load_extension",
                        "sintaxis": [
                            "enable_load_extension(enabled)"
                        ],
                        "parametros": [
                            "enabled"
                        ]
                    },
                    {
                        "nombre": "execute",
                        "sintaxis": [
                            "execute(sql[, parameters])"
                        ],
                        "parametros": [
                            "sql",
                            "parameters"
                        ]
                    },
                    {
                        "nombre": "executemany",
                        "sintaxis": [
                            "executemany(sql[, parameters])"
                        ],
                        "parametros": [
                            "sql",
                            "parameters"
                        ]
                    },
                    {
                        "nombre": "executescript",
                        "sintaxis": [
                            "executescript(sql_script)"
                        ],
                        "parametros": [
                            "sql_script"
                        ]
                    },
                    {
                        "nombre": "interrupt",
                        "sintaxis": [
                            "interrupt()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iterdump",
                        "sintaxis": [
                            "iterdump()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "load_extension",
                        "sintaxis": [
                            "load_extension(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    },
                    {
                        "nombre": "rollback",
                        "sintaxis": [
                            "rollback()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_authorizer",
                        "sintaxis": [
                            "set_authorizer(authorizer_callback)"
                        ],
                        "parametros": [
                            "authorizer_callback"
                        ]
                    },
                    {
                        "nombre": "set_progress_handler",
                        "sintaxis": [
                            "set_progress_handler(handler, n)"
                        ],
                        "parametros": [
                            "n",
                            "handler"
                        ]
                    },
                    {
                        "nombre": "set_trace_callback",
                        "sintaxis": [
                            "set_trace_callback(trace_callback)"
                        ],
                        "parametros": [
                            "trace_callback"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "in_transaction",
                        "sintaxis": [
                            "in_transaction"
                        ]
                    },
                    {
                        "nombre": "isolation_level",
                        "sintaxis": [
                            "isolation_level"
                        ]
                    },
                    {
                        "nombre": "row_factory",
                        "sintaxis": [
                            "row_factory"
                        ]
                    },
                    {
                        "nombre": "text_factory",
                        "sintaxis": [
                            "text_factory"
                        ]
                    },
                    {
                        "nombre": "total_changes",
                        "sintaxis": [
                            "total_changes"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Connection"
                ]
            },
            {
                "nombre": "Cursor",
                "constructores": [
                    {
                        "nombre": "Cursor",
                        "sintaxis": [
                            "class sqlite3.Cursor"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "execute",
                        "sintaxis": [
                            "execute(sql[, parameters])"
                        ],
                        "parametros": [
                            "sql",
                            "parameters"
                        ]
                    },
                    {
                        "nombre": "executemany",
                        "sintaxis": [
                            "executemany(sql, seq_of_parameters)"
                        ],
                        "parametros": [
                            "sql",
                            "seq_of_parameters"
                        ]
                    },
                    {
                        "nombre": "executescript",
                        "sintaxis": [
                            "executescript(sql_script)"
                        ],
                        "parametros": [
                            "sql_script"
                        ]
                    },
                    {
                        "nombre": "fetchall",
                        "sintaxis": [
                            "fetchall()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fetchmany",
                        "sintaxis": [
                            "fetchmany(size=cursor.arraysize)"
                        ],
                        "parametros": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "fetchone",
                        "sintaxis": [
                            "fetchone()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setinputsizes",
                        "sintaxis": [
                            "setinputsizes(sizes)"
                        ],
                        "parametros": [
                            "sizes"
                        ]
                    },
                    {
                        "nombre": "setoutputsize",
                        "sintaxis": [
                            "setoutputsize(size[, column])"
                        ],
                        "parametros": [
                            "column",
                            "size"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "arraysize",
                        "sintaxis": [
                            "arraysize"
                        ]
                    },
                    {
                        "nombre": "connection",
                        "sintaxis": [
                            "connection"
                        ]
                    },
                    {
                        "nombre": "description",
                        "sintaxis": [
                            "description"
                        ]
                    },
                    {
                        "nombre": "lastrowid",
                        "sintaxis": [
                            "lastrowid"
                        ]
                    },
                    {
                        "nombre": "rowcount",
                        "sintaxis": [
                            "rowcount"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Cursor"
                ]
            },
            {
                "nombre": "Row",
                "constructores": [
                    {
                        "nombre": "Row",
                        "sintaxis": [
                            "class sqlite3.Row"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "keys",
                        "sintaxis": [
                            "keys()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Row"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "apilevel",
                "sintaxis": [
                    "sqlite3.apilevel"
                ]
            },
            {
                "nombre": "paramstyle",
                "sintaxis": [
                    "sqlite3.paramstyle"
                ]
            },
            {
                "nombre": "PARSE_COLNAMES",
                "sintaxis": [
                    "sqlite3.PARSE_COLNAMES"
                ]
            },
            {
                "nombre": "PARSE_DECLTYPES",
                "sintaxis": [
                    "sqlite3.PARSE_DECLTYPES"
                ]
            },
            {
                "nombre": "sqlite_version",
                "sintaxis": [
                    "sqlite3.sqlite_version"
                ]
            },
            {
                "nombre": "sqlite_version_info",
                "sintaxis": [
                    "sqlite3.sqlite_version_info"
                ]
            },
            {
                "nombre": "threadsafety",
                "sintaxis": [
                    "sqlite3.threadsafety"
                ]
            },
            {
                "nombre": "version",
                "sintaxis": [
                    "sqlite3.version"
                ]
            },
            {
                "nombre": "version_info",
                "sintaxis": [
                    "sqlite3.version_info"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "DatabaseError",
                "sintaxis": [
                    "exception sqlite3.DatabaseError"
                ]
            },
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception sqlite3.Error"
                ]
            },
            {
                "nombre": "IntegrityError",
                "sintaxis": [
                    "exception sqlite3.IntegrityError"
                ]
            },
            {
                "nombre": "NotSupportedError",
                "sintaxis": [
                    "exception sqlite3.NotSupportedError"
                ]
            },
            {
                "nombre": "OperationalError",
                "sintaxis": [
                    "exception sqlite3.OperationalError"
                ]
            },
            {
                "nombre": "ProgrammingError",
                "sintaxis": [
                    "exception sqlite3.ProgrammingError"
                ]
            },
            {
                "nombre": "Warning",
                "sintaxis": [
                    "exception sqlite3.Warning"
                ]
            }
        ]
    },
    {
        "nombre": "ssl",
        "funciones": [
            {
                "nombre": "cert_time_to_seconds",
                "sintaxis": [
                    "ssl.cert_time_to_seconds(cert_time)"
                ],
                "parametros": [
                    "cert_time"
                ]
            },
            {
                "nombre": "create_default_context",
                "sintaxis": [
                    "ssl.create_default_context(purpose=Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)"
                ],
                "parametros": [
                    "purpose",
                    "cafile",
                    "cadata",
                    "capath"
                ]
            },
            {
                "nombre": "DER_cert_to_PEM_cert",
                "sintaxis": [
                    "ssl.DER_cert_to_PEM_cert(DER_cert_bytes)"
                ],
                "parametros": [
                    "DER_cert_bytes"
                ]
            },
            {
                "nombre": "enum_certificates",
                "sintaxis": [
                    "ssl.enum_certificates(store_name)"
                ],
                "parametros": [
                    "store_name"
                ]
            },
            {
                "nombre": "enum_crls",
                "sintaxis": [
                    "ssl.enum_crls(store_name)"
                ],
                "parametros": [
                    "store_name"
                ]
            },
            {
                "nombre": "get_default_verify_paths",
                "sintaxis": [
                    "ssl.get_default_verify_paths()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_server_certificate",
                "sintaxis": [
                    "ssl.get_server_certificate(addr, ssl_version=PROTOCOL_TLS_CLIENT, ca_certs=None[, timeout])"
                ],
                "parametros": [
                    "ssl_version",
                    "timeout",
                    "ca_certs",
                    "addr"
                ]
            },
            {
                "nombre": "match_hostname",
                "sintaxis": [
                    "ssl.match_hostname(cert, hostname)"
                ],
                "parametros": [
                    "cert",
                    "hostname"
                ]
            },
            {
                "nombre": "PEM_cert_to_DER_cert",
                "sintaxis": [
                    "ssl.PEM_cert_to_DER_cert(PEM_cert_string)"
                ],
                "parametros": [
                    "PEM_cert_string"
                ]
            },
            {
                "nombre": "RAND_add",
                "sintaxis": [
                    "ssl.RAND_add(bytes, entropy)"
                ],
                "parametros": [
                    "bytes",
                    "entropy"
                ]
            },
            {
                "nombre": "RAND_bytes",
                "sintaxis": [
                    "ssl.RAND_bytes(num)"
                ],
                "parametros": [
                    "num"
                ]
            },
            {
                "nombre": "RAND_pseudo_bytes",
                "sintaxis": [
                    "ssl.RAND_pseudo_bytes(num)"
                ],
                "parametros": [
                    "num"
                ]
            },
            {
                "nombre": "RAND_status",
                "sintaxis": [
                    "ssl.RAND_status()"
                ],
                "parametros": []
            },
            {
                "nombre": "wrap_socket",
                "sintaxis": [
                    "ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=PROTOCOL_TLS, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)"
                ],
                "parametros": [
                    "ciphers",
                    "certfile",
                    "ca_certs",
                    "cert_reqs",
                    "suppress_ragged_eofs",
                    "do_handshake_on_connect",
                    "server_side",
                    "ssl_version",
                    "sock",
                    "keyfile"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "AlertDescription",
                "constructores": [
                    {
                        "nombre": "AlertDescription",
                        "sintaxis": [
                            "class ssl.AlertDescription"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AlertDescription"
                ]
            },
            {
                "nombre": "MemoryBIO",
                "constructores": [
                    {
                        "nombre": "MemoryBIO",
                        "sintaxis": [
                            "class ssl.MemoryBIO"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read(n=- 1)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(buf)"
                        ],
                        "parametros": [
                            "buf"
                        ]
                    },
                    {
                        "nombre": "write_eof",
                        "sintaxis": [
                            "write_eof()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "eof",
                        "sintaxis": [
                            "eof"
                        ]
                    },
                    {
                        "nombre": "pending",
                        "sintaxis": [
                            "pending"
                        ]
                    }
                ],
                "sintaxis": [
                    "class MemoryBIO"
                ]
            },
            {
                "nombre": "Options",
                "constructores": [
                    {
                        "nombre": "Options",
                        "sintaxis": [
                            "class ssl.Options"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Options"
                ]
            },
            {
                "nombre": "SSLContext",
                "constructores": [
                    {
                        "nombre": "SSLContext",
                        "sintaxis": [
                            "class ssl.SSLContext(protocol=None)"
                        ],
                        "parametros": [
                            "protocol"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cert_store_stats",
                        "sintaxis": [
                            "SSLContext.cert_store_stats()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_ca_certs",
                        "sintaxis": [
                            "SSLContext.get_ca_certs(binary_form=False)"
                        ],
                        "parametros": [
                            "binary_form"
                        ]
                    },
                    {
                        "nombre": "get_ciphers",
                        "sintaxis": [
                            "SSLContext.get_ciphers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "load_cert_chain",
                        "sintaxis": [
                            "SSLContext.load_cert_chain(certfile, keyfile=None, password=None)"
                        ],
                        "parametros": [
                            "certfile",
                            "password",
                            "keyfile"
                        ]
                    },
                    {
                        "nombre": "load_default_certs",
                        "sintaxis": [
                            "SSLContext.load_default_certs(purpose=Purpose.SERVER_AUTH)"
                        ],
                        "parametros": [
                            "purpose"
                        ]
                    },
                    {
                        "nombre": "load_dh_params",
                        "sintaxis": [
                            "SSLContext.load_dh_params(dhfile)"
                        ],
                        "parametros": [
                            "dhfile"
                        ]
                    },
                    {
                        "nombre": "load_verify_locations",
                        "sintaxis": [
                            "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)"
                        ],
                        "parametros": [
                            "cadata",
                            "cafile",
                            "capath"
                        ]
                    },
                    {
                        "nombre": "session_stats",
                        "sintaxis": [
                            "SSLContext.session_stats()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_alpn_protocols",
                        "sintaxis": [
                            "SSLContext.set_alpn_protocols(protocols)"
                        ],
                        "parametros": [
                            "protocols"
                        ]
                    },
                    {
                        "nombre": "set_ciphers",
                        "sintaxis": [
                            "SSLContext.set_ciphers(ciphers)"
                        ],
                        "parametros": [
                            "ciphers"
                        ]
                    },
                    {
                        "nombre": "set_default_verify_paths",
                        "sintaxis": [
                            "SSLContext.set_default_verify_paths()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_ecdh_curve",
                        "sintaxis": [
                            "SSLContext.set_ecdh_curve(curve_name)"
                        ],
                        "parametros": [
                            "curve_name"
                        ]
                    },
                    {
                        "nombre": "set_npn_protocols",
                        "sintaxis": [
                            "SSLContext.set_npn_protocols(protocols)"
                        ],
                        "parametros": [
                            "protocols"
                        ]
                    },
                    {
                        "nombre": "wrap_bio",
                        "sintaxis": [
                            "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)"
                        ],
                        "parametros": [
                            "session",
                            "incoming",
                            "server_hostname",
                            "outgoing",
                            "server_side"
                        ]
                    },
                    {
                        "nombre": "wrap_socket",
                        "sintaxis": [
                            "SSLContext.wrap_socket(sock, server_side=False, do_handshake_on_connect=True, suppress_ragged_eofs=True, server_hostname=None, session=None)"
                        ],
                        "parametros": [
                            "session",
                            "suppress_ragged_eofs",
                            "server_hostname",
                            "do_handshake_on_connect",
                            "server_side",
                            "sock"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "check_hostname",
                        "sintaxis": [
                            "SSLContext.check_hostname"
                        ]
                    },
                    {
                        "nombre": "hostname_checks_common_name",
                        "sintaxis": [
                            "SSLContext.hostname_checks_common_name"
                        ]
                    },
                    {
                        "nombre": "keylog_filename",
                        "sintaxis": [
                            "SSLContext.keylog_filename"
                        ]
                    },
                    {
                        "nombre": "maximum_version",
                        "sintaxis": [
                            "SSLContext.maximum_version"
                        ]
                    },
                    {
                        "nombre": "minimum_version",
                        "sintaxis": [
                            "SSLContext.minimum_version"
                        ]
                    },
                    {
                        "nombre": "num_tickets",
                        "sintaxis": [
                            "SSLContext.num_tickets"
                        ]
                    },
                    {
                        "nombre": "options",
                        "sintaxis": [
                            "SSLContext.options"
                        ]
                    },
                    {
                        "nombre": "post_handshake_auth",
                        "sintaxis": [
                            "SSLContext.post_handshake_auth"
                        ]
                    },
                    {
                        "nombre": "protocol",
                        "sintaxis": [
                            "SSLContext.protocol"
                        ]
                    },
                    {
                        "nombre": "security_level",
                        "sintaxis": [
                            "SSLContext.security_level"
                        ]
                    },
                    {
                        "nombre": "set_servername_callback",
                        "sintaxis": [
                            "SSLContext.set_servername_callback(server_name_callback)"
                        ]
                    },
                    {
                        "nombre": "sni_callback",
                        "sintaxis": [
                            "SSLContext.sni_callback"
                        ]
                    },
                    {
                        "nombre": "sslobject_class",
                        "sintaxis": [
                            "SSLContext.sslobject_class"
                        ]
                    },
                    {
                        "nombre": "sslsocket_class",
                        "sintaxis": [
                            "SSLContext.sslsocket_class"
                        ]
                    },
                    {
                        "nombre": "verify_flags",
                        "sintaxis": [
                            "SSLContext.verify_flags"
                        ]
                    },
                    {
                        "nombre": "verify_mode",
                        "sintaxis": [
                            "SSLContext.verify_mode"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SSLContext"
                ]
            },
            {
                "nombre": "SSLErrorNumber",
                "constructores": [
                    {
                        "nombre": "SSLErrorNumber",
                        "sintaxis": [
                            "class ssl.SSLErrorNumber"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SSLErrorNumber"
                ]
            },
            {
                "nombre": "SSLObject",
                "constructores": [
                    {
                        "nombre": "SSLObject",
                        "sintaxis": [
                            "class ssl.SSLObject"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SSLObject"
                ]
            },
            {
                "nombre": "SSLSession",
                "constructores": [
                    {
                        "nombre": "SSLSession",
                        "sintaxis": [
                            "class ssl.SSLSession"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "has_ticket",
                        "sintaxis": [
                            "has_ticket"
                        ]
                    },
                    {
                        "nombre": "id",
                        "sintaxis": [
                            "id"
                        ]
                    },
                    {
                        "nombre": "ticket_lifetime_hint",
                        "sintaxis": [
                            "ticket_lifetime_hint"
                        ]
                    },
                    {
                        "nombre": "time",
                        "sintaxis": [
                            "time"
                        ]
                    },
                    {
                        "nombre": "timeout",
                        "sintaxis": [
                            "timeout"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SSLSession"
                ]
            },
            {
                "nombre": "SSLSocket",
                "constructores": [
                    {
                        "nombre": "SSLSocket",
                        "sintaxis": [
                            "class ssl.SSLSocket(socket.socket)"
                        ],
                        "parametros": [
                            "socket.socket"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cipher",
                        "sintaxis": [
                            "SSLSocket.cipher()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "compression",
                        "sintaxis": [
                            "SSLSocket.compression()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "do_handshake",
                        "sintaxis": [
                            "SSLSocket.do_handshake()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getpeercert",
                        "sintaxis": [
                            "SSLSocket.getpeercert(binary_form=False)"
                        ],
                        "parametros": [
                            "binary_form"
                        ]
                    },
                    {
                        "nombre": "get_channel_binding",
                        "sintaxis": [
                            "SSLSocket.get_channel_binding(cb_type='tls-unique')"
                        ],
                        "parametros": [
                            "cb_type"
                        ]
                    },
                    {
                        "nombre": "pending",
                        "sintaxis": [
                            "SSLSocket.pending()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "SSLSocket.read(len=1024, buffer=None)"
                        ],
                        "parametros": [
                            "len",
                            "buffer"
                        ]
                    },
                    {
                        "nombre": "selected_alpn_protocol",
                        "sintaxis": [
                            "SSLSocket.selected_alpn_protocol()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "selected_npn_protocol",
                        "sintaxis": [
                            "SSLSocket.selected_npn_protocol()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "shared_ciphers",
                        "sintaxis": [
                            "SSLSocket.shared_ciphers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unwrap",
                        "sintaxis": [
                            "SSLSocket.unwrap()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "verify_client_post_handshake",
                        "sintaxis": [
                            "SSLSocket.verify_client_post_handshake()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "SSLSocket.version()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "SSLSocket.write(buf)"
                        ],
                        "parametros": [
                            "buf"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "context",
                        "sintaxis": [
                            "SSLSocket.context"
                        ]
                    },
                    {
                        "nombre": "server_hostname",
                        "sintaxis": [
                            "SSLSocket.server_hostname"
                        ]
                    },
                    {
                        "nombre": "server_side",
                        "sintaxis": [
                            "SSLSocket.server_side"
                        ]
                    },
                    {
                        "nombre": "session",
                        "sintaxis": [
                            "SSLSocket.session"
                        ]
                    },
                    {
                        "nombre": "session_reused",
                        "sintaxis": [
                            "SSLSocket.session_reused"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SSLSocket"
                ]
            },
            {
                "nombre": "TLSVersion",
                "constructores": [
                    {
                        "nombre": "TLSVersion",
                        "sintaxis": [
                            "class ssl.TLSVersion"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "MAXIMUM_SUPPORTED",
                        "sintaxis": [
                            "TLSVersion.MAXIMUM_SUPPORTED"
                        ]
                    },
                    {
                        "nombre": "MINIMUM_SUPPORTED",
                        "sintaxis": [
                            "TLSVersion.MINIMUM_SUPPORTED"
                        ]
                    },
                    {
                        "nombre": "SSLv3",
                        "sintaxis": [
                            "TLSVersion.SSLv3"
                        ]
                    },
                    {
                        "nombre": "TLSv1",
                        "sintaxis": [
                            "TLSVersion.TLSv1"
                        ]
                    },
                    {
                        "nombre": "TLSv1_1",
                        "sintaxis": [
                            "TLSVersion.TLSv1_1"
                        ]
                    },
                    {
                        "nombre": "TLSv1_2",
                        "sintaxis": [
                            "TLSVersion.TLSv1_2"
                        ]
                    },
                    {
                        "nombre": "TLSv1_3",
                        "sintaxis": [
                            "TLSVersion.TLSv1_3"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TLSVersion"
                ]
            },
            {
                "nombre": "VerifyFlags",
                "constructores": [
                    {
                        "nombre": "VerifyFlags",
                        "sintaxis": [
                            "class ssl.VerifyFlags"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class VerifyFlags"
                ]
            },
            {
                "nombre": "VerifyMode",
                "constructores": [
                    {
                        "nombre": "VerifyMode",
                        "sintaxis": [
                            "class ssl.VerifyMode"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class VerifyMode"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ALERT_DESCRIPTION_HANDSHAKE_FAILURE",
                "sintaxis": [
                    "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"
                ]
            },
            {
                "nombre": "CERT_NONE",
                "sintaxis": [
                    "ssl.CERT_NONE"
                ]
            },
            {
                "nombre": "CERT_OPTIONAL",
                "sintaxis": [
                    "ssl.CERT_OPTIONAL"
                ]
            },
            {
                "nombre": "CERT_REQUIRED",
                "sintaxis": [
                    "ssl.CERT_REQUIRED"
                ]
            },
            {
                "nombre": "CHANNEL_BINDING_TYPES",
                "sintaxis": [
                    "ssl.CHANNEL_BINDING_TYPES"
                ]
            },
            {
                "nombre": "CLIENT_AUTH",
                "sintaxis": [
                    "Purpose.CLIENT_AUTH"
                ]
            },
            {
                "nombre": "HAS_ALPN",
                "sintaxis": [
                    "ssl.HAS_ALPN"
                ]
            },
            {
                "nombre": "HAS_ECDH",
                "sintaxis": [
                    "ssl.HAS_ECDH"
                ]
            },
            {
                "nombre": "HAS_NEVER_CHECK_COMMON_NAME",
                "sintaxis": [
                    "ssl.HAS_NEVER_CHECK_COMMON_NAME"
                ]
            },
            {
                "nombre": "HAS_NPN",
                "sintaxis": [
                    "ssl.HAS_NPN"
                ]
            },
            {
                "nombre": "HAS_SNI",
                "sintaxis": [
                    "ssl.HAS_SNI"
                ]
            },
            {
                "nombre": "HAS_SSLv2",
                "sintaxis": [
                    "ssl.HAS_SSLv2"
                ]
            },
            {
                "nombre": "HAS_SSLv3",
                "sintaxis": [
                    "ssl.HAS_SSLv3"
                ]
            },
            {
                "nombre": "HAS_TLSv1",
                "sintaxis": [
                    "ssl.HAS_TLSv1"
                ]
            },
            {
                "nombre": "HAS_TLSv1_1",
                "sintaxis": [
                    "ssl.HAS_TLSv1_1"
                ]
            },
            {
                "nombre": "HAS_TLSv1_2",
                "sintaxis": [
                    "ssl.HAS_TLSv1_2"
                ]
            },
            {
                "nombre": "HAS_TLSv1_3",
                "sintaxis": [
                    "ssl.HAS_TLSv1_3"
                ]
            },
            {
                "nombre": "OPENSSL_VERSION",
                "sintaxis": [
                    "ssl.OPENSSL_VERSION"
                ]
            },
            {
                "nombre": "OPENSSL_VERSION_INFO",
                "sintaxis": [
                    "ssl.OPENSSL_VERSION_INFO"
                ]
            },
            {
                "nombre": "OPENSSL_VERSION_NUMBER",
                "sintaxis": [
                    "ssl.OPENSSL_VERSION_NUMBER"
                ]
            },
            {
                "nombre": "OP_ALL",
                "sintaxis": [
                    "ssl.OP_ALL"
                ]
            },
            {
                "nombre": "OP_CIPHER_SERVER_PREFERENCE",
                "sintaxis": [
                    "ssl.OP_CIPHER_SERVER_PREFERENCE"
                ]
            },
            {
                "nombre": "OP_ENABLE_MIDDLEBOX_COMPAT",
                "sintaxis": [
                    "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"
                ]
            },
            {
                "nombre": "OP_IGNORE_UNEXPECTED_EOF",
                "sintaxis": [
                    "ssl.OP_IGNORE_UNEXPECTED_EOF"
                ]
            },
            {
                "nombre": "OP_NO_COMPRESSION",
                "sintaxis": [
                    "ssl.OP_NO_COMPRESSION"
                ]
            },
            {
                "nombre": "OP_NO_RENEGOTIATION",
                "sintaxis": [
                    "ssl.OP_NO_RENEGOTIATION"
                ]
            },
            {
                "nombre": "OP_NO_SSLv2",
                "sintaxis": [
                    "ssl.OP_NO_SSLv2"
                ]
            },
            {
                "nombre": "OP_NO_SSLv3",
                "sintaxis": [
                    "ssl.OP_NO_SSLv3"
                ]
            },
            {
                "nombre": "OP_NO_TICKET",
                "sintaxis": [
                    "ssl.OP_NO_TICKET"
                ]
            },
            {
                "nombre": "OP_NO_TLSv1",
                "sintaxis": [
                    "ssl.OP_NO_TLSv1"
                ]
            },
            {
                "nombre": "OP_NO_TLSv1_1",
                "sintaxis": [
                    "ssl.OP_NO_TLSv1_1"
                ]
            },
            {
                "nombre": "OP_NO_TLSv1_2",
                "sintaxis": [
                    "ssl.OP_NO_TLSv1_2"
                ]
            },
            {
                "nombre": "OP_NO_TLSv1_3",
                "sintaxis": [
                    "ssl.OP_NO_TLSv1_3"
                ]
            },
            {
                "nombre": "OP_SINGLE_DH_USE",
                "sintaxis": [
                    "ssl.OP_SINGLE_DH_USE"
                ]
            },
            {
                "nombre": "OP_SINGLE_ECDH_USE",
                "sintaxis": [
                    "ssl.OP_SINGLE_ECDH_USE"
                ]
            },
            {
                "nombre": "PROTOCOL_SSLv2",
                "sintaxis": [
                    "ssl.PROTOCOL_SSLv2"
                ]
            },
            {
                "nombre": "PROTOCOL_SSLv23",
                "sintaxis": [
                    "ssl.PROTOCOL_SSLv23"
                ]
            },
            {
                "nombre": "PROTOCOL_SSLv3",
                "sintaxis": [
                    "ssl.PROTOCOL_SSLv3"
                ]
            },
            {
                "nombre": "PROTOCOL_TLS",
                "sintaxis": [
                    "ssl.PROTOCOL_TLS"
                ]
            },
            {
                "nombre": "PROTOCOL_TLSv1",
                "sintaxis": [
                    "ssl.PROTOCOL_TLSv1"
                ]
            },
            {
                "nombre": "PROTOCOL_TLSv1_1",
                "sintaxis": [
                    "ssl.PROTOCOL_TLSv1_1"
                ]
            },
            {
                "nombre": "PROTOCOL_TLSv1_2",
                "sintaxis": [
                    "ssl.PROTOCOL_TLSv1_2"
                ]
            },
            {
                "nombre": "PROTOCOL_TLS_CLIENT",
                "sintaxis": [
                    "ssl.PROTOCOL_TLS_CLIENT"
                ]
            },
            {
                "nombre": "PROTOCOL_TLS_SERVER",
                "sintaxis": [
                    "ssl.PROTOCOL_TLS_SERVER"
                ]
            },
            {
                "nombre": "SERVER_AUTH",
                "sintaxis": [
                    "Purpose.SERVER_AUTH"
                ]
            },
            {
                "nombre": "VERIFY_ALLOW_PROXY_CERTS",
                "sintaxis": [
                    "ssl.VERIFY_ALLOW_PROXY_CERTS"
                ]
            },
            {
                "nombre": "VERIFY_CRL_CHECK_CHAIN",
                "sintaxis": [
                    "ssl.VERIFY_CRL_CHECK_CHAIN"
                ]
            },
            {
                "nombre": "VERIFY_CRL_CHECK_LEAF",
                "sintaxis": [
                    "ssl.VERIFY_CRL_CHECK_LEAF"
                ]
            },
            {
                "nombre": "VERIFY_DEFAULT",
                "sintaxis": [
                    "ssl.VERIFY_DEFAULT"
                ]
            },
            {
                "nombre": "VERIFY_X509_PARTIAL_CHAIN",
                "sintaxis": [
                    "ssl.VERIFY_X509_PARTIAL_CHAIN"
                ]
            },
            {
                "nombre": "VERIFY_X509_STRICT",
                "sintaxis": [
                    "ssl.VERIFY_X509_STRICT"
                ]
            },
            {
                "nombre": "VERIFY_X509_TRUSTED_FIRST",
                "sintaxis": [
                    "ssl.VERIFY_X509_TRUSTED_FIRST"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "CertificateError",
                "sintaxis": [
                    "exception ssl.CertificateError"
                ]
            },
            {
                "nombre": "SSLCertVerificationError",
                "sintaxis": [
                    "exception ssl.SSLCertVerificationError"
                ]
            },
            {
                "nombre": "SSLEOFError",
                "sintaxis": [
                    "exception ssl.SSLEOFError"
                ]
            },
            {
                "nombre": "SSLError",
                "sintaxis": [
                    "exception ssl.SSLError"
                ]
            },
            {
                "nombre": "SSLSyscallError",
                "sintaxis": [
                    "exception ssl.SSLSyscallError"
                ]
            },
            {
                "nombre": "SSLWantReadError",
                "sintaxis": [
                    "exception ssl.SSLWantReadError"
                ]
            },
            {
                "nombre": "SSLWantWriteError",
                "sintaxis": [
                    "exception ssl.SSLWantWriteError"
                ]
            },
            {
                "nombre": "SSLZeroReturnError",
                "sintaxis": [
                    "exception ssl.SSLZeroReturnError"
                ]
            }
        ]
    },
    {
        "nombre": "stat",
        "funciones": [
            {
                "nombre": "filemode",
                "sintaxis": [
                    "stat.filemode(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_IFMT",
                "sintaxis": [
                    "stat.S_IFMT(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_IMODE",
                "sintaxis": [
                    "stat.S_IMODE(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISBLK",
                "sintaxis": [
                    "stat.S_ISBLK(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISCHR",
                "sintaxis": [
                    "stat.S_ISCHR(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISDIR",
                "sintaxis": [
                    "stat.S_ISDIR(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISDOOR",
                "sintaxis": [
                    "stat.S_ISDOOR(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISFIFO",
                "sintaxis": [
                    "stat.S_ISFIFO(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISLNK",
                "sintaxis": [
                    "stat.S_ISLNK(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISPORT",
                "sintaxis": [
                    "stat.S_ISPORT(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISREG",
                "sintaxis": [
                    "stat.S_ISREG(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISSOCK",
                "sintaxis": [
                    "stat.S_ISSOCK(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "S_ISWHT",
                "sintaxis": [
                    "stat.S_ISWHT(mode)"
                ],
                "parametros": [
                    "mode"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "FILE_ATTRIBUTE_ARCHIVE",
                "sintaxis": [
                    "stat.FILE_ATTRIBUTE_ARCHIVE"
                ]
            },
            {
                "nombre": "IO_REPARSE_TAG_SYMLINK",
                "sintaxis": [
                    "stat.IO_REPARSE_TAG_SYMLINK"
                ]
            },
            {
                "nombre": "SF_APPEND",
                "sintaxis": [
                    "stat.SF_APPEND"
                ]
            },
            {
                "nombre": "SF_ARCHIVED",
                "sintaxis": [
                    "stat.SF_ARCHIVED"
                ]
            },
            {
                "nombre": "SF_IMMUTABLE",
                "sintaxis": [
                    "stat.SF_IMMUTABLE"
                ]
            },
            {
                "nombre": "SF_NOUNLINK",
                "sintaxis": [
                    "stat.SF_NOUNLINK"
                ]
            },
            {
                "nombre": "SF_SNAPSHOT",
                "sintaxis": [
                    "stat.SF_SNAPSHOT"
                ]
            },
            {
                "nombre": "ST_ATIME",
                "sintaxis": [
                    "stat.ST_ATIME"
                ]
            },
            {
                "nombre": "ST_CTIME",
                "sintaxis": [
                    "stat.ST_CTIME"
                ]
            },
            {
                "nombre": "ST_DEV",
                "sintaxis": [
                    "stat.ST_DEV"
                ]
            },
            {
                "nombre": "ST_GID",
                "sintaxis": [
                    "stat.ST_GID"
                ]
            },
            {
                "nombre": "ST_INO",
                "sintaxis": [
                    "stat.ST_INO"
                ]
            },
            {
                "nombre": "ST_MODE",
                "sintaxis": [
                    "stat.ST_MODE"
                ]
            },
            {
                "nombre": "ST_MTIME",
                "sintaxis": [
                    "stat.ST_MTIME"
                ]
            },
            {
                "nombre": "ST_NLINK",
                "sintaxis": [
                    "stat.ST_NLINK"
                ]
            },
            {
                "nombre": "ST_SIZE",
                "sintaxis": [
                    "stat.ST_SIZE"
                ]
            },
            {
                "nombre": "ST_UID",
                "sintaxis": [
                    "stat.ST_UID"
                ]
            },
            {
                "nombre": "S_ENFMT",
                "sintaxis": [
                    "stat.S_ENFMT"
                ]
            },
            {
                "nombre": "S_IEXEC",
                "sintaxis": [
                    "stat.S_IEXEC"
                ]
            },
            {
                "nombre": "S_IFBLK",
                "sintaxis": [
                    "stat.S_IFBLK"
                ]
            },
            {
                "nombre": "S_IFCHR",
                "sintaxis": [
                    "stat.S_IFCHR"
                ]
            },
            {
                "nombre": "S_IFDIR",
                "sintaxis": [
                    "stat.S_IFDIR"
                ]
            },
            {
                "nombre": "S_IFDOOR",
                "sintaxis": [
                    "stat.S_IFDOOR"
                ]
            },
            {
                "nombre": "S_IFIFO",
                "sintaxis": [
                    "stat.S_IFIFO"
                ]
            },
            {
                "nombre": "S_IFLNK",
                "sintaxis": [
                    "stat.S_IFLNK"
                ]
            },
            {
                "nombre": "S_IFPORT",
                "sintaxis": [
                    "stat.S_IFPORT"
                ]
            },
            {
                "nombre": "S_IFREG",
                "sintaxis": [
                    "stat.S_IFREG"
                ]
            },
            {
                "nombre": "S_IFSOCK",
                "sintaxis": [
                    "stat.S_IFSOCK"
                ]
            },
            {
                "nombre": "S_IFWHT",
                "sintaxis": [
                    "stat.S_IFWHT"
                ]
            },
            {
                "nombre": "S_IREAD",
                "sintaxis": [
                    "stat.S_IREAD"
                ]
            },
            {
                "nombre": "S_IRGRP",
                "sintaxis": [
                    "stat.S_IRGRP"
                ]
            },
            {
                "nombre": "S_IROTH",
                "sintaxis": [
                    "stat.S_IROTH"
                ]
            },
            {
                "nombre": "S_IRUSR",
                "sintaxis": [
                    "stat.S_IRUSR"
                ]
            },
            {
                "nombre": "S_IRWXG",
                "sintaxis": [
                    "stat.S_IRWXG"
                ]
            },
            {
                "nombre": "S_IRWXO",
                "sintaxis": [
                    "stat.S_IRWXO"
                ]
            },
            {
                "nombre": "S_IRWXU",
                "sintaxis": [
                    "stat.S_IRWXU"
                ]
            },
            {
                "nombre": "S_ISGID",
                "sintaxis": [
                    "stat.S_ISGID"
                ]
            },
            {
                "nombre": "S_ISUID",
                "sintaxis": [
                    "stat.S_ISUID"
                ]
            },
            {
                "nombre": "S_ISVTX",
                "sintaxis": [
                    "stat.S_ISVTX"
                ]
            },
            {
                "nombre": "S_IWGRP",
                "sintaxis": [
                    "stat.S_IWGRP"
                ]
            },
            {
                "nombre": "S_IWOTH",
                "sintaxis": [
                    "stat.S_IWOTH"
                ]
            },
            {
                "nombre": "S_IWRITE",
                "sintaxis": [
                    "stat.S_IWRITE"
                ]
            },
            {
                "nombre": "S_IWUSR",
                "sintaxis": [
                    "stat.S_IWUSR"
                ]
            },
            {
                "nombre": "S_IXGRP",
                "sintaxis": [
                    "stat.S_IXGRP"
                ]
            },
            {
                "nombre": "S_IXOTH",
                "sintaxis": [
                    "stat.S_IXOTH"
                ]
            },
            {
                "nombre": "S_IXUSR",
                "sintaxis": [
                    "stat.S_IXUSR"
                ]
            },
            {
                "nombre": "UF_APPEND",
                "sintaxis": [
                    "stat.UF_APPEND"
                ]
            },
            {
                "nombre": "UF_COMPRESSED",
                "sintaxis": [
                    "stat.UF_COMPRESSED"
                ]
            },
            {
                "nombre": "UF_HIDDEN",
                "sintaxis": [
                    "stat.UF_HIDDEN"
                ]
            },
            {
                "nombre": "UF_IMMUTABLE",
                "sintaxis": [
                    "stat.UF_IMMUTABLE"
                ]
            },
            {
                "nombre": "UF_NODUMP",
                "sintaxis": [
                    "stat.UF_NODUMP"
                ]
            },
            {
                "nombre": "UF_NOUNLINK",
                "sintaxis": [
                    "stat.UF_NOUNLINK"
                ]
            },
            {
                "nombre": "UF_OPAQUE",
                "sintaxis": [
                    "stat.UF_OPAQUE"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "statistics",
        "funciones": [
            {
                "nombre": "correlation",
                "sintaxis": [
                    "statistics.correlation(x, y, /)"
                ],
                "parametros": [
                    "/",
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "covariance",
                "sintaxis": [
                    "statistics.covariance(x, y, /)"
                ],
                "parametros": [
                    "/",
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "fmean",
                "sintaxis": [
                    "statistics.fmean(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "geometric_mean",
                "sintaxis": [
                    "statistics.geometric_mean(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "harmonic_mean",
                "sintaxis": [
                    "statistics.harmonic_mean(data, weights=None)"
                ],
                "parametros": [
                    "weights",
                    "data"
                ]
            },
            {
                "nombre": "linear_regression",
                "sintaxis": [
                    "statistics.linear_regression(x, y, /)"
                ],
                "parametros": [
                    "/",
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "mean",
                "sintaxis": [
                    "statistics.mean(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "median",
                "sintaxis": [
                    "statistics.median(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "median_grouped",
                "sintaxis": [
                    "statistics.median_grouped(data, interval=1)"
                ],
                "parametros": [
                    "interval",
                    "data"
                ]
            },
            {
                "nombre": "median_high",
                "sintaxis": [
                    "statistics.median_high(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "median_low",
                "sintaxis": [
                    "statistics.median_low(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "mode",
                "sintaxis": [
                    "statistics.mode(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "multimode",
                "sintaxis": [
                    "statistics.multimode(data)"
                ],
                "parametros": [
                    "data"
                ]
            },
            {
                "nombre": "pstdev",
                "sintaxis": [
                    "statistics.pstdev(data, mu=None)"
                ],
                "parametros": [
                    "mu",
                    "data"
                ]
            },
            {
                "nombre": "pvariance",
                "sintaxis": [
                    "statistics.pvariance(data, mu=None)"
                ],
                "parametros": [
                    "mu",
                    "data"
                ]
            },
            {
                "nombre": "quantiles",
                "sintaxis": [
                    "statistics.quantiles(data, *, n=4, method='exclusive')"
                ],
                "parametros": [
                    "n",
                    "*",
                    "method",
                    "data"
                ]
            },
            {
                "nombre": "stdev",
                "sintaxis": [
                    "statistics.stdev(data, xbar=None)"
                ],
                "parametros": [
                    "xbar",
                    "data"
                ]
            },
            {
                "nombre": "variance",
                "sintaxis": [
                    "statistics.variance(data, xbar=None)"
                ],
                "parametros": [
                    "xbar",
                    "data"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "NormalDist",
                "constructores": [
                    {
                        "nombre": "NormalDist",
                        "sintaxis": [
                            "class statistics.NormalDist(mu=0.0, sigma=1.0)"
                        ],
                        "parametros": [
                            "mu",
                            "sigma"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cdf",
                        "sintaxis": [
                            "cdf(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "from_samples",
                        "sintaxis": [
                            "classmethod from_samples(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "inv_cdf",
                        "sintaxis": [
                            "inv_cdf(p)"
                        ],
                        "parametros": [
                            "p"
                        ]
                    },
                    {
                        "nombre": "overlap",
                        "sintaxis": [
                            "overlap(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "pdf",
                        "sintaxis": [
                            "pdf(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "quantiles",
                        "sintaxis": [
                            "quantiles(n=4)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "samples",
                        "sintaxis": [
                            "samples(n, *, seed=None)"
                        ],
                        "parametros": [
                            "n",
                            "seed",
                            "*"
                        ]
                    },
                    {
                        "nombre": "zscore",
                        "sintaxis": [
                            "zscore(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "mean",
                        "sintaxis": [
                            "mean"
                        ]
                    },
                    {
                        "nombre": "median",
                        "sintaxis": [
                            "median"
                        ]
                    },
                    {
                        "nombre": "mode",
                        "sintaxis": [
                            "mode"
                        ]
                    },
                    {
                        "nombre": "stdev",
                        "sintaxis": [
                            "stdev"
                        ]
                    },
                    {
                        "nombre": "variance",
                        "sintaxis": [
                            "variance"
                        ]
                    }
                ],
                "sintaxis": [
                    "class NormalDist"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "StatisticsError",
                "sintaxis": [
                    "exception statistics.StatisticsError"
                ]
            }
        ]
    },
    {
        "nombre": "string",
        "funciones": [
            {
                "nombre": "capwords",
                "sintaxis": [
                    "string.capwords(s, sep=None)"
                ],
                "parametros": [
                    "s",
                    "sep"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Formatter",
                "constructores": [
                    {
                        "nombre": "Formatter",
                        "sintaxis": [
                            "class string.Formatter"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "check_unused_args",
                        "sintaxis": [
                            "check_unused_args(used_args, args, kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "used_args"
                        ]
                    },
                    {
                        "nombre": "convert_field",
                        "sintaxis": [
                            "convert_field(value, conversion)"
                        ],
                        "parametros": [
                            "conversion",
                            "value"
                        ]
                    },
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format(format_string, /, *args, **kwargs)"
                        ],
                        "parametros": [
                            "**kwargs",
                            "/",
                            "*args",
                            "format_string"
                        ]
                    },
                    {
                        "nombre": "format_field",
                        "sintaxis": [
                            "format_field(value, format_spec)"
                        ],
                        "parametros": [
                            "format_spec",
                            "value"
                        ]
                    },
                    {
                        "nombre": "get_field",
                        "sintaxis": [
                            "get_field(field_name, args, kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "field_name"
                        ]
                    },
                    {
                        "nombre": "get_value",
                        "sintaxis": [
                            "get_value(key, args, kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "key"
                        ]
                    },
                    {
                        "nombre": "parse",
                        "sintaxis": [
                            "parse(format_string)"
                        ],
                        "parametros": [
                            "format_string"
                        ]
                    },
                    {
                        "nombre": "vformat",
                        "sintaxis": [
                            "vformat(format_string, args, kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "format_string"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Formatter"
                ]
            },
            {
                "nombre": "Template",
                "constructores": [
                    {
                        "nombre": "Template",
                        "sintaxis": [
                            "class string.Template(template)"
                        ],
                        "parametros": [
                            "template"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "safe_substitute",
                        "sintaxis": [
                            "safe_substitute(mapping={}, /, **kwds)"
                        ],
                        "parametros": [
                            "/",
                            "mapping",
                            "**kwds"
                        ]
                    },
                    {
                        "nombre": "substitute",
                        "sintaxis": [
                            "substitute(mapping={}, /, **kwds)"
                        ],
                        "parametros": [
                            "/",
                            "mapping",
                            "**kwds"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "template",
                        "sintaxis": [
                            "template"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Template"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ascii_letters",
                "sintaxis": [
                    "string.ascii_letters"
                ]
            },
            {
                "nombre": "ascii_lowercase",
                "sintaxis": [
                    "string.ascii_lowercase"
                ]
            },
            {
                "nombre": "ascii_uppercase",
                "sintaxis": [
                    "string.ascii_uppercase"
                ]
            },
            {
                "nombre": "digits",
                "sintaxis": [
                    "string.digits"
                ]
            },
            {
                "nombre": "hexdigits",
                "sintaxis": [
                    "string.hexdigits"
                ]
            },
            {
                "nombre": "octdigits",
                "sintaxis": [
                    "string.octdigits"
                ]
            },
            {
                "nombre": "printable",
                "sintaxis": [
                    "string.printable"
                ]
            },
            {
                "nombre": "punctuation",
                "sintaxis": [
                    "string.punctuation"
                ]
            },
            {
                "nombre": "whitespace",
                "sintaxis": [
                    "string.whitespace"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "stringprep",
        "funciones": [
            {
                "nombre": "in_table_a1",
                "sintaxis": [
                    "stringprep.in_table_a1(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_b1",
                "sintaxis": [
                    "stringprep.in_table_b1(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c11",
                "sintaxis": [
                    "stringprep.in_table_c11(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c11_c12",
                "sintaxis": [
                    "stringprep.in_table_c11_c12(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c12",
                "sintaxis": [
                    "stringprep.in_table_c12(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c21",
                "sintaxis": [
                    "stringprep.in_table_c21(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c21_c22",
                "sintaxis": [
                    "stringprep.in_table_c21_c22(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c22",
                "sintaxis": [
                    "stringprep.in_table_c22(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c3",
                "sintaxis": [
                    "stringprep.in_table_c3(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c4",
                "sintaxis": [
                    "stringprep.in_table_c4(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c5",
                "sintaxis": [
                    "stringprep.in_table_c5(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c6",
                "sintaxis": [
                    "stringprep.in_table_c6(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c7",
                "sintaxis": [
                    "stringprep.in_table_c7(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c8",
                "sintaxis": [
                    "stringprep.in_table_c8(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_c9",
                "sintaxis": [
                    "stringprep.in_table_c9(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_d1",
                "sintaxis": [
                    "stringprep.in_table_d1(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "in_table_d2",
                "sintaxis": [
                    "stringprep.in_table_d2(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "map_table_b2",
                "sintaxis": [
                    "stringprep.map_table_b2(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "map_table_b3",
                "sintaxis": [
                    "stringprep.map_table_b3(code)"
                ],
                "parametros": [
                    "code"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "struct",
        "funciones": [
            {
                "nombre": "calcsize",
                "sintaxis": [
                    "struct.calcsize(format)"
                ],
                "parametros": [
                    "format"
                ]
            },
            {
                "nombre": "iter_unpack",
                "sintaxis": [
                    "struct.iter_unpack(format, buffer)"
                ],
                "parametros": [
                    "format",
                    "buffer"
                ]
            },
            {
                "nombre": "pack",
                "sintaxis": [
                    "struct.pack(format, v1, v2, ...)"
                ],
                "parametros": [
                    "v1",
                    "format",
                    "...",
                    "v2"
                ]
            },
            {
                "nombre": "pack_into",
                "sintaxis": [
                    "struct.pack_into(format, buffer, offset, v1, v2, ...)"
                ],
                "parametros": [
                    "format",
                    "...",
                    "v1",
                    "buffer",
                    "offset",
                    "v2"
                ]
            },
            {
                "nombre": "unpack",
                "sintaxis": [
                    "struct.unpack(format, buffer)"
                ],
                "parametros": [
                    "format",
                    "buffer"
                ]
            },
            {
                "nombre": "unpack_from",
                "sintaxis": [
                    "struct.unpack_from(format, /, buffer, offset=0)"
                ],
                "parametros": [
                    "format",
                    "offset",
                    "/",
                    "buffer"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Struct",
                "constructores": [
                    {
                        "nombre": "Struct",
                        "sintaxis": [
                            "class struct.Struct(format)"
                        ],
                        "parametros": [
                            "format"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "iter_unpack",
                        "sintaxis": [
                            "iter_unpack(buffer)"
                        ],
                        "parametros": [
                            "buffer"
                        ]
                    },
                    {
                        "nombre": "pack",
                        "sintaxis": [
                            "pack(v1, v2, ...)"
                        ],
                        "parametros": [
                            "v1",
                            "...",
                            "v2"
                        ]
                    },
                    {
                        "nombre": "pack_into",
                        "sintaxis": [
                            "pack_into(buffer, offset, v1, v2, ...)"
                        ],
                        "parametros": [
                            "...",
                            "v1",
                            "buffer",
                            "offset",
                            "v2"
                        ]
                    },
                    {
                        "nombre": "unpack",
                        "sintaxis": [
                            "unpack(buffer)"
                        ],
                        "parametros": [
                            "buffer"
                        ]
                    },
                    {
                        "nombre": "unpack_from",
                        "sintaxis": [
                            "unpack_from(buffer, offset=0)"
                        ],
                        "parametros": [
                            "buffer",
                            "offset"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "size"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Struct"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception struct.error"
                ]
            }
        ]
    },
    {
        "nombre": "subprocess",
        "funciones": [
            {
                "nombre": "call",
                "sintaxis": [
                    "subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None, **other_popen_kwargs)"
                ],
                "parametros": [
                    "args",
                    "stdout",
                    "shell",
                    "stdin",
                    "stderr",
                    "timeout",
                    "*",
                    "other_popen_kwargs",
                    "cwd"
                ]
            },
            {
                "nombre": "check_call",
                "sintaxis": [
                    "subprocess.check_call(args, *, stdin=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None, **other_popen_kwargs)"
                ],
                "parametros": [
                    "args",
                    "stdout",
                    "shell",
                    "stdin",
                    "stderr",
                    "timeout",
                    "*",
                    "other_popen_kwargs",
                    "cwd"
                ]
            },
            {
                "nombre": "check_output",
                "sintaxis": [
                    "subprocess.check_output(args, *, stdin=None, stderr=None, shell=False, cwd=None, encoding=None, errors=None, universal_newlines=None, timeout=None, text=None, **other_popen_kwargs)"
                ],
                "parametros": [
                    "args",
                    "shell",
                    "encoding",
                    "errors",
                    "stdin",
                    "stderr",
                    "timeout",
                    "text",
                    "*",
                    "other_popen_kwargs",
                    "cwd",
                    "universal_newlines"
                ]
            },
            {
                "nombre": "getoutput",
                "sintaxis": [
                    "subprocess.getoutput(cmd)"
                ],
                "parametros": [
                    "cmd"
                ]
            },
            {
                "nombre": "getstatusoutput",
                "sintaxis": [
                    "subprocess.getstatusoutput(cmd)"
                ],
                "parametros": [
                    "cmd"
                ]
            },
            {
                "nombre": "run",
                "sintaxis": [
                    "subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs)"
                ],
                "parametros": [
                    "args",
                    "stdout",
                    "shell",
                    "encoding",
                    "errors",
                    "stdin",
                    "check",
                    "input",
                    "env",
                    "stderr",
                    "capture_output",
                    "timeout",
                    "text",
                    "*",
                    "other_popen_kwargs",
                    "cwd",
                    "universal_newlines"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "CompletedProcess",
                "constructores": [
                    {
                        "nombre": "CompletedProcess",
                        "sintaxis": [
                            "class subprocess.CompletedProcess"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "check_returncode",
                        "sintaxis": [
                            "check_returncode()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "args",
                        "sintaxis": [
                            "args"
                        ]
                    },
                    {
                        "nombre": "returncode",
                        "sintaxis": [
                            "returncode"
                        ]
                    },
                    {
                        "nombre": "stderr",
                        "sintaxis": [
                            "stderr"
                        ]
                    },
                    {
                        "nombre": "stdout",
                        "sintaxis": [
                            "stdout"
                        ]
                    }
                ],
                "sintaxis": [
                    "class CompletedProcess"
                ]
            },
            {
                "nombre": "Popen",
                "constructores": [
                    {
                        "nombre": "Popen",
                        "sintaxis": [
                            "class subprocess.Popen(args, bufsize=- 1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, group=None, extra_groups=None, user=None, umask=- 1, encoding=None, errors=None, text=None, pipesize=- 1)"
                        ],
                        "parametros": [
                            "args",
                            "executable",
                            "umask",
                            "stdin",
                            "pass_fds",
                            "extra_groups",
                            "restore_signals",
                            "shell",
                            "errors",
                            "bufsize",
                            "close_fds",
                            "cwd",
                            "universal_newlines",
                            "pipesize",
                            "creationflags",
                            "startupinfo",
                            "group",
                            "*",
                            "user",
                            "stdout",
                            "encoding",
                            "env",
                            "stderr",
                            "start_new_session",
                            "preexec_fn",
                            "text"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "communicate",
                        "sintaxis": [
                            "Popen.communicate(input=None, timeout=None)"
                        ],
                        "parametros": [
                            "timeout",
                            "input"
                        ]
                    },
                    {
                        "nombre": "kill",
                        "sintaxis": [
                            "Popen.kill()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "poll",
                        "sintaxis": [
                            "Popen.poll()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "send_signal",
                        "sintaxis": [
                            "Popen.send_signal(signal)"
                        ],
                        "parametros": [
                            "signal"
                        ]
                    },
                    {
                        "nombre": "terminate",
                        "sintaxis": [
                            "Popen.terminate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "wait",
                        "sintaxis": [
                            "Popen.wait(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "args",
                        "sintaxis": [
                            "Popen.args"
                        ]
                    },
                    {
                        "nombre": "pid",
                        "sintaxis": [
                            "Popen.pid"
                        ]
                    },
                    {
                        "nombre": "returncode",
                        "sintaxis": [
                            "Popen.returncode"
                        ]
                    },
                    {
                        "nombre": "stderr",
                        "sintaxis": [
                            "Popen.stderr"
                        ]
                    },
                    {
                        "nombre": "stdin",
                        "sintaxis": [
                            "Popen.stdin"
                        ]
                    },
                    {
                        "nombre": "stdout",
                        "sintaxis": [
                            "Popen.stdout"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Popen"
                ]
            },
            {
                "nombre": "STARTUPINFO",
                "constructores": [
                    {
                        "nombre": "STARTUPINFO",
                        "sintaxis": [
                            "class subprocess.STARTUPINFO(*, dwFlags=0, hStdInput=None, hStdOutput=None, hStdError=None, wShowWindow=0, lpAttributeList=None)"
                        ],
                        "parametros": [
                            "hStdOutput",
                            "lpAttributeList",
                            "wShowWindow",
                            "hStdError",
                            "dwFlags",
                            "hStdInput",
                            "*"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "dwFlags",
                        "sintaxis": [
                            "dwFlags"
                        ]
                    },
                    {
                        "nombre": "hStdError",
                        "sintaxis": [
                            "hStdError"
                        ]
                    },
                    {
                        "nombre": "hStdInput",
                        "sintaxis": [
                            "hStdInput"
                        ]
                    },
                    {
                        "nombre": "hStdOutput",
                        "sintaxis": [
                            "hStdOutput"
                        ]
                    },
                    {
                        "nombre": "lpAttributeList",
                        "sintaxis": [
                            "lpAttributeList"
                        ]
                    },
                    {
                        "nombre": "wShowWindow",
                        "sintaxis": [
                            "wShowWindow"
                        ]
                    }
                ],
                "sintaxis": [
                    "class STARTUPINFO"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ABOVE_NORMAL_PRIORITY_CLASS",
                "sintaxis": [
                    "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"
                ]
            },
            {
                "nombre": "BELOW_NORMAL_PRIORITY_CLASS",
                "sintaxis": [
                    "subprocess.BELOW_NORMAL_PRIORITY_CLASS"
                ]
            },
            {
                "nombre": "CREATE_BREAKAWAY_FROM_JOB",
                "sintaxis": [
                    "subprocess.CREATE_BREAKAWAY_FROM_JOB"
                ]
            },
            {
                "nombre": "CREATE_DEFAULT_ERROR_MODE",
                "sintaxis": [
                    "subprocess.CREATE_DEFAULT_ERROR_MODE"
                ]
            },
            {
                "nombre": "CREATE_NEW_CONSOLE",
                "sintaxis": [
                    "subprocess.CREATE_NEW_CONSOLE"
                ]
            },
            {
                "nombre": "CREATE_NEW_PROCESS_GROUP",
                "sintaxis": [
                    "subprocess.CREATE_NEW_PROCESS_GROUP"
                ]
            },
            {
                "nombre": "CREATE_NO_WINDOW",
                "sintaxis": [
                    "subprocess.CREATE_NO_WINDOW"
                ]
            },
            {
                "nombre": "DETACHED_PROCESS",
                "sintaxis": [
                    "subprocess.DETACHED_PROCESS"
                ]
            },
            {
                "nombre": "DEVNULL",
                "sintaxis": [
                    "subprocess.DEVNULL"
                ]
            },
            {
                "nombre": "HIGH_PRIORITY_CLASS",
                "sintaxis": [
                    "subprocess.HIGH_PRIORITY_CLASS"
                ]
            },
            {
                "nombre": "IDLE_PRIORITY_CLASS",
                "sintaxis": [
                    "subprocess.IDLE_PRIORITY_CLASS"
                ]
            },
            {
                "nombre": "NORMAL_PRIORITY_CLASS",
                "sintaxis": [
                    "subprocess.NORMAL_PRIORITY_CLASS"
                ]
            },
            {
                "nombre": "PIPE",
                "sintaxis": [
                    "subprocess.PIPE"
                ]
            },
            {
                "nombre": "REALTIME_PRIORITY_CLASS",
                "sintaxis": [
                    "subprocess.REALTIME_PRIORITY_CLASS"
                ]
            },
            {
                "nombre": "STARTF_USESHOWWINDOW",
                "sintaxis": [
                    "subprocess.STARTF_USESHOWWINDOW"
                ]
            },
            {
                "nombre": "STARTF_USESTDHANDLES",
                "sintaxis": [
                    "subprocess.STARTF_USESTDHANDLES"
                ]
            },
            {
                "nombre": "STDOUT",
                "sintaxis": [
                    "subprocess.STDOUT"
                ]
            },
            {
                "nombre": "STD_ERROR_HANDLE",
                "sintaxis": [
                    "subprocess.STD_ERROR_HANDLE"
                ]
            },
            {
                "nombre": "STD_INPUT_HANDLE",
                "sintaxis": [
                    "subprocess.STD_INPUT_HANDLE"
                ]
            },
            {
                "nombre": "STD_OUTPUT_HANDLE",
                "sintaxis": [
                    "subprocess.STD_OUTPUT_HANDLE"
                ]
            },
            {
                "nombre": "SW_HIDE",
                "sintaxis": [
                    "subprocess.SW_HIDE"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "CalledProcessError",
                "sintaxis": [
                    "exception subprocess.CalledProcessError"
                ]
            },
            {
                "nombre": "SubprocessError",
                "sintaxis": [
                    "exception subprocess.SubprocessError"
                ]
            },
            {
                "nombre": "TimeoutExpired",
                "sintaxis": [
                    "exception subprocess.TimeoutExpired"
                ]
            }
        ]
    },
    {
        "nombre": "sunau",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "sunau.open(file, mode)"
                ],
                "parametros": [
                    "mode",
                    "file"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "AU_read",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "AU_read.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getcompname",
                        "sintaxis": [
                            "AU_read.getcompname()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getcomptype",
                        "sintaxis": [
                            "AU_read.getcomptype()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getframerate",
                        "sintaxis": [
                            "AU_read.getframerate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getmark",
                        "sintaxis": [
                            "AU_read.getmark(id)"
                        ],
                        "parametros": [
                            "id"
                        ]
                    },
                    {
                        "nombre": "getmarkers",
                        "sintaxis": [
                            "AU_read.getmarkers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getnchannels",
                        "sintaxis": [
                            "AU_read.getnchannels()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getnframes",
                        "sintaxis": [
                            "AU_read.getnframes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getparams",
                        "sintaxis": [
                            "AU_read.getparams()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getsampwidth",
                        "sintaxis": [
                            "AU_read.getsampwidth()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readframes",
                        "sintaxis": [
                            "AU_read.readframes(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "rewind",
                        "sintaxis": [
                            "AU_read.rewind()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setpos",
                        "sintaxis": [
                            "AU_read.setpos(pos)"
                        ],
                        "parametros": [
                            "pos"
                        ]
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "AU_read.tell()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AU_read"
                ]
            },
            {
                "nombre": "AU_write",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "AU_write.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setcomptype",
                        "sintaxis": [
                            "AU_write.setcomptype(type, name)"
                        ],
                        "parametros": [
                            "type",
                            "name"
                        ]
                    },
                    {
                        "nombre": "setframerate",
                        "sintaxis": [
                            "AU_write.setframerate(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "setnchannels",
                        "sintaxis": [
                            "AU_write.setnchannels(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "setnframes",
                        "sintaxis": [
                            "AU_write.setnframes(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "setparams",
                        "sintaxis": [
                            "AU_write.setparams(tuple)"
                        ],
                        "parametros": [
                            "tuple"
                        ]
                    },
                    {
                        "nombre": "setsampwidth",
                        "sintaxis": [
                            "AU_write.setsampwidth(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "AU_write.tell()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "writeframes",
                        "sintaxis": [
                            "AU_write.writeframes(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "writeframesraw",
                        "sintaxis": [
                            "AU_write.writeframesraw(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AU_write"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "AUDIO_FILE_ENCODING_FLOAT",
                "sintaxis": [
                    "sunau.AUDIO_FILE_ENCODING_FLOAT"
                ]
            },
            {
                "nombre": "AUDIO_FILE_ENCODING_MULAW_8",
                "sintaxis": [
                    "sunau.AUDIO_FILE_ENCODING_MULAW_8"
                ]
            },
            {
                "nombre": "AUDIO_FILE_MAGIC",
                "sintaxis": [
                    "sunau.AUDIO_FILE_MAGIC"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception sunau.Error"
                ]
            }
        ]
    },
    {
        "nombre": "symtable",
        "funciones": [
            {
                "nombre": "symtable",
                "sintaxis": [
                    "symtable.symtable(code, filename, compile_type)"
                ],
                "parametros": [
                    "code",
                    "filename",
                    "compile_type"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Class",
                "constructores": [
                    {
                        "nombre": "Class",
                        "sintaxis": [
                            "class symtable.Class"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_methods",
                        "sintaxis": [
                            "get_methods()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Class"
                ]
            },
            {
                "nombre": "Function",
                "constructores": [
                    {
                        "nombre": "Function",
                        "sintaxis": [
                            "class symtable.Function"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_frees",
                        "sintaxis": [
                            "get_frees()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_globals",
                        "sintaxis": [
                            "get_globals()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_locals",
                        "sintaxis": [
                            "get_locals()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_nonlocals",
                        "sintaxis": [
                            "get_nonlocals()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_parameters",
                        "sintaxis": [
                            "get_parameters()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Function"
                ]
            },
            {
                "nombre": "Symbol",
                "constructores": [
                    {
                        "nombre": "Symbol",
                        "sintaxis": [
                            "class symtable.Symbol"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_name",
                        "sintaxis": [
                            "get_name()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_namespace",
                        "sintaxis": [
                            "get_namespace()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_namespaces",
                        "sintaxis": [
                            "get_namespaces()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_annotated",
                        "sintaxis": [
                            "is_annotated()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_assigned",
                        "sintaxis": [
                            "is_assigned()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_declared_global",
                        "sintaxis": [
                            "is_declared_global()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_free",
                        "sintaxis": [
                            "is_free()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_global",
                        "sintaxis": [
                            "is_global()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_imported",
                        "sintaxis": [
                            "is_imported()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_local",
                        "sintaxis": [
                            "is_local()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_namespace",
                        "sintaxis": [
                            "is_namespace()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_nonlocal",
                        "sintaxis": [
                            "is_nonlocal()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_parameter",
                        "sintaxis": [
                            "is_parameter()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_referenced",
                        "sintaxis": [
                            "is_referenced()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Symbol"
                ]
            },
            {
                "nombre": "SymbolTable",
                "constructores": [
                    {
                        "nombre": "SymbolTable",
                        "sintaxis": [
                            "class symtable.SymbolTable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_children",
                        "sintaxis": [
                            "get_children()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_id",
                        "sintaxis": [
                            "get_id()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_identifiers",
                        "sintaxis": [
                            "get_identifiers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_lineno",
                        "sintaxis": [
                            "get_lineno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_name",
                        "sintaxis": [
                            "get_name()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_symbols",
                        "sintaxis": [
                            "get_symbols()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_type",
                        "sintaxis": [
                            "get_type()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "has_children",
                        "sintaxis": [
                            "has_children()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_nested",
                        "sintaxis": [
                            "is_nested()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_optimized",
                        "sintaxis": [
                            "is_optimized()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "lookup",
                        "sintaxis": [
                            "lookup(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SymbolTable"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "sys",
        "funciones": [
            {
                "nombre": "addaudithook",
                "sintaxis": [
                    "sys.addaudithook(hook)"
                ],
                "parametros": [
                    "hook"
                ]
            },
            {
                "nombre": "audit",
                "sintaxis": [
                    "sys.audit(event, *args)"
                ],
                "parametros": [
                    "args",
                    "event"
                ]
            },
            {
                "nombre": "breakpointhook",
                "sintaxis": [
                    "sys.breakpointhook()"
                ],
                "parametros": []
            },
            {
                "nombre": "call_tracing",
                "sintaxis": [
                    "sys.call_tracing(func, args)"
                ],
                "parametros": [
                    "args",
                    "func"
                ]
            },
            {
                "nombre": "displayhook",
                "sintaxis": [
                    "sys.displayhook(value)"
                ],
                "parametros": [
                    "value"
                ]
            },
            {
                "nombre": "excepthook",
                "sintaxis": [
                    "sys.excepthook(type, value, traceback)"
                ],
                "parametros": [
                    "type",
                    "value",
                    "traceback"
                ]
            },
            {
                "nombre": "exc_info",
                "sintaxis": [
                    "sys.exc_info()"
                ],
                "parametros": []
            },
            {
                "nombre": "exit",
                "sintaxis": [
                    "sys.exit([arg])"
                ],
                "parametros": [
                    "arg"
                ]
            },
            {
                "nombre": "getallocatedblocks",
                "sintaxis": [
                    "sys.getallocatedblocks()"
                ],
                "parametros": []
            },
            {
                "nombre": "getandroidapilevel",
                "sintaxis": [
                    "sys.getandroidapilevel()"
                ],
                "parametros": []
            },
            {
                "nombre": "getdefaultencoding",
                "sintaxis": [
                    "sys.getdefaultencoding()"
                ],
                "parametros": []
            },
            {
                "nombre": "getdlopenflags",
                "sintaxis": [
                    "sys.getdlopenflags()"
                ],
                "parametros": []
            },
            {
                "nombre": "getfilesystemencodeerrors",
                "sintaxis": [
                    "sys.getfilesystemencodeerrors()"
                ],
                "parametros": []
            },
            {
                "nombre": "getfilesystemencoding",
                "sintaxis": [
                    "sys.getfilesystemencoding()"
                ],
                "parametros": []
            },
            {
                "nombre": "getprofile",
                "sintaxis": [
                    "sys.getprofile()"
                ],
                "parametros": []
            },
            {
                "nombre": "getrecursionlimit",
                "sintaxis": [
                    "sys.getrecursionlimit()"
                ],
                "parametros": []
            },
            {
                "nombre": "getrefcount",
                "sintaxis": [
                    "sys.getrefcount(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getsizeof",
                "sintaxis": [
                    "sys.getsizeof(object[, default])"
                ],
                "parametros": [
                    "object",
                    "default"
                ]
            },
            {
                "nombre": "getswitchinterval",
                "sintaxis": [
                    "sys.getswitchinterval()"
                ],
                "parametros": []
            },
            {
                "nombre": "gettrace",
                "sintaxis": [
                    "sys.gettrace()"
                ],
                "parametros": []
            },
            {
                "nombre": "getwindowsversion",
                "sintaxis": [
                    "sys.getwindowsversion()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_asyncgen_hooks",
                "sintaxis": [
                    "sys.get_asyncgen_hooks()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_coroutine_origin_tracking_depth",
                "sintaxis": [
                    "sys.get_coroutine_origin_tracking_depth()"
                ],
                "parametros": []
            },
            {
                "nombre": "intern",
                "sintaxis": [
                    "sys.intern(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "is_finalizing",
                "sintaxis": [
                    "sys.is_finalizing()"
                ],
                "parametros": []
            },
            {
                "nombre": "setdlopenflags",
                "sintaxis": [
                    "sys.setdlopenflags(n)"
                ],
                "parametros": [
                    "n"
                ]
            },
            {
                "nombre": "setprofile",
                "sintaxis": [
                    "sys.setprofile(profilefunc)"
                ],
                "parametros": [
                    "profilefunc"
                ]
            },
            {
                "nombre": "setrecursionlimit",
                "sintaxis": [
                    "sys.setrecursionlimit(limit)"
                ],
                "parametros": [
                    "limit"
                ]
            },
            {
                "nombre": "setswitchinterval",
                "sintaxis": [
                    "sys.setswitchinterval(interval)"
                ],
                "parametros": [
                    "interval"
                ]
            },
            {
                "nombre": "settrace",
                "sintaxis": [
                    "sys.settrace(tracefunc)"
                ],
                "parametros": [
                    "tracefunc"
                ]
            },
            {
                "nombre": "set_asyncgen_hooks",
                "sintaxis": [
                    "sys.set_asyncgen_hooks(firstiter, finalizer)"
                ],
                "parametros": [
                    "firstiter",
                    "finalizer"
                ]
            },
            {
                "nombre": "set_coroutine_origin_tracking_depth",
                "sintaxis": [
                    "sys.set_coroutine_origin_tracking_depth(depth)"
                ],
                "parametros": [
                    "depth"
                ]
            },
            {
                "nombre": "unraisablehook",
                "sintaxis": [
                    "sys.unraisablehook(unraisable, /)"
                ],
                "parametros": [
                    "/",
                    "unraisable"
                ]
            },
            {
                "nombre": "_clear_type_cache",
                "sintaxis": [
                    "sys._clear_type_cache()"
                ],
                "parametros": []
            },
            {
                "nombre": "_current_exceptions",
                "sintaxis": [
                    "sys._current_exceptions()"
                ],
                "parametros": []
            },
            {
                "nombre": "_current_frames",
                "sintaxis": [
                    "sys._current_frames()"
                ],
                "parametros": []
            },
            {
                "nombre": "_debugmallocstats",
                "sintaxis": [
                    "sys._debugmallocstats()"
                ],
                "parametros": []
            },
            {
                "nombre": "_enablelegacywindowsfsencoding",
                "sintaxis": [
                    "sys._enablelegacywindowsfsencoding()"
                ],
                "parametros": []
            },
            {
                "nombre": "_getframe",
                "sintaxis": [
                    "sys._getframe([depth])"
                ],
                "parametros": [
                    "depth"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "abiflags",
                "sintaxis": [
                    "sys.abiflags"
                ]
            },
            {
                "nombre": "api_version",
                "sintaxis": [
                    "sys.api_version"
                ]
            },
            {
                "nombre": "argv",
                "sintaxis": [
                    "sys.argv"
                ]
            },
            {
                "nombre": "base_exec_prefix",
                "sintaxis": [
                    "sys.base_exec_prefix"
                ]
            },
            {
                "nombre": "base_prefix",
                "sintaxis": [
                    "sys.base_prefix"
                ]
            },
            {
                "nombre": "builtin_module_names",
                "sintaxis": [
                    "sys.builtin_module_names"
                ]
            },
            {
                "nombre": "byteorder",
                "sintaxis": [
                    "sys.byteorder"
                ]
            },
            {
                "nombre": "copyright",
                "sintaxis": [
                    "sys.copyright"
                ]
            },
            {
                "nombre": "dllhandle",
                "sintaxis": [
                    "sys.dllhandle"
                ]
            },
            {
                "nombre": "dont_write_bytecode",
                "sintaxis": [
                    "sys.dont_write_bytecode"
                ]
            },
            {
                "nombre": "executable",
                "sintaxis": [
                    "sys.executable"
                ]
            },
            {
                "nombre": "exec_prefix",
                "sintaxis": [
                    "sys.exec_prefix"
                ]
            },
            {
                "nombre": "flags",
                "sintaxis": [
                    "sys.flags"
                ]
            },
            {
                "nombre": "float_info",
                "sintaxis": [
                    "sys.float_info"
                ]
            },
            {
                "nombre": "float_repr_style",
                "sintaxis": [
                    "sys.float_repr_style"
                ]
            },
            {
                "nombre": "hash_info",
                "sintaxis": [
                    "sys.hash_info"
                ]
            },
            {
                "nombre": "hexversion",
                "sintaxis": [
                    "sys.hexversion"
                ]
            },
            {
                "nombre": "implementation",
                "sintaxis": [
                    "sys.implementation"
                ]
            },
            {
                "nombre": "int_info",
                "sintaxis": [
                    "sys.int_info"
                ]
            },
            {
                "nombre": "last_type",
                "sintaxis": [
                    "sys.last_type"
                ]
            },
            {
                "nombre": "maxsize",
                "sintaxis": [
                    "sys.maxsize"
                ]
            },
            {
                "nombre": "maxunicode",
                "sintaxis": [
                    "sys.maxunicode"
                ]
            },
            {
                "nombre": "meta_path",
                "sintaxis": [
                    "sys.meta_path"
                ]
            },
            {
                "nombre": "modules",
                "sintaxis": [
                    "sys.modules"
                ]
            },
            {
                "nombre": "orig_argv",
                "sintaxis": [
                    "sys.orig_argv"
                ]
            },
            {
                "nombre": "path",
                "sintaxis": [
                    "sys.path"
                ]
            },
            {
                "nombre": "path_hooks",
                "sintaxis": [
                    "sys.path_hooks"
                ]
            },
            {
                "nombre": "path_importer_cache",
                "sintaxis": [
                    "sys.path_importer_cache"
                ]
            },
            {
                "nombre": "platform",
                "sintaxis": [
                    "sys.platform"
                ]
            },
            {
                "nombre": "platlibdir",
                "sintaxis": [
                    "sys.platlibdir"
                ]
            },
            {
                "nombre": "prefix",
                "sintaxis": [
                    "sys.prefix"
                ]
            },
            {
                "nombre": "ps1",
                "sintaxis": [
                    "sys.ps1"
                ]
            },
            {
                "nombre": "pycache_prefix",
                "sintaxis": [
                    "sys.pycache_prefix"
                ]
            },
            {
                "nombre": "stdin",
                "sintaxis": [
                    "sys.stdin"
                ]
            },
            {
                "nombre": "stdlib_module_names",
                "sintaxis": [
                    "sys.stdlib_module_names"
                ]
            },
            {
                "nombre": "thread_info",
                "sintaxis": [
                    "sys.thread_info"
                ]
            },
            {
                "nombre": "tracebacklimit",
                "sintaxis": [
                    "sys.tracebacklimit"
                ]
            },
            {
                "nombre": "version",
                "sintaxis": [
                    "sys.version"
                ]
            },
            {
                "nombre": "version_info",
                "sintaxis": [
                    "sys.version_info"
                ]
            },
            {
                "nombre": "warnoptions",
                "sintaxis": [
                    "sys.warnoptions"
                ]
            },
            {
                "nombre": "winver",
                "sintaxis": [
                    "sys.winver"
                ]
            },
            {
                "nombre": "_xoptions",
                "sintaxis": [
                    "sys._xoptions"
                ]
            },
            {
                "nombre": "__breakpointhook__",
                "sintaxis": [
                    "sys.__breakpointhook__"
                ]
            },
            {
                "nombre": "__interactivehook__",
                "sintaxis": [
                    "sys.__interactivehook__"
                ]
            },
            {
                "nombre": "__stdin__",
                "sintaxis": [
                    "sys.__stdin__"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "sysconfig",
        "funciones": [
            {
                "nombre": "get_config_h_filename",
                "sintaxis": [
                    "sysconfig.get_config_h_filename()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_config_var",
                "sintaxis": [
                    "sysconfig.get_config_var(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "get_config_vars",
                "sintaxis": [
                    "sysconfig.get_config_vars(*args)"
                ],
                "parametros": [
                    "args"
                ]
            },
            {
                "nombre": "get_default_scheme",
                "sintaxis": [
                    "sysconfig.get_default_scheme()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_makefile_filename",
                "sintaxis": [
                    "sysconfig.get_makefile_filename()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_path",
                "sintaxis": [
                    "sysconfig.get_path(name[, scheme[, vars[, expand]]])"
                ],
                "parametros": [
                    "vars",
                    "scheme",
                    "expand",
                    "name"
                ]
            },
            {
                "nombre": "get_paths",
                "sintaxis": [
                    "sysconfig.get_paths([scheme[, vars[, expand]]])"
                ],
                "parametros": [
                    "vars",
                    "scheme",
                    "expand"
                ]
            },
            {
                "nombre": "get_path_names",
                "sintaxis": [
                    "sysconfig.get_path_names()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_platform",
                "sintaxis": [
                    "sysconfig.get_platform()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_preferred_scheme",
                "sintaxis": [
                    "sysconfig.get_preferred_scheme(key)"
                ],
                "parametros": [
                    "key"
                ]
            },
            {
                "nombre": "get_python_version",
                "sintaxis": [
                    "sysconfig.get_python_version()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_scheme_names",
                "sintaxis": [
                    "sysconfig.get_scheme_names()"
                ],
                "parametros": []
            },
            {
                "nombre": "is_python_build",
                "sintaxis": [
                    "sysconfig.is_python_build()"
                ],
                "parametros": []
            },
            {
                "nombre": "parse_config_h",
                "sintaxis": [
                    "sysconfig.parse_config_h(fp[, vars])"
                ],
                "parametros": [
                    "vars",
                    "fp"
                ]
            },
            {
                "nombre": "_get_preferred_schemes",
                "sintaxis": [
                    "sysconfig._get_preferred_schemes()"
                ],
                "parametros": []
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "syslog",
        "funciones": [
            {
                "nombre": "closelog",
                "sintaxis": [
                    "syslog.closelog()"
                ],
                "parametros": []
            },
            {
                "nombre": "openlog",
                "sintaxis": [
                    "syslog.openlog([ident[, logoption[, facility]]])"
                ],
                "parametros": [
                    "logoption",
                    "facility",
                    "ident"
                ]
            },
            {
                "nombre": "setlogmask",
                "sintaxis": [
                    "syslog.setlogmask(maskpri)"
                ],
                "parametros": [
                    "maskpri"
                ]
            },
            {
                "nombre": "syslog",
                "sintaxis": [
                    "syslog.syslog(message)",
                    "syslog.syslog(priority, message)"
                ],
                "parametros": [
                    "message",
                    "priority"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tabnanny",
        "funciones": [
            {
                "nombre": "check",
                "sintaxis": [
                    "tabnanny.check(file_or_dir)"
                ],
                "parametros": [
                    "file_or_dir"
                ]
            },
            {
                "nombre": "process_tokens",
                "sintaxis": [
                    "tabnanny.process_tokens(tokens)"
                ],
                "parametros": [
                    "tokens"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "filename_only",
                "sintaxis": [
                    "tabnanny.filename_only"
                ]
            },
            {
                "nombre": "verbose",
                "sintaxis": [
                    "tabnanny.verbose"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "NannyNag",
                "sintaxis": [
                    "exception tabnanny.NannyNag"
                ]
            }
        ]
    },
    {
        "nombre": "tarfile",
        "funciones": [
            {
                "nombre": "is_tarfile",
                "sintaxis": [
                    "tarfile.is_tarfile(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)"
                ],
                "parametros": [
                    "mode",
                    "kwargs",
                    "name",
                    "bufsize",
                    "fileobj"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "TarFile",
                "constructores": [
                    {
                        "nombre": "TarFile",
                        "sintaxis": [
                            "class tarfile.TarFile(name=None, mode='r', fileobj=None, format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False, ignore_zeros=False, encoding=ENCODING, errors='surrogateescape', pax_headers=None, debug=0, errorlevel=0)",
                            "class tarfile.TarFile"
                        ],
                        "parametros": [
                            "mode",
                            "format",
                            "encoding",
                            "errors",
                            "name",
                            "pax_headers",
                            "dereference",
                            "fileobj",
                            "tarinfo",
                            "ignore_zeros",
                            "debug",
                            "errorlevel"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "TarFile.add(name, arcname=None, recursive=True, *, filter=None)"
                        ],
                        "parametros": [
                            "arcname",
                            "name",
                            "filter",
                            "*",
                            "recursive"
                        ]
                    },
                    {
                        "nombre": "addfile",
                        "sintaxis": [
                            "TarFile.addfile(tarinfo, fileobj=None)"
                        ],
                        "parametros": [
                            "fileobj",
                            "tarinfo"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "TarFile.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "extract",
                        "sintaxis": [
                            "TarFile.extract(member, path='', set_attrs=True, *, numeric_owner=False)"
                        ],
                        "parametros": [
                            "member",
                            "path",
                            "numeric_owner",
                            "set_attrs",
                            "*"
                        ]
                    },
                    {
                        "nombre": "extractall",
                        "sintaxis": [
                            "TarFile.extractall(path='.', members=None, *, numeric_owner=False)"
                        ],
                        "parametros": [
                            "members",
                            "*",
                            "numeric_owner",
                            "path"
                        ]
                    },
                    {
                        "nombre": "extractfile",
                        "sintaxis": [
                            "TarFile.extractfile(member)"
                        ],
                        "parametros": [
                            "member"
                        ]
                    },
                    {
                        "nombre": "getmember",
                        "sintaxis": [
                            "TarFile.getmember(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "getmembers",
                        "sintaxis": [
                            "TarFile.getmembers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getnames",
                        "sintaxis": [
                            "TarFile.getnames()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "gettarinfo",
                        "sintaxis": [
                            "TarFile.gettarinfo(name=None, arcname=None, fileobj=None)"
                        ],
                        "parametros": [
                            "fileobj",
                            "arcname",
                            "name"
                        ]
                    },
                    {
                        "nombre": "list",
                        "sintaxis": [
                            "TarFile.list(verbose=True, *, members=None)"
                        ],
                        "parametros": [
                            "verbose",
                            "members",
                            "*"
                        ]
                    },
                    {
                        "nombre": "next",
                        "sintaxis": [
                            "TarFile.next()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "classmethod TarFile.open(...)"
                        ],
                        "parametros": [
                            "..."
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "pax_headers",
                        "sintaxis": [
                            "TarFile.pax_headers"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TarFile"
                ]
            },
            {
                "nombre": "TarInfo",
                "constructores": [
                    {
                        "nombre": "TarInfo",
                        "sintaxis": [
                            "class tarfile.TarInfo(name='')"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "frombuf",
                        "sintaxis": [
                            "classmethod TarInfo.frombuf(buf, encoding, errors)"
                        ],
                        "parametros": [
                            "encoding",
                            "errors",
                            "buf"
                        ]
                    },
                    {
                        "nombre": "fromtarfile",
                        "sintaxis": [
                            "classmethod TarInfo.fromtarfile(tarfile)"
                        ],
                        "parametros": [
                            "tarfile"
                        ]
                    },
                    {
                        "nombre": "isblk",
                        "sintaxis": [
                            "TarInfo.isblk()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "ischr",
                        "sintaxis": [
                            "TarInfo.ischr()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isdev",
                        "sintaxis": [
                            "TarInfo.isdev()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isdir",
                        "sintaxis": [
                            "TarInfo.isdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isfifo",
                        "sintaxis": [
                            "TarInfo.isfifo()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isfile",
                        "sintaxis": [
                            "TarInfo.isfile()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "islnk",
                        "sintaxis": [
                            "TarInfo.islnk()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isreg",
                        "sintaxis": [
                            "TarInfo.isreg()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "issym",
                        "sintaxis": [
                            "TarInfo.issym()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tobuf",
                        "sintaxis": [
                            "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING, errors='surrogateescape')"
                        ],
                        "parametros": [
                            "format",
                            "encoding",
                            "errors"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "gid",
                        "sintaxis": [
                            "TarInfo.gid"
                        ]
                    },
                    {
                        "nombre": "gname",
                        "sintaxis": [
                            "TarInfo.gname"
                        ]
                    },
                    {
                        "nombre": "linkname",
                        "sintaxis": [
                            "TarInfo.linkname"
                        ]
                    },
                    {
                        "nombre": "mode",
                        "sintaxis": [
                            "TarInfo.mode"
                        ]
                    },
                    {
                        "nombre": "mtime",
                        "sintaxis": [
                            "TarInfo.mtime"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "TarInfo.name"
                        ]
                    },
                    {
                        "nombre": "pax_headers",
                        "sintaxis": [
                            "TarInfo.pax_headers"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "TarInfo.size"
                        ]
                    },
                    {
                        "nombre": "type",
                        "sintaxis": [
                            "TarInfo.type"
                        ]
                    },
                    {
                        "nombre": "uid",
                        "sintaxis": [
                            "TarInfo.uid"
                        ]
                    },
                    {
                        "nombre": "uname",
                        "sintaxis": [
                            "TarInfo.uname"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TarInfo"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "DEFAULT_FORMAT",
                "sintaxis": [
                    "tarfile.DEFAULT_FORMAT"
                ]
            },
            {
                "nombre": "ENCODING",
                "sintaxis": [
                    "tarfile.ENCODING"
                ]
            },
            {
                "nombre": "GNU_FORMAT",
                "sintaxis": [
                    "tarfile.GNU_FORMAT"
                ]
            },
            {
                "nombre": "PAX_FORMAT",
                "sintaxis": [
                    "tarfile.PAX_FORMAT"
                ]
            },
            {
                "nombre": "USTAR_FORMAT",
                "sintaxis": [
                    "tarfile.USTAR_FORMAT"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "CompressionError",
                "sintaxis": [
                    "exception tarfile.CompressionError"
                ]
            },
            {
                "nombre": "ExtractError",
                "sintaxis": [
                    "exception tarfile.ExtractError"
                ]
            },
            {
                "nombre": "HeaderError",
                "sintaxis": [
                    "exception tarfile.HeaderError"
                ]
            },
            {
                "nombre": "ReadError",
                "sintaxis": [
                    "exception tarfile.ReadError"
                ]
            },
            {
                "nombre": "StreamError",
                "sintaxis": [
                    "exception tarfile.StreamError"
                ]
            },
            {
                "nombre": "TarError",
                "sintaxis": [
                    "exception tarfile.TarError"
                ]
            }
        ]
    },
    {
        "nombre": "telnetlib",
        "funciones": [],
        "clases": [
            {
                "nombre": "Telnet",
                "constructores": [
                    {
                        "nombre": "Telnet",
                        "sintaxis": [
                            "class telnetlib.Telnet(host=None, port=0[, timeout])"
                        ],
                        "parametros": [
                            "host",
                            "timeout",
                            "port"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "Telnet.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "expect",
                        "sintaxis": [
                            "Telnet.expect(list, timeout=None)"
                        ],
                        "parametros": [
                            "timeout",
                            "list"
                        ]
                    },
                    {
                        "nombre": "fileno",
                        "sintaxis": [
                            "Telnet.fileno()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_socket",
                        "sintaxis": [
                            "Telnet.get_socket()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "interact",
                        "sintaxis": [
                            "Telnet.interact()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "msg",
                        "sintaxis": [
                            "Telnet.msg(msg, *args)"
                        ],
                        "parametros": [
                            "args",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "mt_interact",
                        "sintaxis": [
                            "Telnet.mt_interact()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "Telnet.open(host, port=0[, timeout])"
                        ],
                        "parametros": [
                            "host",
                            "timeout",
                            "port"
                        ]
                    },
                    {
                        "nombre": "read_all",
                        "sintaxis": [
                            "Telnet.read_all()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_eager",
                        "sintaxis": [
                            "Telnet.read_eager()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_lazy",
                        "sintaxis": [
                            "Telnet.read_lazy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_sb_data",
                        "sintaxis": [
                            "Telnet.read_sb_data()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_some",
                        "sintaxis": [
                            "Telnet.read_some()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_until",
                        "sintaxis": [
                            "Telnet.read_until(expected, timeout=None)"
                        ],
                        "parametros": [
                            "timeout",
                            "expected"
                        ]
                    },
                    {
                        "nombre": "read_very_eager",
                        "sintaxis": [
                            "Telnet.read_very_eager()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_very_lazy",
                        "sintaxis": [
                            "Telnet.read_very_lazy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_debuglevel",
                        "sintaxis": [
                            "Telnet.set_debuglevel(debuglevel)"
                        ],
                        "parametros": [
                            "debuglevel"
                        ]
                    },
                    {
                        "nombre": "set_option_negotiation_callback",
                        "sintaxis": [
                            "Telnet.set_option_negotiation_callback(callback)"
                        ],
                        "parametros": [
                            "callback"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "Telnet.write(buffer)"
                        ],
                        "parametros": [
                            "buffer"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Telnet"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tempfile",
        "funciones": [
            {
                "nombre": "gettempdir",
                "sintaxis": [
                    "tempfile.gettempdir()"
                ],
                "parametros": []
            },
            {
                "nombre": "gettempdirb",
                "sintaxis": [
                    "tempfile.gettempdirb()"
                ],
                "parametros": []
            },
            {
                "nombre": "gettempprefix",
                "sintaxis": [
                    "tempfile.gettempprefix()"
                ],
                "parametros": []
            },
            {
                "nombre": "gettempprefixb",
                "sintaxis": [
                    "tempfile.gettempprefixb()"
                ],
                "parametros": []
            },
            {
                "nombre": "mkdtemp",
                "sintaxis": [
                    "tempfile.mkdtemp(suffix=None, prefix=None, dir=None)"
                ],
                "parametros": [
                    "prefix",
                    "dir",
                    "suffix"
                ]
            },
            {
                "nombre": "mkstemp",
                "sintaxis": [
                    "tempfile.mkstemp(suffix=None, prefix=None, dir=None, text=False)"
                ],
                "parametros": [
                    "prefix",
                    "dir",
                    "suffix",
                    "text"
                ]
            },
            {
                "nombre": "mktemp",
                "sintaxis": [
                    "tempfile.mktemp(suffix='', prefix='tmp', dir=None)"
                ],
                "parametros": [
                    "prefix",
                    "dir",
                    "suffix"
                ]
            },
            {
                "nombre": "NamedTemporaryFile",
                "sintaxis": [
                    "tempfile.NamedTemporaryFile(mode='w+b', buffering=- 1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True, *, errors=None)"
                ],
                "parametros": [
                    "mode",
                    "encoding",
                    "errors",
                    "delete",
                    "buffering",
                    "newline",
                    "prefix",
                    "*",
                    "dir",
                    "suffix"
                ]
            },
            {
                "nombre": "SpooledTemporaryFile",
                "sintaxis": [
                    "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b', buffering=- 1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)"
                ],
                "parametros": [
                    "mode",
                    "encoding",
                    "errors",
                    "max_size",
                    "buffering",
                    "newline",
                    "prefix",
                    "*",
                    "dir",
                    "suffix"
                ]
            },
            {
                "nombre": "TemporaryDirectory",
                "sintaxis": [
                    "tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None, ignore_cleanup_errors=False)"
                ],
                "parametros": [
                    "ignore_cleanup_errors",
                    "prefix",
                    "dir",
                    "suffix"
                ]
            },
            {
                "nombre": "TemporaryFile",
                "sintaxis": [
                    "tempfile.TemporaryFile(mode='w+b', buffering=- 1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)"
                ],
                "parametros": [
                    "mode",
                    "encoding",
                    "errors",
                    "buffering",
                    "newline",
                    "prefix",
                    "*",
                    "dir",
                    "suffix"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "tempdir",
                "sintaxis": [
                    "tempfile.tempdir"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "termios",
        "funciones": [
            {
                "nombre": "tcdrain",
                "sintaxis": [
                    "termios.tcdrain(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "tcflow",
                "sintaxis": [
                    "termios.tcflow(fd, action)"
                ],
                "parametros": [
                    "fd",
                    "action"
                ]
            },
            {
                "nombre": "tcflush",
                "sintaxis": [
                    "termios.tcflush(fd, queue)"
                ],
                "parametros": [
                    "fd",
                    "queue"
                ]
            },
            {
                "nombre": "tcgetattr",
                "sintaxis": [
                    "termios.tcgetattr(fd)"
                ],
                "parametros": [
                    "fd"
                ]
            },
            {
                "nombre": "tcsendbreak",
                "sintaxis": [
                    "termios.tcsendbreak(fd, duration)"
                ],
                "parametros": [
                    "fd",
                    "duration"
                ]
            },
            {
                "nombre": "tcsetattr",
                "sintaxis": [
                    "termios.tcsetattr(fd, when, attributes)"
                ],
                "parametros": [
                    "fd",
                    "when",
                    "attributes"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "test",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "test.support",
        "funciones": [
            {
                "nombre": "anticipate_failure",
                "sintaxis": [
                    "@test.support.anticipate_failure(condition)"
                ],
                "parametros": [
                    "condition"
                ]
            },
            {
                "nombre": "args_from_interpreter_flags",
                "sintaxis": [
                    "test.support.args_from_interpreter_flags()"
                ],
                "parametros": []
            },
            {
                "nombre": "bigaddrspacetest",
                "sintaxis": [
                    "@test.support.bigaddrspacetest(f)"
                ],
                "parametros": [
                    "f"
                ]
            },
            {
                "nombre": "bigmemtest",
                "sintaxis": [
                    "@test.support.bigmemtest(size, memuse, dry_run=True)"
                ],
                "parametros": [
                    "dry_run",
                    "size",
                    "memuse"
                ]
            },
            {
                "nombre": "calcobjsize",
                "sintaxis": [
                    "test.support.calcobjsize(fmt)"
                ],
                "parametros": [
                    "fmt"
                ]
            },
            {
                "nombre": "calcvobjsize",
                "sintaxis": [
                    "test.support.calcvobjsize(fmt)"
                ],
                "parametros": [
                    "fmt"
                ]
            },
            {
                "nombre": "captured_stdin",
                "sintaxis": [
                    "test.support.captured_stdin()",
                    "test.support.captured_stdout()",
                    "test.support.captured_stderr()"
                ],
                "parametros": []
            },
            {
                "nombre": "catch_unraisable_exception",
                "sintaxis": [
                    "test.support.catch_unraisable_exception()"
                ],
                "parametros": []
            },
            {
                "nombre": "checksizeof",
                "sintaxis": [
                    "test.support.checksizeof(test, o, size)"
                ],
                "parametros": [
                    "o",
                    "size",
                    "test"
                ]
            },
            {
                "nombre": "check_disallow_instantiation",
                "sintaxis": [
                    "test.support.check_disallow_instantiation(test_case, tp, *args, **kwds)"
                ],
                "parametros": [
                    "args",
                    "test_case",
                    "kwds",
                    "tp"
                ]
            },
            {
                "nombre": "check_free_after_iterating",
                "sintaxis": [
                    "test.support.check_free_after_iterating(test, iter, cls, args=())"
                ],
                "parametros": [
                    "args",
                    "iter",
                    "cls",
                    "test"
                ]
            },
            {
                "nombre": "check_impl_detail",
                "sintaxis": [
                    "test.support.check_impl_detail(**guards)"
                ],
                "parametros": [
                    "guards"
                ]
            },
            {
                "nombre": "check_syntax_error",
                "sintaxis": [
                    "test.support.check_syntax_error(testcase, statement, errtext='', *, lineno=None, offset=None)"
                ],
                "parametros": [
                    "testcase",
                    "lineno",
                    "statement",
                    "*",
                    "offset",
                    "errtext"
                ]
            },
            {
                "nombre": "check__all__",
                "sintaxis": [
                    "test.support.check__all__(test_case, module, name_of_module=None, extra=(), not_exported=())"
                ],
                "parametros": [
                    "extra",
                    "test_case",
                    "not_exported",
                    "module",
                    "name_of_module"
                ]
            },
            {
                "nombre": "cpython_only",
                "sintaxis": [
                    "@test.support.cpython_only(test)"
                ],
                "parametros": [
                    "test"
                ]
            },
            {
                "nombre": "detect_api_mismatch",
                "sintaxis": [
                    "test.support.detect_api_mismatch(ref_api, other_api, *, ignore=())"
                ],
                "parametros": [
                    "ignore",
                    "other_api",
                    "ref_api",
                    "*"
                ]
            },
            {
                "nombre": "disable_faulthandler",
                "sintaxis": [
                    "test.support.disable_faulthandler()"
                ],
                "parametros": []
            },
            {
                "nombre": "disable_gc",
                "sintaxis": [
                    "test.support.disable_gc()"
                ],
                "parametros": []
            },
            {
                "nombre": "findfile",
                "sintaxis": [
                    "test.support.findfile(filename, subdir=None)"
                ],
                "parametros": [
                    "filename",
                    "subdir"
                ]
            },
            {
                "nombre": "gc_collect",
                "sintaxis": [
                    "test.support.gc_collect()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_attribute",
                "sintaxis": [
                    "test.support.get_attribute(obj, name)"
                ],
                "parametros": [
                    "obj",
                    "name"
                ]
            },
            {
                "nombre": "get_original_stdout",
                "sintaxis": [
                    "test.support.get_original_stdout()"
                ],
                "parametros": []
            },
            {
                "nombre": "impl_detail",
                "sintaxis": [
                    "@test.support.impl_detail(msg=None, **guards)"
                ],
                "parametros": [
                    "msg",
                    "guards"
                ]
            },
            {
                "nombre": "is_resource_enabled",
                "sintaxis": [
                    "test.support.is_resource_enabled(resource)"
                ],
                "parametros": [
                    "resource"
                ]
            },
            {
                "nombre": "load_package_tests",
                "sintaxis": [
                    "test.support.load_package_tests(pkg_dir, loader, standard_tests, pattern)"
                ],
                "parametros": [
                    "standard_tests",
                    "loader",
                    "pattern",
                    "pkg_dir"
                ]
            },
            {
                "nombre": "match_test",
                "sintaxis": [
                    "test.support.match_test(test)"
                ],
                "parametros": [
                    "test"
                ]
            },
            {
                "nombre": "missing_compiler_executable",
                "sintaxis": [
                    "test.support.missing_compiler_executable(cmd_names=[])"
                ],
                "parametros": [
                    "cmd_names"
                ]
            },
            {
                "nombre": "no_tracing",
                "sintaxis": [
                    "@test.support.no_tracing(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "open_urlresource",
                "sintaxis": [
                    "test.support.open_urlresource(url, *args, **kw)"
                ],
                "parametros": [
                    "args",
                    "kw",
                    "url"
                ]
            },
            {
                "nombre": "optim_args_from_interpreter_flags",
                "sintaxis": [
                    "test.support.optim_args_from_interpreter_flags()"
                ],
                "parametros": []
            },
            {
                "nombre": "patch",
                "sintaxis": [
                    "test.support.patch(test_instance, object_to_patch, attr_name, new_value)"
                ],
                "parametros": [
                    "attr_name",
                    "test_instance",
                    "new_value",
                    "object_to_patch"
                ]
            },
            {
                "nombre": "print_warning",
                "sintaxis": [
                    "test.support.print_warning(msg)"
                ],
                "parametros": [
                    "msg"
                ]
            },
            {
                "nombre": "python_is_optimized",
                "sintaxis": [
                    "test.support.python_is_optimized()"
                ],
                "parametros": []
            },
            {
                "nombre": "reap_children",
                "sintaxis": [
                    "test.support.reap_children()"
                ],
                "parametros": []
            },
            {
                "nombre": "record_original_stdout",
                "sintaxis": [
                    "test.support.record_original_stdout(stdout)"
                ],
                "parametros": [
                    "stdout"
                ]
            },
            {
                "nombre": "refcount_test",
                "sintaxis": [
                    "@test.support.refcount_test(test)"
                ],
                "parametros": [
                    "test"
                ]
            },
            {
                "nombre": "requires",
                "sintaxis": [
                    "test.support.requires(resource, msg=None)"
                ],
                "parametros": [
                    "msg",
                    "resource"
                ]
            },
            {
                "nombre": "requires_bz2",
                "sintaxis": [
                    "@test.support.requires_bz2"
                ],
                "parametros": []
            },
            {
                "nombre": "requires_docstrings",
                "sintaxis": [
                    "@test.support.requires_docstrings"
                ],
                "parametros": []
            },
            {
                "nombre": "requires_freebsd_version",
                "sintaxis": [
                    "@test.support.requires_freebsd_version(*min_version)"
                ],
                "parametros": [
                    "min_version"
                ]
            },
            {
                "nombre": "requires_gzip",
                "sintaxis": [
                    "@test.support.requires_gzip"
                ],
                "parametros": []
            },
            {
                "nombre": "requires_IEEE_754",
                "sintaxis": [
                    "@test.support.requires_IEEE_754"
                ],
                "parametros": []
            },
            {
                "nombre": "requires_linux_version",
                "sintaxis": [
                    "@test.support.requires_linux_version(*min_version)"
                ],
                "parametros": [
                    "min_version"
                ]
            },
            {
                "nombre": "requires_lzma",
                "sintaxis": [
                    "@test.support.requires_lzma"
                ],
                "parametros": []
            },
            {
                "nombre": "requires_mac_version",
                "sintaxis": [
                    "@test.support.requires_mac_version(*min_version)"
                ],
                "parametros": [
                    "min_version"
                ]
            },
            {
                "nombre": "requires_resource",
                "sintaxis": [
                    "@test.support.requires_resource(resource)"
                ],
                "parametros": [
                    "resource"
                ]
            },
            {
                "nombre": "requires_zlib",
                "sintaxis": [
                    "@test.support.requires_zlib"
                ],
                "parametros": []
            },
            {
                "nombre": "run_doctest",
                "sintaxis": [
                    "test.support.run_doctest(module, verbosity=None, optionflags=0)"
                ],
                "parametros": [
                    "verbosity",
                    "optionflags",
                    "module"
                ]
            },
            {
                "nombre": "run_in_subinterp",
                "sintaxis": [
                    "test.support.run_in_subinterp(code)"
                ],
                "parametros": [
                    "code"
                ]
            },
            {
                "nombre": "run_unittest",
                "sintaxis": [
                    "test.support.run_unittest(*classes)"
                ],
                "parametros": [
                    "classes"
                ]
            },
            {
                "nombre": "run_with_locale",
                "sintaxis": [
                    "@test.support.run_with_locale(catstr, *locales)"
                ],
                "parametros": [
                    "locales",
                    "catstr"
                ]
            },
            {
                "nombre": "run_with_tz",
                "sintaxis": [
                    "@test.support.run_with_tz(tz)"
                ],
                "parametros": [
                    "tz"
                ]
            },
            {
                "nombre": "setswitchinterval",
                "sintaxis": [
                    "test.support.setswitchinterval(interval)"
                ],
                "parametros": [
                    "interval"
                ]
            },
            {
                "nombre": "set_match_tests",
                "sintaxis": [
                    "test.support.set_match_tests(patterns)"
                ],
                "parametros": [
                    "patterns"
                ]
            },
            {
                "nombre": "set_memlimit",
                "sintaxis": [
                    "test.support.set_memlimit(limit)"
                ],
                "parametros": [
                    "limit"
                ]
            },
            {
                "nombre": "skip_if_broken_multiprocessing_synchronize",
                "sintaxis": [
                    "test.support.skip_if_broken_multiprocessing_synchronize()"
                ],
                "parametros": []
            },
            {
                "nombre": "sortdict",
                "sintaxis": [
                    "test.support.sortdict(dict)"
                ],
                "parametros": [
                    "dict"
                ]
            },
            {
                "nombre": "swap_attr",
                "sintaxis": [
                    "test.support.swap_attr(obj, attr, new_val)"
                ],
                "parametros": [
                    "new_val",
                    "obj",
                    "attr"
                ]
            },
            {
                "nombre": "swap_item",
                "sintaxis": [
                    "test.support.swap_item(obj, attr, new_val)"
                ],
                "parametros": [
                    "new_val",
                    "obj",
                    "attr"
                ]
            },
            {
                "nombre": "system_must_validate_cert",
                "sintaxis": [
                    "test.support.system_must_validate_cert(f)"
                ],
                "parametros": [
                    "f"
                ]
            },
            {
                "nombre": "wait_process",
                "sintaxis": [
                    "test.support.wait_process(pid, *, exitcode, timeout=None)"
                ],
                "parametros": [
                    "exitcode",
                    "*",
                    "pid",
                    "timeout"
                ]
            },
            {
                "nombre": "with_pymalloc",
                "sintaxis": [
                    "test.support.with_pymalloc()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "BasicTestRunner",
                "constructores": [
                    {
                        "nombre": "BasicTestRunner",
                        "sintaxis": [
                            "class test.support.BasicTestRunner"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(test)"
                        ],
                        "parametros": [
                            "test"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BasicTestRunner"
                ]
            },
            {
                "nombre": "Matcher",
                "constructores": [
                    {
                        "nombre": "Matcher",
                        "sintaxis": [
                            "class test.support.Matcher"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "matches",
                        "sintaxis": [
                            "matches(self, d, **kwargs)"
                        ],
                        "parametros": [
                            "d",
                            "self",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "match_value",
                        "sintaxis": [
                            "match_value(self, k, dv, v)"
                        ],
                        "parametros": [
                            "self",
                            "v",
                            "k",
                            "dv"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Matcher"
                ]
            },
            {
                "nombre": "SaveSignals",
                "constructores": [
                    {
                        "nombre": "SaveSignals",
                        "sintaxis": [
                            "class test.support.SaveSignals"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SaveSignals"
                ]
            },
            {
                "nombre": "SuppressCrashReport",
                "constructores": [
                    {
                        "nombre": "SuppressCrashReport",
                        "sintaxis": [
                            "class test.support.SuppressCrashReport"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SuppressCrashReport"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ALWAYS_EQ",
                "sintaxis": [
                    "test.support.ALWAYS_EQ"
                ]
            },
            {
                "nombre": "HAVE_DOCSTRINGS",
                "sintaxis": [
                    "test.support.HAVE_DOCSTRINGS"
                ]
            },
            {
                "nombre": "INTERNET_TIMEOUT",
                "sintaxis": [
                    "test.support.INTERNET_TIMEOUT"
                ]
            },
            {
                "nombre": "is_android",
                "sintaxis": [
                    "test.support.is_android"
                ]
            },
            {
                "nombre": "is_jython",
                "sintaxis": [
                    "test.support.is_jython"
                ]
            },
            {
                "nombre": "LARGEST",
                "sintaxis": [
                    "test.support.LARGEST"
                ]
            },
            {
                "nombre": "LONG_TIMEOUT",
                "sintaxis": [
                    "test.support.LONG_TIMEOUT"
                ]
            },
            {
                "nombre": "LOOPBACK_TIMEOUT",
                "sintaxis": [
                    "test.support.LOOPBACK_TIMEOUT"
                ]
            },
            {
                "nombre": "max_memuse",
                "sintaxis": [
                    "test.support.max_memuse"
                ]
            },
            {
                "nombre": "MAX_Py_ssize_t",
                "sintaxis": [
                    "test.support.MAX_Py_ssize_t"
                ]
            },
            {
                "nombre": "MISSING_C_DOCSTRINGS",
                "sintaxis": [
                    "test.support.MISSING_C_DOCSTRINGS"
                ]
            },
            {
                "nombre": "NEVER_EQ",
                "sintaxis": [
                    "test.support.NEVER_EQ"
                ]
            },
            {
                "nombre": "PGO",
                "sintaxis": [
                    "test.support.PGO"
                ]
            },
            {
                "nombre": "PIPE_MAX_SIZE",
                "sintaxis": [
                    "test.support.PIPE_MAX_SIZE"
                ]
            },
            {
                "nombre": "real_max_memuse",
                "sintaxis": [
                    "test.support.real_max_memuse"
                ]
            },
            {
                "nombre": "SHORT_TIMEOUT",
                "sintaxis": [
                    "test.support.SHORT_TIMEOUT"
                ]
            },
            {
                "nombre": "SMALLEST",
                "sintaxis": [
                    "test.support.SMALLEST"
                ]
            },
            {
                "nombre": "SOCK_MAX_SIZE",
                "sintaxis": [
                    "test.support.SOCK_MAX_SIZE"
                ]
            },
            {
                "nombre": "TEST_DATA_DIR",
                "sintaxis": [
                    "test.support.TEST_DATA_DIR"
                ]
            },
            {
                "nombre": "TEST_HOME_DIR",
                "sintaxis": [
                    "test.support.TEST_HOME_DIR"
                ]
            },
            {
                "nombre": "TEST_HTTP_URL",
                "sintaxis": [
                    "test.support.TEST_HTTP_URL"
                ]
            },
            {
                "nombre": "TEST_SUPPORT_DIR",
                "sintaxis": [
                    "test.support.TEST_SUPPORT_DIR"
                ]
            },
            {
                "nombre": "unix_shell",
                "sintaxis": [
                    "test.support.unix_shell"
                ]
            },
            {
                "nombre": "verbose",
                "sintaxis": [
                    "test.support.verbose"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "ResourceDenied",
                "sintaxis": [
                    "exception test.support.ResourceDenied"
                ]
            },
            {
                "nombre": "TestFailed",
                "sintaxis": [
                    "exception test.support.TestFailed"
                ]
            }
        ]
    },
    {
        "nombre": "test.support.bytecode_helper",
        "funciones": [],
        "clases": [
            {
                "nombre": "BytecodeTestCase",
                "constructores": [
                    {
                        "nombre": "BytecodeTestCase",
                        "sintaxis": [
                            "class test.support.bytecode_helper.BytecodeTestCase(unittest.TestCase)"
                        ],
                        "parametros": [
                            "unittest.TestCase"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "assertInBytecode",
                        "sintaxis": [
                            "BytecodeTestCase.assertInBytecode(x, opname, argval=_UNSPECIFIED)"
                        ],
                        "parametros": [
                            "opname",
                            "argval",
                            "x"
                        ]
                    },
                    {
                        "nombre": "assertNotInBytecode",
                        "sintaxis": [
                            "BytecodeTestCase.assertNotInBytecode(x, opname, argval=_UNSPECIFIED)"
                        ],
                        "parametros": [
                            "opname",
                            "argval",
                            "x"
                        ]
                    },
                    {
                        "nombre": "get_disassembly_as_string",
                        "sintaxis": [
                            "BytecodeTestCase.get_disassembly_as_string(co)"
                        ],
                        "parametros": [
                            "co"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class BytecodeTestCase"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "test.support.import_helper",
        "funciones": [
            {
                "nombre": "forget",
                "sintaxis": [
                    "test.support.import_helper.forget(module_name)"
                ],
                "parametros": [
                    "module_name"
                ]
            },
            {
                "nombre": "import_fresh_module",
                "sintaxis": [
                    "test.support.import_helper.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)"
                ],
                "parametros": [
                    "deprecated",
                    "fresh",
                    "name",
                    "blocked"
                ]
            },
            {
                "nombre": "import_module",
                "sintaxis": [
                    "test.support.import_helper.import_module(name, deprecated=False, *, required_on())"
                ],
                "parametros": [
                    "deprecated",
                    "*",
                    "required_on()",
                    "name"
                ]
            },
            {
                "nombre": "make_legacy_pyc",
                "sintaxis": [
                    "test.support.import_helper.make_legacy_pyc(source)"
                ],
                "parametros": [
                    "source"
                ]
            },
            {
                "nombre": "modules_cleanup",
                "sintaxis": [
                    "test.support.import_helper.modules_cleanup(oldmodules)"
                ],
                "parametros": [
                    "oldmodules"
                ]
            },
            {
                "nombre": "modules_setup",
                "sintaxis": [
                    "test.support.import_helper.modules_setup()"
                ],
                "parametros": []
            },
            {
                "nombre": "unload",
                "sintaxis": [
                    "test.support.import_helper.unload(name)"
                ],
                "parametros": [
                    "name"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "CleanImport",
                "constructores": [
                    {
                        "nombre": "CleanImport",
                        "sintaxis": [
                            "class test.support.import_helper.CleanImport(*module_names)"
                        ],
                        "parametros": [
                            "module_names"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class CleanImport"
                ]
            },
            {
                "nombre": "DirsOnSysPath",
                "constructores": [
                    {
                        "nombre": "DirsOnSysPath",
                        "sintaxis": [
                            "class test.support.import_helper.DirsOnSysPath(*paths)"
                        ],
                        "parametros": [
                            "paths"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DirsOnSysPath"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "test.support.os_helper",
        "funciones": [
            {
                "nombre": "can_symlink",
                "sintaxis": [
                    "test.support.os_helper.can_symlink()"
                ],
                "parametros": []
            },
            {
                "nombre": "can_xattr",
                "sintaxis": [
                    "test.support.os_helper.can_xattr()"
                ],
                "parametros": []
            },
            {
                "nombre": "change_cwd",
                "sintaxis": [
                    "test.support.os_helper.change_cwd(path, quiet=False)"
                ],
                "parametros": [
                    "quiet",
                    "path"
                ]
            },
            {
                "nombre": "create_empty_file",
                "sintaxis": [
                    "test.support.os_helper.create_empty_file(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "fd_count",
                "sintaxis": [
                    "test.support.os_helper.fd_count()"
                ],
                "parametros": []
            },
            {
                "nombre": "fs_is_case_insensitive",
                "sintaxis": [
                    "test.support.os_helper.fs_is_case_insensitive(directory)"
                ],
                "parametros": [
                    "directory"
                ]
            },
            {
                "nombre": "make_bad_fd",
                "sintaxis": [
                    "test.support.os_helper.make_bad_fd()"
                ],
                "parametros": []
            },
            {
                "nombre": "rmdir",
                "sintaxis": [
                    "test.support.os_helper.rmdir(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "rmtree",
                "sintaxis": [
                    "test.support.os_helper.rmtree(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "skip_unless_symlink",
                "sintaxis": [
                    "@test.support.os_helper.skip_unless_symlink"
                ],
                "parametros": []
            },
            {
                "nombre": "skip_unless_xattr",
                "sintaxis": [
                    "@test.support.os_helper.skip_unless_xattr"
                ],
                "parametros": []
            },
            {
                "nombre": "temp_cwd",
                "sintaxis": [
                    "test.support.os_helper.temp_cwd(name='tempcwd', quiet=False)"
                ],
                "parametros": [
                    "quiet",
                    "name"
                ]
            },
            {
                "nombre": "temp_dir",
                "sintaxis": [
                    "test.support.os_helper.temp_dir(path=None, quiet=False)"
                ],
                "parametros": [
                    "quiet",
                    "path"
                ]
            },
            {
                "nombre": "temp_umask",
                "sintaxis": [
                    "test.support.os_helper.temp_umask(umask)"
                ],
                "parametros": [
                    "umask"
                ]
            },
            {
                "nombre": "unlink",
                "sintaxis": [
                    "test.support.os_helper.unlink(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "EnvironmentVarGuard",
                "constructores": [
                    {
                        "nombre": "EnvironmentVarGuard",
                        "sintaxis": [
                            "class test.support.os_helper.EnvironmentVarGuard"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "EnvironmentVarGuard.set(envvar, value)"
                        ],
                        "parametros": [
                            "envvar",
                            "value"
                        ]
                    },
                    {
                        "nombre": "unset",
                        "sintaxis": [
                            "EnvironmentVarGuard.unset(envvar)"
                        ],
                        "parametros": [
                            "envvar"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class EnvironmentVarGuard"
                ]
            },
            {
                "nombre": "FakePath",
                "constructores": [
                    {
                        "nombre": "FakePath",
                        "sintaxis": [
                            "class test.support.os_helper.FakePath(path)"
                        ],
                        "parametros": [
                            "path"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FakePath"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "FS_NONASCII",
                "sintaxis": [
                    "test.support.os_helper.FS_NONASCII"
                ]
            },
            {
                "nombre": "SAVEDCWD",
                "sintaxis": [
                    "test.support.os_helper.SAVEDCWD"
                ]
            },
            {
                "nombre": "TESTFN",
                "sintaxis": [
                    "test.support.os_helper.TESTFN"
                ]
            },
            {
                "nombre": "TESTFN_NONASCII",
                "sintaxis": [
                    "test.support.os_helper.TESTFN_NONASCII"
                ]
            },
            {
                "nombre": "TESTFN_UNDECODABLE",
                "sintaxis": [
                    "test.support.os_helper.TESTFN_UNDECODABLE"
                ]
            },
            {
                "nombre": "TESTFN_UNENCODABLE",
                "sintaxis": [
                    "test.support.os_helper.TESTFN_UNENCODABLE"
                ]
            },
            {
                "nombre": "TESTFN_UNICODE",
                "sintaxis": [
                    "test.support.os_helper.TESTFN_UNICODE"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "test.support.script_helper",
        "funciones": [
            {
                "nombre": "assert_python_failure",
                "sintaxis": [
                    "test.support.script_helper.assert_python_failure(*args, **env_vars)"
                ],
                "parametros": [
                    "args",
                    "env_vars"
                ]
            },
            {
                "nombre": "assert_python_ok",
                "sintaxis": [
                    "test.support.script_helper.assert_python_ok(*args, **env_vars)"
                ],
                "parametros": [
                    "args",
                    "env_vars"
                ]
            },
            {
                "nombre": "interpreter_requires_environment",
                "sintaxis": [
                    "test.support.script_helper.interpreter_requires_environment()"
                ],
                "parametros": []
            },
            {
                "nombre": "kill_python",
                "sintaxis": [
                    "test.support.script_helper.kill_python(p)"
                ],
                "parametros": [
                    "p"
                ]
            },
            {
                "nombre": "make_pkg",
                "sintaxis": [
                    "test.support.script_helper.make_pkg(pkg_dir, init_source='')"
                ],
                "parametros": [
                    "init_source",
                    "pkg_dir"
                ]
            },
            {
                "nombre": "make_script",
                "sintaxis": [
                    "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)"
                ],
                "parametros": [
                    "omit_suffix",
                    "script_dir",
                    "source",
                    "script_basename"
                ]
            },
            {
                "nombre": "make_zip_pkg",
                "sintaxis": [
                    "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1, compiled=False)"
                ],
                "parametros": [
                    "depth",
                    "pkg_name",
                    "script_basename",
                    "source",
                    "compiled",
                    "zip_basename",
                    "zip_dir"
                ]
            },
            {
                "nombre": "make_zip_script",
                "sintaxis": [
                    "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)"
                ],
                "parametros": [
                    "script_name",
                    "name_in_zip",
                    "zip_basename",
                    "zip_dir"
                ]
            },
            {
                "nombre": "run_python_until_end",
                "sintaxis": [
                    "test.support.script_helper.run_python_until_end(*args, **env_vars)"
                ],
                "parametros": [
                    "args",
                    "env_vars"
                ]
            },
            {
                "nombre": "spawn_python",
                "sintaxis": [
                    "test.support.script_helper.spawn_python(*args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, **kw)"
                ],
                "parametros": [
                    "args",
                    "stdout",
                    "kw",
                    "stderr"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "test.support.socket_helper",
        "funciones": [
            {
                "nombre": "bind_port",
                "sintaxis": [
                    "test.support.socket_helper.bind_port(sock, host=HOST)"
                ],
                "parametros": [
                    "host",
                    "sock"
                ]
            },
            {
                "nombre": "bind_unix_socket",
                "sintaxis": [
                    "test.support.socket_helper.bind_unix_socket(sock, addr)"
                ],
                "parametros": [
                    "addr",
                    "sock"
                ]
            },
            {
                "nombre": "find_unused_port",
                "sintaxis": [
                    "test.support.socket_helper.find_unused_port(family=socket.AF_INET, socktype=socket.SOCK_STREAM)"
                ],
                "parametros": [
                    "socktype",
                    "family"
                ]
            },
            {
                "nombre": "skip_unless_bind_unix_socket",
                "sintaxis": [
                    "@test.support.socket_helper.skip_unless_bind_unix_socket"
                ],
                "parametros": []
            },
            {
                "nombre": "transient_internet",
                "sintaxis": [
                    "test.support.socket_helper.transient_internet(resource_name, *, timeout=30.0, errnos=())"
                ],
                "parametros": [
                    "resource_name",
                    "timeout",
                    "*",
                    "errnos"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "IPV6_ENABLED",
                "sintaxis": [
                    "test.support.socket_helper.IPV6_ENABLED"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "test.support.threading_helper",
        "funciones": [
            {
                "nombre": "catch_threading_exception",
                "sintaxis": [
                    "test.support.threading_helper.catch_threading_exception()"
                ],
                "parametros": []
            },
            {
                "nombre": "join_thread",
                "sintaxis": [
                    "test.support.threading_helper.join_thread(thread, timeout=None)"
                ],
                "parametros": [
                    "timeout",
                    "thread"
                ]
            },
            {
                "nombre": "reap_threads",
                "sintaxis": [
                    "@test.support.threading_helper.reap_threads(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "start_threads",
                "sintaxis": [
                    "test.support.threading_helper.start_threads(threads, unlock=None)"
                ],
                "parametros": [
                    "unlock",
                    "threads"
                ]
            },
            {
                "nombre": "threading_cleanup",
                "sintaxis": [
                    "test.support.threading_helper.threading_cleanup(*original_values)"
                ],
                "parametros": [
                    "original_values"
                ]
            },
            {
                "nombre": "threading_setup",
                "sintaxis": [
                    "test.support.threading_helper.threading_setup()"
                ],
                "parametros": []
            },
            {
                "nombre": "wait_threads_exit",
                "sintaxis": [
                    "test.support.threading_helper.wait_threads_exit(timeout=None)"
                ],
                "parametros": [
                    "timeout"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "test.support.warnings_helper",
        "funciones": [
            {
                "nombre": "check_no_resource_warning",
                "sintaxis": [
                    "test.support.warnings_helper.check_no_resource_warning(testcase)"
                ],
                "parametros": [
                    "testcase"
                ]
            },
            {
                "nombre": "check_syntax_warning",
                "sintaxis": [
                    "test.support.warnings_helper.check_syntax_warning(testcase, statement, errtext='', *, lineno=1, offset=None)"
                ],
                "parametros": [
                    "testcase",
                    "lineno",
                    "statement",
                    "*",
                    "offset",
                    "errtext"
                ]
            },
            {
                "nombre": "check_warnings",
                "sintaxis": [
                    "test.support.warnings_helper.check_warnings(*filters, quiet=True)"
                ],
                "parametros": [
                    "quiet",
                    "filters"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "WarningsRecorder",
                "constructores": [
                    {
                        "nombre": "WarningsRecorder",
                        "sintaxis": [
                            "class test.support.warnings_helper.WarningsRecorder"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class WarningsRecorder"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "textwrap",
        "funciones": [
            {
                "nombre": "dedent",
                "sintaxis": [
                    "textwrap.dedent(text)"
                ],
                "parametros": [
                    "text"
                ]
            },
            {
                "nombre": "fill",
                "sintaxis": [
                    "textwrap.fill(text, width=70, *, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None)"
                ],
                "parametros": [
                    "break_long_words",
                    "drop_whitespace",
                    "replace_whitespace",
                    "expand_tabs",
                    "tabsize",
                    "fix_sentence_endings",
                    "width",
                    "subsequent_indent",
                    "initial_indent",
                    "text",
                    "break_on_hyphens",
                    "max_lines",
                    "*"
                ]
            },
            {
                "nombre": "indent",
                "sintaxis": [
                    "textwrap.indent(text, prefix, predicate=None)"
                ],
                "parametros": [
                    "predicate",
                    "prefix",
                    "text"
                ]
            },
            {
                "nombre": "shorten",
                "sintaxis": [
                    "textwrap.shorten(text, width, *, fix_sentence_endings=False, break_long_words=True, break_on_hyphens=True, placeholder=' [...]')"
                ],
                "parametros": [
                    "break_long_words",
                    "placeholder",
                    "fix_sentence_endings",
                    "width",
                    "break_on_hyphens",
                    "text",
                    "*"
                ]
            },
            {
                "nombre": "wrap",
                "sintaxis": [
                    "textwrap.wrap(text, width=70, *, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None)"
                ],
                "parametros": [
                    "break_long_words",
                    "drop_whitespace",
                    "replace_whitespace",
                    "expand_tabs",
                    "tabsize",
                    "fix_sentence_endings",
                    "width",
                    "subsequent_indent",
                    "initial_indent",
                    "text",
                    "break_on_hyphens",
                    "max_lines",
                    "*"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "TextWrapper",
                "constructores": [
                    {
                        "nombre": "TextWrapper",
                        "sintaxis": [
                            "class textwrap.TextWrapper(**kwargs)"
                        ],
                        "parametros": [
                            "kwargs"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "fill",
                        "sintaxis": [
                            "fill(text)"
                        ],
                        "parametros": [
                            "text"
                        ]
                    },
                    {
                        "nombre": "wrap",
                        "sintaxis": [
                            "wrap(text)"
                        ],
                        "parametros": [
                            "text"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "break_long_words",
                        "sintaxis": [
                            "break_long_words"
                        ]
                    },
                    {
                        "nombre": "break_on_hyphens",
                        "sintaxis": [
                            "break_on_hyphens"
                        ]
                    },
                    {
                        "nombre": "drop_whitespace",
                        "sintaxis": [
                            "drop_whitespace"
                        ]
                    },
                    {
                        "nombre": "expand_tabs",
                        "sintaxis": [
                            "expand_tabs"
                        ]
                    },
                    {
                        "nombre": "fix_sentence_endings",
                        "sintaxis": [
                            "fix_sentence_endings"
                        ]
                    },
                    {
                        "nombre": "initial_indent",
                        "sintaxis": [
                            "initial_indent"
                        ]
                    },
                    {
                        "nombre": "max_lines",
                        "sintaxis": [
                            "max_lines"
                        ]
                    },
                    {
                        "nombre": "placeholder",
                        "sintaxis": [
                            "placeholder"
                        ]
                    },
                    {
                        "nombre": "replace_whitespace",
                        "sintaxis": [
                            "replace_whitespace"
                        ]
                    },
                    {
                        "nombre": "subsequent_indent",
                        "sintaxis": [
                            "subsequent_indent"
                        ]
                    },
                    {
                        "nombre": "tabsize",
                        "sintaxis": [
                            "tabsize"
                        ]
                    },
                    {
                        "nombre": "width",
                        "sintaxis": [
                            "width"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TextWrapper"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "threading",
        "funciones": [
            {
                "nombre": "active_count",
                "sintaxis": [
                    "threading.active_count()"
                ],
                "parametros": []
            },
            {
                "nombre": "current_thread",
                "sintaxis": [
                    "threading.current_thread()"
                ],
                "parametros": []
            },
            {
                "nombre": "enumerate",
                "sintaxis": [
                    "threading.enumerate()"
                ],
                "parametros": []
            },
            {
                "nombre": "excepthook",
                "sintaxis": [
                    "threading.excepthook(args, /)"
                ],
                "parametros": [
                    "args",
                    "/"
                ]
            },
            {
                "nombre": "getprofile",
                "sintaxis": [
                    "threading.getprofile()"
                ],
                "parametros": []
            },
            {
                "nombre": "gettrace",
                "sintaxis": [
                    "threading.gettrace()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_ident",
                "sintaxis": [
                    "threading.get_ident()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_native_id",
                "sintaxis": [
                    "threading.get_native_id()"
                ],
                "parametros": []
            },
            {
                "nombre": "main_thread",
                "sintaxis": [
                    "threading.main_thread()"
                ],
                "parametros": []
            },
            {
                "nombre": "setprofile",
                "sintaxis": [
                    "threading.setprofile(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "settrace",
                "sintaxis": [
                    "threading.settrace(func)"
                ],
                "parametros": [
                    "func"
                ]
            },
            {
                "nombre": "stack_size",
                "sintaxis": [
                    "threading.stack_size([size])"
                ],
                "parametros": [
                    "size"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Barrier",
                "constructores": [
                    {
                        "nombre": "Barrier",
                        "sintaxis": [
                            "class threading.Barrier(parties, action=None, timeout=None)"
                        ],
                        "parametros": [
                            "action",
                            "timeout",
                            "parties"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "abort",
                        "sintaxis": [
                            "abort()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "wait",
                        "sintaxis": [
                            "wait(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "broken",
                        "sintaxis": [
                            "broken"
                        ]
                    },
                    {
                        "nombre": "n_waiting",
                        "sintaxis": [
                            "n_waiting"
                        ]
                    },
                    {
                        "nombre": "parties",
                        "sintaxis": [
                            "parties"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Barrier"
                ]
            },
            {
                "nombre": "BoundedSemaphore",
                "constructores": [
                    {
                        "nombre": "BoundedSemaphore",
                        "sintaxis": [
                            "class threading.BoundedSemaphore(value=1)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BoundedSemaphore"
                ]
            },
            {
                "nombre": "Condition",
                "constructores": [
                    {
                        "nombre": "Condition",
                        "sintaxis": [
                            "class threading.Condition(lock=None)"
                        ],
                        "parametros": [
                            "lock"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "acquire(*args)"
                        ],
                        "parametros": [
                            "args"
                        ]
                    },
                    {
                        "nombre": "notify",
                        "sintaxis": [
                            "notify(n=1)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "notify_all",
                        "sintaxis": [
                            "notify_all()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "wait",
                        "sintaxis": [
                            "wait(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "wait_for",
                        "sintaxis": [
                            "wait_for(predicate, timeout=None)"
                        ],
                        "parametros": [
                            "timeout",
                            "predicate"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Condition"
                ]
            },
            {
                "nombre": "Event",
                "constructores": [
                    {
                        "nombre": "Event",
                        "sintaxis": [
                            "class threading.Event"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_set",
                        "sintaxis": [
                            "is_set()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "wait",
                        "sintaxis": [
                            "wait(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Event"
                ]
            },
            {
                "nombre": "local",
                "constructores": [
                    {
                        "nombre": "local",
                        "sintaxis": [
                            "class threading.local"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class local"
                ]
            },
            {
                "nombre": "Lock",
                "constructores": [
                    {
                        "nombre": "Lock",
                        "sintaxis": [
                            "class threading.Lock"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "acquire(blocking=True, timeout=- 1)"
                        ],
                        "parametros": [
                            "blocking",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "locked",
                        "sintaxis": [
                            "locked()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Lock"
                ]
            },
            {
                "nombre": "RLock",
                "constructores": [
                    {
                        "nombre": "RLock",
                        "sintaxis": [
                            "class threading.RLock"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "acquire(blocking=True, timeout=- 1)"
                        ],
                        "parametros": [
                            "blocking",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class RLock"
                ]
            },
            {
                "nombre": "Semaphore",
                "constructores": [
                    {
                        "nombre": "Semaphore",
                        "sintaxis": [
                            "class threading.Semaphore(value=1)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "acquire",
                        "sintaxis": [
                            "acquire(blocking=True, timeout=None)"
                        ],
                        "parametros": [
                            "blocking",
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "release",
                        "sintaxis": [
                            "release(n=1)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Semaphore"
                ]
            },
            {
                "nombre": "Thread",
                "constructores": [
                    {
                        "nombre": "Thread",
                        "sintaxis": [
                            "class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "name",
                            "daemon",
                            "group",
                            "target",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getName",
                        "sintaxis": [
                            "getName()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "isDaemon",
                        "sintaxis": [
                            "isDaemon()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_alive",
                        "sintaxis": [
                            "is_alive()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "join",
                        "sintaxis": [
                            "join(timeout=None)"
                        ],
                        "parametros": [
                            "timeout"
                        ]
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "start()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "daemon",
                        "sintaxis": [
                            "daemon"
                        ]
                    },
                    {
                        "nombre": "ident",
                        "sintaxis": [
                            "ident"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "native_id",
                        "sintaxis": [
                            "native_id"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Thread"
                ]
            },
            {
                "nombre": "Timer",
                "constructores": [
                    {
                        "nombre": "Timer",
                        "sintaxis": [
                            "class threading.Timer(interval, function, args=None, kwargs=None)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs",
                            "interval",
                            "function"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cancel",
                        "sintaxis": [
                            "cancel()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Timer"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "TIMEOUT_MAX",
                "sintaxis": [
                    "threading.TIMEOUT_MAX"
                ]
            },
            {
                "nombre": "__excepthook__",
                "sintaxis": [
                    "threading.__excepthook__"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "BrokenBarrierError",
                "sintaxis": [
                    "exception threading.BrokenBarrierError"
                ]
            }
        ]
    },
    {
        "nombre": "time",
        "funciones": [
            {
                "nombre": "asctime",
                "sintaxis": [
                    "time.asctime([t])"
                ],
                "parametros": [
                    "t"
                ]
            },
            {
                "nombre": "clock_getres",
                "sintaxis": [
                    "time.clock_getres(clk_id)"
                ],
                "parametros": [
                    "clk_id"
                ]
            },
            {
                "nombre": "clock_gettime",
                "sintaxis": [
                    "time.clock_gettime(clk_id) \u2192 float"
                ],
                "parametros": [
                    "clk_id"
                ]
            },
            {
                "nombre": "clock_gettime_ns",
                "sintaxis": [
                    "time.clock_gettime_ns(clk_id) \u2192 int"
                ],
                "parametros": [
                    "clk_id"
                ]
            },
            {
                "nombre": "clock_settime",
                "sintaxis": [
                    "time.clock_settime(clk_id, time: float)"
                ],
                "parametros": [
                    "clk_id",
                    "time"
                ]
            },
            {
                "nombre": "clock_settime_ns",
                "sintaxis": [
                    "time.clock_settime_ns(clk_id, time: int)"
                ],
                "parametros": [
                    "clk_id",
                    "time"
                ]
            },
            {
                "nombre": "ctime",
                "sintaxis": [
                    "time.ctime([secs])"
                ],
                "parametros": [
                    "secs"
                ]
            },
            {
                "nombre": "get_clock_info",
                "sintaxis": [
                    "time.get_clock_info(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "gmtime",
                "sintaxis": [
                    "time.gmtime([secs])"
                ],
                "parametros": [
                    "secs"
                ]
            },
            {
                "nombre": "localtime",
                "sintaxis": [
                    "time.localtime([secs])"
                ],
                "parametros": [
                    "secs"
                ]
            },
            {
                "nombre": "mktime",
                "sintaxis": [
                    "time.mktime(t)"
                ],
                "parametros": [
                    "t"
                ]
            },
            {
                "nombre": "monotonic",
                "sintaxis": [
                    "time.monotonic() \u2192 float"
                ],
                "parametros": []
            },
            {
                "nombre": "monotonic_ns",
                "sintaxis": [
                    "time.monotonic_ns() \u2192 int"
                ],
                "parametros": []
            },
            {
                "nombre": "perf_counter",
                "sintaxis": [
                    "time.perf_counter() \u2192 float"
                ],
                "parametros": []
            },
            {
                "nombre": "perf_counter_ns",
                "sintaxis": [
                    "time.perf_counter_ns() \u2192 int"
                ],
                "parametros": []
            },
            {
                "nombre": "process_time",
                "sintaxis": [
                    "time.process_time() \u2192 float"
                ],
                "parametros": []
            },
            {
                "nombre": "process_time_ns",
                "sintaxis": [
                    "time.process_time_ns() \u2192 int"
                ],
                "parametros": []
            },
            {
                "nombre": "pthread_getcpuclockid",
                "sintaxis": [
                    "time.pthread_getcpuclockid(thread_id)"
                ],
                "parametros": [
                    "thread_id"
                ]
            },
            {
                "nombre": "sleep",
                "sintaxis": [
                    "time.sleep(secs)"
                ],
                "parametros": [
                    "secs"
                ]
            },
            {
                "nombre": "strftime",
                "sintaxis": [
                    "time.strftime(format[, t])"
                ],
                "parametros": [
                    "format",
                    "t"
                ]
            },
            {
                "nombre": "strptime",
                "sintaxis": [
                    "time.strptime(string[, format])"
                ],
                "parametros": [
                    "format",
                    "string"
                ]
            },
            {
                "nombre": "thread_time",
                "sintaxis": [
                    "time.thread_time() \u2192 float"
                ],
                "parametros": []
            },
            {
                "nombre": "thread_time_ns",
                "sintaxis": [
                    "time.thread_time_ns() \u2192 int"
                ],
                "parametros": []
            },
            {
                "nombre": "time",
                "sintaxis": [
                    "time.time() \u2192 float"
                ],
                "parametros": []
            },
            {
                "nombre": "time_ns",
                "sintaxis": [
                    "time.time_ns() \u2192 int"
                ],
                "parametros": []
            },
            {
                "nombre": "tzset",
                "sintaxis": [
                    "time.tzset()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "struct_time",
                "constructores": [
                    {
                        "nombre": "struct_time",
                        "sintaxis": [
                            "class time.struct_time"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class struct_time"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "altzone",
                "sintaxis": [
                    "time.altzone"
                ]
            },
            {
                "nombre": "CLOCK_BOOTTIME",
                "sintaxis": [
                    "time.CLOCK_BOOTTIME"
                ]
            },
            {
                "nombre": "CLOCK_HIGHRES",
                "sintaxis": [
                    "time.CLOCK_HIGHRES"
                ]
            },
            {
                "nombre": "CLOCK_MONOTONIC",
                "sintaxis": [
                    "time.CLOCK_MONOTONIC"
                ]
            },
            {
                "nombre": "CLOCK_MONOTONIC_RAW",
                "sintaxis": [
                    "time.CLOCK_MONOTONIC_RAW"
                ]
            },
            {
                "nombre": "CLOCK_PROCESS_CPUTIME_ID",
                "sintaxis": [
                    "time.CLOCK_PROCESS_CPUTIME_ID"
                ]
            },
            {
                "nombre": "CLOCK_PROF",
                "sintaxis": [
                    "time.CLOCK_PROF"
                ]
            },
            {
                "nombre": "CLOCK_REALTIME",
                "sintaxis": [
                    "time.CLOCK_REALTIME"
                ]
            },
            {
                "nombre": "CLOCK_TAI",
                "sintaxis": [
                    "time.CLOCK_TAI"
                ]
            },
            {
                "nombre": "CLOCK_THREAD_CPUTIME_ID",
                "sintaxis": [
                    "time.CLOCK_THREAD_CPUTIME_ID"
                ]
            },
            {
                "nombre": "CLOCK_UPTIME",
                "sintaxis": [
                    "time.CLOCK_UPTIME"
                ]
            },
            {
                "nombre": "CLOCK_UPTIME_RAW",
                "sintaxis": [
                    "time.CLOCK_UPTIME_RAW"
                ]
            },
            {
                "nombre": "daylight",
                "sintaxis": [
                    "time.daylight"
                ]
            },
            {
                "nombre": "timezone",
                "sintaxis": [
                    "time.timezone"
                ]
            },
            {
                "nombre": "tzname",
                "sintaxis": [
                    "time.tzname"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "timeit",
        "funciones": [
            {
                "nombre": "default_timer",
                "sintaxis": [
                    "timeit.default_timer()"
                ],
                "parametros": []
            },
            {
                "nombre": "repeat",
                "sintaxis": [
                    "timeit.repeat(stmt='pass', setup='pass', timer=<default timer>, repeat=5, number=1000000, globals=None)"
                ],
                "parametros": [
                    "stmt",
                    "repeat",
                    "setup",
                    "globals",
                    "number",
                    "timer"
                ]
            },
            {
                "nombre": "timeit",
                "sintaxis": [
                    "timeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)"
                ],
                "parametros": [
                    "stmt",
                    "setup",
                    "globals",
                    "number",
                    "timer"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Timer",
                "constructores": [
                    {
                        "nombre": "Timer",
                        "sintaxis": [
                            "class timeit.Timer(stmt='pass', setup='pass', timer=<timer function>, globals=None)"
                        ],
                        "parametros": [
                            "timer",
                            "globals",
                            "stmt",
                            "setup"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "autorange",
                        "sintaxis": [
                            "autorange(callback=None)"
                        ],
                        "parametros": [
                            "callback"
                        ]
                    },
                    {
                        "nombre": "print_exc",
                        "sintaxis": [
                            "print_exc(file=None)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    },
                    {
                        "nombre": "repeat",
                        "sintaxis": [
                            "repeat(repeat=5, number=1000000)"
                        ],
                        "parametros": [
                            "repeat",
                            "number"
                        ]
                    },
                    {
                        "nombre": "timeit",
                        "sintaxis": [
                            "timeit(number=1000000)"
                        ],
                        "parametros": [
                            "number"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Timer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter",
        "funciones": [
            {
                "nombre": "Tcl",
                "sintaxis": [
                    "tkinter.Tcl(screenName=None, baseName=None, className='Tk', useTk=0)"
                ],
                "parametros": [
                    "baseName",
                    "className",
                    "screenName",
                    "useTk"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Tk",
                "constructores": [
                    {
                        "nombre": "Tk",
                        "sintaxis": [
                            "class tkinter.Tk(screenName=None, baseName=None, className='Tk', useTk=1)"
                        ],
                        "parametros": [
                            "baseName",
                            "className",
                            "screenName",
                            "useTk"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Tk"
                ]
            },
            {
                "nombre": "Widget.tk",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "createfilehandler",
                        "sintaxis": [
                            "Widget.tk.createfilehandler(file, mask, func)"
                        ],
                        "parametros": [
                            "func",
                            "file",
                            "mask"
                        ]
                    },
                    {
                        "nombre": "deletefilehandler",
                        "sintaxis": [
                            "Widget.tk.deletefilehandler(file)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Widget.tk"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "READABLE",
                "sintaxis": [
                    "tkinter.READABLE"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "tkinter.colorchooser",
        "funciones": [
            {
                "nombre": "askcolor",
                "sintaxis": [
                    "tkinter.colorchooser.askcolor(color=None, **options)"
                ],
                "parametros": [
                    "options",
                    "color"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Chooser",
                "constructores": [
                    {
                        "nombre": "Chooser",
                        "sintaxis": [
                            "class tkinter.colorchooser.Chooser(master=None, **options)"
                        ],
                        "parametros": [
                            "options",
                            "master"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Chooser"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.commondialog",
        "funciones": [],
        "clases": [
            {
                "nombre": "Dialog",
                "constructores": [
                    {
                        "nombre": "Dialog",
                        "sintaxis": [
                            "class tkinter.commondialog.Dialog(master=None, **options)"
                        ],
                        "parametros": [
                            "options",
                            "master"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "show",
                        "sintaxis": [
                            "show(color=None, **options)"
                        ],
                        "parametros": [
                            "options",
                            "color"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Dialog"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.dnd",
        "funciones": [
            {
                "nombre": "dnd_start",
                "sintaxis": [
                    "tkinter.dnd.dnd_start(source, event)"
                ],
                "parametros": [
                    "event",
                    "source"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "DndHandler",
                "constructores": [
                    {
                        "nombre": "DndHandler",
                        "sintaxis": [
                            "class tkinter.dnd.DndHandler(source, event)"
                        ],
                        "parametros": [
                            "event",
                            "source"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cancel",
                        "sintaxis": [
                            "cancel(event=None)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "finish",
                        "sintaxis": [
                            "finish(event, commit=0)"
                        ],
                        "parametros": [
                            "commit",
                            "event"
                        ]
                    },
                    {
                        "nombre": "on_motion",
                        "sintaxis": [
                            "on_motion(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "on_release",
                        "sintaxis": [
                            "on_release(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DndHandler"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.filedialog",
        "funciones": [
            {
                "nombre": "askdirectory",
                "sintaxis": [
                    "tkinter.filedialog.askdirectory(**options)"
                ],
                "parametros": [
                    "options"
                ]
            },
            {
                "nombre": "askopenfile",
                "sintaxis": [
                    "tkinter.filedialog.askopenfile(mode='r', **options)",
                    "tkinter.filedialog.askopenfiles(mode='r', **options)"
                ],
                "parametros": [
                    "mode",
                    "options"
                ]
            },
            {
                "nombre": "askopenfilename",
                "sintaxis": [
                    "tkinter.filedialog.askopenfilename(**options)",
                    "tkinter.filedialog.askopenfilenames(**options)"
                ],
                "parametros": [
                    "options"
                ]
            },
            {
                "nombre": "asksaveasfile",
                "sintaxis": [
                    "tkinter.filedialog.asksaveasfile(mode='w', **options)"
                ],
                "parametros": [
                    "mode",
                    "options"
                ]
            },
            {
                "nombre": "asksaveasfilename",
                "sintaxis": [
                    "tkinter.filedialog.asksaveasfilename(**options)"
                ],
                "parametros": [
                    "options"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Directory",
                "constructores": [
                    {
                        "nombre": "Directory",
                        "sintaxis": [
                            "class tkinter.filedialog.Directory(master=None, **options)"
                        ],
                        "parametros": [
                            "options",
                            "master"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Directory"
                ]
            },
            {
                "nombre": "FileDialog",
                "constructores": [
                    {
                        "nombre": "FileDialog",
                        "sintaxis": [
                            "class tkinter.filedialog.FileDialog(master, title=None)"
                        ],
                        "parametros": [
                            "title",
                            "master"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "cancel_command",
                        "sintaxis": [
                            "cancel_command(event=None)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "dirs_double_event",
                        "sintaxis": [
                            "dirs_double_event(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "dirs_select_event",
                        "sintaxis": [
                            "dirs_select_event(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "files_double_event",
                        "sintaxis": [
                            "files_double_event(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "files_select_event",
                        "sintaxis": [
                            "files_select_event(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "filter_command",
                        "sintaxis": [
                            "filter_command(event=None)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "get_filter",
                        "sintaxis": [
                            "get_filter()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_selection",
                        "sintaxis": [
                            "get_selection()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "go",
                        "sintaxis": [
                            "go(dir_or_file=os.curdir, pattern='*', default='', key=None)"
                        ],
                        "parametros": [
                            "key",
                            "dir_or_file",
                            "pattern",
                            "default"
                        ]
                    },
                    {
                        "nombre": "ok_event",
                        "sintaxis": [
                            "ok_event(event)"
                        ],
                        "parametros": [
                            "event"
                        ]
                    },
                    {
                        "nombre": "quit",
                        "sintaxis": [
                            "quit(how=None)"
                        ],
                        "parametros": [
                            "how"
                        ]
                    },
                    {
                        "nombre": "set_filter",
                        "sintaxis": [
                            "set_filter(dir, pat)"
                        ],
                        "parametros": [
                            "pat",
                            "dir"
                        ]
                    },
                    {
                        "nombre": "set_selection",
                        "sintaxis": [
                            "set_selection(file)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FileDialog"
                ]
            },
            {
                "nombre": "LoadFileDialog",
                "constructores": [
                    {
                        "nombre": "LoadFileDialog",
                        "sintaxis": [
                            "class tkinter.filedialog.LoadFileDialog(master, title=None)"
                        ],
                        "parametros": [
                            "title",
                            "master"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "ok_command",
                        "sintaxis": [
                            "ok_command()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LoadFileDialog"
                ]
            },
            {
                "nombre": "Open",
                "constructores": [
                    {
                        "nombre": "Open",
                        "sintaxis": [
                            "class tkinter.filedialog.Open(master=None, **options)",
                            "class tkinter.filedialog.SaveAs(master=None, **options)"
                        ],
                        "parametros": [
                            "options",
                            "master"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Open"
                ]
            },
            {
                "nombre": "SaveFileDialog",
                "constructores": [
                    {
                        "nombre": "SaveFileDialog",
                        "sintaxis": [
                            "class tkinter.filedialog.SaveFileDialog(master, title=None)"
                        ],
                        "parametros": [
                            "title",
                            "master"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "ok_command",
                        "sintaxis": [
                            "ok_command()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SaveFileDialog"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.font",
        "funciones": [
            {
                "nombre": "families",
                "sintaxis": [
                    "tkinter.font.families(root=None, displayof=None)"
                ],
                "parametros": [
                    "root",
                    "displayof"
                ]
            },
            {
                "nombre": "names",
                "sintaxis": [
                    "tkinter.font.names(root=None)"
                ],
                "parametros": [
                    "root"
                ]
            },
            {
                "nombre": "nametofont",
                "sintaxis": [
                    "tkinter.font.nametofont(name, root=None)"
                ],
                "parametros": [
                    "root",
                    "name"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Font",
                "constructores": [
                    {
                        "nombre": "Font",
                        "sintaxis": [
                            "class tkinter.font.Font(root=None, font=None, name=None, exists=False, **options)"
                        ],
                        "parametros": [
                            "exists",
                            "name",
                            "options",
                            "font",
                            "root"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "actual",
                        "sintaxis": [
                            "actual(option=None, displayof=None)"
                        ],
                        "parametros": [
                            "displayof",
                            "option"
                        ]
                    },
                    {
                        "nombre": "cget",
                        "sintaxis": [
                            "cget(option)"
                        ],
                        "parametros": [
                            "option"
                        ]
                    },
                    {
                        "nombre": "config",
                        "sintaxis": [
                            "config(**options)"
                        ],
                        "parametros": [
                            "options"
                        ]
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "measure",
                        "sintaxis": [
                            "measure(text, displayof=None)"
                        ],
                        "parametros": [
                            "displayof",
                            "text"
                        ]
                    },
                    {
                        "nombre": "metrics",
                        "sintaxis": [
                            "metrics(*options, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "options"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Font"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "NORMAL",
                "sintaxis": [
                    "tkinter.font.NORMAL"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "tkinter.messagebox",
        "funciones": [],
        "clases": [
            {
                "nombre": "Message",
                "constructores": [
                    {
                        "nombre": "Message",
                        "sintaxis": [
                            "class tkinter.messagebox.Message(master=None, **options)"
                        ],
                        "parametros": [
                            "options",
                            "master"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Message"
                ]
            },
            {
                "nombre": "tkinter.messagebox",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "askokcancel",
                        "sintaxis": [
                            "tkinter.messagebox.askokcancel(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    },
                    {
                        "nombre": "askquestion",
                        "sintaxis": [
                            "tkinter.messagebox.askquestion(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    },
                    {
                        "nombre": "askretrycancel",
                        "sintaxis": [
                            "tkinter.messagebox.askretrycancel(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    },
                    {
                        "nombre": "askyesno",
                        "sintaxis": [
                            "tkinter.messagebox.askyesno(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    },
                    {
                        "nombre": "askyesnocancel",
                        "sintaxis": [
                            "tkinter.messagebox.askyesnocancel(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    },
                    {
                        "nombre": "showerror",
                        "sintaxis": [
                            "tkinter.messagebox.showerror(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    },
                    {
                        "nombre": "showinfo",
                        "sintaxis": [
                            "tkinter.messagebox.showinfo(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    },
                    {
                        "nombre": "showwarning",
                        "sintaxis": [
                            "tkinter.messagebox.showwarning(title=None, message=None, **options)"
                        ],
                        "parametros": [
                            "title",
                            "message",
                            "options"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class tkinter.messagebox"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.scrolledtext",
        "funciones": [],
        "clases": [
            {
                "nombre": "ScrolledText",
                "constructores": [
                    {
                        "nombre": "ScrolledText",
                        "sintaxis": [
                            "class tkinter.scrolledtext.ScrolledText(master=None, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "master"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "frame",
                        "sintaxis": [
                            "frame"
                        ]
                    },
                    {
                        "nombre": "vbar",
                        "sintaxis": [
                            "vbar"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ScrolledText"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.simpledialog",
        "funciones": [
            {
                "nombre": "askfloat",
                "sintaxis": [
                    "tkinter.simpledialog.askfloat(title, prompt, **kw)",
                    "tkinter.simpledialog.askinteger(title, prompt, **kw)",
                    "tkinter.simpledialog.askstring(title, prompt, **kw)"
                ],
                "parametros": [
                    "title",
                    "prompt",
                    "kw"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Dialog",
                "constructores": [
                    {
                        "nombre": "Dialog",
                        "sintaxis": [
                            "class tkinter.simpledialog.Dialog(parent, title=None)"
                        ],
                        "parametros": [
                            "title",
                            "parent"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "body",
                        "sintaxis": [
                            "body(master)"
                        ],
                        "parametros": [
                            "master"
                        ]
                    },
                    {
                        "nombre": "buttonbox",
                        "sintaxis": [
                            "buttonbox()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Dialog"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.tix",
        "funciones": [],
        "clases": [
            {
                "nombre": "Balloon",
                "constructores": [
                    {
                        "nombre": "Balloon",
                        "sintaxis": [
                            "class tkinter.tix.Balloon"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Balloon"
                ]
            },
            {
                "nombre": "ButtonBox",
                "constructores": [
                    {
                        "nombre": "ButtonBox",
                        "sintaxis": [
                            "class tkinter.tix.ButtonBox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ButtonBox"
                ]
            },
            {
                "nombre": "CheckList",
                "constructores": [
                    {
                        "nombre": "CheckList",
                        "sintaxis": [
                            "class tkinter.tix.CheckList"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class CheckList"
                ]
            },
            {
                "nombre": "ComboBox",
                "constructores": [
                    {
                        "nombre": "ComboBox",
                        "sintaxis": [
                            "class tkinter.tix.ComboBox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ComboBox"
                ]
            },
            {
                "nombre": "Control",
                "constructores": [
                    {
                        "nombre": "Control",
                        "sintaxis": [
                            "class tkinter.tix.Control"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Control"
                ]
            },
            {
                "nombre": "DirList",
                "constructores": [
                    {
                        "nombre": "DirList",
                        "sintaxis": [
                            "class tkinter.tix.DirList"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DirList"
                ]
            },
            {
                "nombre": "DirSelectBox",
                "constructores": [
                    {
                        "nombre": "DirSelectBox",
                        "sintaxis": [
                            "class tkinter.tix.DirSelectBox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DirSelectBox"
                ]
            },
            {
                "nombre": "DirSelectDialog",
                "constructores": [
                    {
                        "nombre": "DirSelectDialog",
                        "sintaxis": [
                            "class tkinter.tix.DirSelectDialog"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DirSelectDialog"
                ]
            },
            {
                "nombre": "DirTree",
                "constructores": [
                    {
                        "nombre": "DirTree",
                        "sintaxis": [
                            "class tkinter.tix.DirTree"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DirTree"
                ]
            },
            {
                "nombre": "ExFileSelectBox",
                "constructores": [
                    {
                        "nombre": "ExFileSelectBox",
                        "sintaxis": [
                            "class tkinter.tix.ExFileSelectBox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ExFileSelectBox"
                ]
            },
            {
                "nombre": "FileEntry",
                "constructores": [
                    {
                        "nombre": "FileEntry",
                        "sintaxis": [
                            "class tkinter.tix.FileEntry"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FileEntry"
                ]
            },
            {
                "nombre": "FileSelectBox",
                "constructores": [
                    {
                        "nombre": "FileSelectBox",
                        "sintaxis": [
                            "class tkinter.tix.FileSelectBox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FileSelectBox"
                ]
            },
            {
                "nombre": "Form",
                "constructores": [
                    {
                        "nombre": "Form",
                        "sintaxis": [
                            "class tkinter.tix.Form"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Form"
                ]
            },
            {
                "nombre": "HList",
                "constructores": [
                    {
                        "nombre": "HList",
                        "sintaxis": [
                            "class tkinter.tix.HList"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HList"
                ]
            },
            {
                "nombre": "InputOnly",
                "constructores": [
                    {
                        "nombre": "InputOnly",
                        "sintaxis": [
                            "class tkinter.tix.InputOnly"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class InputOnly"
                ]
            },
            {
                "nombre": "LabelEntry",
                "constructores": [
                    {
                        "nombre": "LabelEntry",
                        "sintaxis": [
                            "class tkinter.tix.LabelEntry"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LabelEntry"
                ]
            },
            {
                "nombre": "LabelFrame",
                "constructores": [
                    {
                        "nombre": "LabelFrame",
                        "sintaxis": [
                            "class tkinter.tix.LabelFrame"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class LabelFrame"
                ]
            },
            {
                "nombre": "ListNoteBook",
                "constructores": [
                    {
                        "nombre": "ListNoteBook",
                        "sintaxis": [
                            "class tkinter.tix.ListNoteBook"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ListNoteBook"
                ]
            },
            {
                "nombre": "Meter",
                "constructores": [
                    {
                        "nombre": "Meter",
                        "sintaxis": [
                            "class tkinter.tix.Meter"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Meter"
                ]
            },
            {
                "nombre": "NoteBook",
                "constructores": [
                    {
                        "nombre": "NoteBook",
                        "sintaxis": [
                            "class tkinter.tix.NoteBook"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NoteBook"
                ]
            },
            {
                "nombre": "OptionMenu",
                "constructores": [
                    {
                        "nombre": "OptionMenu",
                        "sintaxis": [
                            "class tkinter.tix.OptionMenu"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class OptionMenu"
                ]
            },
            {
                "nombre": "PanedWindow",
                "constructores": [
                    {
                        "nombre": "PanedWindow",
                        "sintaxis": [
                            "class tkinter.tix.PanedWindow"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PanedWindow"
                ]
            },
            {
                "nombre": "PopupMenu",
                "constructores": [
                    {
                        "nombre": "PopupMenu",
                        "sintaxis": [
                            "class tkinter.tix.PopupMenu"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PopupMenu"
                ]
            },
            {
                "nombre": "Select",
                "constructores": [
                    {
                        "nombre": "Select",
                        "sintaxis": [
                            "class tkinter.tix.Select"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Select"
                ]
            },
            {
                "nombre": "StdButtonBox",
                "constructores": [
                    {
                        "nombre": "StdButtonBox",
                        "sintaxis": [
                            "class tkinter.tix.StdButtonBox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class StdButtonBox"
                ]
            },
            {
                "nombre": "tixCommand",
                "constructores": [
                    {
                        "nombre": "tixCommand",
                        "sintaxis": [
                            "class tkinter.tix.tixCommand"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "tix_addbitmapdir",
                        "sintaxis": [
                            "tixCommand.tix_addbitmapdir(directory)"
                        ],
                        "parametros": [
                            "directory"
                        ]
                    },
                    {
                        "nombre": "tix_cget",
                        "sintaxis": [
                            "tixCommand.tix_cget(option)"
                        ],
                        "parametros": [
                            "option"
                        ]
                    },
                    {
                        "nombre": "tix_configure",
                        "sintaxis": [
                            "tixCommand.tix_configure(cnf=None, **kw)"
                        ],
                        "parametros": [
                            "cnf",
                            "kw"
                        ]
                    },
                    {
                        "nombre": "tix_filedialog",
                        "sintaxis": [
                            "tixCommand.tix_filedialog([dlgclass])"
                        ],
                        "parametros": [
                            "dlgclass"
                        ]
                    },
                    {
                        "nombre": "tix_getbitmap",
                        "sintaxis": [
                            "tixCommand.tix_getbitmap(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "tix_getimage",
                        "sintaxis": [
                            "tixCommand.tix_getimage(self, name)"
                        ],
                        "parametros": [
                            "self",
                            "name"
                        ]
                    },
                    {
                        "nombre": "tix_option_get",
                        "sintaxis": [
                            "tixCommand.tix_option_get(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "tix_resetoptions",
                        "sintaxis": [
                            "tixCommand.tix_resetoptions(newScheme, newFontSet[, newScmPrio])"
                        ],
                        "parametros": [
                            "newScheme",
                            "newFontSet",
                            "newScmPrio"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class tixCommand"
                ]
            },
            {
                "nombre": "Tk",
                "constructores": [
                    {
                        "nombre": "Tk",
                        "sintaxis": [
                            "class tkinter.tix.Tk(screenName=None, baseName=None, className='Tix')"
                        ],
                        "parametros": [
                            "baseName",
                            "className",
                            "screenName"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Tk"
                ]
            },
            {
                "nombre": "TList",
                "constructores": [
                    {
                        "nombre": "TList",
                        "sintaxis": [
                            "class tkinter.tix.TList"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TList"
                ]
            },
            {
                "nombre": "Tree",
                "constructores": [
                    {
                        "nombre": "Tree",
                        "sintaxis": [
                            "class tkinter.tix.Tree"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Tree"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tkinter.ttk",
        "funciones": [],
        "clases": [
            {
                "nombre": "Combobox",
                "constructores": [
                    {
                        "nombre": "Combobox",
                        "sintaxis": [
                            "class tkinter.ttk.Combobox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "current",
                        "sintaxis": [
                            "current(newindex=None)"
                        ],
                        "parametros": [
                            "newindex"
                        ]
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Combobox"
                ]
            },
            {
                "nombre": "Notebook",
                "constructores": [
                    {
                        "nombre": "Notebook",
                        "sintaxis": [
                            "class tkinter.ttk.Notebook"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add",
                        "sintaxis": [
                            "add(child, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "child"
                        ]
                    },
                    {
                        "nombre": "enable_traversal",
                        "sintaxis": [
                            "enable_traversal()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "forget",
                        "sintaxis": [
                            "forget(tab_id)"
                        ],
                        "parametros": [
                            "tab_id"
                        ]
                    },
                    {
                        "nombre": "hide",
                        "sintaxis": [
                            "hide(tab_id)"
                        ],
                        "parametros": [
                            "tab_id"
                        ]
                    },
                    {
                        "nombre": "identify",
                        "sintaxis": [
                            "identify(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "index(tab_id)"
                        ],
                        "parametros": [
                            "tab_id"
                        ]
                    },
                    {
                        "nombre": "insert",
                        "sintaxis": [
                            "insert(pos, child, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "pos",
                            "child"
                        ]
                    },
                    {
                        "nombre": "select",
                        "sintaxis": [
                            "select(tab_id=None)"
                        ],
                        "parametros": [
                            "tab_id"
                        ]
                    },
                    {
                        "nombre": "tab",
                        "sintaxis": [
                            "tab(tab_id, option=None, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "tab_id",
                            "option"
                        ]
                    },
                    {
                        "nombre": "tabs",
                        "sintaxis": [
                            "tabs()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Notebook"
                ]
            },
            {
                "nombre": "Progressbar",
                "constructores": [
                    {
                        "nombre": "Progressbar",
                        "sintaxis": [
                            "class tkinter.ttk.Progressbar"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "start(interval=None)"
                        ],
                        "parametros": [
                            "interval"
                        ]
                    },
                    {
                        "nombre": "step",
                        "sintaxis": [
                            "step(amount=None)"
                        ],
                        "parametros": [
                            "amount"
                        ]
                    },
                    {
                        "nombre": "stop",
                        "sintaxis": [
                            "stop()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Progressbar"
                ]
            },
            {
                "nombre": "Spinbox",
                "constructores": [
                    {
                        "nombre": "Spinbox",
                        "sintaxis": [
                            "class tkinter.ttk.Spinbox"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Spinbox"
                ]
            },
            {
                "nombre": "Style",
                "constructores": [
                    {
                        "nombre": "Style",
                        "sintaxis": [
                            "class tkinter.ttk.Style"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "configure",
                        "sintaxis": [
                            "configure(style, query_opt=None, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "style",
                            "query_opt"
                        ]
                    },
                    {
                        "nombre": "element_create",
                        "sintaxis": [
                            "element_create(elementname, etype, *args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "elementname",
                            "etype",
                            "kw"
                        ]
                    },
                    {
                        "nombre": "element_names",
                        "sintaxis": [
                            "element_names()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "element_options",
                        "sintaxis": [
                            "element_options(elementname)"
                        ],
                        "parametros": [
                            "elementname"
                        ]
                    },
                    {
                        "nombre": "layout",
                        "sintaxis": [
                            "layout(style, layoutspec=None)"
                        ],
                        "parametros": [
                            "layoutspec",
                            "style"
                        ]
                    },
                    {
                        "nombre": "lookup",
                        "sintaxis": [
                            "lookup(style, option, state=None, default=None)"
                        ],
                        "parametros": [
                            "default",
                            "state",
                            "style",
                            "option"
                        ]
                    },
                    {
                        "nombre": "map",
                        "sintaxis": [
                            "map(style, query_opt=None, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "style",
                            "query_opt"
                        ]
                    },
                    {
                        "nombre": "theme_create",
                        "sintaxis": [
                            "theme_create(themename, parent=None, settings=None)"
                        ],
                        "parametros": [
                            "parent",
                            "settings",
                            "themename"
                        ]
                    },
                    {
                        "nombre": "theme_names",
                        "sintaxis": [
                            "theme_names()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "theme_settings",
                        "sintaxis": [
                            "theme_settings(themename, settings)"
                        ],
                        "parametros": [
                            "settings",
                            "themename"
                        ]
                    },
                    {
                        "nombre": "theme_use",
                        "sintaxis": [
                            "theme_use(themename=None)"
                        ],
                        "parametros": [
                            "themename"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Style"
                ]
            },
            {
                "nombre": "Treeview",
                "constructores": [
                    {
                        "nombre": "Treeview",
                        "sintaxis": [
                            "class tkinter.ttk.Treeview"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "bbox",
                        "sintaxis": [
                            "bbox(item, column=None)"
                        ],
                        "parametros": [
                            "column",
                            "item"
                        ]
                    },
                    {
                        "nombre": "column",
                        "sintaxis": [
                            "column(column, option=None, **kw)"
                        ],
                        "parametros": [
                            "column",
                            "kw",
                            "option"
                        ]
                    },
                    {
                        "nombre": "delete",
                        "sintaxis": [
                            "delete(*items)"
                        ],
                        "parametros": [
                            "items"
                        ]
                    },
                    {
                        "nombre": "detach",
                        "sintaxis": [
                            "detach(*items)"
                        ],
                        "parametros": [
                            "items"
                        ]
                    },
                    {
                        "nombre": "exists",
                        "sintaxis": [
                            "exists(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "focus",
                        "sintaxis": [
                            "focus(item=None)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "get_children",
                        "sintaxis": [
                            "get_children(item=None)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "heading",
                        "sintaxis": [
                            "heading(column, option=None, **kw)"
                        ],
                        "parametros": [
                            "column",
                            "kw",
                            "option"
                        ]
                    },
                    {
                        "nombre": "identify",
                        "sintaxis": [
                            "identify(component, x, y)"
                        ],
                        "parametros": [
                            "component",
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "identify_column",
                        "sintaxis": [
                            "identify_column(x)"
                        ],
                        "parametros": [
                            "x"
                        ]
                    },
                    {
                        "nombre": "identify_element",
                        "sintaxis": [
                            "identify_element(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "identify_region",
                        "sintaxis": [
                            "identify_region(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "identify_row",
                        "sintaxis": [
                            "identify_row(y)"
                        ],
                        "parametros": [
                            "y"
                        ]
                    },
                    {
                        "nombre": "index",
                        "sintaxis": [
                            "index(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "insert",
                        "sintaxis": [
                            "insert(parent, index, iid=None, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "index",
                            "parent",
                            "iid"
                        ]
                    },
                    {
                        "nombre": "item",
                        "sintaxis": [
                            "item(item, option=None, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "item",
                            "option"
                        ]
                    },
                    {
                        "nombre": "move",
                        "sintaxis": [
                            "move(item, parent, index)"
                        ],
                        "parametros": [
                            "index",
                            "parent",
                            "item"
                        ]
                    },
                    {
                        "nombre": "next",
                        "sintaxis": [
                            "next(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "parent",
                        "sintaxis": [
                            "parent(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "prev",
                        "sintaxis": [
                            "prev(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "reattach",
                        "sintaxis": [
                            "reattach(item, parent, index)"
                        ],
                        "parametros": [
                            "index",
                            "parent",
                            "item"
                        ]
                    },
                    {
                        "nombre": "see",
                        "sintaxis": [
                            "see(item)"
                        ],
                        "parametros": [
                            "item"
                        ]
                    },
                    {
                        "nombre": "selection",
                        "sintaxis": [
                            "selection()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "selection_add",
                        "sintaxis": [
                            "selection_add(*items)"
                        ],
                        "parametros": [
                            "items"
                        ]
                    },
                    {
                        "nombre": "selection_remove",
                        "sintaxis": [
                            "selection_remove(*items)"
                        ],
                        "parametros": [
                            "items"
                        ]
                    },
                    {
                        "nombre": "selection_set",
                        "sintaxis": [
                            "selection_set(*items)"
                        ],
                        "parametros": [
                            "items"
                        ]
                    },
                    {
                        "nombre": "selection_toggle",
                        "sintaxis": [
                            "selection_toggle(*items)"
                        ],
                        "parametros": [
                            "items"
                        ]
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set(item, column=None, value=None)"
                        ],
                        "parametros": [
                            "value",
                            "column",
                            "item"
                        ]
                    },
                    {
                        "nombre": "set_children",
                        "sintaxis": [
                            "set_children(item, *newchildren)"
                        ],
                        "parametros": [
                            "newchildren",
                            "item"
                        ]
                    },
                    {
                        "nombre": "tag_bind",
                        "sintaxis": [
                            "tag_bind(tagname, sequence=None, callback=None)"
                        ],
                        "parametros": [
                            "sequence",
                            "callback",
                            "tagname"
                        ]
                    },
                    {
                        "nombre": "tag_configure",
                        "sintaxis": [
                            "tag_configure(tagname, option=None, **kw)"
                        ],
                        "parametros": [
                            "kw",
                            "option",
                            "tagname"
                        ]
                    },
                    {
                        "nombre": "tag_has",
                        "sintaxis": [
                            "tag_has(tagname, item=None)"
                        ],
                        "parametros": [
                            "item",
                            "tagname"
                        ]
                    },
                    {
                        "nombre": "xview",
                        "sintaxis": [
                            "xview(*args)"
                        ],
                        "parametros": [
                            "args"
                        ]
                    },
                    {
                        "nombre": "yview",
                        "sintaxis": [
                            "yview(*args)"
                        ],
                        "parametros": [
                            "args"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Treeview"
                ]
            },
            {
                "nombre": "Widget",
                "constructores": [
                    {
                        "nombre": "Widget",
                        "sintaxis": [
                            "class tkinter.ttk.Widget"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "identify",
                        "sintaxis": [
                            "identify(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    },
                    {
                        "nombre": "instate",
                        "sintaxis": [
                            "instate(statespec, callback=None, *args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "callback",
                            "kw",
                            "statespec"
                        ]
                    },
                    {
                        "nombre": "state",
                        "sintaxis": [
                            "state(statespec=None)"
                        ],
                        "parametros": [
                            "statespec"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Widget"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "token",
        "funciones": [
            {
                "nombre": "ISEOF",
                "sintaxis": [
                    "token.ISEOF(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "ISNONTERMINAL",
                "sintaxis": [
                    "token.ISNONTERMINAL(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "ISTERMINAL",
                "sintaxis": [
                    "token.ISTERMINAL(x)"
                ],
                "parametros": [
                    "x"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "AMPER",
                "sintaxis": [
                    "token.AMPER"
                ]
            },
            {
                "nombre": "AMPEREQUAL",
                "sintaxis": [
                    "token.AMPEREQUAL"
                ]
            },
            {
                "nombre": "ASYNC",
                "sintaxis": [
                    "token.ASYNC"
                ]
            },
            {
                "nombre": "AT",
                "sintaxis": [
                    "token.AT"
                ]
            },
            {
                "nombre": "ATEQUAL",
                "sintaxis": [
                    "token.ATEQUAL"
                ]
            },
            {
                "nombre": "AWAIT",
                "sintaxis": [
                    "token.AWAIT"
                ]
            },
            {
                "nombre": "CIRCUMFLEX",
                "sintaxis": [
                    "token.CIRCUMFLEX"
                ]
            },
            {
                "nombre": "CIRCUMFLEXEQUAL",
                "sintaxis": [
                    "token.CIRCUMFLEXEQUAL"
                ]
            },
            {
                "nombre": "COLON",
                "sintaxis": [
                    "token.COLON"
                ]
            },
            {
                "nombre": "COLONEQUAL",
                "sintaxis": [
                    "token.COLONEQUAL"
                ]
            },
            {
                "nombre": "COMMA",
                "sintaxis": [
                    "token.COMMA"
                ]
            },
            {
                "nombre": "COMMENT",
                "sintaxis": [
                    "token.COMMENT"
                ]
            },
            {
                "nombre": "DEDENT",
                "sintaxis": [
                    "token.DEDENT"
                ]
            },
            {
                "nombre": "DOT",
                "sintaxis": [
                    "token.DOT"
                ]
            },
            {
                "nombre": "DOUBLESLASH",
                "sintaxis": [
                    "token.DOUBLESLASH"
                ]
            },
            {
                "nombre": "DOUBLESLASHEQUAL",
                "sintaxis": [
                    "token.DOUBLESLASHEQUAL"
                ]
            },
            {
                "nombre": "DOUBLESTAR",
                "sintaxis": [
                    "token.DOUBLESTAR"
                ]
            },
            {
                "nombre": "DOUBLESTAREQUAL",
                "sintaxis": [
                    "token.DOUBLESTAREQUAL"
                ]
            },
            {
                "nombre": "ELLIPSIS",
                "sintaxis": [
                    "token.ELLIPSIS"
                ]
            },
            {
                "nombre": "ENCODING",
                "sintaxis": [
                    "token.ENCODING"
                ]
            },
            {
                "nombre": "ENDMARKER",
                "sintaxis": [
                    "token.ENDMARKER"
                ]
            },
            {
                "nombre": "EQEQUAL",
                "sintaxis": [
                    "token.EQEQUAL"
                ]
            },
            {
                "nombre": "EQUAL",
                "sintaxis": [
                    "token.EQUAL"
                ]
            },
            {
                "nombre": "ERRORTOKEN",
                "sintaxis": [
                    "token.ERRORTOKEN"
                ]
            },
            {
                "nombre": "GREATER",
                "sintaxis": [
                    "token.GREATER"
                ]
            },
            {
                "nombre": "GREATEREQUAL",
                "sintaxis": [
                    "token.GREATEREQUAL"
                ]
            },
            {
                "nombre": "INDENT",
                "sintaxis": [
                    "token.INDENT"
                ]
            },
            {
                "nombre": "LBRACE",
                "sintaxis": [
                    "token.LBRACE"
                ]
            },
            {
                "nombre": "LEFTSHIFT",
                "sintaxis": [
                    "token.LEFTSHIFT"
                ]
            },
            {
                "nombre": "LEFTSHIFTEQUAL",
                "sintaxis": [
                    "token.LEFTSHIFTEQUAL"
                ]
            },
            {
                "nombre": "LESS",
                "sintaxis": [
                    "token.LESS"
                ]
            },
            {
                "nombre": "LESSEQUAL",
                "sintaxis": [
                    "token.LESSEQUAL"
                ]
            },
            {
                "nombre": "LPAR",
                "sintaxis": [
                    "token.LPAR"
                ]
            },
            {
                "nombre": "LSQB",
                "sintaxis": [
                    "token.LSQB"
                ]
            },
            {
                "nombre": "MINEQUAL",
                "sintaxis": [
                    "token.MINEQUAL"
                ]
            },
            {
                "nombre": "MINUS",
                "sintaxis": [
                    "token.MINUS"
                ]
            },
            {
                "nombre": "NAME",
                "sintaxis": [
                    "token.NAME"
                ]
            },
            {
                "nombre": "NEWLINE",
                "sintaxis": [
                    "token.NEWLINE"
                ]
            },
            {
                "nombre": "NL",
                "sintaxis": [
                    "token.NL"
                ]
            },
            {
                "nombre": "NOTEQUAL",
                "sintaxis": [
                    "token.NOTEQUAL"
                ]
            },
            {
                "nombre": "NT_OFFSET",
                "sintaxis": [
                    "token.NT_OFFSET"
                ]
            },
            {
                "nombre": "NUMBER",
                "sintaxis": [
                    "token.NUMBER"
                ]
            },
            {
                "nombre": "N_TOKENS",
                "sintaxis": [
                    "token.N_TOKENS"
                ]
            },
            {
                "nombre": "OP",
                "sintaxis": [
                    "token.OP"
                ]
            },
            {
                "nombre": "PERCENT",
                "sintaxis": [
                    "token.PERCENT"
                ]
            },
            {
                "nombre": "PERCENTEQUAL",
                "sintaxis": [
                    "token.PERCENTEQUAL"
                ]
            },
            {
                "nombre": "PLUS",
                "sintaxis": [
                    "token.PLUS"
                ]
            },
            {
                "nombre": "PLUSEQUAL",
                "sintaxis": [
                    "token.PLUSEQUAL"
                ]
            },
            {
                "nombre": "RARROW",
                "sintaxis": [
                    "token.RARROW"
                ]
            },
            {
                "nombre": "RBRACE",
                "sintaxis": [
                    "token.RBRACE"
                ]
            },
            {
                "nombre": "RIGHTSHIFT",
                "sintaxis": [
                    "token.RIGHTSHIFT"
                ]
            },
            {
                "nombre": "RIGHTSHIFTEQUAL",
                "sintaxis": [
                    "token.RIGHTSHIFTEQUAL"
                ]
            },
            {
                "nombre": "RPAR",
                "sintaxis": [
                    "token.RPAR"
                ]
            },
            {
                "nombre": "RSQB",
                "sintaxis": [
                    "token.RSQB"
                ]
            },
            {
                "nombre": "SEMI",
                "sintaxis": [
                    "token.SEMI"
                ]
            },
            {
                "nombre": "SLASH",
                "sintaxis": [
                    "token.SLASH"
                ]
            },
            {
                "nombre": "SLASHEQUAL",
                "sintaxis": [
                    "token.SLASHEQUAL"
                ]
            },
            {
                "nombre": "SOFT_KEYWORD",
                "sintaxis": [
                    "token.SOFT_KEYWORD"
                ]
            },
            {
                "nombre": "STAR",
                "sintaxis": [
                    "token.STAR"
                ]
            },
            {
                "nombre": "STAREQUAL",
                "sintaxis": [
                    "token.STAREQUAL"
                ]
            },
            {
                "nombre": "STRING",
                "sintaxis": [
                    "token.STRING"
                ]
            },
            {
                "nombre": "TILDE",
                "sintaxis": [
                    "token.TILDE"
                ]
            },
            {
                "nombre": "tok_name",
                "sintaxis": [
                    "token.tok_name"
                ]
            },
            {
                "nombre": "TYPE_COMMENT",
                "sintaxis": [
                    "token.TYPE_COMMENT"
                ]
            },
            {
                "nombre": "TYPE_COMMENT",
                "sintaxis": [
                    "token.TYPE_COMMENT"
                ]
            },
            {
                "nombre": "TYPE_IGNORE",
                "sintaxis": [
                    "token.TYPE_IGNORE"
                ]
            },
            {
                "nombre": "VBAR",
                "sintaxis": [
                    "token.VBAR"
                ]
            },
            {
                "nombre": "VBAREQUAL",
                "sintaxis": [
                    "token.VBAREQUAL"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "tokenize",
        "funciones": [
            {
                "nombre": "detect_encoding",
                "sintaxis": [
                    "tokenize.detect_encoding(readline)"
                ],
                "parametros": [
                    "readline"
                ]
            },
            {
                "nombre": "generate_tokens",
                "sintaxis": [
                    "tokenize.generate_tokens(readline)"
                ],
                "parametros": [
                    "readline"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "tokenize.open(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "tokenize",
                "sintaxis": [
                    "tokenize.tokenize(readline)"
                ],
                "parametros": [
                    "readline"
                ]
            },
            {
                "nombre": "untokenize",
                "sintaxis": [
                    "tokenize.untokenize(iterable)"
                ],
                "parametros": [
                    "iterable"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "TokenError",
                "sintaxis": [
                    "exception tokenize.TokenError"
                ]
            }
        ]
    },
    {
        "nombre": "trace",
        "funciones": [],
        "clases": [
            {
                "nombre": "CoverageResults",
                "constructores": [
                    {
                        "nombre": "CoverageResults",
                        "sintaxis": [
                            "class trace.CoverageResults"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "update",
                        "sintaxis": [
                            "update(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "write_results",
                        "sintaxis": [
                            "write_results(show_missing=True, summary=False, coverdir=None)"
                        ],
                        "parametros": [
                            "coverdir",
                            "summary",
                            "show_missing"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class CoverageResults"
                ]
            },
            {
                "nombre": "Trace",
                "constructores": [
                    {
                        "nombre": "Trace",
                        "sintaxis": [
                            "class trace.Trace(count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None, timing=False)"
                        ],
                        "parametros": [
                            "trace",
                            "countcallers",
                            "count",
                            "ignoremods",
                            "infile",
                            "timing",
                            "outfile",
                            "countfuncs",
                            "ignoredirs"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "results",
                        "sintaxis": [
                            "results()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(cmd)"
                        ],
                        "parametros": [
                            "cmd"
                        ]
                    },
                    {
                        "nombre": "runctx",
                        "sintaxis": [
                            "runctx(cmd, globals=None, locals=None)"
                        ],
                        "parametros": [
                            "globals",
                            "cmd",
                            "locals"
                        ]
                    },
                    {
                        "nombre": "runfunc",
                        "sintaxis": [
                            "runfunc(func, /, *args, **kwds)"
                        ],
                        "parametros": [
                            "func",
                            "/",
                            "*args",
                            "**kwds"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Trace"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "traceback",
        "funciones": [
            {
                "nombre": "clear_frames",
                "sintaxis": [
                    "traceback.clear_frames(tb)"
                ],
                "parametros": [
                    "tb"
                ]
            },
            {
                "nombre": "extract_stack",
                "sintaxis": [
                    "traceback.extract_stack(f=None, limit=None)"
                ],
                "parametros": [
                    "f",
                    "limit"
                ]
            },
            {
                "nombre": "extract_tb",
                "sintaxis": [
                    "traceback.extract_tb(tb, limit=None)"
                ],
                "parametros": [
                    "limit",
                    "tb"
                ]
            },
            {
                "nombre": "format_exc",
                "sintaxis": [
                    "traceback.format_exc(limit=None, chain=True)"
                ],
                "parametros": [
                    "chain",
                    "limit"
                ]
            },
            {
                "nombre": "format_exception",
                "sintaxis": [
                    "traceback.format_exception(exc, /, [value, tb, ]limit=None, chain=True)"
                ],
                "parametros": [
                    "/",
                    "exc",
                    "value",
                    "tb",
                    "chain",
                    "limit"
                ]
            },
            {
                "nombre": "format_exception_only",
                "sintaxis": [
                    "traceback.format_exception_only(exc, /[, value])"
                ],
                "parametros": [
                    "/",
                    "exc",
                    "value"
                ]
            },
            {
                "nombre": "format_list",
                "sintaxis": [
                    "traceback.format_list(extracted_list)"
                ],
                "parametros": [
                    "extracted_list"
                ]
            },
            {
                "nombre": "format_stack",
                "sintaxis": [
                    "traceback.format_stack(f=None, limit=None)"
                ],
                "parametros": [
                    "f",
                    "limit"
                ]
            },
            {
                "nombre": "format_tb",
                "sintaxis": [
                    "traceback.format_tb(tb, limit=None)"
                ],
                "parametros": [
                    "limit",
                    "tb"
                ]
            },
            {
                "nombre": "print_exc",
                "sintaxis": [
                    "traceback.print_exc(limit=None, file=None, chain=True)"
                ],
                "parametros": [
                    "chain",
                    "limit",
                    "file"
                ]
            },
            {
                "nombre": "print_exception",
                "sintaxis": [
                    "traceback.print_exception(exc, /, [value, tb, ]limit=None, file=None, chain=True)"
                ],
                "parametros": [
                    "/",
                    "exc",
                    "value",
                    "tb",
                    "chain",
                    "limit",
                    "file"
                ]
            },
            {
                "nombre": "print_last",
                "sintaxis": [
                    "traceback.print_last(limit=None, file=None, chain=True)"
                ],
                "parametros": [
                    "chain",
                    "limit",
                    "file"
                ]
            },
            {
                "nombre": "print_stack",
                "sintaxis": [
                    "traceback.print_stack(f=None, limit=None, file=None)"
                ],
                "parametros": [
                    "f",
                    "limit",
                    "file"
                ]
            },
            {
                "nombre": "print_tb",
                "sintaxis": [
                    "traceback.print_tb(tb, limit=None, file=None)"
                ],
                "parametros": [
                    "limit",
                    "file",
                    "tb"
                ]
            },
            {
                "nombre": "walk_stack",
                "sintaxis": [
                    "traceback.walk_stack(f)"
                ],
                "parametros": [
                    "f"
                ]
            },
            {
                "nombre": "walk_tb",
                "sintaxis": [
                    "traceback.walk_tb(tb)"
                ],
                "parametros": [
                    "tb"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "FrameSummary",
                "constructores": [
                    {
                        "nombre": "FrameSummary",
                        "sintaxis": [
                            "class traceback.FrameSummary(filename, lineno, name, lookup_line=True, locals=None, line=None)"
                        ],
                        "parametros": [
                            "filename",
                            "name",
                            "line",
                            "lineno",
                            "lookup_line",
                            "locals"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FrameSummary"
                ]
            },
            {
                "nombre": "StackSummary",
                "constructores": [
                    {
                        "nombre": "StackSummary",
                        "sintaxis": [
                            "class traceback.StackSummary"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "extract",
                        "sintaxis": [
                            "classmethod extract(frame_gen, *, limit=None, lookup_lines=True, capture_locals=False)"
                        ],
                        "parametros": [
                            "frame_gen",
                            "lookup_lines",
                            "capture_locals",
                            "limit",
                            "*"
                        ]
                    },
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "from_list",
                        "sintaxis": [
                            "classmethod from_list(a_list)"
                        ],
                        "parametros": [
                            "a_list"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class StackSummary"
                ]
            },
            {
                "nombre": "TracebackException",
                "constructores": [
                    {
                        "nombre": "TracebackException",
                        "sintaxis": [
                            "class traceback.TracebackException(exc_type, exc_value, exc_traceback, *, limit=None, lookup_lines=True, capture_locals=False, compact=False)"
                        ],
                        "parametros": [
                            "compact",
                            "exc_type",
                            "lookup_lines",
                            "capture_locals",
                            "exc_value",
                            "exc_traceback",
                            "limit",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format(*, chain=True)"
                        ],
                        "parametros": [
                            "chain",
                            "*"
                        ]
                    },
                    {
                        "nombre": "format_exception_only",
                        "sintaxis": [
                            "format_exception_only()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "from_exception",
                        "sintaxis": [
                            "classmethod from_exception(exc, *, limit=None, lookup_lines=True, capture_locals=False)"
                        ],
                        "parametros": [
                            "lookup_lines",
                            "exc",
                            "capture_locals",
                            "limit",
                            "*"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "exc_type",
                        "sintaxis": [
                            "exc_type"
                        ]
                    },
                    {
                        "nombre": "filename",
                        "sintaxis": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "lineno"
                        ]
                    },
                    {
                        "nombre": "msg",
                        "sintaxis": [
                            "msg"
                        ]
                    },
                    {
                        "nombre": "offset",
                        "sintaxis": [
                            "offset"
                        ]
                    },
                    {
                        "nombre": "stack",
                        "sintaxis": [
                            "stack"
                        ]
                    },
                    {
                        "nombre": "text",
                        "sintaxis": [
                            "text"
                        ]
                    },
                    {
                        "nombre": "__cause__",
                        "sintaxis": [
                            "__cause__"
                        ]
                    },
                    {
                        "nombre": "__context__",
                        "sintaxis": [
                            "__context__"
                        ]
                    },
                    {
                        "nombre": "__suppress_context__",
                        "sintaxis": [
                            "__suppress_context__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TracebackException"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tracemalloc",
        "funciones": [
            {
                "nombre": "clear_traces",
                "sintaxis": [
                    "tracemalloc.clear_traces()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_object_traceback",
                "sintaxis": [
                    "tracemalloc.get_object_traceback(obj)"
                ],
                "parametros": [
                    "obj"
                ]
            },
            {
                "nombre": "get_traceback_limit",
                "sintaxis": [
                    "tracemalloc.get_traceback_limit()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_traced_memory",
                "sintaxis": [
                    "tracemalloc.get_traced_memory()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_tracemalloc_memory",
                "sintaxis": [
                    "tracemalloc.get_tracemalloc_memory()"
                ],
                "parametros": []
            },
            {
                "nombre": "is_tracing",
                "sintaxis": [
                    "tracemalloc.is_tracing()"
                ],
                "parametros": []
            },
            {
                "nombre": "reset_peak",
                "sintaxis": [
                    "tracemalloc.reset_peak()"
                ],
                "parametros": []
            },
            {
                "nombre": "start",
                "sintaxis": [
                    "tracemalloc.start(nframe: int = 1)"
                ],
                "parametros": [
                    "nframe"
                ]
            },
            {
                "nombre": "stop",
                "sintaxis": [
                    "tracemalloc.stop()"
                ],
                "parametros": []
            },
            {
                "nombre": "take_snapshot",
                "sintaxis": [
                    "tracemalloc.take_snapshot()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "DomainFilter",
                "constructores": [
                    {
                        "nombre": "DomainFilter",
                        "sintaxis": [
                            "class tracemalloc.DomainFilter(inclusive: bool, domain: int)"
                        ],
                        "parametros": [
                            "domain",
                            "inclusive"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "domain",
                        "sintaxis": [
                            "domain"
                        ]
                    },
                    {
                        "nombre": "inclusive",
                        "sintaxis": [
                            "inclusive"
                        ]
                    }
                ],
                "sintaxis": [
                    "class DomainFilter"
                ]
            },
            {
                "nombre": "Filter",
                "constructores": [
                    {
                        "nombre": "Filter",
                        "sintaxis": [
                            "class tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int = None, all_frames: bool = False, domain: int = None)"
                        ],
                        "parametros": [
                            "filename_pattern",
                            "lineno",
                            "inclusive",
                            "all_frames",
                            "domain"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "all_frames",
                        "sintaxis": [
                            "all_frames"
                        ]
                    },
                    {
                        "nombre": "domain",
                        "sintaxis": [
                            "domain"
                        ]
                    },
                    {
                        "nombre": "filename_pattern",
                        "sintaxis": [
                            "filename_pattern"
                        ]
                    },
                    {
                        "nombre": "inclusive",
                        "sintaxis": [
                            "inclusive"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "lineno"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Filter"
                ]
            },
            {
                "nombre": "Frame",
                "constructores": [
                    {
                        "nombre": "Frame",
                        "sintaxis": [
                            "class tracemalloc.Frame"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "filename",
                        "sintaxis": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "lineno"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Frame"
                ]
            },
            {
                "nombre": "Snapshot",
                "constructores": [
                    {
                        "nombre": "Snapshot",
                        "sintaxis": [
                            "class tracemalloc.Snapshot"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "compare_to",
                        "sintaxis": [
                            "compare_to(old_snapshot: Snapshot, key_type: str, cumulative: bool = False)"
                        ],
                        "parametros": [
                            "old_snapshot",
                            "key_type",
                            "cumulative"
                        ]
                    },
                    {
                        "nombre": "dump",
                        "sintaxis": [
                            "dump(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "filter_traces",
                        "sintaxis": [
                            "filter_traces(filters)"
                        ],
                        "parametros": [
                            "filters"
                        ]
                    },
                    {
                        "nombre": "load",
                        "sintaxis": [
                            "classmethod load(filename)"
                        ],
                        "parametros": [
                            "filename"
                        ]
                    },
                    {
                        "nombre": "statistics",
                        "sintaxis": [
                            "statistics(key_type: str, cumulative: bool = False)"
                        ],
                        "parametros": [
                            "key_type",
                            "cumulative"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "traceback_limit",
                        "sintaxis": [
                            "traceback_limit"
                        ]
                    },
                    {
                        "nombre": "traces",
                        "sintaxis": [
                            "traces"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Snapshot"
                ]
            },
            {
                "nombre": "Statistic",
                "constructores": [
                    {
                        "nombre": "Statistic",
                        "sintaxis": [
                            "class tracemalloc.Statistic"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "count"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "traceback",
                        "sintaxis": [
                            "traceback"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Statistic"
                ]
            },
            {
                "nombre": "StatisticDiff",
                "constructores": [
                    {
                        "nombre": "StatisticDiff",
                        "sintaxis": [
                            "class tracemalloc.StatisticDiff"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "count",
                        "sintaxis": [
                            "count"
                        ]
                    },
                    {
                        "nombre": "count_diff",
                        "sintaxis": [
                            "count_diff"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "size_diff",
                        "sintaxis": [
                            "size_diff"
                        ]
                    },
                    {
                        "nombre": "traceback",
                        "sintaxis": [
                            "traceback"
                        ]
                    }
                ],
                "sintaxis": [
                    "class StatisticDiff"
                ]
            },
            {
                "nombre": "Trace",
                "constructores": [
                    {
                        "nombre": "Trace",
                        "sintaxis": [
                            "class tracemalloc.Trace"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "domain",
                        "sintaxis": [
                            "domain"
                        ]
                    },
                    {
                        "nombre": "size",
                        "sintaxis": [
                            "size"
                        ]
                    },
                    {
                        "nombre": "traceback",
                        "sintaxis": [
                            "traceback"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Trace"
                ]
            },
            {
                "nombre": "Traceback",
                "constructores": [
                    {
                        "nombre": "Traceback",
                        "sintaxis": [
                            "class tracemalloc.Traceback"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "format",
                        "sintaxis": [
                            "format(limit=None, most_recent_first=False)"
                        ],
                        "parametros": [
                            "limit",
                            "most_recent_first"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "total_nframe",
                        "sintaxis": [
                            "total_nframe"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Traceback"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "tty",
        "funciones": [
            {
                "nombre": "setcbreak",
                "sintaxis": [
                    "tty.setcbreak(fd, when=termios.TCSAFLUSH)"
                ],
                "parametros": [
                    "fd",
                    "when"
                ]
            },
            {
                "nombre": "setraw",
                "sintaxis": [
                    "tty.setraw(fd, when=termios.TCSAFLUSH)"
                ],
                "parametros": [
                    "fd",
                    "when"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "turtle",
        "funciones": [
            {
                "nombre": "back",
                "sintaxis": [
                    "turtle.back(distance)",
                    "turtle.bk(distance)",
                    "turtle.backward(distance)"
                ],
                "parametros": [
                    "distance"
                ]
            },
            {
                "nombre": "begin_fill",
                "sintaxis": [
                    "turtle.begin_fill()"
                ],
                "parametros": []
            },
            {
                "nombre": "begin_poly",
                "sintaxis": [
                    "turtle.begin_poly()"
                ],
                "parametros": []
            },
            {
                "nombre": "bgcolor",
                "sintaxis": [
                    "turtle.bgcolor(*args)"
                ],
                "parametros": [
                    "args"
                ]
            },
            {
                "nombre": "bgpic",
                "sintaxis": [
                    "turtle.bgpic(picname=None)"
                ],
                "parametros": [
                    "picname"
                ]
            },
            {
                "nombre": "bye",
                "sintaxis": [
                    "turtle.bye()"
                ],
                "parametros": []
            },
            {
                "nombre": "circle",
                "sintaxis": [
                    "turtle.circle(radius, extent=None, steps=None)"
                ],
                "parametros": [
                    "steps",
                    "extent",
                    "radius"
                ]
            },
            {
                "nombre": "clear",
                "sintaxis": [
                    "turtle.clear()"
                ],
                "parametros": []
            },
            {
                "nombre": "clear",
                "sintaxis": [
                    "turtle.clear()"
                ],
                "parametros": []
            },
            {
                "nombre": "clearscreen",
                "sintaxis": [
                    "turtle.clearscreen()"
                ],
                "parametros": []
            },
            {
                "nombre": "clearstamp",
                "sintaxis": [
                    "turtle.clearstamp(stampid)"
                ],
                "parametros": [
                    "stampid"
                ]
            },
            {
                "nombre": "clearstamps",
                "sintaxis": [
                    "turtle.clearstamps(n=None)"
                ],
                "parametros": [
                    "n"
                ]
            },
            {
                "nombre": "clone",
                "sintaxis": [
                    "turtle.clone()"
                ],
                "parametros": []
            },
            {
                "nombre": "color",
                "sintaxis": [
                    "turtle.color(*args)"
                ],
                "parametros": [
                    "args"
                ]
            },
            {
                "nombre": "colormode",
                "sintaxis": [
                    "turtle.colormode(cmode=None)"
                ],
                "parametros": [
                    "cmode"
                ]
            },
            {
                "nombre": "degrees",
                "sintaxis": [
                    "turtle.degrees(fullcircle=360.0)"
                ],
                "parametros": [
                    "fullcircle"
                ]
            },
            {
                "nombre": "delay",
                "sintaxis": [
                    "turtle.delay(delay=None)"
                ],
                "parametros": [
                    "delay"
                ]
            },
            {
                "nombre": "distance",
                "sintaxis": [
                    "turtle.distance(x, y=None)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "dot",
                "sintaxis": [
                    "turtle.dot(size=None, *color)"
                ],
                "parametros": [
                    "size",
                    "color"
                ]
            },
            {
                "nombre": "end_fill",
                "sintaxis": [
                    "turtle.end_fill()"
                ],
                "parametros": []
            },
            {
                "nombre": "end_poly",
                "sintaxis": [
                    "turtle.end_poly()"
                ],
                "parametros": []
            },
            {
                "nombre": "exitonclick",
                "sintaxis": [
                    "turtle.exitonclick()"
                ],
                "parametros": []
            },
            {
                "nombre": "fillcolor",
                "sintaxis": [
                    "turtle.fillcolor(*args)"
                ],
                "parametros": [
                    "args"
                ]
            },
            {
                "nombre": "filling",
                "sintaxis": [
                    "turtle.filling()"
                ],
                "parametros": []
            },
            {
                "nombre": "forward",
                "sintaxis": [
                    "turtle.forward(distance)",
                    "turtle.fd(distance)"
                ],
                "parametros": [
                    "distance"
                ]
            },
            {
                "nombre": "getcanvas",
                "sintaxis": [
                    "turtle.getcanvas()"
                ],
                "parametros": []
            },
            {
                "nombre": "getscreen",
                "sintaxis": [
                    "turtle.getscreen()"
                ],
                "parametros": []
            },
            {
                "nombre": "getshapes",
                "sintaxis": [
                    "turtle.getshapes()"
                ],
                "parametros": []
            },
            {
                "nombre": "getturtle",
                "sintaxis": [
                    "turtle.getturtle()",
                    "turtle.getpen()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_poly",
                "sintaxis": [
                    "turtle.get_poly()"
                ],
                "parametros": []
            },
            {
                "nombre": "get_shapepoly",
                "sintaxis": [
                    "turtle.get_shapepoly()"
                ],
                "parametros": []
            },
            {
                "nombre": "goto",
                "sintaxis": [
                    "turtle.goto(x, y=None)",
                    "turtle.setpos(x, y=None)",
                    "turtle.setposition(x, y=None)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "heading",
                "sintaxis": [
                    "turtle.heading()"
                ],
                "parametros": []
            },
            {
                "nombre": "hideturtle",
                "sintaxis": [
                    "turtle.hideturtle()",
                    "turtle.ht()"
                ],
                "parametros": []
            },
            {
                "nombre": "home",
                "sintaxis": [
                    "turtle.home()"
                ],
                "parametros": []
            },
            {
                "nombre": "isdown",
                "sintaxis": [
                    "turtle.isdown()"
                ],
                "parametros": []
            },
            {
                "nombre": "isvisible",
                "sintaxis": [
                    "turtle.isvisible()"
                ],
                "parametros": []
            },
            {
                "nombre": "left",
                "sintaxis": [
                    "turtle.left(angle)",
                    "turtle.lt(angle)"
                ],
                "parametros": [
                    "angle"
                ]
            },
            {
                "nombre": "listen",
                "sintaxis": [
                    "turtle.listen(xdummy=None, ydummy=None)"
                ],
                "parametros": [
                    "xdummy",
                    "ydummy"
                ]
            },
            {
                "nombre": "mainloop",
                "sintaxis": [
                    "turtle.mainloop()",
                    "turtle.done()"
                ],
                "parametros": []
            },
            {
                "nombre": "mode",
                "sintaxis": [
                    "turtle.mode(mode=None)"
                ],
                "parametros": [
                    "mode"
                ]
            },
            {
                "nombre": "numinput",
                "sintaxis": [
                    "turtle.numinput(title, prompt, default=None, minval=None, maxval=None)"
                ],
                "parametros": [
                    "title",
                    "prompt",
                    "minval",
                    "default",
                    "maxval"
                ]
            },
            {
                "nombre": "onclick",
                "sintaxis": [
                    "turtle.onclick(fun, btn=1, add=None)"
                ],
                "parametros": [
                    "add",
                    "btn",
                    "fun"
                ]
            },
            {
                "nombre": "onclick",
                "sintaxis": [
                    "turtle.onclick(fun, btn=1, add=None)",
                    "turtle.onscreenclick(fun, btn=1, add=None)"
                ],
                "parametros": [
                    "add",
                    "btn",
                    "fun"
                ]
            },
            {
                "nombre": "ondrag",
                "sintaxis": [
                    "turtle.ondrag(fun, btn=1, add=None)"
                ],
                "parametros": [
                    "add",
                    "btn",
                    "fun"
                ]
            },
            {
                "nombre": "onkey",
                "sintaxis": [
                    "turtle.onkey(fun, key)",
                    "turtle.onkeyrelease(fun, key)"
                ],
                "parametros": [
                    "fun",
                    "key"
                ]
            },
            {
                "nombre": "onkeypress",
                "sintaxis": [
                    "turtle.onkeypress(fun, key=None)"
                ],
                "parametros": [
                    "fun",
                    "key"
                ]
            },
            {
                "nombre": "onrelease",
                "sintaxis": [
                    "turtle.onrelease(fun, btn=1, add=None)"
                ],
                "parametros": [
                    "add",
                    "btn",
                    "fun"
                ]
            },
            {
                "nombre": "ontimer",
                "sintaxis": [
                    "turtle.ontimer(fun, t=0)"
                ],
                "parametros": [
                    "t",
                    "fun"
                ]
            },
            {
                "nombre": "pen",
                "sintaxis": [
                    "turtle.pen(pen=None, **pendict)"
                ],
                "parametros": [
                    "pen",
                    "pendict"
                ]
            },
            {
                "nombre": "pencolor",
                "sintaxis": [
                    "turtle.pencolor(*args)"
                ],
                "parametros": [
                    "args"
                ]
            },
            {
                "nombre": "pendown",
                "sintaxis": [
                    "turtle.pendown()",
                    "turtle.pd()",
                    "turtle.down()"
                ],
                "parametros": []
            },
            {
                "nombre": "pensize",
                "sintaxis": [
                    "turtle.pensize(width=None)",
                    "turtle.width(width=None)"
                ],
                "parametros": [
                    "width"
                ]
            },
            {
                "nombre": "penup",
                "sintaxis": [
                    "turtle.penup()",
                    "turtle.pu()",
                    "turtle.up()"
                ],
                "parametros": []
            },
            {
                "nombre": "position",
                "sintaxis": [
                    "turtle.position()",
                    "turtle.pos()"
                ],
                "parametros": []
            },
            {
                "nombre": "radians",
                "sintaxis": [
                    "turtle.radians()"
                ],
                "parametros": []
            },
            {
                "nombre": "register_shape",
                "sintaxis": [
                    "turtle.register_shape(name, shape=None)",
                    "turtle.addshape(name, shape=None)"
                ],
                "parametros": [
                    "shape",
                    "name"
                ]
            },
            {
                "nombre": "reset",
                "sintaxis": [
                    "turtle.reset()"
                ],
                "parametros": []
            },
            {
                "nombre": "reset",
                "sintaxis": [
                    "turtle.reset()"
                ],
                "parametros": []
            },
            {
                "nombre": "resetscreen",
                "sintaxis": [
                    "turtle.resetscreen()"
                ],
                "parametros": []
            },
            {
                "nombre": "resizemode",
                "sintaxis": [
                    "turtle.resizemode(rmode=None)"
                ],
                "parametros": [
                    "rmode"
                ]
            },
            {
                "nombre": "right",
                "sintaxis": [
                    "turtle.right(angle)",
                    "turtle.rt(angle)"
                ],
                "parametros": [
                    "angle"
                ]
            },
            {
                "nombre": "screensize",
                "sintaxis": [
                    "turtle.screensize(canvwidth=None, canvheight=None, bg=None)"
                ],
                "parametros": [
                    "canvwidth",
                    "canvheight",
                    "bg"
                ]
            },
            {
                "nombre": "setheading",
                "sintaxis": [
                    "turtle.setheading(to_angle)",
                    "turtle.seth(to_angle)"
                ],
                "parametros": [
                    "to_angle"
                ]
            },
            {
                "nombre": "settiltangle",
                "sintaxis": [
                    "turtle.settiltangle(angle)"
                ],
                "parametros": [
                    "angle"
                ]
            },
            {
                "nombre": "setundobuffer",
                "sintaxis": [
                    "turtle.setundobuffer(size)"
                ],
                "parametros": [
                    "size"
                ]
            },
            {
                "nombre": "setup",
                "sintaxis": [
                    "turtle.setup(width=_CFG['width'], height=_CFG['height'], startx=_CFG['leftright'], starty=_CFG['topbottom'])"
                ],
                "parametros": [
                    "startx",
                    "starty",
                    "width",
                    "height"
                ]
            },
            {
                "nombre": "setworldcoordinates",
                "sintaxis": [
                    "turtle.setworldcoordinates(llx, lly, urx, ury)"
                ],
                "parametros": [
                    "lly",
                    "llx",
                    "urx",
                    "ury"
                ]
            },
            {
                "nombre": "setx",
                "sintaxis": [
                    "turtle.setx(x)"
                ],
                "parametros": [
                    "x"
                ]
            },
            {
                "nombre": "sety",
                "sintaxis": [
                    "turtle.sety(y)"
                ],
                "parametros": [
                    "y"
                ]
            },
            {
                "nombre": "shape",
                "sintaxis": [
                    "turtle.shape(name=None)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "shapesize",
                "sintaxis": [
                    "turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)",
                    "turtle.turtlesize(stretch_wid=None, stretch_len=None, outline=None)"
                ],
                "parametros": [
                    "stretch_len",
                    "outline",
                    "stretch_wid"
                ]
            },
            {
                "nombre": "shapetransform",
                "sintaxis": [
                    "turtle.shapetransform(t11=None, t12=None, t21=None, t22=None)"
                ],
                "parametros": [
                    "t12",
                    "t21",
                    "t11",
                    "t22"
                ]
            },
            {
                "nombre": "shearfactor",
                "sintaxis": [
                    "turtle.shearfactor(shear=None)"
                ],
                "parametros": [
                    "shear"
                ]
            },
            {
                "nombre": "showturtle",
                "sintaxis": [
                    "turtle.showturtle()",
                    "turtle.st()"
                ],
                "parametros": []
            },
            {
                "nombre": "speed",
                "sintaxis": [
                    "turtle.speed(speed=None)"
                ],
                "parametros": [
                    "speed"
                ]
            },
            {
                "nombre": "stamp",
                "sintaxis": [
                    "turtle.stamp()"
                ],
                "parametros": []
            },
            {
                "nombre": "textinput",
                "sintaxis": [
                    "turtle.textinput(title, prompt)"
                ],
                "parametros": [
                    "title",
                    "prompt"
                ]
            },
            {
                "nombre": "tilt",
                "sintaxis": [
                    "turtle.tilt(angle)"
                ],
                "parametros": [
                    "angle"
                ]
            },
            {
                "nombre": "tiltangle",
                "sintaxis": [
                    "turtle.tiltangle(angle=None)"
                ],
                "parametros": [
                    "angle"
                ]
            },
            {
                "nombre": "title",
                "sintaxis": [
                    "turtle.title(titlestring)"
                ],
                "parametros": [
                    "titlestring"
                ]
            },
            {
                "nombre": "towards",
                "sintaxis": [
                    "turtle.towards(x, y=None)"
                ],
                "parametros": [
                    "y",
                    "x"
                ]
            },
            {
                "nombre": "tracer",
                "sintaxis": [
                    "turtle.tracer(n=None, delay=None)"
                ],
                "parametros": [
                    "n",
                    "delay"
                ]
            },
            {
                "nombre": "turtles",
                "sintaxis": [
                    "turtle.turtles()"
                ],
                "parametros": []
            },
            {
                "nombre": "undo",
                "sintaxis": [
                    "turtle.undo()"
                ],
                "parametros": []
            },
            {
                "nombre": "undobufferentries",
                "sintaxis": [
                    "turtle.undobufferentries()"
                ],
                "parametros": []
            },
            {
                "nombre": "update",
                "sintaxis": [
                    "turtle.update()"
                ],
                "parametros": []
            },
            {
                "nombre": "window_height",
                "sintaxis": [
                    "turtle.window_height()"
                ],
                "parametros": []
            },
            {
                "nombre": "window_width",
                "sintaxis": [
                    "turtle.window_width()"
                ],
                "parametros": []
            },
            {
                "nombre": "write",
                "sintaxis": [
                    "turtle.write(arg, move=False, align='left', font='Arial', 8, 'normal')"
                ],
                "parametros": [
                    "arg",
                    "move",
                    "align",
                    "font"
                ]
            },
            {
                "nombre": "write_docstringdict",
                "sintaxis": [
                    "turtle.write_docstringdict(filename='turtle_docstringdict')"
                ],
                "parametros": [
                    "filename"
                ]
            },
            {
                "nombre": "xcor",
                "sintaxis": [
                    "turtle.xcor()"
                ],
                "parametros": []
            },
            {
                "nombre": "ycor",
                "sintaxis": [
                    "turtle.ycor()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "RawTurtle",
                "constructores": [
                    {
                        "nombre": "RawTurtle",
                        "sintaxis": [
                            "class turtle.RawTurtle(canvas)",
                            "class turtle.RawPen(canvas)"
                        ],
                        "parametros": [
                            "canvas"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class RawTurtle"
                ]
            },
            {
                "nombre": "Screen",
                "constructores": [
                    {
                        "nombre": "Screen",
                        "sintaxis": [
                            "class turtle.Screen"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Screen"
                ]
            },
            {
                "nombre": "ScrolledCanvas",
                "constructores": [
                    {
                        "nombre": "ScrolledCanvas",
                        "sintaxis": [
                            "class turtle.ScrolledCanvas(master)"
                        ],
                        "parametros": [
                            "master"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ScrolledCanvas"
                ]
            },
            {
                "nombre": "Shape",
                "constructores": [
                    {
                        "nombre": "Shape",
                        "sintaxis": [
                            "class turtle.Shape(type_, data)"
                        ],
                        "parametros": [
                            "type_",
                            "data"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "addcomponent",
                        "sintaxis": [
                            "addcomponent(poly, fill, outline=None)"
                        ],
                        "parametros": [
                            "poly",
                            "outline",
                            "fill"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Shape"
                ]
            },
            {
                "nombre": "Turtle",
                "constructores": [
                    {
                        "nombre": "Turtle",
                        "sintaxis": [
                            "class turtle.Turtle"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Turtle"
                ]
            },
            {
                "nombre": "TurtleScreen",
                "constructores": [
                    {
                        "nombre": "TurtleScreen",
                        "sintaxis": [
                            "class turtle.TurtleScreen(cv)"
                        ],
                        "parametros": [
                            "cv"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TurtleScreen"
                ]
            },
            {
                "nombre": "Vec2D",
                "constructores": [
                    {
                        "nombre": "Vec2D",
                        "sintaxis": [
                            "class turtle.Vec2D(x, y)"
                        ],
                        "parametros": [
                            "y",
                            "x"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Vec2D"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "turtledemo",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "types",
        "funciones": [
            {
                "nombre": "coroutine",
                "sintaxis": [
                    "types.coroutine(gen_func)"
                ],
                "parametros": [
                    "gen_func"
                ]
            },
            {
                "nombre": "DynamicClassAttribute",
                "sintaxis": [
                    "types.DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)"
                ],
                "parametros": [
                    "fget",
                    "fset",
                    "doc",
                    "fdel"
                ]
            },
            {
                "nombre": "new_class",
                "sintaxis": [
                    "types.new_class(name, bases=(), kwds=None, exec_body=None)"
                ],
                "parametros": [
                    "exec_body",
                    "bases",
                    "kwds",
                    "name"
                ]
            },
            {
                "nombre": "prepare_class",
                "sintaxis": [
                    "types.prepare_class(name, bases=(), kwds=None)"
                ],
                "parametros": [
                    "bases",
                    "kwds",
                    "name"
                ]
            },
            {
                "nombre": "resolve_bases",
                "sintaxis": [
                    "types.resolve_bases(bases)"
                ],
                "parametros": [
                    "bases"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "CodeType",
                "constructores": [
                    {
                        "nombre": "CodeType",
                        "sintaxis": [
                            "class types.CodeType(**kwargs)"
                        ],
                        "parametros": [
                            "kwargs"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "replace",
                        "sintaxis": [
                            "replace(**kwargs)"
                        ],
                        "parametros": [
                            "kwargs"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class CodeType"
                ]
            },
            {
                "nombre": "GenericAlias",
                "constructores": [
                    {
                        "nombre": "GenericAlias",
                        "sintaxis": [
                            "class types.GenericAlias(t_origin, t_args)"
                        ],
                        "parametros": [
                            "t_origin",
                            "t_args"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class GenericAlias"
                ]
            },
            {
                "nombre": "MappingProxyType",
                "constructores": [
                    {
                        "nombre": "MappingProxyType",
                        "sintaxis": [
                            "class types.MappingProxyType(mapping)"
                        ],
                        "parametros": [
                            "mapping"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get(key[, default])"
                        ],
                        "parametros": [
                            "default",
                            "key"
                        ]
                    },
                    {
                        "nombre": "items",
                        "sintaxis": [
                            "items()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "keys",
                        "sintaxis": [
                            "keys()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "values",
                        "sintaxis": [
                            "values()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class MappingProxyType"
                ]
            },
            {
                "nombre": "ModuleType",
                "constructores": [
                    {
                        "nombre": "ModuleType",
                        "sintaxis": [
                            "class types.ModuleType(name, doc=None)"
                        ],
                        "parametros": [
                            "doc",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "__doc__",
                        "sintaxis": [
                            "__doc__"
                        ]
                    },
                    {
                        "nombre": "__loader__",
                        "sintaxis": [
                            "__loader__"
                        ]
                    },
                    {
                        "nombre": "__name__",
                        "sintaxis": [
                            "__name__"
                        ]
                    },
                    {
                        "nombre": "__package__",
                        "sintaxis": [
                            "__package__"
                        ]
                    },
                    {
                        "nombre": "__spec__",
                        "sintaxis": [
                            "__spec__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ModuleType"
                ]
            },
            {
                "nombre": "SimpleNamespace",
                "constructores": [
                    {
                        "nombre": "SimpleNamespace",
                        "sintaxis": [
                            "class types.SimpleNamespace"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SimpleNamespace"
                ]
            },
            {
                "nombre": "TracebackType",
                "constructores": [
                    {
                        "nombre": "TracebackType",
                        "sintaxis": [
                            "class types.TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)"
                        ],
                        "parametros": [
                            "tb_lineno",
                            "tb_frame",
                            "tb_next",
                            "tb_lasti"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TracebackType"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "AsyncGeneratorType",
                "sintaxis": [
                    "types.AsyncGeneratorType"
                ]
            },
            {
                "nombre": "BuiltinFunctionType",
                "sintaxis": [
                    "types.BuiltinFunctionType"
                ]
            },
            {
                "nombre": "CellType",
                "sintaxis": [
                    "types.CellType"
                ]
            },
            {
                "nombre": "ClassMethodDescriptorType",
                "sintaxis": [
                    "types.ClassMethodDescriptorType"
                ]
            },
            {
                "nombre": "CoroutineType",
                "sintaxis": [
                    "types.CoroutineType"
                ]
            },
            {
                "nombre": "EllipsisType",
                "sintaxis": [
                    "types.EllipsisType"
                ]
            },
            {
                "nombre": "FrameType",
                "sintaxis": [
                    "types.FrameType"
                ]
            },
            {
                "nombre": "FunctionType",
                "sintaxis": [
                    "types.FunctionType"
                ]
            },
            {
                "nombre": "GeneratorType",
                "sintaxis": [
                    "types.GeneratorType"
                ]
            },
            {
                "nombre": "GetSetDescriptorType",
                "sintaxis": [
                    "types.GetSetDescriptorType"
                ]
            },
            {
                "nombre": "MemberDescriptorType",
                "sintaxis": [
                    "types.MemberDescriptorType"
                ]
            },
            {
                "nombre": "MethodDescriptorType",
                "sintaxis": [
                    "types.MethodDescriptorType"
                ]
            },
            {
                "nombre": "MethodType",
                "sintaxis": [
                    "types.MethodType"
                ]
            },
            {
                "nombre": "MethodWrapperType",
                "sintaxis": [
                    "types.MethodWrapperType"
                ]
            },
            {
                "nombre": "NoneType",
                "sintaxis": [
                    "types.NoneType"
                ]
            },
            {
                "nombre": "NotImplementedType",
                "sintaxis": [
                    "types.NotImplementedType"
                ]
            },
            {
                "nombre": "UnionType",
                "sintaxis": [
                    "types.UnionType"
                ]
            },
            {
                "nombre": "WrapperDescriptorType",
                "sintaxis": [
                    "types.WrapperDescriptorType"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "typing",
        "funciones": [
            {
                "nombre": "cast",
                "sintaxis": [
                    "typing.cast(typ, val)"
                ],
                "parametros": [
                    "val",
                    "typ"
                ]
            },
            {
                "nombre": "final",
                "sintaxis": [
                    "@typing.final"
                ],
                "parametros": []
            },
            {
                "nombre": "get_args",
                "sintaxis": [
                    "typing.get_args(tp)"
                ],
                "parametros": [
                    "tp"
                ]
            },
            {
                "nombre": "get_origin",
                "sintaxis": [
                    "typing.get_origin(tp)"
                ],
                "parametros": [
                    "tp"
                ]
            },
            {
                "nombre": "get_type_hints",
                "sintaxis": [
                    "typing.get_type_hints(obj, globalns=None, localns=None, include_extras=False)"
                ],
                "parametros": [
                    "localns",
                    "obj",
                    "globalns",
                    "include_extras"
                ]
            },
            {
                "nombre": "is_typeddict",
                "sintaxis": [
                    "typing.is_typeddict(tp)"
                ],
                "parametros": [
                    "tp"
                ]
            },
            {
                "nombre": "no_type_check",
                "sintaxis": [
                    "@typing.no_type_check"
                ],
                "parametros": []
            },
            {
                "nombre": "no_type_check_decorator",
                "sintaxis": [
                    "@typing.no_type_check_decorator"
                ],
                "parametros": []
            },
            {
                "nombre": "overload",
                "sintaxis": [
                    "@typing.overload"
                ],
                "parametros": []
            },
            {
                "nombre": "runtime_checkable",
                "sintaxis": [
                    "@typing.runtime_checkable"
                ],
                "parametros": []
            },
            {
                "nombre": "type_check_only",
                "sintaxis": [
                    "@typing.type_check_only"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "AbstractSet",
                "constructores": [
                    {
                        "nombre": "AbstractSet",
                        "sintaxis": [
                            "class typing.AbstractSet(Sized, Collection[T_co])"
                        ],
                        "parametros": [
                            "Sized, Collection[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AbstractSet"
                ]
            },
            {
                "nombre": "AsyncContextManager",
                "constructores": [
                    {
                        "nombre": "AsyncContextManager",
                        "sintaxis": [
                            "class typing.AsyncContextManager(Generic[T_co])"
                        ],
                        "parametros": [
                            "Generic[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncContextManager"
                ]
            },
            {
                "nombre": "AsyncGenerator",
                "constructores": [
                    {
                        "nombre": "AsyncGenerator",
                        "sintaxis": [
                            "class typing.AsyncGenerator(AsyncIterator[T_co], Generic[T_co, T_contra])"
                        ],
                        "parametros": [
                            "AsyncIterator[T_co], Generic[T_co, T_contra]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncGenerator"
                ]
            },
            {
                "nombre": "AsyncIterable",
                "constructores": [
                    {
                        "nombre": "AsyncIterable",
                        "sintaxis": [
                            "class typing.AsyncIterable(Generic[T_co])"
                        ],
                        "parametros": [
                            "Generic[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncIterable"
                ]
            },
            {
                "nombre": "AsyncIterator",
                "constructores": [
                    {
                        "nombre": "AsyncIterator",
                        "sintaxis": [
                            "class typing.AsyncIterator(AsyncIterable[T_co])"
                        ],
                        "parametros": [
                            "AsyncIterable[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AsyncIterator"
                ]
            },
            {
                "nombre": "Awaitable",
                "constructores": [
                    {
                        "nombre": "Awaitable",
                        "sintaxis": [
                            "class typing.Awaitable(Generic[T_co])"
                        ],
                        "parametros": [
                            "Generic[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Awaitable"
                ]
            },
            {
                "nombre": "ByteString",
                "constructores": [
                    {
                        "nombre": "ByteString",
                        "sintaxis": [
                            "class typing.ByteString(Sequence[int])"
                        ],
                        "parametros": [
                            "Sequence[int]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ByteString"
                ]
            },
            {
                "nombre": "ChainMap",
                "constructores": [
                    {
                        "nombre": "ChainMap",
                        "sintaxis": [
                            "class typing.ChainMap(collections.ChainMap, MutableMapping[KT, VT])"
                        ],
                        "parametros": [
                            "collections.ChainMap, MutableMapping[KT, VT]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ChainMap"
                ]
            },
            {
                "nombre": "Collection",
                "constructores": [
                    {
                        "nombre": "Collection",
                        "sintaxis": [
                            "class typing.Collection(Sized, Iterable[T_co], Container[T_co])"
                        ],
                        "parametros": [
                            "Sized, Iterable[T_co], Container[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Collection"
                ]
            },
            {
                "nombre": "Container",
                "constructores": [
                    {
                        "nombre": "Container",
                        "sintaxis": [
                            "class typing.Container(Generic[T_co])"
                        ],
                        "parametros": [
                            "Generic[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Container"
                ]
            },
            {
                "nombre": "ContextManager",
                "constructores": [
                    {
                        "nombre": "ContextManager",
                        "sintaxis": [
                            "class typing.ContextManager(Generic[T_co])"
                        ],
                        "parametros": [
                            "Generic[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ContextManager"
                ]
            },
            {
                "nombre": "Coroutine",
                "constructores": [
                    {
                        "nombre": "Coroutine",
                        "sintaxis": [
                            "class typing.Coroutine(Awaitable[V_co], Generic[T_co, T_contra, V_co])"
                        ],
                        "parametros": [
                            "Awaitable[V_co], Generic[T_co, T_contra, V_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Coroutine"
                ]
            },
            {
                "nombre": "Counter",
                "constructores": [
                    {
                        "nombre": "Counter",
                        "sintaxis": [
                            "class typing.Counter(collections.Counter, Dict[T, int])"
                        ],
                        "parametros": [
                            "collections.Counter, Dict[T, int]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Counter"
                ]
            },
            {
                "nombre": "DefaultDict",
                "constructores": [
                    {
                        "nombre": "DefaultDict",
                        "sintaxis": [
                            "class typing.DefaultDict(collections.defaultdict, MutableMapping[KT, VT])"
                        ],
                        "parametros": [
                            "collections.defaultdict, MutableMapping[KT, VT]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DefaultDict"
                ]
            },
            {
                "nombre": "Deque",
                "constructores": [
                    {
                        "nombre": "Deque",
                        "sintaxis": [
                            "class typing.Deque(deque, MutableSequence[T])"
                        ],
                        "parametros": [
                            "deque, MutableSequence[T]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Deque"
                ]
            },
            {
                "nombre": "Dict",
                "constructores": [
                    {
                        "nombre": "Dict",
                        "sintaxis": [
                            "class typing.Dict(dict, MutableMapping[KT, VT])"
                        ],
                        "parametros": [
                            "dict, MutableMapping[KT, VT]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Dict"
                ]
            },
            {
                "nombre": "ForwardRef",
                "constructores": [
                    {
                        "nombre": "ForwardRef",
                        "sintaxis": [
                            "class typing.ForwardRef"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ForwardRef"
                ]
            },
            {
                "nombre": "FrozenSet",
                "constructores": [
                    {
                        "nombre": "FrozenSet",
                        "sintaxis": [
                            "class typing.FrozenSet(frozenset, AbstractSet[T_co])"
                        ],
                        "parametros": [
                            "frozenset, AbstractSet[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FrozenSet"
                ]
            },
            {
                "nombre": "Generator",
                "constructores": [
                    {
                        "nombre": "Generator",
                        "sintaxis": [
                            "class typing.Generator(Iterator[T_co], Generic[T_co, T_contra, V_co])"
                        ],
                        "parametros": [
                            "Iterator[T_co], Generic[T_co, T_contra, V_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Generator"
                ]
            },
            {
                "nombre": "Generic",
                "constructores": [
                    {
                        "nombre": "Generic",
                        "sintaxis": [
                            "class typing.Generic"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Generic"
                ]
            },
            {
                "nombre": "Hashable",
                "constructores": [
                    {
                        "nombre": "Hashable",
                        "sintaxis": [
                            "class typing.Hashable"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Hashable"
                ]
            },
            {
                "nombre": "IO",
                "constructores": [
                    {
                        "nombre": "IO",
                        "sintaxis": [
                            "class typing.IO",
                            "class typing.TextIO",
                            "class typing.BinaryIO"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IO"
                ]
            },
            {
                "nombre": "ItemsView",
                "constructores": [
                    {
                        "nombre": "ItemsView",
                        "sintaxis": [
                            "class typing.ItemsView(MappingView, Generic[KT_co, VT_co])"
                        ],
                        "parametros": [
                            "MappingView, Generic[KT_co, VT_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ItemsView"
                ]
            },
            {
                "nombre": "Iterable",
                "constructores": [
                    {
                        "nombre": "Iterable",
                        "sintaxis": [
                            "class typing.Iterable(Generic[T_co])"
                        ],
                        "parametros": [
                            "Generic[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Iterable"
                ]
            },
            {
                "nombre": "Iterator",
                "constructores": [
                    {
                        "nombre": "Iterator",
                        "sintaxis": [
                            "class typing.Iterator(Iterable[T_co])"
                        ],
                        "parametros": [
                            "Iterable[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Iterator"
                ]
            },
            {
                "nombre": "KeysView",
                "constructores": [
                    {
                        "nombre": "KeysView",
                        "sintaxis": [
                            "class typing.KeysView(MappingView[KT_co], AbstractSet[KT_co])"
                        ],
                        "parametros": [
                            "MappingView[KT_co], AbstractSet[KT_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class KeysView"
                ]
            },
            {
                "nombre": "List",
                "constructores": [
                    {
                        "nombre": "List",
                        "sintaxis": [
                            "class typing.List(list, MutableSequence[T])"
                        ],
                        "parametros": [
                            "list, MutableSequence[T]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class List"
                ]
            },
            {
                "nombre": "Mapping",
                "constructores": [
                    {
                        "nombre": "Mapping",
                        "sintaxis": [
                            "class typing.Mapping(Sized, Collection[KT], Generic[VT_co])"
                        ],
                        "parametros": [
                            "Sized, Collection[KT], Generic[VT_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Mapping"
                ]
            },
            {
                "nombre": "MappingView",
                "constructores": [
                    {
                        "nombre": "MappingView",
                        "sintaxis": [
                            "class typing.MappingView(Sized, Iterable[T_co])"
                        ],
                        "parametros": [
                            "Sized, Iterable[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MappingView"
                ]
            },
            {
                "nombre": "MutableMapping",
                "constructores": [
                    {
                        "nombre": "MutableMapping",
                        "sintaxis": [
                            "class typing.MutableMapping(Mapping[KT, VT])"
                        ],
                        "parametros": [
                            "Mapping[KT, VT]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MutableMapping"
                ]
            },
            {
                "nombre": "MutableSequence",
                "constructores": [
                    {
                        "nombre": "MutableSequence",
                        "sintaxis": [
                            "class typing.MutableSequence(Sequence[T])"
                        ],
                        "parametros": [
                            "Sequence[T]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MutableSequence"
                ]
            },
            {
                "nombre": "MutableSet",
                "constructores": [
                    {
                        "nombre": "MutableSet",
                        "sintaxis": [
                            "class typing.MutableSet(AbstractSet[T])"
                        ],
                        "parametros": [
                            "AbstractSet[T]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MutableSet"
                ]
            },
            {
                "nombre": "NamedTuple",
                "constructores": [
                    {
                        "nombre": "NamedTuple",
                        "sintaxis": [
                            "class typing.NamedTuple"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NamedTuple"
                ]
            },
            {
                "nombre": "NewType",
                "constructores": [
                    {
                        "nombre": "NewType",
                        "sintaxis": [
                            "class typing.NewType(name, tp)"
                        ],
                        "parametros": [
                            "tp",
                            "name"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NewType"
                ]
            },
            {
                "nombre": "OrderedDict",
                "constructores": [
                    {
                        "nombre": "OrderedDict",
                        "sintaxis": [
                            "class typing.OrderedDict(collections.OrderedDict, MutableMapping[KT, VT])"
                        ],
                        "parametros": [
                            "collections.OrderedDict, MutableMapping[KT, VT]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class OrderedDict"
                ]
            },
            {
                "nombre": "ParamSpec",
                "constructores": [
                    {
                        "nombre": "ParamSpec",
                        "sintaxis": [
                            "class typing.ParamSpec(name, *, bound=None, covariant=False, contravariant=False)"
                        ],
                        "parametros": [
                            "name",
                            "bound",
                            "contravariant",
                            "*",
                            "covariant"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "args",
                        "sintaxis": [
                            "args"
                        ]
                    },
                    {
                        "nombre": "kwargs",
                        "sintaxis": [
                            "kwargs"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ParamSpec"
                ]
            },
            {
                "nombre": "Pattern",
                "constructores": [
                    {
                        "nombre": "Pattern",
                        "sintaxis": [
                            "class typing.Match",
                            "class typing.Pattern"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Pattern"
                ]
            },
            {
                "nombre": "Protocol",
                "constructores": [
                    {
                        "nombre": "Protocol",
                        "sintaxis": [
                            "class typing.Protocol(Generic)"
                        ],
                        "parametros": [
                            "Generic"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Protocol"
                ]
            },
            {
                "nombre": "Reversible",
                "constructores": [
                    {
                        "nombre": "Reversible",
                        "sintaxis": [
                            "class typing.Reversible(Iterable[T_co])"
                        ],
                        "parametros": [
                            "Iterable[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Reversible"
                ]
            },
            {
                "nombre": "Sequence",
                "constructores": [
                    {
                        "nombre": "Sequence",
                        "sintaxis": [
                            "class typing.Sequence(Reversible[T_co], Collection[T_co])"
                        ],
                        "parametros": [
                            "Reversible[T_co], Collection[T_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Sequence"
                ]
            },
            {
                "nombre": "Set",
                "constructores": [
                    {
                        "nombre": "Set",
                        "sintaxis": [
                            "class typing.Set(set, MutableSet[T])"
                        ],
                        "parametros": [
                            "set, MutableSet[T]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Set"
                ]
            },
            {
                "nombre": "Sized",
                "constructores": [
                    {
                        "nombre": "Sized",
                        "sintaxis": [
                            "class typing.Sized"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Sized"
                ]
            },
            {
                "nombre": "SupportsAbs",
                "constructores": [
                    {
                        "nombre": "SupportsAbs",
                        "sintaxis": [
                            "class typing.SupportsAbs"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SupportsAbs"
                ]
            },
            {
                "nombre": "SupportsBytes",
                "constructores": [
                    {
                        "nombre": "SupportsBytes",
                        "sintaxis": [
                            "class typing.SupportsBytes"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SupportsBytes"
                ]
            },
            {
                "nombre": "SupportsComplex",
                "constructores": [
                    {
                        "nombre": "SupportsComplex",
                        "sintaxis": [
                            "class typing.SupportsComplex"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SupportsComplex"
                ]
            },
            {
                "nombre": "SupportsFloat",
                "constructores": [
                    {
                        "nombre": "SupportsFloat",
                        "sintaxis": [
                            "class typing.SupportsFloat"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SupportsFloat"
                ]
            },
            {
                "nombre": "SupportsIndex",
                "constructores": [
                    {
                        "nombre": "SupportsIndex",
                        "sintaxis": [
                            "class typing.SupportsIndex"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SupportsIndex"
                ]
            },
            {
                "nombre": "SupportsInt",
                "constructores": [
                    {
                        "nombre": "SupportsInt",
                        "sintaxis": [
                            "class typing.SupportsInt"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SupportsInt"
                ]
            },
            {
                "nombre": "SupportsRound",
                "constructores": [
                    {
                        "nombre": "SupportsRound",
                        "sintaxis": [
                            "class typing.SupportsRound"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SupportsRound"
                ]
            },
            {
                "nombre": "Text",
                "constructores": [
                    {
                        "nombre": "Text",
                        "sintaxis": [
                            "class typing.Text"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Text"
                ]
            },
            {
                "nombre": "Type",
                "constructores": [
                    {
                        "nombre": "Type",
                        "sintaxis": [
                            "class typing.Type(Generic[CT_co])"
                        ],
                        "parametros": [
                            "Generic[CT_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class Type"
                ]
            },
            {
                "nombre": "TypedDict",
                "constructores": [
                    {
                        "nombre": "TypedDict",
                        "sintaxis": [
                            "class typing.TypedDict(dict)"
                        ],
                        "parametros": [
                            "dict"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TypedDict"
                ]
            },
            {
                "nombre": "TypeVar",
                "constructores": [
                    {
                        "nombre": "TypeVar",
                        "sintaxis": [
                            "class typing.TypeVar"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TypeVar"
                ]
            },
            {
                "nombre": "ValuesView",
                "constructores": [
                    {
                        "nombre": "ValuesView",
                        "sintaxis": [
                            "class typing.ValuesView(MappingView[VT_co])"
                        ],
                        "parametros": [
                            "MappingView[VT_co]"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ValuesView"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "Annotated",
                "sintaxis": [
                    "typing.Annotated"
                ]
            },
            {
                "nombre": "Any",
                "sintaxis": [
                    "typing.Any"
                ]
            },
            {
                "nombre": "AnyStr",
                "sintaxis": [
                    "typing.AnyStr"
                ]
            },
            {
                "nombre": "Callable",
                "sintaxis": [
                    "typing.Callable"
                ]
            },
            {
                "nombre": "ClassVar",
                "sintaxis": [
                    "typing.ClassVar"
                ]
            },
            {
                "nombre": "Concatenate",
                "sintaxis": [
                    "typing.Concatenate"
                ]
            },
            {
                "nombre": "Final",
                "sintaxis": [
                    "typing.Final"
                ]
            },
            {
                "nombre": "Literal",
                "sintaxis": [
                    "typing.Literal"
                ]
            },
            {
                "nombre": "NoReturn",
                "sintaxis": [
                    "typing.NoReturn"
                ]
            },
            {
                "nombre": "Optional",
                "sintaxis": [
                    "typing.Optional"
                ]
            },
            {
                "nombre": "ParamSpecArgs",
                "sintaxis": [
                    "typing.ParamSpecArgs"
                ]
            },
            {
                "nombre": "ParamSpecKwargs",
                "sintaxis": [
                    "typing.ParamSpecKwargs"
                ]
            },
            {
                "nombre": "Tuple",
                "sintaxis": [
                    "typing.Tuple"
                ]
            },
            {
                "nombre": "TypeAlias",
                "sintaxis": [
                    "typing.TypeAlias"
                ]
            },
            {
                "nombre": "TypeGuard",
                "sintaxis": [
                    "typing.TypeGuard"
                ]
            },
            {
                "nombre": "TYPE_CHECKING",
                "sintaxis": [
                    "typing.TYPE_CHECKING"
                ]
            },
            {
                "nombre": "Union",
                "sintaxis": [
                    "typing.Union"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "unicodedata",
        "funciones": [
            {
                "nombre": "bidirectional",
                "sintaxis": [
                    "unicodedata.bidirectional(chr)"
                ],
                "parametros": [
                    "chr"
                ]
            },
            {
                "nombre": "category",
                "sintaxis": [
                    "unicodedata.category(chr)"
                ],
                "parametros": [
                    "chr"
                ]
            },
            {
                "nombre": "combining",
                "sintaxis": [
                    "unicodedata.combining(chr)"
                ],
                "parametros": [
                    "chr"
                ]
            },
            {
                "nombre": "decimal",
                "sintaxis": [
                    "unicodedata.decimal(chr[, default])"
                ],
                "parametros": [
                    "chr",
                    "default"
                ]
            },
            {
                "nombre": "decomposition",
                "sintaxis": [
                    "unicodedata.decomposition(chr)"
                ],
                "parametros": [
                    "chr"
                ]
            },
            {
                "nombre": "digit",
                "sintaxis": [
                    "unicodedata.digit(chr[, default])"
                ],
                "parametros": [
                    "chr",
                    "default"
                ]
            },
            {
                "nombre": "east_asian_width",
                "sintaxis": [
                    "unicodedata.east_asian_width(chr)"
                ],
                "parametros": [
                    "chr"
                ]
            },
            {
                "nombre": "is_normalized",
                "sintaxis": [
                    "unicodedata.is_normalized(form, unistr)"
                ],
                "parametros": [
                    "form",
                    "unistr"
                ]
            },
            {
                "nombre": "lookup",
                "sintaxis": [
                    "unicodedata.lookup(name)"
                ],
                "parametros": [
                    "name"
                ]
            },
            {
                "nombre": "mirrored",
                "sintaxis": [
                    "unicodedata.mirrored(chr)"
                ],
                "parametros": [
                    "chr"
                ]
            },
            {
                "nombre": "name",
                "sintaxis": [
                    "unicodedata.name(chr[, default])"
                ],
                "parametros": [
                    "chr",
                    "default"
                ]
            },
            {
                "nombre": "normalize",
                "sintaxis": [
                    "unicodedata.normalize(form, unistr)"
                ],
                "parametros": [
                    "form",
                    "unistr"
                ]
            },
            {
                "nombre": "numeric",
                "sintaxis": [
                    "unicodedata.numeric(chr[, default])"
                ],
                "parametros": [
                    "chr",
                    "default"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "ucd_3_2_0",
                "sintaxis": [
                    "unicodedata.ucd_3_2_0"
                ]
            },
            {
                "nombre": "unidata_version",
                "sintaxis": [
                    "unicodedata.unidata_version"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "unittest",
        "funciones": [
            {
                "nombre": "addModuleCleanup",
                "sintaxis": [
                    "unittest.addModuleCleanup(function, /, *args, **kwargs)"
                ],
                "parametros": [
                    "**kwargs",
                    "/",
                    "*args",
                    "function"
                ]
            },
            {
                "nombre": "doModuleCleanups",
                "sintaxis": [
                    "unittest.doModuleCleanups()"
                ],
                "parametros": []
            },
            {
                "nombre": "expectedFailure",
                "sintaxis": [
                    "@unittest.expectedFailure"
                ],
                "parametros": []
            },
            {
                "nombre": "installHandler",
                "sintaxis": [
                    "unittest.installHandler()"
                ],
                "parametros": []
            },
            {
                "nombre": "main",
                "sintaxis": [
                    "unittest.main(module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=unittest.defaultTestLoader, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None)"
                ],
                "parametros": [
                    "defaultTest",
                    "argv",
                    "verbosity",
                    "testLoader",
                    "catchbreak",
                    "failfast",
                    "warnings",
                    "buffer",
                    "testRunner",
                    "module",
                    "exit"
                ]
            },
            {
                "nombre": "registerResult",
                "sintaxis": [
                    "unittest.registerResult(result)"
                ],
                "parametros": [
                    "result"
                ]
            },
            {
                "nombre": "removeHandler",
                "sintaxis": [
                    "unittest.removeHandler(function=None)"
                ],
                "parametros": [
                    "function"
                ]
            },
            {
                "nombre": "removeResult",
                "sintaxis": [
                    "unittest.removeResult(result)"
                ],
                "parametros": [
                    "result"
                ]
            },
            {
                "nombre": "skip",
                "sintaxis": [
                    "@unittest.skip(reason)"
                ],
                "parametros": [
                    "reason"
                ]
            },
            {
                "nombre": "skipIf",
                "sintaxis": [
                    "@unittest.skipIf(condition, reason)"
                ],
                "parametros": [
                    "reason",
                    "condition"
                ]
            },
            {
                "nombre": "skipUnless",
                "sintaxis": [
                    "@unittest.skipUnless(condition, reason)"
                ],
                "parametros": [
                    "reason",
                    "condition"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "FunctionTestCase",
                "constructores": [
                    {
                        "nombre": "FunctionTestCase",
                        "sintaxis": [
                            "class unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None, description=None)"
                        ],
                        "parametros": [
                            "setUp",
                            "description",
                            "tearDown",
                            "testFunc"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FunctionTestCase"
                ]
            },
            {
                "nombre": "IsolatedAsyncioTestCase",
                "constructores": [
                    {
                        "nombre": "IsolatedAsyncioTestCase",
                        "sintaxis": [
                            "class unittest.IsolatedAsyncioTestCase(methodName='runTest')"
                        ],
                        "parametros": [
                            "methodName"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "addAsyncCleanup",
                        "sintaxis": [
                            "addAsyncCleanup(function, /, *args, **kwargs)"
                        ],
                        "parametros": [
                            "**kwargs",
                            "/",
                            "*args",
                            "function"
                        ]
                    },
                    {
                        "nombre": "asyncSetUp",
                        "sintaxis": [
                            "coroutine asyncSetUp()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "asyncTearDown",
                        "sintaxis": [
                            "coroutine asyncTearDown()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(result=None)"
                        ],
                        "parametros": [
                            "result"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class IsolatedAsyncioTestCase"
                ]
            },
            {
                "nombre": "TestCase",
                "constructores": [
                    {
                        "nombre": "TestCase",
                        "sintaxis": [
                            "class unittest.TestCase(methodName='runTest')"
                        ],
                        "parametros": [
                            "methodName"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "addClassCleanup",
                        "sintaxis": [
                            "classmethod addClassCleanup(function, /, *args, **kwargs)"
                        ],
                        "parametros": [
                            "**kwargs",
                            "/",
                            "*args",
                            "function"
                        ]
                    },
                    {
                        "nombre": "addCleanup",
                        "sintaxis": [
                            "addCleanup(function, /, *args, **kwargs)"
                        ],
                        "parametros": [
                            "**kwargs",
                            "/",
                            "*args",
                            "function"
                        ]
                    },
                    {
                        "nombre": "addTypeEqualityFunc",
                        "sintaxis": [
                            "addTypeEqualityFunc(typeobj, function)"
                        ],
                        "parametros": [
                            "function",
                            "typeobj"
                        ]
                    },
                    {
                        "nombre": "assertAlmostEqual",
                        "sintaxis": [
                            "assertAlmostEqual(first, second, places=7, msg=None, delta=None)"
                        ],
                        "parametros": [
                            "delta",
                            "first",
                            "second",
                            "places",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "assertCountEqual",
                        "sintaxis": [
                            "assertCountEqual(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertDictEqual",
                        "sintaxis": [
                            "assertDictEqual(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertEqual",
                        "sintaxis": [
                            "assertEqual(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertGreater",
                        "sintaxis": [
                            "assertGreater(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertIn",
                        "sintaxis": [
                            "assertIn(member, container, msg=None)"
                        ],
                        "parametros": [
                            "msg",
                            "container",
                            "member"
                        ]
                    },
                    {
                        "nombre": "assertIs",
                        "sintaxis": [
                            "assertIs(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertIsInstance",
                        "sintaxis": [
                            "assertIsInstance(obj, cls, msg=None)"
                        ],
                        "parametros": [
                            "cls",
                            "obj",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "assertIsNone",
                        "sintaxis": [
                            "assertIsNone(expr, msg=None)"
                        ],
                        "parametros": [
                            "expr",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "assertListEqual",
                        "sintaxis": [
                            "assertListEqual(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertLogs",
                        "sintaxis": [
                            "assertLogs(logger=None, level=None)"
                        ],
                        "parametros": [
                            "logger",
                            "level"
                        ]
                    },
                    {
                        "nombre": "assertMultiLineEqual",
                        "sintaxis": [
                            "assertMultiLineEqual(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertNoLogs",
                        "sintaxis": [
                            "assertNoLogs(logger=None, level=None)"
                        ],
                        "parametros": [
                            "logger",
                            "level"
                        ]
                    },
                    {
                        "nombre": "assertNotEqual",
                        "sintaxis": [
                            "assertNotEqual(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertRaises",
                        "sintaxis": [
                            "assertRaises(exception, callable, *args, **kwds)"
                        ],
                        "parametros": [
                            "args",
                            "kwds",
                            "exception",
                            "callable"
                        ]
                    },
                    {
                        "nombre": "assertRaisesRegex",
                        "sintaxis": [
                            "assertRaisesRegex(exception, regex, callable, *args, **kwds)"
                        ],
                        "parametros": [
                            "args",
                            "callable",
                            "exception",
                            "kwds",
                            "regex"
                        ]
                    },
                    {
                        "nombre": "assertRegex",
                        "sintaxis": [
                            "assertRegex(text, regex, msg=None)"
                        ],
                        "parametros": [
                            "msg",
                            "regex",
                            "text"
                        ]
                    },
                    {
                        "nombre": "assertSequenceEqual",
                        "sintaxis": [
                            "assertSequenceEqual(first, second, msg=None, seq_type=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second",
                            "seq_type"
                        ]
                    },
                    {
                        "nombre": "assertSetEqual",
                        "sintaxis": [
                            "assertSetEqual(first, second, msg=None)"
                        ],
                        "parametros": [
                            "first",
                            "msg",
                            "second"
                        ]
                    },
                    {
                        "nombre": "assertTrue",
                        "sintaxis": [
                            "assertTrue(expr, msg=None)"
                        ],
                        "parametros": [
                            "expr",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "assertWarns",
                        "sintaxis": [
                            "assertWarns(warning, callable, *args, **kwds)"
                        ],
                        "parametros": [
                            "args",
                            "callable",
                            "kwds",
                            "warning"
                        ]
                    },
                    {
                        "nombre": "assertWarnsRegex",
                        "sintaxis": [
                            "assertWarnsRegex(warning, regex, callable, *args, **kwds)"
                        ],
                        "parametros": [
                            "args",
                            "callable",
                            "kwds",
                            "regex",
                            "warning"
                        ]
                    },
                    {
                        "nombre": "countTestCases",
                        "sintaxis": [
                            "countTestCases()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "debug",
                        "sintaxis": [
                            "debug()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "defaultTestResult",
                        "sintaxis": [
                            "defaultTestResult()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "doClassCleanups",
                        "sintaxis": [
                            "classmethod doClassCleanups()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "doCleanups",
                        "sintaxis": [
                            "doCleanups()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "fail",
                        "sintaxis": [
                            "fail(msg=None)"
                        ],
                        "parametros": [
                            "msg"
                        ]
                    },
                    {
                        "nombre": "id",
                        "sintaxis": [
                            "id()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(result=None)"
                        ],
                        "parametros": [
                            "result"
                        ]
                    },
                    {
                        "nombre": "setUp",
                        "sintaxis": [
                            "setUp()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setUpClass",
                        "sintaxis": [
                            "setUpClass()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "shortDescription",
                        "sintaxis": [
                            "shortDescription()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "skipTest",
                        "sintaxis": [
                            "skipTest(reason)"
                        ],
                        "parametros": [
                            "reason"
                        ]
                    },
                    {
                        "nombre": "subTest",
                        "sintaxis": [
                            "subTest(msg=None, **params)"
                        ],
                        "parametros": [
                            "msg",
                            "params"
                        ]
                    },
                    {
                        "nombre": "tearDown",
                        "sintaxis": [
                            "tearDown()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "tearDownClass",
                        "sintaxis": [
                            "tearDownClass()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "failureException",
                        "sintaxis": [
                            "failureException"
                        ]
                    },
                    {
                        "nombre": "longMessage",
                        "sintaxis": [
                            "longMessage"
                        ]
                    },
                    {
                        "nombre": "maxDiff",
                        "sintaxis": [
                            "maxDiff"
                        ]
                    },
                    {
                        "nombre": "output",
                        "sintaxis": [
                            "output"
                        ]
                    },
                    {
                        "nombre": "records",
                        "sintaxis": [
                            "records"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TestCase"
                ]
            },
            {
                "nombre": "TestLoader",
                "constructores": [
                    {
                        "nombre": "TestLoader",
                        "sintaxis": [
                            "class unittest.TestLoader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "discover",
                        "sintaxis": [
                            "discover(start_dir, pattern='test*.py', top_level_dir=None)"
                        ],
                        "parametros": [
                            "top_level_dir",
                            "pattern",
                            "start_dir"
                        ]
                    },
                    {
                        "nombre": "getTestCaseNames",
                        "sintaxis": [
                            "getTestCaseNames(testCaseClass)"
                        ],
                        "parametros": [
                            "testCaseClass"
                        ]
                    },
                    {
                        "nombre": "loadTestsFromModule",
                        "sintaxis": [
                            "loadTestsFromModule(module, pattern=None)"
                        ],
                        "parametros": [
                            "pattern",
                            "module"
                        ]
                    },
                    {
                        "nombre": "loadTestsFromName",
                        "sintaxis": [
                            "loadTestsFromName(name, module=None)"
                        ],
                        "parametros": [
                            "name",
                            "module"
                        ]
                    },
                    {
                        "nombre": "loadTestsFromNames",
                        "sintaxis": [
                            "loadTestsFromNames(names, module=None)"
                        ],
                        "parametros": [
                            "module",
                            "names"
                        ]
                    },
                    {
                        "nombre": "loadTestsFromTestCase",
                        "sintaxis": [
                            "loadTestsFromTestCase(testCaseClass)"
                        ],
                        "parametros": [
                            "testCaseClass"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "errors",
                        "sintaxis": [
                            "errors"
                        ]
                    },
                    {
                        "nombre": "sortTestMethodsUsing",
                        "sintaxis": [
                            "sortTestMethodsUsing"
                        ]
                    },
                    {
                        "nombre": "suiteClass",
                        "sintaxis": [
                            "suiteClass"
                        ]
                    },
                    {
                        "nombre": "testMethodPrefix",
                        "sintaxis": [
                            "testMethodPrefix"
                        ]
                    },
                    {
                        "nombre": "testNamePatterns",
                        "sintaxis": [
                            "testNamePatterns"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TestLoader"
                ]
            },
            {
                "nombre": "TestResult",
                "constructores": [
                    {
                        "nombre": "TestResult",
                        "sintaxis": [
                            "class unittest.TestResult"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "addError",
                        "sintaxis": [
                            "addError(test, err)"
                        ],
                        "parametros": [
                            "err",
                            "test"
                        ]
                    },
                    {
                        "nombre": "addExpectedFailure",
                        "sintaxis": [
                            "addExpectedFailure(test, err)"
                        ],
                        "parametros": [
                            "err",
                            "test"
                        ]
                    },
                    {
                        "nombre": "addFailure",
                        "sintaxis": [
                            "addFailure(test, err)"
                        ],
                        "parametros": [
                            "err",
                            "test"
                        ]
                    },
                    {
                        "nombre": "addSkip",
                        "sintaxis": [
                            "addSkip(test, reason)"
                        ],
                        "parametros": [
                            "reason",
                            "test"
                        ]
                    },
                    {
                        "nombre": "addSubTest",
                        "sintaxis": [
                            "addSubTest(test, subtest, outcome)"
                        ],
                        "parametros": [
                            "outcome",
                            "subtest",
                            "test"
                        ]
                    },
                    {
                        "nombre": "addSuccess",
                        "sintaxis": [
                            "addSuccess(test)"
                        ],
                        "parametros": [
                            "test"
                        ]
                    },
                    {
                        "nombre": "addUnexpectedSuccess",
                        "sintaxis": [
                            "addUnexpectedSuccess(test)"
                        ],
                        "parametros": [
                            "test"
                        ]
                    },
                    {
                        "nombre": "startTest",
                        "sintaxis": [
                            "startTest(test)"
                        ],
                        "parametros": [
                            "test"
                        ]
                    },
                    {
                        "nombre": "startTestRun",
                        "sintaxis": [
                            "startTestRun()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "stop",
                        "sintaxis": [
                            "stop()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "stopTest",
                        "sintaxis": [
                            "stopTest(test)"
                        ],
                        "parametros": [
                            "test"
                        ]
                    },
                    {
                        "nombre": "stopTestRun",
                        "sintaxis": [
                            "stopTestRun()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "wasSuccessful",
                        "sintaxis": [
                            "wasSuccessful()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "buffer",
                        "sintaxis": [
                            "buffer"
                        ]
                    },
                    {
                        "nombre": "errors",
                        "sintaxis": [
                            "errors"
                        ]
                    },
                    {
                        "nombre": "expectedFailures",
                        "sintaxis": [
                            "expectedFailures"
                        ]
                    },
                    {
                        "nombre": "failfast",
                        "sintaxis": [
                            "failfast"
                        ]
                    },
                    {
                        "nombre": "failures",
                        "sintaxis": [
                            "failures"
                        ]
                    },
                    {
                        "nombre": "shouldStop",
                        "sintaxis": [
                            "shouldStop"
                        ]
                    },
                    {
                        "nombre": "skipped",
                        "sintaxis": [
                            "skipped"
                        ]
                    },
                    {
                        "nombre": "tb_locals",
                        "sintaxis": [
                            "tb_locals"
                        ]
                    },
                    {
                        "nombre": "testsRun",
                        "sintaxis": [
                            "testsRun"
                        ]
                    },
                    {
                        "nombre": "unexpectedSuccesses",
                        "sintaxis": [
                            "unexpectedSuccesses"
                        ]
                    }
                ],
                "sintaxis": [
                    "class TestResult"
                ]
            },
            {
                "nombre": "TestSuite",
                "constructores": [
                    {
                        "nombre": "TestSuite",
                        "sintaxis": [
                            "class unittest.TestSuite(tests=())"
                        ],
                        "parametros": [
                            "tests"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "addTest",
                        "sintaxis": [
                            "addTest(test)"
                        ],
                        "parametros": [
                            "test"
                        ]
                    },
                    {
                        "nombre": "addTests",
                        "sintaxis": [
                            "addTests(tests)"
                        ],
                        "parametros": [
                            "tests"
                        ]
                    },
                    {
                        "nombre": "countTestCases",
                        "sintaxis": [
                            "countTestCases()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "debug",
                        "sintaxis": [
                            "debug()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(result)"
                        ],
                        "parametros": [
                            "result"
                        ]
                    },
                    {
                        "nombre": "__iter__",
                        "sintaxis": [
                            "__iter__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class TestSuite"
                ]
            },
            {
                "nombre": "TextTestResult",
                "constructores": [
                    {
                        "nombre": "TextTestResult",
                        "sintaxis": [
                            "class unittest.TextTestResult(stream, descriptions, verbosity)"
                        ],
                        "parametros": [
                            "verbosity",
                            "descriptions",
                            "stream"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class TextTestResult"
                ]
            },
            {
                "nombre": "TextTestRunner",
                "constructores": [
                    {
                        "nombre": "TextTestRunner",
                        "sintaxis": [
                            "class unittest.TextTestRunner(stream=None, descriptions=True, verbosity=1, failfast=False, buffer=False, resultclass=None, warnings=None, *, tb_locals=False)"
                        ],
                        "parametros": [
                            "verbosity",
                            "resultclass",
                            "failfast",
                            "warnings",
                            "buffer",
                            "descriptions",
                            "stream",
                            "*",
                            "tb_locals"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(test)"
                        ],
                        "parametros": [
                            "test"
                        ]
                    },
                    {
                        "nombre": "_makeResult",
                        "sintaxis": [
                            "_makeResult()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class TextTestRunner"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "defaultTestLoader",
                "sintaxis": [
                    "unittest.defaultTestLoader"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "SkipTest",
                "sintaxis": [
                    "exception unittest.SkipTest(reason)"
                ]
            }
        ]
    },
    {
        "nombre": "unittest.mock",
        "funciones": [
            {
                "nombre": "call",
                "sintaxis": [
                    "unittest.mock.call(*args, **kwargs)"
                ],
                "parametros": [
                    "args",
                    "kwargs"
                ]
            },
            {
                "nombre": "create_autospec",
                "sintaxis": [
                    "unittest.mock.create_autospec(spec, spec_set=False, instance=False, **kwargs)"
                ],
                "parametros": [
                    "kwargs",
                    "spec_set",
                    "instance",
                    "spec"
                ]
            },
            {
                "nombre": "dict",
                "sintaxis": [
                    "patch.dict(in_dict, values=(), clear=False, **kwargs)"
                ],
                "parametros": [
                    "values",
                    "kwargs",
                    "in_dict",
                    "clear"
                ]
            },
            {
                "nombre": "mock_open",
                "sintaxis": [
                    "unittest.mock.mock_open(mock=None, read_data=None)"
                ],
                "parametros": [
                    "mock",
                    "read_data"
                ]
            },
            {
                "nombre": "multiple",
                "sintaxis": [
                    "patch.multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)"
                ],
                "parametros": [
                    "kwargs",
                    "spec",
                    "autospec",
                    "create",
                    "new_callable",
                    "target",
                    "spec_set"
                ]
            },
            {
                "nombre": "object",
                "sintaxis": [
                    "patch.object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)"
                ],
                "parametros": [
                    "kwargs",
                    "spec",
                    "autospec",
                    "create",
                    "new_callable",
                    "new",
                    "target",
                    "attribute",
                    "spec_set"
                ]
            },
            {
                "nombre": "patch",
                "sintaxis": [
                    "unittest.mock.patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)"
                ],
                "parametros": [
                    "kwargs",
                    "spec",
                    "autospec",
                    "create",
                    "new_callable",
                    "new",
                    "target",
                    "spec_set"
                ]
            },
            {
                "nombre": "seal",
                "sintaxis": [
                    "unittest.mock.seal(mock)"
                ],
                "parametros": [
                    "mock"
                ]
            },
            {
                "nombre": "stopall",
                "sintaxis": [
                    "patch.stopall()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "AsyncMock",
                "constructores": [
                    {
                        "nombre": "AsyncMock",
                        "sintaxis": [
                            "class unittest.mock.AsyncMock(spec=None, side_effect=None, return_value=DEFAULT, wraps=None, name=None, spec_set=None, unsafe=False, **kwargs)"
                        ],
                        "parametros": [
                            "kwargs",
                            "return_value",
                            "name",
                            "spec",
                            "unsafe",
                            "wraps",
                            "side_effect",
                            "spec_set"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "assert_any_await",
                        "sintaxis": [
                            "assert_any_await(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "assert_awaited",
                        "sintaxis": [
                            "assert_awaited()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "assert_awaited_once",
                        "sintaxis": [
                            "assert_awaited_once()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "assert_awaited_once_with",
                        "sintaxis": [
                            "assert_awaited_once_with(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "assert_awaited_with",
                        "sintaxis": [
                            "assert_awaited_with(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "assert_has_awaits",
                        "sintaxis": [
                            "assert_has_awaits(calls, any_order=False)"
                        ],
                        "parametros": [
                            "any_order",
                            "calls"
                        ]
                    },
                    {
                        "nombre": "assert_not_awaited",
                        "sintaxis": [
                            "assert_not_awaited()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "reset_mock",
                        "sintaxis": [
                            "reset_mock(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "await_args",
                        "sintaxis": [
                            "await_args"
                        ]
                    },
                    {
                        "nombre": "await_args_list",
                        "sintaxis": [
                            "await_args_list"
                        ]
                    },
                    {
                        "nombre": "await_count",
                        "sintaxis": [
                            "await_count"
                        ]
                    }
                ],
                "sintaxis": [
                    "class AsyncMock"
                ]
            },
            {
                "nombre": "call",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "call_list",
                        "sintaxis": [
                            "call.call_list()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class call"
                ]
            },
            {
                "nombre": "MagicMock",
                "constructores": [
                    {
                        "nombre": "MagicMock",
                        "sintaxis": [
                            "class unittest.mock.MagicMock(*args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MagicMock"
                ]
            },
            {
                "nombre": "Mock",
                "constructores": [
                    {
                        "nombre": "Mock",
                        "sintaxis": [
                            "class unittest.mock.Mock(spec=None, side_effect=None, return_value=DEFAULT, wraps=None, name=None, spec_set=None, unsafe=False, **kwargs)"
                        ],
                        "parametros": [
                            "kwargs",
                            "return_value",
                            "name",
                            "spec",
                            "unsafe",
                            "wraps",
                            "side_effect",
                            "spec_set"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "assert_any_call",
                        "sintaxis": [
                            "assert_any_call(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "assert_called",
                        "sintaxis": [
                            "assert_called()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "assert_called_once",
                        "sintaxis": [
                            "assert_called_once()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "assert_called_once_with",
                        "sintaxis": [
                            "assert_called_once_with(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "assert_called_with",
                        "sintaxis": [
                            "assert_called_with(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "assert_has_calls",
                        "sintaxis": [
                            "assert_has_calls(calls, any_order=False)"
                        ],
                        "parametros": [
                            "any_order",
                            "calls"
                        ]
                    },
                    {
                        "nombre": "assert_not_called",
                        "sintaxis": [
                            "assert_not_called()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "attach_mock",
                        "sintaxis": [
                            "attach_mock(mock, attribute)"
                        ],
                        "parametros": [
                            "mock",
                            "attribute"
                        ]
                    },
                    {
                        "nombre": "configure_mock",
                        "sintaxis": [
                            "configure_mock(**kwargs)"
                        ],
                        "parametros": [
                            "kwargs"
                        ]
                    },
                    {
                        "nombre": "mock_add_spec",
                        "sintaxis": [
                            "mock_add_spec(spec, spec_set=False)"
                        ],
                        "parametros": [
                            "spec_set",
                            "spec"
                        ]
                    },
                    {
                        "nombre": "reset_mock",
                        "sintaxis": [
                            "reset_mock(*, return_value=False, side_effect=False)"
                        ],
                        "parametros": [
                            "*",
                            "side_effect",
                            "return_value"
                        ]
                    },
                    {
                        "nombre": "_get_child_mock",
                        "sintaxis": [
                            "_get_child_mock(**kw)"
                        ],
                        "parametros": [
                            "kw"
                        ]
                    },
                    {
                        "nombre": "__dir__",
                        "sintaxis": [
                            "__dir__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "called",
                        "sintaxis": [
                            "called"
                        ]
                    },
                    {
                        "nombre": "call_args",
                        "sintaxis": [
                            "call_args"
                        ]
                    },
                    {
                        "nombre": "call_args_list",
                        "sintaxis": [
                            "call_args_list"
                        ]
                    },
                    {
                        "nombre": "call_count",
                        "sintaxis": [
                            "call_count"
                        ]
                    },
                    {
                        "nombre": "method_calls",
                        "sintaxis": [
                            "method_calls"
                        ]
                    },
                    {
                        "nombre": "mock_calls",
                        "sintaxis": [
                            "mock_calls"
                        ]
                    },
                    {
                        "nombre": "return_value",
                        "sintaxis": [
                            "return_value"
                        ]
                    },
                    {
                        "nombre": "side_effect",
                        "sintaxis": [
                            "side_effect"
                        ]
                    },
                    {
                        "nombre": "__class__",
                        "sintaxis": [
                            "__class__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Mock"
                ]
            },
            {
                "nombre": "NonCallableMagicMock",
                "constructores": [
                    {
                        "nombre": "NonCallableMagicMock",
                        "sintaxis": [
                            "class unittest.mock.NonCallableMagicMock(*args, **kw)"
                        ],
                        "parametros": [
                            "args",
                            "kw"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NonCallableMagicMock"
                ]
            },
            {
                "nombre": "NonCallableMock",
                "constructores": [
                    {
                        "nombre": "NonCallableMock",
                        "sintaxis": [
                            "class unittest.mock.NonCallableMock(spec=None, wraps=None, name=None, spec_set=None, **kwargs)"
                        ],
                        "parametros": [
                            "kwargs",
                            "name",
                            "spec",
                            "wraps",
                            "spec_set"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class NonCallableMock"
                ]
            },
            {
                "nombre": "PropertyMock",
                "constructores": [
                    {
                        "nombre": "PropertyMock",
                        "sintaxis": [
                            "class unittest.mock.PropertyMock(*args, **kwargs)"
                        ],
                        "parametros": [
                            "args",
                            "kwargs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PropertyMock"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ANY",
                "sintaxis": [
                    "unittest.mock.ANY"
                ]
            },
            {
                "nombre": "DEFAULT",
                "sintaxis": [
                    "unittest.mock.DEFAULT"
                ]
            },
            {
                "nombre": "FILTER_DIR",
                "sintaxis": [
                    "unittest.mock.FILTER_DIR"
                ]
            },
            {
                "nombre": "sentinel",
                "sintaxis": [
                    "unittest.mock.sentinel"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "urllib",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "urllib.error",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "ContentTooShortError",
                "sintaxis": [
                    "exception urllib.error.ContentTooShortError(msg, content)"
                ]
            },
            {
                "nombre": "HTTPError",
                "sintaxis": [
                    "exception urllib.error.HTTPError"
                ]
            },
            {
                "nombre": "URLError",
                "sintaxis": [
                    "exception urllib.error.URLError"
                ]
            }
        ]
    },
    {
        "nombre": "urllib.parse",
        "funciones": [
            {
                "nombre": "parse_qs",
                "sintaxis": [
                    "urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None, separator='&')"
                ],
                "parametros": [
                    "errors",
                    "encoding",
                    "strict_parsing",
                    "separator",
                    "qs",
                    "keep_blank_values",
                    "max_num_fields"
                ]
            },
            {
                "nombre": "parse_qsl",
                "sintaxis": [
                    "urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None, separator='&')"
                ],
                "parametros": [
                    "errors",
                    "encoding",
                    "strict_parsing",
                    "separator",
                    "qs",
                    "keep_blank_values",
                    "max_num_fields"
                ]
            },
            {
                "nombre": "quote",
                "sintaxis": [
                    "urllib.parse.quote(string, safe='/', encoding=None, errors=None)"
                ],
                "parametros": [
                    "errors",
                    "safe",
                    "string",
                    "encoding"
                ]
            },
            {
                "nombre": "quote_from_bytes",
                "sintaxis": [
                    "urllib.parse.quote_from_bytes(bytes, safe='/')"
                ],
                "parametros": [
                    "safe",
                    "bytes"
                ]
            },
            {
                "nombre": "quote_plus",
                "sintaxis": [
                    "urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)"
                ],
                "parametros": [
                    "errors",
                    "safe",
                    "string",
                    "encoding"
                ]
            },
            {
                "nombre": "unquote",
                "sintaxis": [
                    "urllib.parse.unquote(string, encoding='utf-8', errors='replace')"
                ],
                "parametros": [
                    "errors",
                    "encoding",
                    "string"
                ]
            },
            {
                "nombre": "unquote_plus",
                "sintaxis": [
                    "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')"
                ],
                "parametros": [
                    "errors",
                    "encoding",
                    "string"
                ]
            },
            {
                "nombre": "unquote_to_bytes",
                "sintaxis": [
                    "urllib.parse.unquote_to_bytes(string)"
                ],
                "parametros": [
                    "string"
                ]
            },
            {
                "nombre": "unwrap",
                "sintaxis": [
                    "urllib.parse.unwrap(url)"
                ],
                "parametros": [
                    "url"
                ]
            },
            {
                "nombre": "urldefrag",
                "sintaxis": [
                    "urllib.parse.urldefrag(url)"
                ],
                "parametros": [
                    "url"
                ]
            },
            {
                "nombre": "urlencode",
                "sintaxis": [
                    "urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus)"
                ],
                "parametros": [
                    "errors",
                    "encoding",
                    "query",
                    "safe",
                    "quote_via",
                    "doseq"
                ]
            },
            {
                "nombre": "urljoin",
                "sintaxis": [
                    "urllib.parse.urljoin(base, url, allow_fragments=True)"
                ],
                "parametros": [
                    "base",
                    "url",
                    "allow_fragments"
                ]
            },
            {
                "nombre": "urlparse",
                "sintaxis": [
                    "urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)"
                ],
                "parametros": [
                    "scheme",
                    "urlstring",
                    "allow_fragments"
                ]
            },
            {
                "nombre": "urlsplit",
                "sintaxis": [
                    "urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)"
                ],
                "parametros": [
                    "scheme",
                    "urlstring",
                    "allow_fragments"
                ]
            },
            {
                "nombre": "urlunparse",
                "sintaxis": [
                    "urllib.parse.urlunparse(parts)"
                ],
                "parametros": [
                    "parts"
                ]
            },
            {
                "nombre": "urlunsplit",
                "sintaxis": [
                    "urllib.parse.urlunsplit(parts)"
                ],
                "parametros": [
                    "parts"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "DefragResult",
                "constructores": [
                    {
                        "nombre": "DefragResult",
                        "sintaxis": [
                            "class urllib.parse.DefragResult(url, fragment)"
                        ],
                        "parametros": [
                            "fragment",
                            "url"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DefragResult"
                ]
            },
            {
                "nombre": "DefragResultBytes",
                "constructores": [
                    {
                        "nombre": "DefragResultBytes",
                        "sintaxis": [
                            "class urllib.parse.DefragResultBytes(url, fragment)"
                        ],
                        "parametros": [
                            "fragment",
                            "url"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DefragResultBytes"
                ]
            },
            {
                "nombre": "ParseResult",
                "constructores": [
                    {
                        "nombre": "ParseResult",
                        "sintaxis": [
                            "class urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)"
                        ],
                        "parametros": [
                            "scheme",
                            "fragment",
                            "params",
                            "path",
                            "netloc",
                            "query"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ParseResult"
                ]
            },
            {
                "nombre": "ParseResultBytes",
                "constructores": [
                    {
                        "nombre": "ParseResultBytes",
                        "sintaxis": [
                            "class urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment)"
                        ],
                        "parametros": [
                            "scheme",
                            "fragment",
                            "params",
                            "path",
                            "netloc",
                            "query"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ParseResultBytes"
                ]
            },
            {
                "nombre": "SplitResult",
                "constructores": [
                    {
                        "nombre": "SplitResult",
                        "sintaxis": [
                            "class urllib.parse.SplitResult(scheme, netloc, path, query, fragment)"
                        ],
                        "parametros": [
                            "scheme",
                            "fragment",
                            "path",
                            "netloc",
                            "query"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SplitResult"
                ]
            },
            {
                "nombre": "SplitResultBytes",
                "constructores": [
                    {
                        "nombre": "SplitResultBytes",
                        "sintaxis": [
                            "class urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)"
                        ],
                        "parametros": [
                            "scheme",
                            "fragment",
                            "path",
                            "netloc",
                            "query"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SplitResultBytes"
                ]
            },
            {
                "nombre": "urllib.parse.SplitResult",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "geturl",
                        "sintaxis": [
                            "urllib.parse.SplitResult.geturl()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class urllib.parse.SplitResult"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "urllib.request",
        "funciones": [
            {
                "nombre": "build_opener",
                "sintaxis": [
                    "urllib.request.build_opener([handler, ...])"
                ],
                "parametros": [
                    "...",
                    "handler"
                ]
            },
            {
                "nombre": "getproxies",
                "sintaxis": [
                    "urllib.request.getproxies()"
                ],
                "parametros": []
            },
            {
                "nombre": "install_opener",
                "sintaxis": [
                    "urllib.request.install_opener(opener)"
                ],
                "parametros": [
                    "opener"
                ]
            },
            {
                "nombre": "pathname2url",
                "sintaxis": [
                    "urllib.request.pathname2url(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "url2pathname",
                "sintaxis": [
                    "urllib.request.url2pathname(path)"
                ],
                "parametros": [
                    "path"
                ]
            },
            {
                "nombre": "urlcleanup",
                "sintaxis": [
                    "urllib.request.urlcleanup()"
                ],
                "parametros": []
            },
            {
                "nombre": "urlopen",
                "sintaxis": [
                    "urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)"
                ],
                "parametros": [
                    "cafile",
                    "context",
                    "url",
                    "cadefault",
                    "data",
                    "capath",
                    "timeout",
                    "*"
                ]
            },
            {
                "nombre": "urlretrieve",
                "sintaxis": [
                    "urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)"
                ],
                "parametros": [
                    "filename",
                    "data",
                    "url",
                    "reporthook"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "AbstractBasicAuthHandler",
                "constructores": [
                    {
                        "nombre": "AbstractBasicAuthHandler",
                        "sintaxis": [
                            "class urllib.request.AbstractBasicAuthHandler(password_mgr=None)"
                        ],
                        "parametros": [
                            "password_mgr"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_error_auth_reqed",
                        "sintaxis": [
                            "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)"
                        ],
                        "parametros": [
                            "host",
                            "headers",
                            "authreq",
                            "req"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AbstractBasicAuthHandler"
                ]
            },
            {
                "nombre": "AbstractDigestAuthHandler",
                "constructores": [
                    {
                        "nombre": "AbstractDigestAuthHandler",
                        "sintaxis": [
                            "class urllib.request.AbstractDigestAuthHandler(password_mgr=None)"
                        ],
                        "parametros": [
                            "password_mgr"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_error_auth_reqed",
                        "sintaxis": [
                            "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)"
                        ],
                        "parametros": [
                            "host",
                            "headers",
                            "authreq",
                            "req"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AbstractDigestAuthHandler"
                ]
            },
            {
                "nombre": "BaseHandler",
                "constructores": [
                    {
                        "nombre": "BaseHandler",
                        "sintaxis": [
                            "class urllib.request.BaseHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_parent",
                        "sintaxis": [
                            "BaseHandler.add_parent(director)"
                        ],
                        "parametros": [
                            "director"
                        ]
                    },
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "BaseHandler.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "default_open",
                        "sintaxis": [
                            "BaseHandler.default_open(req)"
                        ],
                        "parametros": [
                            "req"
                        ]
                    },
                    {
                        "nombre": "http_error_default",
                        "sintaxis": [
                            "BaseHandler.http_error_default(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "unknown_open",
                        "sintaxis": [
                            "BaseHandler.unknown_open(req)"
                        ],
                        "parametros": [
                            "req"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "parent",
                        "sintaxis": [
                            "BaseHandler.parent"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseHandler"
                ]
            },
            {
                "nombre": "CacheFTPHandler",
                "constructores": [
                    {
                        "nombre": "CacheFTPHandler",
                        "sintaxis": [
                            "class urllib.request.CacheFTPHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "setMaxConns",
                        "sintaxis": [
                            "CacheFTPHandler.setMaxConns(m)"
                        ],
                        "parametros": [
                            "m"
                        ]
                    },
                    {
                        "nombre": "setTimeout",
                        "sintaxis": [
                            "CacheFTPHandler.setTimeout(t)"
                        ],
                        "parametros": [
                            "t"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class CacheFTPHandler"
                ]
            },
            {
                "nombre": "DataHandler",
                "constructores": [
                    {
                        "nombre": "DataHandler",
                        "sintaxis": [
                            "class urllib.request.DataHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "data_open",
                        "sintaxis": [
                            "DataHandler.data_open(req)"
                        ],
                        "parametros": [
                            "req"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DataHandler"
                ]
            },
            {
                "nombre": "FancyURLopener",
                "constructores": [
                    {
                        "nombre": "FancyURLopener",
                        "sintaxis": [
                            "class urllib.request.FancyURLopener(...)"
                        ],
                        "parametros": [
                            "..."
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "prompt_user_passwd",
                        "sintaxis": [
                            "prompt_user_passwd(host, realm)"
                        ],
                        "parametros": [
                            "host",
                            "realm"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FancyURLopener"
                ]
            },
            {
                "nombre": "FileHandler",
                "constructores": [
                    {
                        "nombre": "FileHandler",
                        "sintaxis": [
                            "class urllib.request.FileHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "file_open",
                        "sintaxis": [
                            "FileHandler.file_open(req)"
                        ],
                        "parametros": [
                            "req"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FileHandler"
                ]
            },
            {
                "nombre": "FTPHandler",
                "constructores": [
                    {
                        "nombre": "FTPHandler",
                        "sintaxis": [
                            "class urllib.request.FTPHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "ftp_open",
                        "sintaxis": [
                            "FTPHandler.ftp_open(req)"
                        ],
                        "parametros": [
                            "req"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class FTPHandler"
                ]
            },
            {
                "nombre": "HTTPBasicAuthHandler",
                "constructores": [
                    {
                        "nombre": "HTTPBasicAuthHandler",
                        "sintaxis": [
                            "class urllib.request.HTTPBasicAuthHandler(password_mgr=None)"
                        ],
                        "parametros": [
                            "password_mgr"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_error_401",
                        "sintaxis": [
                            "HTTPBasicAuthHandler.http_error_401(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPBasicAuthHandler"
                ]
            },
            {
                "nombre": "HTTPCookieProcessor",
                "constructores": [
                    {
                        "nombre": "HTTPCookieProcessor",
                        "sintaxis": [
                            "class urllib.request.HTTPCookieProcessor(cookiejar=None)"
                        ],
                        "parametros": [
                            "cookiejar"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "cookiejar",
                        "sintaxis": [
                            "HTTPCookieProcessor.cookiejar"
                        ]
                    }
                ],
                "sintaxis": [
                    "class HTTPCookieProcessor"
                ]
            },
            {
                "nombre": "HTTPDefaultErrorHandler",
                "constructores": [
                    {
                        "nombre": "HTTPDefaultErrorHandler",
                        "sintaxis": [
                            "class urllib.request.HTTPDefaultErrorHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HTTPDefaultErrorHandler"
                ]
            },
            {
                "nombre": "HTTPDigestAuthHandler",
                "constructores": [
                    {
                        "nombre": "HTTPDigestAuthHandler",
                        "sintaxis": [
                            "class urllib.request.HTTPDigestAuthHandler(password_mgr=None)"
                        ],
                        "parametros": [
                            "password_mgr"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_error_401",
                        "sintaxis": [
                            "HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPDigestAuthHandler"
                ]
            },
            {
                "nombre": "HTTPErrorProcessor",
                "constructores": [
                    {
                        "nombre": "HTTPErrorProcessor",
                        "sintaxis": [
                            "class urllib.request.HTTPErrorProcessor"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "https_response",
                        "sintaxis": [
                            "HTTPErrorProcessor.https_response(request, response)"
                        ],
                        "parametros": [
                            "response",
                            "request"
                        ]
                    },
                    {
                        "nombre": "http_response",
                        "sintaxis": [
                            "HTTPErrorProcessor.http_response(request, response)"
                        ],
                        "parametros": [
                            "response",
                            "request"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPErrorProcessor"
                ]
            },
            {
                "nombre": "HTTPHandler",
                "constructores": [
                    {
                        "nombre": "HTTPHandler",
                        "sintaxis": [
                            "class urllib.request.HTTPHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_open",
                        "sintaxis": [
                            "HTTPHandler.http_open(req)"
                        ],
                        "parametros": [
                            "req"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPHandler"
                ]
            },
            {
                "nombre": "HTTPPasswordMgr",
                "constructores": [
                    {
                        "nombre": "HTTPPasswordMgr",
                        "sintaxis": [
                            "class urllib.request.HTTPPasswordMgr"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_password",
                        "sintaxis": [
                            "HTTPPasswordMgr.add_password(realm, uri, user, passwd)"
                        ],
                        "parametros": [
                            "passwd",
                            "realm",
                            "user",
                            "uri"
                        ]
                    },
                    {
                        "nombre": "find_user_password",
                        "sintaxis": [
                            "HTTPPasswordMgr.find_user_password(realm, authuri)"
                        ],
                        "parametros": [
                            "realm",
                            "authuri"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPPasswordMgr"
                ]
            },
            {
                "nombre": "HTTPPasswordMgrWithDefaultRealm",
                "constructores": [
                    {
                        "nombre": "HTTPPasswordMgrWithDefaultRealm",
                        "sintaxis": [
                            "class urllib.request.HTTPPasswordMgrWithDefaultRealm"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class HTTPPasswordMgrWithDefaultRealm"
                ]
            },
            {
                "nombre": "HTTPPasswordMgrWithPriorAuth",
                "constructores": [
                    {
                        "nombre": "HTTPPasswordMgrWithPriorAuth",
                        "sintaxis": [
                            "class urllib.request.HTTPPasswordMgrWithPriorAuth"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_password",
                        "sintaxis": [
                            "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)"
                        ],
                        "parametros": [
                            "realm",
                            "passwd",
                            "is_authenticated",
                            "uri",
                            "user"
                        ]
                    },
                    {
                        "nombre": "find_user_password",
                        "sintaxis": [
                            "HTTPPasswordMgrWithPriorAuth.find_user_password(realm, authuri)"
                        ],
                        "parametros": [
                            "realm",
                            "authuri"
                        ]
                    },
                    {
                        "nombre": "is_authenticated",
                        "sintaxis": [
                            "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)"
                        ],
                        "parametros": [
                            "self",
                            "authuri"
                        ]
                    },
                    {
                        "nombre": "update_authenticated",
                        "sintaxis": [
                            "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)"
                        ],
                        "parametros": [
                            "self",
                            "is_authenticated",
                            "uri"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPPasswordMgrWithPriorAuth"
                ]
            },
            {
                "nombre": "HTTPRedirectHandler",
                "constructores": [
                    {
                        "nombre": "HTTPRedirectHandler",
                        "sintaxis": [
                            "class urllib.request.HTTPRedirectHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_error_301",
                        "sintaxis": [
                            "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "http_error_302",
                        "sintaxis": [
                            "HTTPRedirectHandler.http_error_302(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "http_error_303",
                        "sintaxis": [
                            "HTTPRedirectHandler.http_error_303(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "http_error_307",
                        "sintaxis": [
                            "HTTPRedirectHandler.http_error_307(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    },
                    {
                        "nombre": "redirect_request",
                        "sintaxis": [
                            "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)"
                        ],
                        "parametros": [
                            "fp",
                            "newurl",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPRedirectHandler"
                ]
            },
            {
                "nombre": "HTTPSHandler",
                "constructores": [
                    {
                        "nombre": "HTTPSHandler",
                        "sintaxis": [
                            "class urllib.request.HTTPSHandler(debuglevel=0, context=None, check_hostname=None)"
                        ],
                        "parametros": [
                            "check_hostname",
                            "context",
                            "debuglevel"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "https_open",
                        "sintaxis": [
                            "HTTPSHandler.https_open(req)"
                        ],
                        "parametros": [
                            "req"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class HTTPSHandler"
                ]
            },
            {
                "nombre": "OpenerDirector",
                "constructores": [
                    {
                        "nombre": "OpenerDirector",
                        "sintaxis": [
                            "class urllib.request.OpenerDirector"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_handler",
                        "sintaxis": [
                            "OpenerDirector.add_handler(handler)"
                        ],
                        "parametros": [
                            "handler"
                        ]
                    },
                    {
                        "nombre": "error",
                        "sintaxis": [
                            "OpenerDirector.error(proto, *args)"
                        ],
                        "parametros": [
                            "args",
                            "proto"
                        ]
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "OpenerDirector.open(url, data=None[, timeout])"
                        ],
                        "parametros": [
                            "timeout",
                            "url",
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class OpenerDirector"
                ]
            },
            {
                "nombre": "ProxyBasicAuthHandler",
                "constructores": [
                    {
                        "nombre": "ProxyBasicAuthHandler",
                        "sintaxis": [
                            "class urllib.request.ProxyBasicAuthHandler(password_mgr=None)"
                        ],
                        "parametros": [
                            "password_mgr"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_error_407",
                        "sintaxis": [
                            "ProxyBasicAuthHandler.http_error_407(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ProxyBasicAuthHandler"
                ]
            },
            {
                "nombre": "ProxyDigestAuthHandler",
                "constructores": [
                    {
                        "nombre": "ProxyDigestAuthHandler",
                        "sintaxis": [
                            "class urllib.request.ProxyDigestAuthHandler(password_mgr=None)"
                        ],
                        "parametros": [
                            "password_mgr"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "http_error_407",
                        "sintaxis": [
                            "ProxyDigestAuthHandler.http_error_407(req, fp, code, msg, hdrs)"
                        ],
                        "parametros": [
                            "fp",
                            "hdrs",
                            "req",
                            "code",
                            "msg"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ProxyDigestAuthHandler"
                ]
            },
            {
                "nombre": "ProxyHandler",
                "constructores": [
                    {
                        "nombre": "ProxyHandler",
                        "sintaxis": [
                            "class urllib.request.ProxyHandler(proxies=None)"
                        ],
                        "parametros": [
                            "proxies"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ProxyHandler"
                ]
            },
            {
                "nombre": "Request",
                "constructores": [
                    {
                        "nombre": "Request",
                        "sintaxis": [
                            "class urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)"
                        ],
                        "parametros": [
                            "headers",
                            "url",
                            "method",
                            "data",
                            "origin_req_host",
                            "unverifiable"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_header",
                        "sintaxis": [
                            "Request.add_header(key, val)"
                        ],
                        "parametros": [
                            "val",
                            "key"
                        ]
                    },
                    {
                        "nombre": "add_unredirected_header",
                        "sintaxis": [
                            "Request.add_unredirected_header(key, header)"
                        ],
                        "parametros": [
                            "header",
                            "key"
                        ]
                    },
                    {
                        "nombre": "get_full_url",
                        "sintaxis": [
                            "Request.get_full_url()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_header",
                        "sintaxis": [
                            "Request.get_header(header_name, default=None)"
                        ],
                        "parametros": [
                            "header_name",
                            "default"
                        ]
                    },
                    {
                        "nombre": "get_method",
                        "sintaxis": [
                            "Request.get_method()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "has_header",
                        "sintaxis": [
                            "Request.has_header(header)"
                        ],
                        "parametros": [
                            "header"
                        ]
                    },
                    {
                        "nombre": "header_items",
                        "sintaxis": [
                            "Request.header_items()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "remove_header",
                        "sintaxis": [
                            "Request.remove_header(header)"
                        ],
                        "parametros": [
                            "header"
                        ]
                    },
                    {
                        "nombre": "set_proxy",
                        "sintaxis": [
                            "Request.set_proxy(host, type)"
                        ],
                        "parametros": [
                            "host",
                            "type"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "Request.data"
                        ]
                    },
                    {
                        "nombre": "full_url",
                        "sintaxis": [
                            "Request.full_url"
                        ]
                    },
                    {
                        "nombre": "host",
                        "sintaxis": [
                            "Request.host"
                        ]
                    },
                    {
                        "nombre": "method",
                        "sintaxis": [
                            "Request.method"
                        ]
                    },
                    {
                        "nombre": "origin_req_host",
                        "sintaxis": [
                            "Request.origin_req_host"
                        ]
                    },
                    {
                        "nombre": "selector",
                        "sintaxis": [
                            "Request.selector"
                        ]
                    },
                    {
                        "nombre": "type",
                        "sintaxis": [
                            "Request.type"
                        ]
                    },
                    {
                        "nombre": "unverifiable",
                        "sintaxis": [
                            "Request.unverifiable"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Request"
                ]
            },
            {
                "nombre": "UnknownHandler",
                "constructores": [
                    {
                        "nombre": "UnknownHandler",
                        "sintaxis": [
                            "class urllib.request.UnknownHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "unknown_open",
                        "sintaxis": [
                            "UnknownHandler.unknown_open()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class UnknownHandler"
                ]
            },
            {
                "nombre": "URLopener",
                "constructores": [
                    {
                        "nombre": "URLopener",
                        "sintaxis": [
                            "class urllib.request.URLopener(proxies=None, **x509)"
                        ],
                        "parametros": [
                            "x509",
                            "proxies"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "open(fullurl, data=None)"
                        ],
                        "parametros": [
                            "fullurl",
                            "data"
                        ]
                    },
                    {
                        "nombre": "open_unknown",
                        "sintaxis": [
                            "open_unknown(fullurl, data=None)"
                        ],
                        "parametros": [
                            "fullurl",
                            "data"
                        ]
                    },
                    {
                        "nombre": "retrieve",
                        "sintaxis": [
                            "retrieve(url, filename=None, reporthook=None, data=None)"
                        ],
                        "parametros": [
                            "filename",
                            "data",
                            "url",
                            "reporthook"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class URLopener"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "urllib.response",
        "funciones": [],
        "clases": [
            {
                "nombre": "addinfourl",
                "constructores": [
                    {
                        "nombre": "addinfourl",
                        "sintaxis": [
                            "class urllib.response.addinfourl"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getstatus",
                        "sintaxis": [
                            "getstatus()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "geturl",
                        "sintaxis": [
                            "geturl()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "info",
                        "sintaxis": [
                            "info()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "code",
                        "sintaxis": [
                            "code"
                        ]
                    },
                    {
                        "nombre": "headers",
                        "sintaxis": [
                            "headers"
                        ]
                    },
                    {
                        "nombre": "status",
                        "sintaxis": [
                            "status"
                        ]
                    },
                    {
                        "nombre": "url",
                        "sintaxis": [
                            "url"
                        ]
                    }
                ],
                "sintaxis": [
                    "class addinfourl"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "urllib.robotparser",
        "funciones": [],
        "clases": [
            {
                "nombre": "RobotFileParser",
                "constructores": [
                    {
                        "nombre": "RobotFileParser",
                        "sintaxis": [
                            "class urllib.robotparser.RobotFileParser(url='')"
                        ],
                        "parametros": [
                            "url"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "can_fetch",
                        "sintaxis": [
                            "can_fetch(useragent, url)"
                        ],
                        "parametros": [
                            "useragent",
                            "url"
                        ]
                    },
                    {
                        "nombre": "crawl_delay",
                        "sintaxis": [
                            "crawl_delay(useragent)"
                        ],
                        "parametros": [
                            "useragent"
                        ]
                    },
                    {
                        "nombre": "modified",
                        "sintaxis": [
                            "modified()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "mtime",
                        "sintaxis": [
                            "mtime()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "parse",
                        "sintaxis": [
                            "parse(lines)"
                        ],
                        "parametros": [
                            "lines"
                        ]
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "read()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "request_rate",
                        "sintaxis": [
                            "request_rate(useragent)"
                        ],
                        "parametros": [
                            "useragent"
                        ]
                    },
                    {
                        "nombre": "set_url",
                        "sintaxis": [
                            "set_url(url)"
                        ],
                        "parametros": [
                            "url"
                        ]
                    },
                    {
                        "nombre": "site_maps",
                        "sintaxis": [
                            "site_maps()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class RobotFileParser"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "uu",
        "funciones": [
            {
                "nombre": "decode",
                "sintaxis": [
                    "uu.decode(in_file, out_file=None, mode=None, quiet=False)"
                ],
                "parametros": [
                    "mode",
                    "in_file",
                    "out_file",
                    "quiet"
                ]
            },
            {
                "nombre": "encode",
                "sintaxis": [
                    "uu.encode(in_file, out_file, name=None, mode=None, *, backtick=False)"
                ],
                "parametros": [
                    "mode",
                    "name",
                    "out_file",
                    "backtick",
                    "*",
                    "in_file"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception uu.Error"
                ]
            }
        ]
    },
    {
        "nombre": "uuid",
        "funciones": [
            {
                "nombre": "getnode",
                "sintaxis": [
                    "uuid.getnode()"
                ],
                "parametros": []
            },
            {
                "nombre": "uuid1",
                "sintaxis": [
                    "uuid.uuid1(node=None, clock_seq=None)"
                ],
                "parametros": [
                    "clock_seq",
                    "node"
                ]
            },
            {
                "nombre": "uuid3",
                "sintaxis": [
                    "uuid.uuid3(namespace, name)"
                ],
                "parametros": [
                    "namespace",
                    "name"
                ]
            },
            {
                "nombre": "uuid4",
                "sintaxis": [
                    "uuid.uuid4()"
                ],
                "parametros": []
            },
            {
                "nombre": "uuid5",
                "sintaxis": [
                    "uuid.uuid5(namespace, name)"
                ],
                "parametros": [
                    "namespace",
                    "name"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "SafeUUID",
                "constructores": [
                    {
                        "nombre": "SafeUUID",
                        "sintaxis": [
                            "class uuid.SafeUUID"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "safe",
                        "sintaxis": [
                            "safe"
                        ]
                    },
                    {
                        "nombre": "unknown",
                        "sintaxis": [
                            "unknown"
                        ]
                    },
                    {
                        "nombre": "unsafe",
                        "sintaxis": [
                            "unsafe"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SafeUUID"
                ]
            },
            {
                "nombre": "UUID",
                "constructores": [
                    {
                        "nombre": "UUID",
                        "sintaxis": [
                            "class uuid.UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None, *, is_safe=SafeUUID.unknown)"
                        ],
                        "parametros": [
                            "version",
                            "hex",
                            "bytes",
                            "bytes_le",
                            "int",
                            "fields",
                            "is_safe",
                            "*"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "bytes",
                        "sintaxis": [
                            "UUID.bytes"
                        ]
                    },
                    {
                        "nombre": "bytes_le",
                        "sintaxis": [
                            "UUID.bytes_le"
                        ]
                    },
                    {
                        "nombre": "fields",
                        "sintaxis": [
                            "UUID.fields"
                        ]
                    },
                    {
                        "nombre": "hex",
                        "sintaxis": [
                            "UUID.hex"
                        ]
                    },
                    {
                        "nombre": "int",
                        "sintaxis": [
                            "UUID.int"
                        ]
                    },
                    {
                        "nombre": "is_safe",
                        "sintaxis": [
                            "UUID.is_safe"
                        ]
                    },
                    {
                        "nombre": "urn",
                        "sintaxis": [
                            "UUID.urn"
                        ]
                    },
                    {
                        "nombre": "variant",
                        "sintaxis": [
                            "UUID.variant"
                        ]
                    },
                    {
                        "nombre": "version",
                        "sintaxis": [
                            "UUID.version"
                        ]
                    }
                ],
                "sintaxis": [
                    "class UUID"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "NAMESPACE_DNS",
                "sintaxis": [
                    "uuid.NAMESPACE_DNS"
                ]
            },
            {
                "nombre": "NAMESPACE_OID",
                "sintaxis": [
                    "uuid.NAMESPACE_OID"
                ]
            },
            {
                "nombre": "NAMESPACE_URL",
                "sintaxis": [
                    "uuid.NAMESPACE_URL"
                ]
            },
            {
                "nombre": "NAMESPACE_X500",
                "sintaxis": [
                    "uuid.NAMESPACE_X500"
                ]
            },
            {
                "nombre": "RESERVED_FUTURE",
                "sintaxis": [
                    "uuid.RESERVED_FUTURE"
                ]
            },
            {
                "nombre": "RESERVED_MICROSOFT",
                "sintaxis": [
                    "uuid.RESERVED_MICROSOFT"
                ]
            },
            {
                "nombre": "RESERVED_NCS",
                "sintaxis": [
                    "uuid.RESERVED_NCS"
                ]
            },
            {
                "nombre": "RFC_4122",
                "sintaxis": [
                    "uuid.RFC_4122"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "venv",
        "funciones": [
            {
                "nombre": "create",
                "sintaxis": [
                    "venv.create(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False, prompt=None, upgrade_deps=False)"
                ],
                "parametros": [
                    "upgrade_deps",
                    "with_pip",
                    "env_dir",
                    "prompt",
                    "clear",
                    "symlinks",
                    "system_site_packages"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "EnvBuilder",
                "constructores": [
                    {
                        "nombre": "EnvBuilder",
                        "sintaxis": [
                            "class venv.EnvBuilder(system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False, prompt=None, upgrade_deps=False)"
                        ],
                        "parametros": [
                            "upgrade_deps",
                            "upgrade",
                            "with_pip",
                            "prompt",
                            "clear",
                            "symlinks",
                            "system_site_packages"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "create",
                        "sintaxis": [
                            "create(env_dir)"
                        ],
                        "parametros": [
                            "env_dir"
                        ]
                    },
                    {
                        "nombre": "create_configuration",
                        "sintaxis": [
                            "create_configuration(context)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "ensure_directories",
                        "sintaxis": [
                            "ensure_directories(env_dir)"
                        ],
                        "parametros": [
                            "env_dir"
                        ]
                    },
                    {
                        "nombre": "install_scripts",
                        "sintaxis": [
                            "install_scripts(context, path)"
                        ],
                        "parametros": [
                            "context",
                            "path"
                        ]
                    },
                    {
                        "nombre": "post_setup",
                        "sintaxis": [
                            "post_setup(context)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "setup_python",
                        "sintaxis": [
                            "setup_python(context)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "setup_scripts",
                        "sintaxis": [
                            "setup_scripts(context)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    },
                    {
                        "nombre": "upgrade_dependencies",
                        "sintaxis": [
                            "upgrade_dependencies(context)"
                        ],
                        "parametros": [
                            "context"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class EnvBuilder"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "warnings",
        "funciones": [
            {
                "nombre": "filterwarnings",
                "sintaxis": [
                    "warnings.filterwarnings(action, message='', category=Warning, module='', lineno=0, append=False)"
                ],
                "parametros": [
                    "append",
                    "category",
                    "lineno",
                    "module",
                    "action",
                    "message"
                ]
            },
            {
                "nombre": "formatwarning",
                "sintaxis": [
                    "warnings.formatwarning(message, category, filename, lineno, line=None)"
                ],
                "parametros": [
                    "filename",
                    "line",
                    "category",
                    "lineno",
                    "message"
                ]
            },
            {
                "nombre": "resetwarnings",
                "sintaxis": [
                    "warnings.resetwarnings()"
                ],
                "parametros": []
            },
            {
                "nombre": "showwarning",
                "sintaxis": [
                    "warnings.showwarning(message, category, filename, lineno, file=None, line=None)"
                ],
                "parametros": [
                    "filename",
                    "line",
                    "category",
                    "lineno",
                    "message",
                    "file"
                ]
            },
            {
                "nombre": "simplefilter",
                "sintaxis": [
                    "warnings.simplefilter(action, category=Warning, lineno=0, append=False)"
                ],
                "parametros": [
                    "action",
                    "append",
                    "category",
                    "lineno"
                ]
            },
            {
                "nombre": "warn",
                "sintaxis": [
                    "warnings.warn(message, category=None, stacklevel=1, source=None)"
                ],
                "parametros": [
                    "stacklevel",
                    "message",
                    "category",
                    "source"
                ]
            },
            {
                "nombre": "warn_explicit",
                "sintaxis": [
                    "warnings.warn_explicit(message, category, filename, lineno, module=None, registry=None, module_globals=None, source=None)"
                ],
                "parametros": [
                    "filename",
                    "module_globals",
                    "category",
                    "lineno",
                    "registry",
                    "source",
                    "module",
                    "message"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "catch_warnings",
                "constructores": [
                    {
                        "nombre": "catch_warnings",
                        "sintaxis": [
                            "class warnings.catch_warnings(*, record=False, module=None)"
                        ],
                        "parametros": [
                            "*",
                            "record",
                            "module"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class catch_warnings"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "wave",
        "funciones": [
            {
                "nombre": "open",
                "sintaxis": [
                    "wave.open(file, mode=None)"
                ],
                "parametros": [
                    "mode",
                    "file"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Wave_read",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "Wave_read.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getcompname",
                        "sintaxis": [
                            "Wave_read.getcompname()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getcomptype",
                        "sintaxis": [
                            "Wave_read.getcomptype()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getframerate",
                        "sintaxis": [
                            "Wave_read.getframerate()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getmark",
                        "sintaxis": [
                            "Wave_read.getmark(id)"
                        ],
                        "parametros": [
                            "id"
                        ]
                    },
                    {
                        "nombre": "getmarkers",
                        "sintaxis": [
                            "Wave_read.getmarkers()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getnchannels",
                        "sintaxis": [
                            "Wave_read.getnchannels()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getnframes",
                        "sintaxis": [
                            "Wave_read.getnframes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getparams",
                        "sintaxis": [
                            "Wave_read.getparams()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getsampwidth",
                        "sintaxis": [
                            "Wave_read.getsampwidth()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "readframes",
                        "sintaxis": [
                            "Wave_read.readframes(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "rewind",
                        "sintaxis": [
                            "Wave_read.rewind()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setpos",
                        "sintaxis": [
                            "Wave_read.setpos(pos)"
                        ],
                        "parametros": [
                            "pos"
                        ]
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "Wave_read.tell()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Wave_read"
                ]
            },
            {
                "nombre": "Wave_write",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "Wave_write.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setcomptype",
                        "sintaxis": [
                            "Wave_write.setcomptype(type, name)"
                        ],
                        "parametros": [
                            "type",
                            "name"
                        ]
                    },
                    {
                        "nombre": "setframerate",
                        "sintaxis": [
                            "Wave_write.setframerate(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "setnchannels",
                        "sintaxis": [
                            "Wave_write.setnchannels(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "setnframes",
                        "sintaxis": [
                            "Wave_write.setnframes(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "setparams",
                        "sintaxis": [
                            "Wave_write.setparams(tuple)"
                        ],
                        "parametros": [
                            "tuple"
                        ]
                    },
                    {
                        "nombre": "setsampwidth",
                        "sintaxis": [
                            "Wave_write.setsampwidth(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "tell",
                        "sintaxis": [
                            "Wave_write.tell()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "writeframes",
                        "sintaxis": [
                            "Wave_write.writeframes(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "writeframesraw",
                        "sintaxis": [
                            "Wave_write.writeframesraw(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Wave_write"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception wave.Error"
                ]
            }
        ]
    },
    {
        "nombre": "weakref",
        "funciones": [
            {
                "nombre": "getweakrefcount",
                "sintaxis": [
                    "weakref.getweakrefcount(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "getweakrefs",
                "sintaxis": [
                    "weakref.getweakrefs(object)"
                ],
                "parametros": [
                    "object"
                ]
            },
            {
                "nombre": "proxy",
                "sintaxis": [
                    "weakref.proxy(object[, callback])"
                ],
                "parametros": [
                    "callback",
                    "object"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "finalize",
                "constructores": [
                    {
                        "nombre": "finalize",
                        "sintaxis": [
                            "class weakref.finalize(obj, func, /, *args, **kwargs)"
                        ],
                        "parametros": [
                            "/",
                            "**kwargs",
                            "*args",
                            "obj",
                            "func"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "detach",
                        "sintaxis": [
                            "detach()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "peek",
                        "sintaxis": [
                            "peek()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__call__",
                        "sintaxis": [
                            "__call__()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "alive",
                        "sintaxis": [
                            "alive"
                        ]
                    },
                    {
                        "nombre": "atexit",
                        "sintaxis": [
                            "atexit"
                        ]
                    }
                ],
                "sintaxis": [
                    "class finalize"
                ]
            },
            {
                "nombre": "ref",
                "constructores": [
                    {
                        "nombre": "ref",
                        "sintaxis": [
                            "class weakref.ref(object[, callback])"
                        ],
                        "parametros": [
                            "callback",
                            "object"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "__callback__",
                        "sintaxis": [
                            "__callback__"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ref"
                ]
            },
            {
                "nombre": "WeakKeyDictionary",
                "constructores": [
                    {
                        "nombre": "WeakKeyDictionary",
                        "sintaxis": [
                            "class weakref.WeakKeyDictionary([dict])"
                        ],
                        "parametros": [
                            "dict"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "keyrefs",
                        "sintaxis": [
                            "WeakKeyDictionary.keyrefs()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class WeakKeyDictionary"
                ]
            },
            {
                "nombre": "WeakMethod",
                "constructores": [
                    {
                        "nombre": "WeakMethod",
                        "sintaxis": [
                            "class weakref.WeakMethod(method)"
                        ],
                        "parametros": [
                            "method"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class WeakMethod"
                ]
            },
            {
                "nombre": "WeakSet",
                "constructores": [
                    {
                        "nombre": "WeakSet",
                        "sintaxis": [
                            "class weakref.WeakSet([elements])"
                        ],
                        "parametros": [
                            "elements"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class WeakSet"
                ]
            },
            {
                "nombre": "WeakValueDictionary",
                "constructores": [
                    {
                        "nombre": "WeakValueDictionary",
                        "sintaxis": [
                            "class weakref.WeakValueDictionary([dict])"
                        ],
                        "parametros": [
                            "dict"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "valuerefs",
                        "sintaxis": [
                            "WeakValueDictionary.valuerefs()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class WeakValueDictionary"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "CallableProxyType",
                "sintaxis": [
                    "weakref.CallableProxyType"
                ]
            },
            {
                "nombre": "ProxyType",
                "sintaxis": [
                    "weakref.ProxyType"
                ]
            },
            {
                "nombre": "ProxyTypes",
                "sintaxis": [
                    "weakref.ProxyTypes"
                ]
            },
            {
                "nombre": "ReferenceType",
                "sintaxis": [
                    "weakref.ReferenceType"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "webbrowser",
        "funciones": [
            {
                "nombre": "get",
                "sintaxis": [
                    "webbrowser.get(using=None)"
                ],
                "parametros": [
                    "using"
                ]
            },
            {
                "nombre": "open",
                "sintaxis": [
                    "webbrowser.open(url, new=0, autoraise=True)"
                ],
                "parametros": [
                    "autoraise",
                    "new",
                    "url"
                ]
            },
            {
                "nombre": "open_new",
                "sintaxis": [
                    "webbrowser.open_new(url)"
                ],
                "parametros": [
                    "url"
                ]
            },
            {
                "nombre": "open_new_tab",
                "sintaxis": [
                    "webbrowser.open_new_tab(url)"
                ],
                "parametros": [
                    "url"
                ]
            },
            {
                "nombre": "register",
                "sintaxis": [
                    "webbrowser.register(name, constructor, instance=None, *, preferred=False)"
                ],
                "parametros": [
                    "instance",
                    "name",
                    "preferred",
                    "constructor",
                    "*"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "controller",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "controller.open(url, new=0, autoraise=True)"
                        ],
                        "parametros": [
                            "autoraise",
                            "new",
                            "url"
                        ]
                    },
                    {
                        "nombre": "open_new",
                        "sintaxis": [
                            "controller.open_new(url)"
                        ],
                        "parametros": [
                            "url"
                        ]
                    },
                    {
                        "nombre": "open_new_tab",
                        "sintaxis": [
                            "controller.open_new_tab(url)"
                        ],
                        "parametros": [
                            "url"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class controller"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception webbrowser.Error"
                ]
            }
        ]
    },
    {
        "nombre": "winreg",
        "funciones": [
            {
                "nombre": "CloseKey",
                "sintaxis": [
                    "winreg.CloseKey(hkey)"
                ],
                "parametros": [
                    "hkey"
                ]
            },
            {
                "nombre": "ConnectRegistry",
                "sintaxis": [
                    "winreg.ConnectRegistry(computer_name, key)"
                ],
                "parametros": [
                    "computer_name",
                    "key"
                ]
            },
            {
                "nombre": "CreateKey",
                "sintaxis": [
                    "winreg.CreateKey(key, sub_key)"
                ],
                "parametros": [
                    "sub_key",
                    "key"
                ]
            },
            {
                "nombre": "CreateKeyEx",
                "sintaxis": [
                    "winreg.CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE)"
                ],
                "parametros": [
                    "sub_key",
                    "reserved",
                    "access",
                    "key"
                ]
            },
            {
                "nombre": "DeleteKey",
                "sintaxis": [
                    "winreg.DeleteKey(key, sub_key)"
                ],
                "parametros": [
                    "sub_key",
                    "key"
                ]
            },
            {
                "nombre": "DeleteKeyEx",
                "sintaxis": [
                    "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)"
                ],
                "parametros": [
                    "sub_key",
                    "reserved",
                    "access",
                    "key"
                ]
            },
            {
                "nombre": "DeleteValue",
                "sintaxis": [
                    "winreg.DeleteValue(key, value)"
                ],
                "parametros": [
                    "value",
                    "key"
                ]
            },
            {
                "nombre": "DisableReflectionKey",
                "sintaxis": [
                    "winreg.DisableReflectionKey(key)"
                ],
                "parametros": [
                    "key"
                ]
            },
            {
                "nombre": "EnableReflectionKey",
                "sintaxis": [
                    "winreg.EnableReflectionKey(key)"
                ],
                "parametros": [
                    "key"
                ]
            },
            {
                "nombre": "EnumKey",
                "sintaxis": [
                    "winreg.EnumKey(key, index)"
                ],
                "parametros": [
                    "index",
                    "key"
                ]
            },
            {
                "nombre": "EnumValue",
                "sintaxis": [
                    "winreg.EnumValue(key, index)"
                ],
                "parametros": [
                    "index",
                    "key"
                ]
            },
            {
                "nombre": "ExpandEnvironmentStrings",
                "sintaxis": [
                    "winreg.ExpandEnvironmentStrings(str)"
                ],
                "parametros": [
                    "str"
                ]
            },
            {
                "nombre": "FlushKey",
                "sintaxis": [
                    "winreg.FlushKey(key)"
                ],
                "parametros": [
                    "key"
                ]
            },
            {
                "nombre": "LoadKey",
                "sintaxis": [
                    "winreg.LoadKey(key, sub_key, file_name)"
                ],
                "parametros": [
                    "sub_key",
                    "file_name",
                    "key"
                ]
            },
            {
                "nombre": "OpenKey",
                "sintaxis": [
                    "winreg.OpenKey(key, sub_key, reserved=0, access=KEY_READ)",
                    "winreg.OpenKeyEx(key, sub_key, reserved=0, access=KEY_READ)"
                ],
                "parametros": [
                    "sub_key",
                    "reserved",
                    "access",
                    "key"
                ]
            },
            {
                "nombre": "QueryInfoKey",
                "sintaxis": [
                    "winreg.QueryInfoKey(key)"
                ],
                "parametros": [
                    "key"
                ]
            },
            {
                "nombre": "QueryReflectionKey",
                "sintaxis": [
                    "winreg.QueryReflectionKey(key)"
                ],
                "parametros": [
                    "key"
                ]
            },
            {
                "nombre": "QueryValue",
                "sintaxis": [
                    "winreg.QueryValue(key, sub_key)"
                ],
                "parametros": [
                    "sub_key",
                    "key"
                ]
            },
            {
                "nombre": "QueryValueEx",
                "sintaxis": [
                    "winreg.QueryValueEx(key, value_name)"
                ],
                "parametros": [
                    "value_name",
                    "key"
                ]
            },
            {
                "nombre": "SaveKey",
                "sintaxis": [
                    "winreg.SaveKey(key, file_name)"
                ],
                "parametros": [
                    "file_name",
                    "key"
                ]
            },
            {
                "nombre": "SetValue",
                "sintaxis": [
                    "winreg.SetValue(key, sub_key, type, value)"
                ],
                "parametros": [
                    "sub_key",
                    "type",
                    "value",
                    "key"
                ]
            },
            {
                "nombre": "SetValueEx",
                "sintaxis": [
                    "winreg.SetValueEx(key, value_name, reserved, type, value)"
                ],
                "parametros": [
                    "type",
                    "key",
                    "value_name",
                    "value",
                    "reserved"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "PyHKEY",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "Close",
                        "sintaxis": [
                            "PyHKEY.Close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Detach",
                        "sintaxis": [
                            "PyHKEY.Detach()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__enter__",
                        "sintaxis": [
                            "PyHKEY.__enter__()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "__exit__",
                        "sintaxis": [
                            "PyHKEY.__exit__(*exc_info)"
                        ],
                        "parametros": [
                            "exc_info"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PyHKEY"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "HKEY_CLASSES_ROOT",
                "sintaxis": [
                    "winreg.HKEY_CLASSES_ROOT"
                ]
            },
            {
                "nombre": "HKEY_CURRENT_CONFIG",
                "sintaxis": [
                    "winreg.HKEY_CURRENT_CONFIG"
                ]
            },
            {
                "nombre": "HKEY_CURRENT_USER",
                "sintaxis": [
                    "winreg.HKEY_CURRENT_USER"
                ]
            },
            {
                "nombre": "HKEY_DYN_DATA",
                "sintaxis": [
                    "winreg.HKEY_DYN_DATA"
                ]
            },
            {
                "nombre": "HKEY_LOCAL_MACHINE",
                "sintaxis": [
                    "winreg.HKEY_LOCAL_MACHINE"
                ]
            },
            {
                "nombre": "HKEY_PERFORMANCE_DATA",
                "sintaxis": [
                    "winreg.HKEY_PERFORMANCE_DATA"
                ]
            },
            {
                "nombre": "HKEY_USERS",
                "sintaxis": [
                    "winreg.HKEY_USERS"
                ]
            },
            {
                "nombre": "KEY_ALL_ACCESS",
                "sintaxis": [
                    "winreg.KEY_ALL_ACCESS"
                ]
            },
            {
                "nombre": "KEY_CREATE_LINK",
                "sintaxis": [
                    "winreg.KEY_CREATE_LINK"
                ]
            },
            {
                "nombre": "KEY_CREATE_SUB_KEY",
                "sintaxis": [
                    "winreg.KEY_CREATE_SUB_KEY"
                ]
            },
            {
                "nombre": "KEY_ENUMERATE_SUB_KEYS",
                "sintaxis": [
                    "winreg.KEY_ENUMERATE_SUB_KEYS"
                ]
            },
            {
                "nombre": "KEY_EXECUTE",
                "sintaxis": [
                    "winreg.KEY_EXECUTE"
                ]
            },
            {
                "nombre": "KEY_NOTIFY",
                "sintaxis": [
                    "winreg.KEY_NOTIFY"
                ]
            },
            {
                "nombre": "KEY_QUERY_VALUE",
                "sintaxis": [
                    "winreg.KEY_QUERY_VALUE"
                ]
            },
            {
                "nombre": "KEY_READ",
                "sintaxis": [
                    "winreg.KEY_READ"
                ]
            },
            {
                "nombre": "KEY_SET_VALUE",
                "sintaxis": [
                    "winreg.KEY_SET_VALUE"
                ]
            },
            {
                "nombre": "KEY_WOW64_32KEY",
                "sintaxis": [
                    "winreg.KEY_WOW64_32KEY"
                ]
            },
            {
                "nombre": "KEY_WOW64_64KEY",
                "sintaxis": [
                    "winreg.KEY_WOW64_64KEY"
                ]
            },
            {
                "nombre": "KEY_WRITE",
                "sintaxis": [
                    "winreg.KEY_WRITE"
                ]
            },
            {
                "nombre": "REG_BINARY",
                "sintaxis": [
                    "winreg.REG_BINARY"
                ]
            },
            {
                "nombre": "REG_DWORD",
                "sintaxis": [
                    "winreg.REG_DWORD"
                ]
            },
            {
                "nombre": "REG_DWORD_BIG_ENDIAN",
                "sintaxis": [
                    "winreg.REG_DWORD_BIG_ENDIAN"
                ]
            },
            {
                "nombre": "REG_DWORD_LITTLE_ENDIAN",
                "sintaxis": [
                    "winreg.REG_DWORD_LITTLE_ENDIAN"
                ]
            },
            {
                "nombre": "REG_EXPAND_SZ",
                "sintaxis": [
                    "winreg.REG_EXPAND_SZ"
                ]
            },
            {
                "nombre": "REG_FULL_RESOURCE_DESCRIPTOR",
                "sintaxis": [
                    "winreg.REG_FULL_RESOURCE_DESCRIPTOR"
                ]
            },
            {
                "nombre": "REG_LINK",
                "sintaxis": [
                    "winreg.REG_LINK"
                ]
            },
            {
                "nombre": "REG_MULTI_SZ",
                "sintaxis": [
                    "winreg.REG_MULTI_SZ"
                ]
            },
            {
                "nombre": "REG_NONE",
                "sintaxis": [
                    "winreg.REG_NONE"
                ]
            },
            {
                "nombre": "REG_QWORD",
                "sintaxis": [
                    "winreg.REG_QWORD"
                ]
            },
            {
                "nombre": "REG_QWORD_LITTLE_ENDIAN",
                "sintaxis": [
                    "winreg.REG_QWORD_LITTLE_ENDIAN"
                ]
            },
            {
                "nombre": "REG_RESOURCE_LIST",
                "sintaxis": [
                    "winreg.REG_RESOURCE_LIST"
                ]
            },
            {
                "nombre": "REG_RESOURCE_REQUIREMENTS_LIST",
                "sintaxis": [
                    "winreg.REG_RESOURCE_REQUIREMENTS_LIST"
                ]
            },
            {
                "nombre": "REG_SZ",
                "sintaxis": [
                    "winreg.REG_SZ"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "winsound",
        "funciones": [
            {
                "nombre": "Beep",
                "sintaxis": [
                    "winsound.Beep(frequency, duration)"
                ],
                "parametros": [
                    "duration",
                    "frequency"
                ]
            },
            {
                "nombre": "MessageBeep",
                "sintaxis": [
                    "winsound.MessageBeep(type=MB_OK)"
                ],
                "parametros": [
                    "type"
                ]
            },
            {
                "nombre": "PlaySound",
                "sintaxis": [
                    "winsound.PlaySound(sound, flags)"
                ],
                "parametros": [
                    "flags",
                    "sound"
                ]
            }
        ],
        "clases": [],
        "constantes": [
            {
                "nombre": "MB_ICONASTERISK",
                "sintaxis": [
                    "winsound.MB_ICONASTERISK"
                ]
            },
            {
                "nombre": "MB_ICONEXCLAMATION",
                "sintaxis": [
                    "winsound.MB_ICONEXCLAMATION"
                ]
            },
            {
                "nombre": "MB_ICONHAND",
                "sintaxis": [
                    "winsound.MB_ICONHAND"
                ]
            },
            {
                "nombre": "MB_ICONQUESTION",
                "sintaxis": [
                    "winsound.MB_ICONQUESTION"
                ]
            },
            {
                "nombre": "MB_OK",
                "sintaxis": [
                    "winsound.MB_OK"
                ]
            },
            {
                "nombre": "SND_ALIAS",
                "sintaxis": [
                    "winsound.SND_ALIAS"
                ]
            },
            {
                "nombre": "SND_ASYNC",
                "sintaxis": [
                    "winsound.SND_ASYNC"
                ]
            },
            {
                "nombre": "SND_FILENAME",
                "sintaxis": [
                    "winsound.SND_FILENAME"
                ]
            },
            {
                "nombre": "SND_LOOP",
                "sintaxis": [
                    "winsound.SND_LOOP"
                ]
            },
            {
                "nombre": "SND_MEMORY",
                "sintaxis": [
                    "winsound.SND_MEMORY"
                ]
            },
            {
                "nombre": "SND_NODEFAULT",
                "sintaxis": [
                    "winsound.SND_NODEFAULT"
                ]
            },
            {
                "nombre": "SND_NOSTOP",
                "sintaxis": [
                    "winsound.SND_NOSTOP"
                ]
            },
            {
                "nombre": "SND_NOWAIT",
                "sintaxis": [
                    "winsound.SND_NOWAIT"
                ]
            },
            {
                "nombre": "SND_PURGE",
                "sintaxis": [
                    "winsound.SND_PURGE"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "wsgiref",
        "funciones": [
            {
                "nombre": "application_uri",
                "sintaxis": [
                    "wsgiref.util.application_uri(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            },
            {
                "nombre": "demo_app",
                "sintaxis": [
                    "wsgiref.simple_server.demo_app(environ, start_response)"
                ],
                "parametros": [
                    "environ",
                    "start_response"
                ]
            },
            {
                "nombre": "guess_scheme",
                "sintaxis": [
                    "wsgiref.util.guess_scheme(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            },
            {
                "nombre": "is_hop_by_hop",
                "sintaxis": [
                    "wsgiref.util.is_hop_by_hop(header_name)"
                ],
                "parametros": [
                    "header_name"
                ]
            },
            {
                "nombre": "make_server",
                "sintaxis": [
                    "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)"
                ],
                "parametros": [
                    "port",
                    "server_class",
                    "app",
                    "handler_class",
                    "host"
                ]
            },
            {
                "nombre": "read_environ",
                "sintaxis": [
                    "wsgiref.handlers.read_environ()"
                ],
                "parametros": []
            },
            {
                "nombre": "request_uri",
                "sintaxis": [
                    "wsgiref.util.request_uri(environ, include_query=True)"
                ],
                "parametros": [
                    "environ",
                    "include_query"
                ]
            },
            {
                "nombre": "setup_testing_defaults",
                "sintaxis": [
                    "wsgiref.util.setup_testing_defaults(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            },
            {
                "nombre": "shift_path_info",
                "sintaxis": [
                    "wsgiref.util.shift_path_info(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            },
            {
                "nombre": "validator",
                "sintaxis": [
                    "wsgiref.validate.validator(application)"
                ],
                "parametros": [
                    "application"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "BaseCGIHandler",
                "constructores": [
                    {
                        "nombre": "BaseCGIHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)"
                        ],
                        "parametros": [
                            "stdout",
                            "multithread",
                            "stdin",
                            "multiprocess",
                            "stderr",
                            "environ"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BaseCGIHandler"
                ]
            },
            {
                "nombre": "BaseHandler",
                "constructores": [
                    {
                        "nombre": "BaseHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.BaseHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_cgi_vars",
                        "sintaxis": [
                            "add_cgi_vars()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "error_output",
                        "sintaxis": [
                            "error_output(environ, start_response)"
                        ],
                        "parametros": [
                            "environ",
                            "start_response"
                        ]
                    },
                    {
                        "nombre": "get_scheme",
                        "sintaxis": [
                            "get_scheme()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_stderr",
                        "sintaxis": [
                            "get_stderr()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_stdin",
                        "sintaxis": [
                            "get_stdin()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "log_exception",
                        "sintaxis": [
                            "log_exception(exc_info)"
                        ],
                        "parametros": [
                            "exc_info"
                        ]
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(app)"
                        ],
                        "parametros": [
                            "app"
                        ]
                    },
                    {
                        "nombre": "sendfile",
                        "sintaxis": [
                            "sendfile()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setup_environ",
                        "sintaxis": [
                            "setup_environ()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "_flush",
                        "sintaxis": [
                            "_flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "_write",
                        "sintaxis": [
                            "_write(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "error_body",
                        "sintaxis": [
                            "error_body"
                        ]
                    },
                    {
                        "nombre": "error_headers",
                        "sintaxis": [
                            "error_headers"
                        ]
                    },
                    {
                        "nombre": "error_status",
                        "sintaxis": [
                            "error_status"
                        ]
                    },
                    {
                        "nombre": "http_version",
                        "sintaxis": [
                            "http_version"
                        ]
                    },
                    {
                        "nombre": "origin_server",
                        "sintaxis": [
                            "origin_server"
                        ]
                    },
                    {
                        "nombre": "os_environ",
                        "sintaxis": [
                            "os_environ"
                        ]
                    },
                    {
                        "nombre": "server_software",
                        "sintaxis": [
                            "server_software"
                        ]
                    },
                    {
                        "nombre": "traceback_limit",
                        "sintaxis": [
                            "traceback_limit"
                        ]
                    },
                    {
                        "nombre": "wsgi_file_wrapper",
                        "sintaxis": [
                            "wsgi_file_wrapper"
                        ]
                    },
                    {
                        "nombre": "wsgi_multiprocess",
                        "sintaxis": [
                            "wsgi_multiprocess"
                        ]
                    },
                    {
                        "nombre": "wsgi_multithread",
                        "sintaxis": [
                            "wsgi_multithread"
                        ]
                    },
                    {
                        "nombre": "wsgi_run_once",
                        "sintaxis": [
                            "wsgi_run_once"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseHandler"
                ]
            },
            {
                "nombre": "CGIHandler",
                "constructores": [
                    {
                        "nombre": "CGIHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.CGIHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class CGIHandler"
                ]
            },
            {
                "nombre": "FileWrapper",
                "constructores": [
                    {
                        "nombre": "FileWrapper",
                        "sintaxis": [
                            "class wsgiref.util.FileWrapper(filelike, blksize=8192)"
                        ],
                        "parametros": [
                            "blksize",
                            "filelike"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FileWrapper"
                ]
            },
            {
                "nombre": "Headers",
                "constructores": [
                    {
                        "nombre": "Headers",
                        "sintaxis": [
                            "class wsgiref.headers.Headers([headers])"
                        ],
                        "parametros": [
                            "headers"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_header",
                        "sintaxis": [
                            "add_header(name, value, **_params)"
                        ],
                        "parametros": [
                            "_params",
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "get_all",
                        "sintaxis": [
                            "get_all(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Headers"
                ]
            },
            {
                "nombre": "IISCGIHandler",
                "constructores": [
                    {
                        "nombre": "IISCGIHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.IISCGIHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IISCGIHandler"
                ]
            },
            {
                "nombre": "SimpleHandler",
                "constructores": [
                    {
                        "nombre": "SimpleHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)"
                        ],
                        "parametros": [
                            "stdout",
                            "multithread",
                            "stdin",
                            "multiprocess",
                            "stderr",
                            "environ"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SimpleHandler"
                ]
            },
            {
                "nombre": "WSGIRequestHandler",
                "constructores": [
                    {
                        "nombre": "WSGIRequestHandler",
                        "sintaxis": [
                            "class wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)"
                        ],
                        "parametros": [
                            "server",
                            "request",
                            "client_address"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_environ",
                        "sintaxis": [
                            "get_environ()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_stderr",
                        "sintaxis": [
                            "get_stderr()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class WSGIRequestHandler"
                ]
            },
            {
                "nombre": "WSGIServer",
                "constructores": [
                    {
                        "nombre": "WSGIServer",
                        "sintaxis": [
                            "class wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass)"
                        ],
                        "parametros": [
                            "server_address",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_app",
                        "sintaxis": [
                            "get_app()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_app",
                        "sintaxis": [
                            "set_app(application)"
                        ],
                        "parametros": [
                            "application"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class WSGIServer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "wsgiref.handlers",
        "funciones": [
            {
                "nombre": "read_environ",
                "sintaxis": [
                    "wsgiref.handlers.read_environ()"
                ],
                "parametros": []
            }
        ],
        "clases": [
            {
                "nombre": "BaseCGIHandler",
                "constructores": [
                    {
                        "nombre": "BaseCGIHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)"
                        ],
                        "parametros": [
                            "stdout",
                            "multithread",
                            "stdin",
                            "multiprocess",
                            "stderr",
                            "environ"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class BaseCGIHandler"
                ]
            },
            {
                "nombre": "BaseHandler",
                "constructores": [
                    {
                        "nombre": "BaseHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.BaseHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_cgi_vars",
                        "sintaxis": [
                            "add_cgi_vars()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "error_output",
                        "sintaxis": [
                            "error_output(environ, start_response)"
                        ],
                        "parametros": [
                            "environ",
                            "start_response"
                        ]
                    },
                    {
                        "nombre": "get_scheme",
                        "sintaxis": [
                            "get_scheme()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_stderr",
                        "sintaxis": [
                            "get_stderr()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_stdin",
                        "sintaxis": [
                            "get_stdin()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "log_exception",
                        "sintaxis": [
                            "log_exception(exc_info)"
                        ],
                        "parametros": [
                            "exc_info"
                        ]
                    },
                    {
                        "nombre": "run",
                        "sintaxis": [
                            "run(app)"
                        ],
                        "parametros": [
                            "app"
                        ]
                    },
                    {
                        "nombre": "sendfile",
                        "sintaxis": [
                            "sendfile()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setup_environ",
                        "sintaxis": [
                            "setup_environ()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "_flush",
                        "sintaxis": [
                            "_flush()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "_write",
                        "sintaxis": [
                            "_write(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "error_body",
                        "sintaxis": [
                            "error_body"
                        ]
                    },
                    {
                        "nombre": "error_headers",
                        "sintaxis": [
                            "error_headers"
                        ]
                    },
                    {
                        "nombre": "error_status",
                        "sintaxis": [
                            "error_status"
                        ]
                    },
                    {
                        "nombre": "http_version",
                        "sintaxis": [
                            "http_version"
                        ]
                    },
                    {
                        "nombre": "origin_server",
                        "sintaxis": [
                            "origin_server"
                        ]
                    },
                    {
                        "nombre": "os_environ",
                        "sintaxis": [
                            "os_environ"
                        ]
                    },
                    {
                        "nombre": "server_software",
                        "sintaxis": [
                            "server_software"
                        ]
                    },
                    {
                        "nombre": "traceback_limit",
                        "sintaxis": [
                            "traceback_limit"
                        ]
                    },
                    {
                        "nombre": "wsgi_file_wrapper",
                        "sintaxis": [
                            "wsgi_file_wrapper"
                        ]
                    },
                    {
                        "nombre": "wsgi_multiprocess",
                        "sintaxis": [
                            "wsgi_multiprocess"
                        ]
                    },
                    {
                        "nombre": "wsgi_multithread",
                        "sintaxis": [
                            "wsgi_multithread"
                        ]
                    },
                    {
                        "nombre": "wsgi_run_once",
                        "sintaxis": [
                            "wsgi_run_once"
                        ]
                    }
                ],
                "sintaxis": [
                    "class BaseHandler"
                ]
            },
            {
                "nombre": "CGIHandler",
                "constructores": [
                    {
                        "nombre": "CGIHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.CGIHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class CGIHandler"
                ]
            },
            {
                "nombre": "IISCGIHandler",
                "constructores": [
                    {
                        "nombre": "IISCGIHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.IISCGIHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class IISCGIHandler"
                ]
            },
            {
                "nombre": "SimpleHandler",
                "constructores": [
                    {
                        "nombre": "SimpleHandler",
                        "sintaxis": [
                            "class wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)"
                        ],
                        "parametros": [
                            "stdout",
                            "multithread",
                            "stdin",
                            "multiprocess",
                            "stderr",
                            "environ"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SimpleHandler"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "wsgiref.headers",
        "funciones": [],
        "clases": [
            {
                "nombre": "Headers",
                "constructores": [
                    {
                        "nombre": "Headers",
                        "sintaxis": [
                            "class wsgiref.headers.Headers([headers])"
                        ],
                        "parametros": [
                            "headers"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "add_header",
                        "sintaxis": [
                            "add_header(name, value, **_params)"
                        ],
                        "parametros": [
                            "_params",
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "get_all",
                        "sintaxis": [
                            "get_all(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Headers"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "wsgiref.simple_server",
        "funciones": [
            {
                "nombre": "demo_app",
                "sintaxis": [
                    "wsgiref.simple_server.demo_app(environ, start_response)"
                ],
                "parametros": [
                    "environ",
                    "start_response"
                ]
            },
            {
                "nombre": "make_server",
                "sintaxis": [
                    "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)"
                ],
                "parametros": [
                    "port",
                    "server_class",
                    "app",
                    "handler_class",
                    "host"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "WSGIRequestHandler",
                "constructores": [
                    {
                        "nombre": "WSGIRequestHandler",
                        "sintaxis": [
                            "class wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)"
                        ],
                        "parametros": [
                            "server",
                            "request",
                            "client_address"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_environ",
                        "sintaxis": [
                            "get_environ()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_stderr",
                        "sintaxis": [
                            "get_stderr()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "handle",
                        "sintaxis": [
                            "handle()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class WSGIRequestHandler"
                ]
            },
            {
                "nombre": "WSGIServer",
                "constructores": [
                    {
                        "nombre": "WSGIServer",
                        "sintaxis": [
                            "class wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass)"
                        ],
                        "parametros": [
                            "server_address",
                            "RequestHandlerClass"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_app",
                        "sintaxis": [
                            "get_app()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "set_app",
                        "sintaxis": [
                            "set_app(application)"
                        ],
                        "parametros": [
                            "application"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class WSGIServer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "wsgiref.util",
        "funciones": [
            {
                "nombre": "application_uri",
                "sintaxis": [
                    "wsgiref.util.application_uri(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            },
            {
                "nombre": "guess_scheme",
                "sintaxis": [
                    "wsgiref.util.guess_scheme(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            },
            {
                "nombre": "is_hop_by_hop",
                "sintaxis": [
                    "wsgiref.util.is_hop_by_hop(header_name)"
                ],
                "parametros": [
                    "header_name"
                ]
            },
            {
                "nombre": "request_uri",
                "sintaxis": [
                    "wsgiref.util.request_uri(environ, include_query=True)"
                ],
                "parametros": [
                    "environ",
                    "include_query"
                ]
            },
            {
                "nombre": "setup_testing_defaults",
                "sintaxis": [
                    "wsgiref.util.setup_testing_defaults(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            },
            {
                "nombre": "shift_path_info",
                "sintaxis": [
                    "wsgiref.util.shift_path_info(environ)"
                ],
                "parametros": [
                    "environ"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "FileWrapper",
                "constructores": [
                    {
                        "nombre": "FileWrapper",
                        "sintaxis": [
                            "class wsgiref.util.FileWrapper(filelike, blksize=8192)"
                        ],
                        "parametros": [
                            "blksize",
                            "filelike"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class FileWrapper"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "wsgiref.validate",
        "funciones": [
            {
                "nombre": "validator",
                "sintaxis": [
                    "wsgiref.validate.validator(application)"
                ],
                "parametros": [
                    "application"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "xdrlib",
        "funciones": [],
        "clases": [
            {
                "nombre": "Packer",
                "constructores": [
                    {
                        "nombre": "Packer",
                        "sintaxis": [
                            "class xdrlib.Packer"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "get_buffer",
                        "sintaxis": [
                            "Packer.get_buffer()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "pack_array",
                        "sintaxis": [
                            "Packer.pack_array(list, pack_item)"
                        ],
                        "parametros": [
                            "pack_item",
                            "list"
                        ]
                    },
                    {
                        "nombre": "pack_bytes",
                        "sintaxis": [
                            "Packer.pack_bytes(bytes)"
                        ],
                        "parametros": [
                            "bytes"
                        ]
                    },
                    {
                        "nombre": "pack_double",
                        "sintaxis": [
                            "Packer.pack_double(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "pack_farray",
                        "sintaxis": [
                            "Packer.pack_farray(n, array, pack_item)"
                        ],
                        "parametros": [
                            "pack_item",
                            "n",
                            "array"
                        ]
                    },
                    {
                        "nombre": "pack_float",
                        "sintaxis": [
                            "Packer.pack_float(value)"
                        ],
                        "parametros": [
                            "value"
                        ]
                    },
                    {
                        "nombre": "pack_fopaque",
                        "sintaxis": [
                            "Packer.pack_fopaque(n, data)"
                        ],
                        "parametros": [
                            "n",
                            "data"
                        ]
                    },
                    {
                        "nombre": "pack_fstring",
                        "sintaxis": [
                            "Packer.pack_fstring(n, s)"
                        ],
                        "parametros": [
                            "s",
                            "n"
                        ]
                    },
                    {
                        "nombre": "pack_list",
                        "sintaxis": [
                            "Packer.pack_list(list, pack_item)"
                        ],
                        "parametros": [
                            "pack_item",
                            "list"
                        ]
                    },
                    {
                        "nombre": "pack_opaque",
                        "sintaxis": [
                            "Packer.pack_opaque(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "pack_string",
                        "sintaxis": [
                            "Packer.pack_string(s)"
                        ],
                        "parametros": [
                            "s"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "Packer.reset()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Packer"
                ]
            },
            {
                "nombre": "Unpacker",
                "constructores": [
                    {
                        "nombre": "Unpacker",
                        "sintaxis": [
                            "class xdrlib.Unpacker(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "done",
                        "sintaxis": [
                            "Unpacker.done()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_buffer",
                        "sintaxis": [
                            "Unpacker.get_buffer()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "get_position",
                        "sintaxis": [
                            "Unpacker.get_position()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "Unpacker.reset(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "set_position",
                        "sintaxis": [
                            "Unpacker.set_position(position)"
                        ],
                        "parametros": [
                            "position"
                        ]
                    },
                    {
                        "nombre": "unpack_array",
                        "sintaxis": [
                            "Unpacker.unpack_array(unpack_item)"
                        ],
                        "parametros": [
                            "unpack_item"
                        ]
                    },
                    {
                        "nombre": "unpack_bytes",
                        "sintaxis": [
                            "Unpacker.unpack_bytes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unpack_double",
                        "sintaxis": [
                            "Unpacker.unpack_double()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unpack_farray",
                        "sintaxis": [
                            "Unpacker.unpack_farray(n, unpack_item)"
                        ],
                        "parametros": [
                            "unpack_item",
                            "n"
                        ]
                    },
                    {
                        "nombre": "unpack_float",
                        "sintaxis": [
                            "Unpacker.unpack_float()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unpack_fopaque",
                        "sintaxis": [
                            "Unpacker.unpack_fopaque(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "unpack_fstring",
                        "sintaxis": [
                            "Unpacker.unpack_fstring(n)"
                        ],
                        "parametros": [
                            "n"
                        ]
                    },
                    {
                        "nombre": "unpack_list",
                        "sintaxis": [
                            "Unpacker.unpack_list(unpack_item)"
                        ],
                        "parametros": [
                            "unpack_item"
                        ]
                    },
                    {
                        "nombre": "unpack_opaque",
                        "sintaxis": [
                            "Unpacker.unpack_opaque()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "unpack_string",
                        "sintaxis": [
                            "Unpacker.unpack_string()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Unpacker"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "ConversionError",
                "sintaxis": [
                    "exception xdrlib.ConversionError"
                ]
            },
            {
                "nombre": "Error",
                "sintaxis": [
                    "exception xdrlib.Error"
                ]
            }
        ]
    },
    {
        "nombre": "xml",
        "funciones": [],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "xml.dom",
        "funciones": [
            {
                "nombre": "getDOMImplementation",
                "sintaxis": [
                    "xml.dom.getDOMImplementation(name=None, features=())"
                ],
                "parametros": [
                    "features",
                    "name"
                ]
            },
            {
                "nombre": "registerDOMImplementation",
                "sintaxis": [
                    "xml.dom.registerDOMImplementation(name, factory)"
                ],
                "parametros": [
                    "factory",
                    "name"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Attr",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "localName",
                        "sintaxis": [
                            "Attr.localName"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "Attr.name"
                        ]
                    },
                    {
                        "nombre": "prefix",
                        "sintaxis": [
                            "Attr.prefix"
                        ]
                    },
                    {
                        "nombre": "value",
                        "sintaxis": [
                            "Attr.value"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Attr"
                ]
            },
            {
                "nombre": "Comment",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "Comment.data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Comment"
                ]
            },
            {
                "nombre": "Document",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "createAttribute",
                        "sintaxis": [
                            "Document.createAttribute(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "createAttributeNS",
                        "sintaxis": [
                            "Document.createAttributeNS(namespaceURI, qualifiedName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "qualifiedName"
                        ]
                    },
                    {
                        "nombre": "createComment",
                        "sintaxis": [
                            "Document.createComment(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "createElement",
                        "sintaxis": [
                            "Document.createElement(tagName)"
                        ],
                        "parametros": [
                            "tagName"
                        ]
                    },
                    {
                        "nombre": "createElementNS",
                        "sintaxis": [
                            "Document.createElementNS(namespaceURI, tagName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "tagName"
                        ]
                    },
                    {
                        "nombre": "createProcessingInstruction",
                        "sintaxis": [
                            "Document.createProcessingInstruction(target, data)"
                        ],
                        "parametros": [
                            "target",
                            "data"
                        ]
                    },
                    {
                        "nombre": "createTextNode",
                        "sintaxis": [
                            "Document.createTextNode(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "getElementsByTagName",
                        "sintaxis": [
                            "Document.getElementsByTagName(tagName)"
                        ],
                        "parametros": [
                            "tagName"
                        ]
                    },
                    {
                        "nombre": "getElementsByTagNameNS",
                        "sintaxis": [
                            "Document.getElementsByTagNameNS(namespaceURI, localName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "localName"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "documentElement",
                        "sintaxis": [
                            "Document.documentElement"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Document"
                ]
            },
            {
                "nombre": "DocumentType",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "entities",
                        "sintaxis": [
                            "DocumentType.entities"
                        ]
                    },
                    {
                        "nombre": "internalSubset",
                        "sintaxis": [
                            "DocumentType.internalSubset"
                        ]
                    },
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "DocumentType.name"
                        ]
                    },
                    {
                        "nombre": "notations",
                        "sintaxis": [
                            "DocumentType.notations"
                        ]
                    },
                    {
                        "nombre": "publicId",
                        "sintaxis": [
                            "DocumentType.publicId"
                        ]
                    },
                    {
                        "nombre": "systemId",
                        "sintaxis": [
                            "DocumentType.systemId"
                        ]
                    }
                ],
                "sintaxis": [
                    "class DocumentType"
                ]
            },
            {
                "nombre": "DOMImplementation",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "createDocument",
                        "sintaxis": [
                            "DOMImplementation.createDocument(namespaceUri, qualifiedName, doctype)"
                        ],
                        "parametros": [
                            "namespaceUri",
                            "doctype",
                            "qualifiedName"
                        ]
                    },
                    {
                        "nombre": "createDocumentType",
                        "sintaxis": [
                            "DOMImplementation.createDocumentType(qualifiedName, publicId, systemId)"
                        ],
                        "parametros": [
                            "publicId",
                            "systemId",
                            "qualifiedName"
                        ]
                    },
                    {
                        "nombre": "hasFeature",
                        "sintaxis": [
                            "DOMImplementation.hasFeature(feature, version)"
                        ],
                        "parametros": [
                            "version",
                            "feature"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DOMImplementation"
                ]
            },
            {
                "nombre": "Element",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "getAttribute",
                        "sintaxis": [
                            "Element.getAttribute(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "getAttributeNode",
                        "sintaxis": [
                            "Element.getAttributeNode(attrname)"
                        ],
                        "parametros": [
                            "attrname"
                        ]
                    },
                    {
                        "nombre": "getAttributeNodeNS",
                        "sintaxis": [
                            "Element.getAttributeNodeNS(namespaceURI, localName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "localName"
                        ]
                    },
                    {
                        "nombre": "getAttributeNS",
                        "sintaxis": [
                            "Element.getAttributeNS(namespaceURI, localName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "localName"
                        ]
                    },
                    {
                        "nombre": "getElementsByTagName",
                        "sintaxis": [
                            "Element.getElementsByTagName(tagName)"
                        ],
                        "parametros": [
                            "tagName"
                        ]
                    },
                    {
                        "nombre": "getElementsByTagNameNS",
                        "sintaxis": [
                            "Element.getElementsByTagNameNS(namespaceURI, localName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "localName"
                        ]
                    },
                    {
                        "nombre": "hasAttribute",
                        "sintaxis": [
                            "Element.hasAttribute(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "hasAttributeNS",
                        "sintaxis": [
                            "Element.hasAttributeNS(namespaceURI, localName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "localName"
                        ]
                    },
                    {
                        "nombre": "removeAttribute",
                        "sintaxis": [
                            "Element.removeAttribute(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "removeAttributeNode",
                        "sintaxis": [
                            "Element.removeAttributeNode(oldAttr)"
                        ],
                        "parametros": [
                            "oldAttr"
                        ]
                    },
                    {
                        "nombre": "removeAttributeNS",
                        "sintaxis": [
                            "Element.removeAttributeNS(namespaceURI, localName)"
                        ],
                        "parametros": [
                            "namespaceURI",
                            "localName"
                        ]
                    },
                    {
                        "nombre": "setAttribute",
                        "sintaxis": [
                            "Element.setAttribute(name, value)"
                        ],
                        "parametros": [
                            "value",
                            "name"
                        ]
                    },
                    {
                        "nombre": "setAttributeNode",
                        "sintaxis": [
                            "Element.setAttributeNode(newAttr)"
                        ],
                        "parametros": [
                            "newAttr"
                        ]
                    },
                    {
                        "nombre": "setAttributeNodeNS",
                        "sintaxis": [
                            "Element.setAttributeNodeNS(newAttr)"
                        ],
                        "parametros": [
                            "newAttr"
                        ]
                    },
                    {
                        "nombre": "setAttributeNS",
                        "sintaxis": [
                            "Element.setAttributeNS(namespaceURI, qname, value)"
                        ],
                        "parametros": [
                            "qname",
                            "namespaceURI",
                            "value"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "tagName",
                        "sintaxis": [
                            "Element.tagName"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Element"
                ]
            },
            {
                "nombre": "NamedNodeMap",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "item",
                        "sintaxis": [
                            "NamedNodeMap.item(index)"
                        ],
                        "parametros": [
                            "index"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "length",
                        "sintaxis": [
                            "NamedNodeMap.length"
                        ]
                    }
                ],
                "sintaxis": [
                    "class NamedNodeMap"
                ]
            },
            {
                "nombre": "Node",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "appendChild",
                        "sintaxis": [
                            "Node.appendChild(newChild)"
                        ],
                        "parametros": [
                            "newChild"
                        ]
                    },
                    {
                        "nombre": "cloneNode",
                        "sintaxis": [
                            "Node.cloneNode(deep)"
                        ],
                        "parametros": [
                            "deep"
                        ]
                    },
                    {
                        "nombre": "hasAttributes",
                        "sintaxis": [
                            "Node.hasAttributes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "hasChildNodes",
                        "sintaxis": [
                            "Node.hasChildNodes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "insertBefore",
                        "sintaxis": [
                            "Node.insertBefore(newChild, refChild)"
                        ],
                        "parametros": [
                            "newChild",
                            "refChild"
                        ]
                    },
                    {
                        "nombre": "isSameNode",
                        "sintaxis": [
                            "Node.isSameNode(other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "normalize",
                        "sintaxis": [
                            "Node.normalize()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "removeChild",
                        "sintaxis": [
                            "Node.removeChild(oldChild)"
                        ],
                        "parametros": [
                            "oldChild"
                        ]
                    },
                    {
                        "nombre": "replaceChild",
                        "sintaxis": [
                            "Node.replaceChild(newChild, oldChild)"
                        ],
                        "parametros": [
                            "newChild",
                            "oldChild"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "attributes",
                        "sintaxis": [
                            "Node.attributes"
                        ]
                    },
                    {
                        "nombre": "childNodes",
                        "sintaxis": [
                            "Node.childNodes"
                        ]
                    },
                    {
                        "nombre": "firstChild",
                        "sintaxis": [
                            "Node.firstChild"
                        ]
                    },
                    {
                        "nombre": "lastChild",
                        "sintaxis": [
                            "Node.lastChild"
                        ]
                    },
                    {
                        "nombre": "localName",
                        "sintaxis": [
                            "Node.localName"
                        ]
                    },
                    {
                        "nombre": "namespaceURI",
                        "sintaxis": [
                            "Node.namespaceURI"
                        ]
                    },
                    {
                        "nombre": "nextSibling",
                        "sintaxis": [
                            "Node.nextSibling"
                        ]
                    },
                    {
                        "nombre": "nodeName",
                        "sintaxis": [
                            "Node.nodeName"
                        ]
                    },
                    {
                        "nombre": "nodeType",
                        "sintaxis": [
                            "Node.nodeType"
                        ]
                    },
                    {
                        "nombre": "nodeValue",
                        "sintaxis": [
                            "Node.nodeValue"
                        ]
                    },
                    {
                        "nombre": "parentNode",
                        "sintaxis": [
                            "Node.parentNode"
                        ]
                    },
                    {
                        "nombre": "prefix",
                        "sintaxis": [
                            "Node.prefix"
                        ]
                    },
                    {
                        "nombre": "previousSibling",
                        "sintaxis": [
                            "Node.previousSibling"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Node"
                ]
            },
            {
                "nombre": "NodeList",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "item",
                        "sintaxis": [
                            "NodeList.item(i)"
                        ],
                        "parametros": [
                            "i"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "length",
                        "sintaxis": [
                            "NodeList.length"
                        ]
                    }
                ],
                "sintaxis": [
                    "class NodeList"
                ]
            },
            {
                "nombre": "ProcessingInstruction",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "ProcessingInstruction.data"
                        ]
                    },
                    {
                        "nombre": "target",
                        "sintaxis": [
                            "ProcessingInstruction.target"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ProcessingInstruction"
                ]
            },
            {
                "nombre": "Text",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "Text.data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Text"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "EMPTY_NAMESPACE",
                "sintaxis": [
                    "xml.dom.EMPTY_NAMESPACE"
                ]
            },
            {
                "nombre": "XHTML_NAMESPACE",
                "sintaxis": [
                    "xml.dom.XHTML_NAMESPACE"
                ]
            },
            {
                "nombre": "XMLNS_NAMESPACE",
                "sintaxis": [
                    "xml.dom.XMLNS_NAMESPACE"
                ]
            },
            {
                "nombre": "XML_NAMESPACE",
                "sintaxis": [
                    "xml.dom.XML_NAMESPACE"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "DOMException",
                "sintaxis": [
                    "exception xml.dom.DOMException"
                ]
            },
            {
                "nombre": "DomstringSizeErr",
                "sintaxis": [
                    "exception xml.dom.DomstringSizeErr"
                ]
            },
            {
                "nombre": "HierarchyRequestErr",
                "sintaxis": [
                    "exception xml.dom.HierarchyRequestErr"
                ]
            },
            {
                "nombre": "IndexSizeErr",
                "sintaxis": [
                    "exception xml.dom.IndexSizeErr"
                ]
            },
            {
                "nombre": "InuseAttributeErr",
                "sintaxis": [
                    "exception xml.dom.InuseAttributeErr"
                ]
            },
            {
                "nombre": "InvalidAccessErr",
                "sintaxis": [
                    "exception xml.dom.InvalidAccessErr"
                ]
            },
            {
                "nombre": "InvalidCharacterErr",
                "sintaxis": [
                    "exception xml.dom.InvalidCharacterErr"
                ]
            },
            {
                "nombre": "InvalidModificationErr",
                "sintaxis": [
                    "exception xml.dom.InvalidModificationErr"
                ]
            },
            {
                "nombre": "InvalidStateErr",
                "sintaxis": [
                    "exception xml.dom.InvalidStateErr"
                ]
            },
            {
                "nombre": "NamespaceErr",
                "sintaxis": [
                    "exception xml.dom.NamespaceErr"
                ]
            },
            {
                "nombre": "NoDataAllowedErr",
                "sintaxis": [
                    "exception xml.dom.NoDataAllowedErr"
                ]
            },
            {
                "nombre": "NoModificationAllowedErr",
                "sintaxis": [
                    "exception xml.dom.NoModificationAllowedErr"
                ]
            },
            {
                "nombre": "NotFoundErr",
                "sintaxis": [
                    "exception xml.dom.NotFoundErr"
                ]
            },
            {
                "nombre": "NotSupportedErr",
                "sintaxis": [
                    "exception xml.dom.NotSupportedErr"
                ]
            },
            {
                "nombre": "SyntaxErr",
                "sintaxis": [
                    "exception xml.dom.SyntaxErr"
                ]
            },
            {
                "nombre": "WrongDocumentErr",
                "sintaxis": [
                    "exception xml.dom.WrongDocumentErr"
                ]
            }
        ]
    },
    {
        "nombre": "xml.dom.minidom",
        "funciones": [
            {
                "nombre": "parse",
                "sintaxis": [
                    "xml.dom.minidom.parse(filename_or_file, parser=None, bufsize=None)"
                ],
                "parametros": [
                    "parser",
                    "filename_or_file",
                    "bufsize"
                ]
            },
            {
                "nombre": "parseString",
                "sintaxis": [
                    "xml.dom.minidom.parseString(string, parser=None)"
                ],
                "parametros": [
                    "parser",
                    "string"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Node",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "toprettyxml",
                        "sintaxis": [
                            "Node.toprettyxml(indent='\\t', newl='\\n', encoding=None, standalone=None)"
                        ],
                        "parametros": [
                            "newl",
                            "indent",
                            "encoding",
                            "standalone"
                        ]
                    },
                    {
                        "nombre": "toxml",
                        "sintaxis": [
                            "Node.toxml(encoding=None, standalone=None)"
                        ],
                        "parametros": [
                            "encoding",
                            "standalone"
                        ]
                    },
                    {
                        "nombre": "unlink",
                        "sintaxis": [
                            "Node.unlink()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "writexml",
                        "sintaxis": [
                            "Node.writexml(writer, indent='', addindent='', newl='', encoding=None, standalone=None)"
                        ],
                        "parametros": [
                            "encoding",
                            "addindent",
                            "newl",
                            "indent",
                            "standalone",
                            "writer"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Node"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "xml.dom.pulldom",
        "funciones": [
            {
                "nombre": "parse",
                "sintaxis": [
                    "xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None)"
                ],
                "parametros": [
                    "bufsize",
                    "parser",
                    "stream_or_string"
                ]
            },
            {
                "nombre": "parseString",
                "sintaxis": [
                    "xml.dom.pulldom.parseString(string, parser=None)"
                ],
                "parametros": [
                    "parser",
                    "string"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "DOMEventStream",
                "constructores": [
                    {
                        "nombre": "DOMEventStream",
                        "sintaxis": [
                            "class xml.dom.pulldom.DOMEventStream(stream, parser, bufsize)"
                        ],
                        "parametros": [
                            "bufsize",
                            "parser",
                            "stream"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "expandNode",
                        "sintaxis": [
                            "expandNode(node)"
                        ],
                        "parametros": [
                            "node"
                        ]
                    },
                    {
                        "nombre": "getEvent",
                        "sintaxis": [
                            "getEvent()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "reset()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DOMEventStream"
                ]
            },
            {
                "nombre": "PullDom",
                "constructores": [
                    {
                        "nombre": "PullDom",
                        "sintaxis": [
                            "class xml.dom.pulldom.PullDom(documentFactory=None)"
                        ],
                        "parametros": [
                            "documentFactory"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class PullDom"
                ]
            },
            {
                "nombre": "SAX2DOM",
                "constructores": [
                    {
                        "nombre": "SAX2DOM",
                        "sintaxis": [
                            "class xml.dom.pulldom.SAX2DOM(documentFactory=None)"
                        ],
                        "parametros": [
                            "documentFactory"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class SAX2DOM"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "default_bufsize",
                "sintaxis": [
                    "xml.dom.pulldom.default_bufsize"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "xml.etree.ElementTree",
        "funciones": [
            {
                "nombre": "canonicalize",
                "sintaxis": [
                    "xml.etree.ElementTree.canonicalize(xml_data=None, *, out=None, from_file=None, **options)"
                ],
                "parametros": [
                    "out",
                    "from_file",
                    "xml_data",
                    "options",
                    "*"
                ]
            },
            {
                "nombre": "Comment",
                "sintaxis": [
                    "xml.etree.ElementTree.Comment(text=None)"
                ],
                "parametros": [
                    "text"
                ]
            },
            {
                "nombre": "default_loader",
                "sintaxis": [
                    "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)"
                ],
                "parametros": [
                    "parse",
                    "href",
                    "encoding"
                ]
            },
            {
                "nombre": "dump",
                "sintaxis": [
                    "xml.etree.ElementTree.dump(elem)"
                ],
                "parametros": [
                    "elem"
                ]
            },
            {
                "nombre": "fromstring",
                "sintaxis": [
                    "xml.etree.ElementTree.fromstring(text, parser=None)"
                ],
                "parametros": [
                    "parser",
                    "text"
                ]
            },
            {
                "nombre": "fromstringlist",
                "sintaxis": [
                    "xml.etree.ElementTree.fromstringlist(sequence, parser=None)"
                ],
                "parametros": [
                    "parser",
                    "sequence"
                ]
            },
            {
                "nombre": "include",
                "sintaxis": [
                    "xml.etree.ElementInclude.include(elem, loader=None, base_url=None, max_depth=6)"
                ],
                "parametros": [
                    "elem",
                    "max_depth",
                    "base_url",
                    "loader"
                ]
            },
            {
                "nombre": "indent",
                "sintaxis": [
                    "xml.etree.ElementTree.indent(tree, space=' ', level=0)"
                ],
                "parametros": [
                    "level",
                    "space",
                    "tree"
                ]
            },
            {
                "nombre": "iselement",
                "sintaxis": [
                    "xml.etree.ElementTree.iselement(element)"
                ],
                "parametros": [
                    "element"
                ]
            },
            {
                "nombre": "iterparse",
                "sintaxis": [
                    "xml.etree.ElementTree.iterparse(source, events=None, parser=None)"
                ],
                "parametros": [
                    "events",
                    "parser",
                    "source"
                ]
            },
            {
                "nombre": "parse",
                "sintaxis": [
                    "xml.etree.ElementTree.parse(source, parser=None)"
                ],
                "parametros": [
                    "parser",
                    "source"
                ]
            },
            {
                "nombre": "ProcessingInstruction",
                "sintaxis": [
                    "xml.etree.ElementTree.ProcessingInstruction(target, text=None)"
                ],
                "parametros": [
                    "target",
                    "text"
                ]
            },
            {
                "nombre": "register_namespace",
                "sintaxis": [
                    "xml.etree.ElementTree.register_namespace(prefix, uri)"
                ],
                "parametros": [
                    "prefix",
                    "uri"
                ]
            },
            {
                "nombre": "SubElement",
                "sintaxis": [
                    "xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)"
                ],
                "parametros": [
                    "extra",
                    "tag",
                    "parent",
                    "attrib"
                ]
            },
            {
                "nombre": "tostring",
                "sintaxis": [
                    "xml.etree.ElementTree.tostring(element, encoding='us-ascii', method='xml', *, xml_declaration=None, default_namespace=None, short_empty_elements=True)"
                ],
                "parametros": [
                    "encoding",
                    "element",
                    "default_namespace",
                    "method",
                    "xml_declaration",
                    "*",
                    "short_empty_elements"
                ]
            },
            {
                "nombre": "tostringlist",
                "sintaxis": [
                    "xml.etree.ElementTree.tostringlist(element, encoding='us-ascii', method='xml', *, xml_declaration=None, default_namespace=None, short_empty_elements=True)"
                ],
                "parametros": [
                    "encoding",
                    "element",
                    "default_namespace",
                    "method",
                    "xml_declaration",
                    "*",
                    "short_empty_elements"
                ]
            },
            {
                "nombre": "XML",
                "sintaxis": [
                    "xml.etree.ElementTree.XML(text, parser=None)"
                ],
                "parametros": [
                    "parser",
                    "text"
                ]
            },
            {
                "nombre": "XMLID",
                "sintaxis": [
                    "xml.etree.ElementTree.XMLID(text, parser=None)"
                ],
                "parametros": [
                    "parser",
                    "text"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "C14NWriterTarget",
                "constructores": [
                    {
                        "nombre": "C14NWriterTarget",
                        "sintaxis": [
                            "class xml.etree.ElementTree.C14NWriterTarget(write, *, with_comments=False, strip_text=False, rewrite_prefixes=False, qname_aware_tags=None, qname_aware_attrs=None, exclude_attrs=None, exclude_tags=None)"
                        ],
                        "parametros": [
                            "qname_aware_attrs",
                            "strip_text",
                            "rewrite_prefixes",
                            "exclude_tags",
                            "qname_aware_tags",
                            "with_comments",
                            "exclude_attrs",
                            "*",
                            "write"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class C14NWriterTarget"
                ]
            },
            {
                "nombre": "Element",
                "constructores": [
                    {
                        "nombre": "Element",
                        "sintaxis": [
                            "class xml.etree.ElementTree.Element(tag, attrib={}, **extra)"
                        ],
                        "parametros": [
                            "extra",
                            "tag",
                            "attrib"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "append",
                        "sintaxis": [
                            "append(subelement)"
                        ],
                        "parametros": [
                            "subelement"
                        ]
                    },
                    {
                        "nombre": "clear",
                        "sintaxis": [
                            "clear()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "extend",
                        "sintaxis": [
                            "extend(subelements)"
                        ],
                        "parametros": [
                            "subelements"
                        ]
                    },
                    {
                        "nombre": "find",
                        "sintaxis": [
                            "find(match, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces"
                        ]
                    },
                    {
                        "nombre": "findall",
                        "sintaxis": [
                            "findall(match, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces"
                        ]
                    },
                    {
                        "nombre": "findtext",
                        "sintaxis": [
                            "findtext(match, default=None, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces",
                            "default"
                        ]
                    },
                    {
                        "nombre": "get",
                        "sintaxis": [
                            "get(key, default=None)"
                        ],
                        "parametros": [
                            "default",
                            "key"
                        ]
                    },
                    {
                        "nombre": "insert",
                        "sintaxis": [
                            "insert(index, subelement)"
                        ],
                        "parametros": [
                            "index",
                            "subelement"
                        ]
                    },
                    {
                        "nombre": "items",
                        "sintaxis": [
                            "items()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iter",
                        "sintaxis": [
                            "iter(tag=None)"
                        ],
                        "parametros": [
                            "tag"
                        ]
                    },
                    {
                        "nombre": "iterfind",
                        "sintaxis": [
                            "iterfind(match, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces"
                        ]
                    },
                    {
                        "nombre": "itertext",
                        "sintaxis": [
                            "itertext()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "keys",
                        "sintaxis": [
                            "keys()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "makeelement",
                        "sintaxis": [
                            "makeelement(tag, attrib)"
                        ],
                        "parametros": [
                            "tag",
                            "attrib"
                        ]
                    },
                    {
                        "nombre": "remove",
                        "sintaxis": [
                            "remove(subelement)"
                        ],
                        "parametros": [
                            "subelement"
                        ]
                    },
                    {
                        "nombre": "set",
                        "sintaxis": [
                            "set(key, value)"
                        ],
                        "parametros": [
                            "value",
                            "key"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "attrib",
                        "sintaxis": [
                            "attrib"
                        ]
                    },
                    {
                        "nombre": "tag",
                        "sintaxis": [
                            "tag"
                        ]
                    },
                    {
                        "nombre": "text",
                        "sintaxis": [
                            "text"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Element"
                ]
            },
            {
                "nombre": "ElementTree",
                "constructores": [
                    {
                        "nombre": "ElementTree",
                        "sintaxis": [
                            "class xml.etree.ElementTree.ElementTree(element=None, file=None)"
                        ],
                        "parametros": [
                            "file",
                            "element"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "find",
                        "sintaxis": [
                            "find(match, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces"
                        ]
                    },
                    {
                        "nombre": "findall",
                        "sintaxis": [
                            "findall(match, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces"
                        ]
                    },
                    {
                        "nombre": "findtext",
                        "sintaxis": [
                            "findtext(match, default=None, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces",
                            "default"
                        ]
                    },
                    {
                        "nombre": "getroot",
                        "sintaxis": [
                            "getroot()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iter",
                        "sintaxis": [
                            "iter(tag=None)"
                        ],
                        "parametros": [
                            "tag"
                        ]
                    },
                    {
                        "nombre": "iterfind",
                        "sintaxis": [
                            "iterfind(match, namespaces=None)"
                        ],
                        "parametros": [
                            "match",
                            "namespaces"
                        ]
                    },
                    {
                        "nombre": "parse",
                        "sintaxis": [
                            "parse(source, parser=None)"
                        ],
                        "parametros": [
                            "parser",
                            "source"
                        ]
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "write(file, encoding='us-ascii', xml_declaration=None, default_namespace=None, method='xml', *, short_empty_elements=True)"
                        ],
                        "parametros": [
                            "encoding",
                            "default_namespace",
                            "method",
                            "*",
                            "xml_declaration",
                            "file",
                            "short_empty_elements"
                        ]
                    },
                    {
                        "nombre": "_setroot",
                        "sintaxis": [
                            "_setroot(element)"
                        ],
                        "parametros": [
                            "element"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ElementTree"
                ]
            },
            {
                "nombre": "ParseError",
                "constructores": [
                    {
                        "nombre": "ParseError",
                        "sintaxis": [
                            "class xml.etree.ElementTree.ParseError"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "code",
                        "sintaxis": [
                            "code"
                        ]
                    },
                    {
                        "nombre": "position",
                        "sintaxis": [
                            "position"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ParseError"
                ]
            },
            {
                "nombre": "QName",
                "constructores": [
                    {
                        "nombre": "QName",
                        "sintaxis": [
                            "class xml.etree.ElementTree.QName(text_or_uri, tag=None)"
                        ],
                        "parametros": [
                            "text_or_uri",
                            "tag"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class QName"
                ]
            },
            {
                "nombre": "TreeBuilder",
                "constructores": [
                    {
                        "nombre": "TreeBuilder",
                        "sintaxis": [
                            "class xml.etree.ElementTree.TreeBuilder(element_factory=None, *, comment_factory=None, pi_factory=None, insert_comments=False, insert_pis=False)"
                        ],
                        "parametros": [
                            "pi_factory",
                            "element_factory",
                            "insert_comments",
                            "comment_factory",
                            "*",
                            "insert_pis"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "comment",
                        "sintaxis": [
                            "comment(text)"
                        ],
                        "parametros": [
                            "text"
                        ]
                    },
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "data(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "doctype",
                        "sintaxis": [
                            "doctype(name, pubid, system)"
                        ],
                        "parametros": [
                            "system",
                            "pubid",
                            "name"
                        ]
                    },
                    {
                        "nombre": "end",
                        "sintaxis": [
                            "end(tag)"
                        ],
                        "parametros": [
                            "tag"
                        ]
                    },
                    {
                        "nombre": "end_ns",
                        "sintaxis": [
                            "end_ns(prefix)"
                        ],
                        "parametros": [
                            "prefix"
                        ]
                    },
                    {
                        "nombre": "pi",
                        "sintaxis": [
                            "pi(target, text)"
                        ],
                        "parametros": [
                            "target",
                            "text"
                        ]
                    },
                    {
                        "nombre": "start",
                        "sintaxis": [
                            "start(tag, attrs)"
                        ],
                        "parametros": [
                            "attrs",
                            "tag"
                        ]
                    },
                    {
                        "nombre": "start_ns",
                        "sintaxis": [
                            "start_ns(prefix, uri)"
                        ],
                        "parametros": [
                            "prefix",
                            "uri"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class TreeBuilder"
                ]
            },
            {
                "nombre": "XMLParser",
                "constructores": [
                    {
                        "nombre": "XMLParser",
                        "sintaxis": [
                            "class xml.etree.ElementTree.XMLParser(*, target=None, encoding=None)"
                        ],
                        "parametros": [
                            "*",
                            "target",
                            "encoding"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "feed",
                        "sintaxis": [
                            "feed(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class XMLParser"
                ]
            },
            {
                "nombre": "XMLPullParser",
                "constructores": [
                    {
                        "nombre": "XMLPullParser",
                        "sintaxis": [
                            "class xml.etree.ElementTree.XMLPullParser(events=None)"
                        ],
                        "parametros": [
                            "events"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "feed",
                        "sintaxis": [
                            "feed(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "read_events",
                        "sintaxis": [
                            "read_events()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class XMLPullParser"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "xml.parsers.expat",
        "funciones": [
            {
                "nombre": "ErrorString",
                "sintaxis": [
                    "xml.parsers.expat.ErrorString(errno)"
                ],
                "parametros": [
                    "errno"
                ]
            },
            {
                "nombre": "ParserCreate",
                "sintaxis": [
                    "xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)"
                ],
                "parametros": [
                    "namespace_separator",
                    "encoding"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "ExpatError",
                "constructores": [],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "code",
                        "sintaxis": [
                            "ExpatError.code"
                        ]
                    },
                    {
                        "nombre": "lineno",
                        "sintaxis": [
                            "ExpatError.lineno"
                        ]
                    },
                    {
                        "nombre": "offset",
                        "sintaxis": [
                            "ExpatError.offset"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ExpatError"
                ]
            },
            {
                "nombre": "xmlparser",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "AttlistDeclHandler",
                        "sintaxis": [
                            "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)"
                        ],
                        "parametros": [
                            "type",
                            "required",
                            "attname",
                            "default",
                            "elname"
                        ]
                    },
                    {
                        "nombre": "CharacterDataHandler",
                        "sintaxis": [
                            "xmlparser.CharacterDataHandler(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "CommentHandler",
                        "sintaxis": [
                            "xmlparser.CommentHandler(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "DefaultHandler",
                        "sintaxis": [
                            "xmlparser.DefaultHandler(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "DefaultHandlerExpand",
                        "sintaxis": [
                            "xmlparser.DefaultHandlerExpand(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "ElementDeclHandler",
                        "sintaxis": [
                            "xmlparser.ElementDeclHandler(name, model)"
                        ],
                        "parametros": [
                            "model",
                            "name"
                        ]
                    },
                    {
                        "nombre": "EndCdataSectionHandler",
                        "sintaxis": [
                            "xmlparser.EndCdataSectionHandler()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "EndDoctypeDeclHandler",
                        "sintaxis": [
                            "xmlparser.EndDoctypeDeclHandler()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "EndElementHandler",
                        "sintaxis": [
                            "xmlparser.EndElementHandler(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "EndNamespaceDeclHandler",
                        "sintaxis": [
                            "xmlparser.EndNamespaceDeclHandler(prefix)"
                        ],
                        "parametros": [
                            "prefix"
                        ]
                    },
                    {
                        "nombre": "EntityDeclHandler",
                        "sintaxis": [
                            "xmlparser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)"
                        ],
                        "parametros": [
                            "entityName",
                            "notationName",
                            "value",
                            "publicId",
                            "is_parameter_entity",
                            "base",
                            "systemId"
                        ]
                    },
                    {
                        "nombre": "ExternalEntityParserCreate",
                        "sintaxis": [
                            "xmlparser.ExternalEntityParserCreate(context[, encoding])"
                        ],
                        "parametros": [
                            "encoding",
                            "context"
                        ]
                    },
                    {
                        "nombre": "ExternalEntityRefHandler",
                        "sintaxis": [
                            "xmlparser.ExternalEntityRefHandler(context, base, systemId, publicId)"
                        ],
                        "parametros": [
                            "base",
                            "systemId",
                            "context",
                            "publicId"
                        ]
                    },
                    {
                        "nombre": "GetBase",
                        "sintaxis": [
                            "xmlparser.GetBase()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "GetInputContext",
                        "sintaxis": [
                            "xmlparser.GetInputContext()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "NotationDeclHandler",
                        "sintaxis": [
                            "xmlparser.NotationDeclHandler(notationName, base, systemId, publicId)"
                        ],
                        "parametros": [
                            "base",
                            "systemId",
                            "notationName",
                            "publicId"
                        ]
                    },
                    {
                        "nombre": "NotStandaloneHandler",
                        "sintaxis": [
                            "xmlparser.NotStandaloneHandler()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "Parse",
                        "sintaxis": [
                            "xmlparser.Parse(data[, isfinal])"
                        ],
                        "parametros": [
                            "isfinal",
                            "data"
                        ]
                    },
                    {
                        "nombre": "ParseFile",
                        "sintaxis": [
                            "xmlparser.ParseFile(file)"
                        ],
                        "parametros": [
                            "file"
                        ]
                    },
                    {
                        "nombre": "ProcessingInstructionHandler",
                        "sintaxis": [
                            "xmlparser.ProcessingInstructionHandler(target, data)"
                        ],
                        "parametros": [
                            "target",
                            "data"
                        ]
                    },
                    {
                        "nombre": "SetBase",
                        "sintaxis": [
                            "xmlparser.SetBase(base)"
                        ],
                        "parametros": [
                            "base"
                        ]
                    },
                    {
                        "nombre": "SetParamEntityParsing",
                        "sintaxis": [
                            "xmlparser.SetParamEntityParsing(flag)"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "StartCdataSectionHandler",
                        "sintaxis": [
                            "xmlparser.StartCdataSectionHandler()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "StartDoctypeDeclHandler",
                        "sintaxis": [
                            "xmlparser.StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)"
                        ],
                        "parametros": [
                            "systemId",
                            "doctypeName",
                            "has_internal_subset",
                            "publicId"
                        ]
                    },
                    {
                        "nombre": "StartElementHandler",
                        "sintaxis": [
                            "xmlparser.StartElementHandler(name, attributes)"
                        ],
                        "parametros": [
                            "attributes",
                            "name"
                        ]
                    },
                    {
                        "nombre": "StartNamespaceDeclHandler",
                        "sintaxis": [
                            "xmlparser.StartNamespaceDeclHandler(prefix, uri)"
                        ],
                        "parametros": [
                            "prefix",
                            "uri"
                        ]
                    },
                    {
                        "nombre": "UnparsedEntityDeclHandler",
                        "sintaxis": [
                            "xmlparser.UnparsedEntityDeclHandler(entityName, base, systemId, publicId, notationName)"
                        ],
                        "parametros": [
                            "entityName",
                            "notationName",
                            "publicId",
                            "base",
                            "systemId"
                        ]
                    },
                    {
                        "nombre": "UseForeignDTD",
                        "sintaxis": [
                            "xmlparser.UseForeignDTD([flag])"
                        ],
                        "parametros": [
                            "flag"
                        ]
                    },
                    {
                        "nombre": "XmlDeclHandler",
                        "sintaxis": [
                            "xmlparser.XmlDeclHandler(version, encoding, standalone)"
                        ],
                        "parametros": [
                            "version",
                            "encoding",
                            "standalone"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "buffer_size",
                        "sintaxis": [
                            "xmlparser.buffer_size"
                        ]
                    },
                    {
                        "nombre": "buffer_text",
                        "sintaxis": [
                            "xmlparser.buffer_text"
                        ]
                    },
                    {
                        "nombre": "buffer_used",
                        "sintaxis": [
                            "xmlparser.buffer_used"
                        ]
                    },
                    {
                        "nombre": "CurrentByteIndex",
                        "sintaxis": [
                            "xmlparser.CurrentByteIndex"
                        ]
                    },
                    {
                        "nombre": "CurrentColumnNumber",
                        "sintaxis": [
                            "xmlparser.CurrentColumnNumber"
                        ]
                    },
                    {
                        "nombre": "CurrentLineNumber",
                        "sintaxis": [
                            "xmlparser.CurrentLineNumber"
                        ]
                    },
                    {
                        "nombre": "ErrorByteIndex",
                        "sintaxis": [
                            "xmlparser.ErrorByteIndex"
                        ]
                    },
                    {
                        "nombre": "ErrorCode",
                        "sintaxis": [
                            "xmlparser.ErrorCode"
                        ]
                    },
                    {
                        "nombre": "ErrorColumnNumber",
                        "sintaxis": [
                            "xmlparser.ErrorColumnNumber"
                        ]
                    },
                    {
                        "nombre": "ErrorLineNumber",
                        "sintaxis": [
                            "xmlparser.ErrorLineNumber"
                        ]
                    },
                    {
                        "nombre": "ordered_attributes",
                        "sintaxis": [
                            "xmlparser.ordered_attributes"
                        ]
                    },
                    {
                        "nombre": "specified_attributes",
                        "sintaxis": [
                            "xmlparser.specified_attributes"
                        ]
                    }
                ],
                "sintaxis": [
                    "class xmlparser"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "codes",
                "sintaxis": [
                    "xml.parsers.expat.errors.codes"
                ]
            },
            {
                "nombre": "messages",
                "sintaxis": [
                    "xml.parsers.expat.errors.messages"
                ]
            },
            {
                "nombre": "XMLParserType",
                "sintaxis": [
                    "xml.parsers.expat.XMLParserType"
                ]
            },
            {
                "nombre": "XML_CQUANT_NONE",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_NONE"
                ]
            },
            {
                "nombre": "XML_CQUANT_OPT",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_OPT"
                ]
            },
            {
                "nombre": "XML_CQUANT_PLUS",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_PLUS"
                ]
            },
            {
                "nombre": "XML_CQUANT_REP",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_REP"
                ]
            },
            {
                "nombre": "XML_CTYPE_ANY",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_ANY"
                ]
            },
            {
                "nombre": "XML_CTYPE_CHOICE",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_CHOICE"
                ]
            },
            {
                "nombre": "XML_CTYPE_EMPTY",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_EMPTY"
                ]
            },
            {
                "nombre": "XML_CTYPE_MIXED",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_MIXED"
                ]
            },
            {
                "nombre": "XML_CTYPE_NAME",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_NAME"
                ]
            },
            {
                "nombre": "XML_CTYPE_SEQ",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_SEQ"
                ]
            },
            {
                "nombre": "XML_ERROR_ABORTED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ABORTED"
                ]
            },
            {
                "nombre": "XML_ERROR_ASYNC_ENTITY",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"
                ]
            },
            {
                "nombre": "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_BAD_CHAR_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_BINARY_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"
                ]
            },
            {
                "nombre": "XML_ERROR_DUPLICATE_ATTRIBUTE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"
                ]
            },
            {
                "nombre": "XML_ERROR_ENTITY_DECLARED_IN_PE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"
                ]
            },
            {
                "nombre": "XML_ERROR_EXTERNAL_ENTITY_HANDLING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"
                ]
            },
            {
                "nombre": "XML_ERROR_FEATURE_REQUIRES_XML_DTD",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"
                ]
            },
            {
                "nombre": "XML_ERROR_FINISHED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_FINISHED"
                ]
            },
            {
                "nombre": "XML_ERROR_INCOMPLETE_PE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"
                ]
            },
            {
                "nombre": "XML_ERROR_INCORRECT_ENCODING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"
                ]
            },
            {
                "nombre": "XML_ERROR_INVALID_TOKEN",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"
                ]
            },
            {
                "nombre": "XML_ERROR_JUNK_AFTER_DOC_ELEMENT",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"
                ]
            },
            {
                "nombre": "XML_ERROR_MISPLACED_XML_PI",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"
                ]
            },
            {
                "nombre": "XML_ERROR_NOT_STANDALONE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"
                ]
            },
            {
                "nombre": "XML_ERROR_NOT_SUSPENDED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"
                ]
            },
            {
                "nombre": "XML_ERROR_NO_ELEMENTS",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"
                ]
            },
            {
                "nombre": "XML_ERROR_NO_MEMORY",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"
                ]
            },
            {
                "nombre": "XML_ERROR_PARAM_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_PARTIAL_CHAR",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"
                ]
            },
            {
                "nombre": "XML_ERROR_PUBLICID",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_PUBLICID"
                ]
            },
            {
                "nombre": "XML_ERROR_RECURSIVE_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_SUSPENDED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"
                ]
            },
            {
                "nombre": "XML_ERROR_SUSPEND_PE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"
                ]
            },
            {
                "nombre": "XML_ERROR_SYNTAX",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_SYNTAX"
                ]
            },
            {
                "nombre": "XML_ERROR_TAG_MISMATCH",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"
                ]
            },
            {
                "nombre": "XML_ERROR_TEXT_DECL",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"
                ]
            },
            {
                "nombre": "XML_ERROR_UNBOUND_PREFIX",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"
                ]
            },
            {
                "nombre": "XML_ERROR_UNCLOSED_CDATA_SECTION",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"
                ]
            },
            {
                "nombre": "XML_ERROR_UNCLOSED_TOKEN",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"
                ]
            },
            {
                "nombre": "XML_ERROR_UNDECLARING_PREFIX",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"
                ]
            },
            {
                "nombre": "XML_ERROR_UNDEFINED_ENTITY",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"
                ]
            },
            {
                "nombre": "XML_ERROR_UNEXPECTED_STATE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"
                ]
            },
            {
                "nombre": "XML_ERROR_UNKNOWN_ENCODING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"
                ]
            },
            {
                "nombre": "XML_ERROR_XML_DECL",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_XML_DECL"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception xml.parsers.expat.error"
                ]
            },
            {
                "nombre": "ExpatError",
                "sintaxis": [
                    "exception xml.parsers.expat.ExpatError"
                ]
            }
        ]
    },
    {
        "nombre": "xml.parsers.expat.errors",
        "funciones": [],
        "clases": [],
        "constantes": [
            {
                "nombre": "codes",
                "sintaxis": [
                    "xml.parsers.expat.errors.codes"
                ]
            },
            {
                "nombre": "messages",
                "sintaxis": [
                    "xml.parsers.expat.errors.messages"
                ]
            },
            {
                "nombre": "XML_ERROR_ABORTED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ABORTED"
                ]
            },
            {
                "nombre": "XML_ERROR_ASYNC_ENTITY",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"
                ]
            },
            {
                "nombre": "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_BAD_CHAR_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_BINARY_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"
                ]
            },
            {
                "nombre": "XML_ERROR_DUPLICATE_ATTRIBUTE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"
                ]
            },
            {
                "nombre": "XML_ERROR_ENTITY_DECLARED_IN_PE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"
                ]
            },
            {
                "nombre": "XML_ERROR_EXTERNAL_ENTITY_HANDLING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"
                ]
            },
            {
                "nombre": "XML_ERROR_FEATURE_REQUIRES_XML_DTD",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"
                ]
            },
            {
                "nombre": "XML_ERROR_FINISHED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_FINISHED"
                ]
            },
            {
                "nombre": "XML_ERROR_INCOMPLETE_PE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"
                ]
            },
            {
                "nombre": "XML_ERROR_INCORRECT_ENCODING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"
                ]
            },
            {
                "nombre": "XML_ERROR_INVALID_TOKEN",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"
                ]
            },
            {
                "nombre": "XML_ERROR_JUNK_AFTER_DOC_ELEMENT",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"
                ]
            },
            {
                "nombre": "XML_ERROR_MISPLACED_XML_PI",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"
                ]
            },
            {
                "nombre": "XML_ERROR_NOT_STANDALONE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"
                ]
            },
            {
                "nombre": "XML_ERROR_NOT_SUSPENDED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"
                ]
            },
            {
                "nombre": "XML_ERROR_NO_ELEMENTS",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"
                ]
            },
            {
                "nombre": "XML_ERROR_NO_MEMORY",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"
                ]
            },
            {
                "nombre": "XML_ERROR_PARAM_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_PARTIAL_CHAR",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"
                ]
            },
            {
                "nombre": "XML_ERROR_PUBLICID",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_PUBLICID"
                ]
            },
            {
                "nombre": "XML_ERROR_RECURSIVE_ENTITY_REF",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"
                ]
            },
            {
                "nombre": "XML_ERROR_SUSPENDED",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"
                ]
            },
            {
                "nombre": "XML_ERROR_SUSPEND_PE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"
                ]
            },
            {
                "nombre": "XML_ERROR_SYNTAX",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_SYNTAX"
                ]
            },
            {
                "nombre": "XML_ERROR_TAG_MISMATCH",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"
                ]
            },
            {
                "nombre": "XML_ERROR_TEXT_DECL",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"
                ]
            },
            {
                "nombre": "XML_ERROR_UNBOUND_PREFIX",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"
                ]
            },
            {
                "nombre": "XML_ERROR_UNCLOSED_CDATA_SECTION",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"
                ]
            },
            {
                "nombre": "XML_ERROR_UNCLOSED_TOKEN",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"
                ]
            },
            {
                "nombre": "XML_ERROR_UNDECLARING_PREFIX",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"
                ]
            },
            {
                "nombre": "XML_ERROR_UNDEFINED_ENTITY",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"
                ]
            },
            {
                "nombre": "XML_ERROR_UNEXPECTED_STATE",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"
                ]
            },
            {
                "nombre": "XML_ERROR_UNKNOWN_ENCODING",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"
                ]
            },
            {
                "nombre": "XML_ERROR_XML_DECL",
                "sintaxis": [
                    "xml.parsers.expat.errors.XML_ERROR_XML_DECL"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "xml.parsers.expat.model",
        "funciones": [],
        "clases": [],
        "constantes": [
            {
                "nombre": "XML_CQUANT_NONE",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_NONE"
                ]
            },
            {
                "nombre": "XML_CQUANT_OPT",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_OPT"
                ]
            },
            {
                "nombre": "XML_CQUANT_PLUS",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_PLUS"
                ]
            },
            {
                "nombre": "XML_CQUANT_REP",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CQUANT_REP"
                ]
            },
            {
                "nombre": "XML_CTYPE_ANY",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_ANY"
                ]
            },
            {
                "nombre": "XML_CTYPE_CHOICE",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_CHOICE"
                ]
            },
            {
                "nombre": "XML_CTYPE_EMPTY",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_EMPTY"
                ]
            },
            {
                "nombre": "XML_CTYPE_MIXED",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_MIXED"
                ]
            },
            {
                "nombre": "XML_CTYPE_NAME",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_NAME"
                ]
            },
            {
                "nombre": "XML_CTYPE_SEQ",
                "sintaxis": [
                    "xml.parsers.expat.model.XML_CTYPE_SEQ"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "xml.sax",
        "funciones": [
            {
                "nombre": "make_parser",
                "sintaxis": [
                    "xml.sax.make_parser(parser_list=[])"
                ],
                "parametros": [
                    "parser_list"
                ]
            },
            {
                "nombre": "parse",
                "sintaxis": [
                    "xml.sax.parse(filename_or_stream, handler, error_handler=handler.ErrorHandler())"
                ],
                "parametros": [
                    "filename_or_stream",
                    "error_handler",
                    "handler"
                ]
            },
            {
                "nombre": "parseString",
                "sintaxis": [
                    "xml.sax.parseString(string, handler, error_handler=handler.ErrorHandler())"
                ],
                "parametros": [
                    "error_handler",
                    "string",
                    "handler"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "SAXException",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "getException",
                        "sintaxis": [
                            "SAXException.getException()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getMessage",
                        "sintaxis": [
                            "SAXException.getMessage()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SAXException"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "SAXException",
                "sintaxis": [
                    "exception xml.sax.SAXException(msg, exception=None)"
                ]
            },
            {
                "nombre": "SAXNotRecognizedException",
                "sintaxis": [
                    "exception xml.sax.SAXNotRecognizedException(msg, exception=None)"
                ]
            },
            {
                "nombre": "SAXNotSupportedException",
                "sintaxis": [
                    "exception xml.sax.SAXNotSupportedException(msg, exception=None)"
                ]
            },
            {
                "nombre": "SAXParseException",
                "sintaxis": [
                    "exception xml.sax.SAXParseException(msg, exception, locator)"
                ]
            }
        ]
    },
    {
        "nombre": "xml.sax.handler",
        "funciones": [],
        "clases": [
            {
                "nombre": "ContentHandler",
                "constructores": [
                    {
                        "nombre": "ContentHandler",
                        "sintaxis": [
                            "class xml.sax.handler.ContentHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "characters",
                        "sintaxis": [
                            "ContentHandler.characters(content)"
                        ],
                        "parametros": [
                            "content"
                        ]
                    },
                    {
                        "nombre": "endDocument",
                        "sintaxis": [
                            "ContentHandler.endDocument()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "endElement",
                        "sintaxis": [
                            "ContentHandler.endElement(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "endElementNS",
                        "sintaxis": [
                            "ContentHandler.endElementNS(name, qname)"
                        ],
                        "parametros": [
                            "qname",
                            "name"
                        ]
                    },
                    {
                        "nombre": "endPrefixMapping",
                        "sintaxis": [
                            "ContentHandler.endPrefixMapping(prefix)"
                        ],
                        "parametros": [
                            "prefix"
                        ]
                    },
                    {
                        "nombre": "ignorableWhitespace",
                        "sintaxis": [
                            "ContentHandler.ignorableWhitespace(whitespace)"
                        ],
                        "parametros": [
                            "whitespace"
                        ]
                    },
                    {
                        "nombre": "processingInstruction",
                        "sintaxis": [
                            "ContentHandler.processingInstruction(target, data)"
                        ],
                        "parametros": [
                            "target",
                            "data"
                        ]
                    },
                    {
                        "nombre": "setDocumentLocator",
                        "sintaxis": [
                            "ContentHandler.setDocumentLocator(locator)"
                        ],
                        "parametros": [
                            "locator"
                        ]
                    },
                    {
                        "nombre": "skippedEntity",
                        "sintaxis": [
                            "ContentHandler.skippedEntity(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "startDocument",
                        "sintaxis": [
                            "ContentHandler.startDocument()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "startElement",
                        "sintaxis": [
                            "ContentHandler.startElement(name, attrs)"
                        ],
                        "parametros": [
                            "attrs",
                            "name"
                        ]
                    },
                    {
                        "nombre": "startElementNS",
                        "sintaxis": [
                            "ContentHandler.startElementNS(name, qname, attrs)"
                        ],
                        "parametros": [
                            "qname",
                            "attrs",
                            "name"
                        ]
                    },
                    {
                        "nombre": "startPrefixMapping",
                        "sintaxis": [
                            "ContentHandler.startPrefixMapping(prefix, uri)"
                        ],
                        "parametros": [
                            "prefix",
                            "uri"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ContentHandler"
                ]
            },
            {
                "nombre": "DTDHandler",
                "constructores": [
                    {
                        "nombre": "DTDHandler",
                        "sintaxis": [
                            "class xml.sax.handler.DTDHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "notationDecl",
                        "sintaxis": [
                            "DTDHandler.notationDecl(name, publicId, systemId)"
                        ],
                        "parametros": [
                            "systemId",
                            "name",
                            "publicId"
                        ]
                    },
                    {
                        "nombre": "unparsedEntityDecl",
                        "sintaxis": [
                            "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)"
                        ],
                        "parametros": [
                            "systemId",
                            "ndata",
                            "name",
                            "publicId"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DTDHandler"
                ]
            },
            {
                "nombre": "EntityResolver",
                "constructores": [
                    {
                        "nombre": "EntityResolver",
                        "sintaxis": [
                            "class xml.sax.handler.EntityResolver"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "resolveEntity",
                        "sintaxis": [
                            "EntityResolver.resolveEntity(publicId, systemId)"
                        ],
                        "parametros": [
                            "systemId",
                            "publicId"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class EntityResolver"
                ]
            },
            {
                "nombre": "ErrorHandler",
                "constructores": [
                    {
                        "nombre": "ErrorHandler",
                        "sintaxis": [
                            "class xml.sax.handler.ErrorHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "error",
                        "sintaxis": [
                            "ErrorHandler.error(exception)"
                        ],
                        "parametros": [
                            "exception"
                        ]
                    },
                    {
                        "nombre": "fatalError",
                        "sintaxis": [
                            "ErrorHandler.fatalError(exception)"
                        ],
                        "parametros": [
                            "exception"
                        ]
                    },
                    {
                        "nombre": "warning",
                        "sintaxis": [
                            "ErrorHandler.warning(exception)"
                        ],
                        "parametros": [
                            "exception"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ErrorHandler"
                ]
            },
            {
                "nombre": "LexicalHandler",
                "constructores": [
                    {
                        "nombre": "LexicalHandler",
                        "sintaxis": [
                            "class xml.sax.handler.LexicalHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "comment",
                        "sintaxis": [
                            "LexicalHandler.comment(content)"
                        ],
                        "parametros": [
                            "content"
                        ]
                    },
                    {
                        "nombre": "endCDATA",
                        "sintaxis": [
                            "LexicalHandler.endCDATA()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "endDTD",
                        "sintaxis": [
                            "LexicalHandler.endDTD()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "startCDATA",
                        "sintaxis": [
                            "LexicalHandler.startCDATA()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "startDTD",
                        "sintaxis": [
                            "LexicalHandler.startDTD(name, public_id, system_id)"
                        ],
                        "parametros": [
                            "system_id",
                            "name",
                            "public_id"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class LexicalHandler"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "all_features",
                "sintaxis": [
                    "xml.sax.handler.all_features"
                ]
            },
            {
                "nombre": "all_properties",
                "sintaxis": [
                    "xml.sax.handler.all_properties"
                ]
            },
            {
                "nombre": "feature_external_ges",
                "sintaxis": [
                    "xml.sax.handler.feature_external_ges"
                ]
            },
            {
                "nombre": "feature_external_pes",
                "sintaxis": [
                    "xml.sax.handler.feature_external_pes"
                ]
            },
            {
                "nombre": "feature_namespaces",
                "sintaxis": [
                    "xml.sax.handler.feature_namespaces"
                ]
            },
            {
                "nombre": "feature_namespace_prefixes",
                "sintaxis": [
                    "xml.sax.handler.feature_namespace_prefixes"
                ]
            },
            {
                "nombre": "feature_string_interning",
                "sintaxis": [
                    "xml.sax.handler.feature_string_interning"
                ]
            },
            {
                "nombre": "feature_validation",
                "sintaxis": [
                    "xml.sax.handler.feature_validation"
                ]
            },
            {
                "nombre": "property_declaration_handler",
                "sintaxis": [
                    "xml.sax.handler.property_declaration_handler"
                ]
            },
            {
                "nombre": "property_dom_node",
                "sintaxis": [
                    "xml.sax.handler.property_dom_node"
                ]
            },
            {
                "nombre": "property_lexical_handler",
                "sintaxis": [
                    "xml.sax.handler.property_lexical_handler"
                ]
            },
            {
                "nombre": "property_xml_string",
                "sintaxis": [
                    "xml.sax.handler.property_xml_string"
                ]
            }
        ],
        "excepciones": []
    },
    {
        "nombre": "xml.sax.saxutils",
        "funciones": [
            {
                "nombre": "escape",
                "sintaxis": [
                    "xml.sax.saxutils.escape(data, entities={})"
                ],
                "parametros": [
                    "entities",
                    "data"
                ]
            },
            {
                "nombre": "prepare_input_source",
                "sintaxis": [
                    "xml.sax.saxutils.prepare_input_source(source, base='')"
                ],
                "parametros": [
                    "base",
                    "source"
                ]
            },
            {
                "nombre": "quoteattr",
                "sintaxis": [
                    "xml.sax.saxutils.quoteattr(data, entities={})"
                ],
                "parametros": [
                    "entities",
                    "data"
                ]
            },
            {
                "nombre": "unescape",
                "sintaxis": [
                    "xml.sax.saxutils.unescape(data, entities={})"
                ],
                "parametros": [
                    "entities",
                    "data"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "XMLFilterBase",
                "constructores": [
                    {
                        "nombre": "XMLFilterBase",
                        "sintaxis": [
                            "class xml.sax.saxutils.XMLFilterBase(base)"
                        ],
                        "parametros": [
                            "base"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class XMLFilterBase"
                ]
            },
            {
                "nombre": "XMLGenerator",
                "constructores": [
                    {
                        "nombre": "XMLGenerator",
                        "sintaxis": [
                            "class xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)"
                        ],
                        "parametros": [
                            "out",
                            "encoding",
                            "short_empty_elements"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class XMLGenerator"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "xml.sax.xmlreader",
        "funciones": [],
        "clases": [
            {
                "nombre": "Attributes",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "getLength",
                        "sintaxis": [
                            "Attributes.getLength()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getNames",
                        "sintaxis": [
                            "Attributes.getNames()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getType",
                        "sintaxis": [
                            "Attributes.getType(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "getValue",
                        "sintaxis": [
                            "Attributes.getValue(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Attributes"
                ]
            },
            {
                "nombre": "AttributesImpl",
                "constructores": [
                    {
                        "nombre": "AttributesImpl",
                        "sintaxis": [
                            "class xml.sax.xmlreader.AttributesImpl(attrs)"
                        ],
                        "parametros": [
                            "attrs"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AttributesImpl"
                ]
            },
            {
                "nombre": "AttributesNS",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "getNameByQName",
                        "sintaxis": [
                            "AttributesNS.getNameByQName(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "getQNameByName",
                        "sintaxis": [
                            "AttributesNS.getQNameByName(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "getQNames",
                        "sintaxis": [
                            "AttributesNS.getQNames()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getValueByQName",
                        "sintaxis": [
                            "AttributesNS.getValueByQName(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class AttributesNS"
                ]
            },
            {
                "nombre": "AttributesNSImpl",
                "constructores": [
                    {
                        "nombre": "AttributesNSImpl",
                        "sintaxis": [
                            "class xml.sax.xmlreader.AttributesNSImpl(attrs, qnames)"
                        ],
                        "parametros": [
                            "attrs",
                            "qnames"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class AttributesNSImpl"
                ]
            },
            {
                "nombre": "IncrementalParser",
                "constructores": [
                    {
                        "nombre": "IncrementalParser",
                        "sintaxis": [
                            "class xml.sax.xmlreader.IncrementalParser"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "IncrementalParser.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "feed",
                        "sintaxis": [
                            "IncrementalParser.feed(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "reset",
                        "sintaxis": [
                            "IncrementalParser.reset()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class IncrementalParser"
                ]
            },
            {
                "nombre": "InputSource",
                "constructores": [
                    {
                        "nombre": "InputSource",
                        "sintaxis": [
                            "class xml.sax.xmlreader.InputSource(system_id=None)"
                        ],
                        "parametros": [
                            "system_id"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getByteStream",
                        "sintaxis": [
                            "InputSource.getByteStream()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getCharacterStream",
                        "sintaxis": [
                            "InputSource.getCharacterStream()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getEncoding",
                        "sintaxis": [
                            "InputSource.getEncoding()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getPublicId",
                        "sintaxis": [
                            "InputSource.getPublicId()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getSystemId",
                        "sintaxis": [
                            "InputSource.getSystemId()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "setByteStream",
                        "sintaxis": [
                            "InputSource.setByteStream(bytefile)"
                        ],
                        "parametros": [
                            "bytefile"
                        ]
                    },
                    {
                        "nombre": "setCharacterStream",
                        "sintaxis": [
                            "InputSource.setCharacterStream(charfile)"
                        ],
                        "parametros": [
                            "charfile"
                        ]
                    },
                    {
                        "nombre": "setEncoding",
                        "sintaxis": [
                            "InputSource.setEncoding(encoding)"
                        ],
                        "parametros": [
                            "encoding"
                        ]
                    },
                    {
                        "nombre": "setPublicId",
                        "sintaxis": [
                            "InputSource.setPublicId(id)"
                        ],
                        "parametros": [
                            "id"
                        ]
                    },
                    {
                        "nombre": "setSystemId",
                        "sintaxis": [
                            "InputSource.setSystemId(id)"
                        ],
                        "parametros": [
                            "id"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class InputSource"
                ]
            },
            {
                "nombre": "Locator",
                "constructores": [
                    {
                        "nombre": "Locator",
                        "sintaxis": [
                            "class xml.sax.xmlreader.Locator"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getColumnNumber",
                        "sintaxis": [
                            "Locator.getColumnNumber()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getLineNumber",
                        "sintaxis": [
                            "Locator.getLineNumber()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getPublicId",
                        "sintaxis": [
                            "Locator.getPublicId()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getSystemId",
                        "sintaxis": [
                            "Locator.getSystemId()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Locator"
                ]
            },
            {
                "nombre": "XMLReader",
                "constructores": [
                    {
                        "nombre": "XMLReader",
                        "sintaxis": [
                            "class xml.sax.xmlreader.XMLReader"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "getContentHandler",
                        "sintaxis": [
                            "XMLReader.getContentHandler()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getDTDHandler",
                        "sintaxis": [
                            "XMLReader.getDTDHandler()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getEntityResolver",
                        "sintaxis": [
                            "XMLReader.getEntityResolver()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getErrorHandler",
                        "sintaxis": [
                            "XMLReader.getErrorHandler()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "getFeature",
                        "sintaxis": [
                            "XMLReader.getFeature(featurename)"
                        ],
                        "parametros": [
                            "featurename"
                        ]
                    },
                    {
                        "nombre": "getProperty",
                        "sintaxis": [
                            "XMLReader.getProperty(propertyname)"
                        ],
                        "parametros": [
                            "propertyname"
                        ]
                    },
                    {
                        "nombre": "parse",
                        "sintaxis": [
                            "XMLReader.parse(source)"
                        ],
                        "parametros": [
                            "source"
                        ]
                    },
                    {
                        "nombre": "setContentHandler",
                        "sintaxis": [
                            "XMLReader.setContentHandler(handler)"
                        ],
                        "parametros": [
                            "handler"
                        ]
                    },
                    {
                        "nombre": "setDTDHandler",
                        "sintaxis": [
                            "XMLReader.setDTDHandler(handler)"
                        ],
                        "parametros": [
                            "handler"
                        ]
                    },
                    {
                        "nombre": "setEntityResolver",
                        "sintaxis": [
                            "XMLReader.setEntityResolver(handler)"
                        ],
                        "parametros": [
                            "handler"
                        ]
                    },
                    {
                        "nombre": "setErrorHandler",
                        "sintaxis": [
                            "XMLReader.setErrorHandler(handler)"
                        ],
                        "parametros": [
                            "handler"
                        ]
                    },
                    {
                        "nombre": "setFeature",
                        "sintaxis": [
                            "XMLReader.setFeature(featurename, value)"
                        ],
                        "parametros": [
                            "featurename",
                            "value"
                        ]
                    },
                    {
                        "nombre": "setLocale",
                        "sintaxis": [
                            "XMLReader.setLocale(locale)"
                        ],
                        "parametros": [
                            "locale"
                        ]
                    },
                    {
                        "nombre": "setProperty",
                        "sintaxis": [
                            "XMLReader.setProperty(propertyname, value)"
                        ],
                        "parametros": [
                            "propertyname",
                            "value"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class XMLReader"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "xmlrpc.client",
        "funciones": [
            {
                "nombre": "dumps",
                "sintaxis": [
                    "xmlrpc.client.dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)"
                ],
                "parametros": [
                    "encoding",
                    "allow_none",
                    "params",
                    "methodname",
                    "methodresponse"
                ]
            },
            {
                "nombre": "loads",
                "sintaxis": [
                    "xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False)"
                ],
                "parametros": [
                    "use_datetime",
                    "use_builtin_types",
                    "data"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Binary",
                "constructores": [
                    {
                        "nombre": "Binary",
                        "sintaxis": [
                            "class xmlrpc.client.Binary"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "decode",
                        "sintaxis": [
                            "decode(bytes)"
                        ],
                        "parametros": [
                            "bytes"
                        ]
                    },
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "encode(out)"
                        ],
                        "parametros": [
                            "out"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "data",
                        "sintaxis": [
                            "data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Binary"
                ]
            },
            {
                "nombre": "DateTime",
                "constructores": [
                    {
                        "nombre": "DateTime",
                        "sintaxis": [
                            "class xmlrpc.client.DateTime"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "decode",
                        "sintaxis": [
                            "decode(string)"
                        ],
                        "parametros": [
                            "string"
                        ]
                    },
                    {
                        "nombre": "encode",
                        "sintaxis": [
                            "encode(out)"
                        ],
                        "parametros": [
                            "out"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DateTime"
                ]
            },
            {
                "nombre": "Fault",
                "constructores": [
                    {
                        "nombre": "Fault",
                        "sintaxis": [
                            "class xmlrpc.client.Fault"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "faultCode",
                        "sintaxis": [
                            "faultCode"
                        ]
                    },
                    {
                        "nombre": "faultString",
                        "sintaxis": [
                            "faultString"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Fault"
                ]
            },
            {
                "nombre": "MultiCall",
                "constructores": [
                    {
                        "nombre": "MultiCall",
                        "sintaxis": [
                            "class xmlrpc.client.MultiCall(server)"
                        ],
                        "parametros": [
                            "server"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class MultiCall"
                ]
            },
            {
                "nombre": "ProtocolError",
                "constructores": [
                    {
                        "nombre": "ProtocolError",
                        "sintaxis": [
                            "class xmlrpc.client.ProtocolError"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "errcode",
                        "sintaxis": [
                            "errcode"
                        ]
                    },
                    {
                        "nombre": "errmsg",
                        "sintaxis": [
                            "errmsg"
                        ]
                    },
                    {
                        "nombre": "headers",
                        "sintaxis": [
                            "headers"
                        ]
                    },
                    {
                        "nombre": "url",
                        "sintaxis": [
                            "url"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ProtocolError"
                ]
            },
            {
                "nombre": "ServerProxy",
                "constructores": [
                    {
                        "nombre": "ServerProxy",
                        "sintaxis": [
                            "class xmlrpc.client.ServerProxy(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, headers=(), context=None)"
                        ],
                        "parametros": [
                            "use_datetime",
                            "headers",
                            "encoding",
                            "context",
                            "allow_none",
                            "transport",
                            "use_builtin_types",
                            "uri",
                            "verbose",
                            "*"
                        ]
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class ServerProxy"
                ]
            },
            {
                "nombre": "ServerProxy.system",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "listMethods",
                        "sintaxis": [
                            "ServerProxy.system.listMethods()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "methodHelp",
                        "sintaxis": [
                            "ServerProxy.system.methodHelp(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "methodSignature",
                        "sintaxis": [
                            "ServerProxy.system.methodSignature(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class ServerProxy.system"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "xmlrpc.server",
        "funciones": [],
        "clases": [
            {
                "nombre": "CGIXMLRPCRequestHandler",
                "constructores": [
                    {
                        "nombre": "CGIXMLRPCRequestHandler",
                        "sintaxis": [
                            "class xmlrpc.server.CGIXMLRPCRequestHandler(allow_none=False, encoding=None, use_builtin_types=False)"
                        ],
                        "parametros": [
                            "encoding",
                            "use_builtin_types",
                            "allow_none"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "handle_request",
                        "sintaxis": [
                            "CGIXMLRPCRequestHandler.handle_request(request_text=None)"
                        ],
                        "parametros": [
                            "request_text"
                        ]
                    },
                    {
                        "nombre": "register_function",
                        "sintaxis": [
                            "CGIXMLRPCRequestHandler.register_function(function=None, name=None)"
                        ],
                        "parametros": [
                            "name",
                            "function"
                        ]
                    },
                    {
                        "nombre": "register_instance",
                        "sintaxis": [
                            "CGIXMLRPCRequestHandler.register_instance(instance)"
                        ],
                        "parametros": [
                            "instance"
                        ]
                    },
                    {
                        "nombre": "register_introspection_functions",
                        "sintaxis": [
                            "CGIXMLRPCRequestHandler.register_introspection_functions()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "register_multicall_functions",
                        "sintaxis": [
                            "CGIXMLRPCRequestHandler.register_multicall_functions()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class CGIXMLRPCRequestHandler"
                ]
            },
            {
                "nombre": "DocCGIXMLRPCRequestHandler",
                "constructores": [
                    {
                        "nombre": "DocCGIXMLRPCRequestHandler",
                        "sintaxis": [
                            "class xmlrpc.server.DocCGIXMLRPCRequestHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [
                    {
                        "nombre": "set_server_documentation",
                        "sintaxis": [
                            "DocCGIXMLRPCRequestHandler.set_server_documentation(server_documentation)"
                        ],
                        "parametros": [
                            "server_documentation"
                        ]
                    },
                    {
                        "nombre": "set_server_name",
                        "sintaxis": [
                            "DocCGIXMLRPCRequestHandler.set_server_name(server_name)"
                        ],
                        "parametros": [
                            "server_name"
                        ]
                    },
                    {
                        "nombre": "set_server_title",
                        "sintaxis": [
                            "DocCGIXMLRPCRequestHandler.set_server_title(server_title)"
                        ],
                        "parametros": [
                            "server_title"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DocCGIXMLRPCRequestHandler"
                ]
            },
            {
                "nombre": "DocXMLRPCRequestHandler",
                "constructores": [
                    {
                        "nombre": "DocXMLRPCRequestHandler",
                        "sintaxis": [
                            "class xmlrpc.server.DocXMLRPCRequestHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [],
                "sintaxis": [
                    "class DocXMLRPCRequestHandler"
                ]
            },
            {
                "nombre": "DocXMLRPCServer",
                "constructores": [
                    {
                        "nombre": "DocXMLRPCServer",
                        "sintaxis": [
                            "class xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=True)"
                        ],
                        "parametros": [
                            "encoding",
                            "addr",
                            "allow_none",
                            "logRequests",
                            "use_builtin_types",
                            "bind_and_activate",
                            "requestHandler"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "set_server_documentation",
                        "sintaxis": [
                            "DocXMLRPCServer.set_server_documentation(server_documentation)"
                        ],
                        "parametros": [
                            "server_documentation"
                        ]
                    },
                    {
                        "nombre": "set_server_name",
                        "sintaxis": [
                            "DocXMLRPCServer.set_server_name(server_name)"
                        ],
                        "parametros": [
                            "server_name"
                        ]
                    },
                    {
                        "nombre": "set_server_title",
                        "sintaxis": [
                            "DocXMLRPCServer.set_server_title(server_title)"
                        ],
                        "parametros": [
                            "server_title"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class DocXMLRPCServer"
                ]
            },
            {
                "nombre": "SimpleXMLRPCRequestHandler",
                "constructores": [
                    {
                        "nombre": "SimpleXMLRPCRequestHandler",
                        "sintaxis": [
                            "class xmlrpc.server.SimpleXMLRPCRequestHandler"
                        ],
                        "parametros": []
                    }
                ],
                "metodos": [],
                "atributos": [
                    {
                        "nombre": "rpc_paths",
                        "sintaxis": [
                            "SimpleXMLRPCRequestHandler.rpc_paths"
                        ]
                    }
                ],
                "sintaxis": [
                    "class SimpleXMLRPCRequestHandler"
                ]
            },
            {
                "nombre": "SimpleXMLRPCServer",
                "constructores": [
                    {
                        "nombre": "SimpleXMLRPCServer",
                        "sintaxis": [
                            "class xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)"
                        ],
                        "parametros": [
                            "encoding",
                            "addr",
                            "allow_none",
                            "logRequests",
                            "use_builtin_types",
                            "bind_and_activate",
                            "requestHandler"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "register_function",
                        "sintaxis": [
                            "SimpleXMLRPCServer.register_function(function=None, name=None)"
                        ],
                        "parametros": [
                            "name",
                            "function"
                        ]
                    },
                    {
                        "nombre": "register_instance",
                        "sintaxis": [
                            "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)"
                        ],
                        "parametros": [
                            "instance",
                            "allow_dotted_names"
                        ]
                    },
                    {
                        "nombre": "register_introspection_functions",
                        "sintaxis": [
                            "SimpleXMLRPCServer.register_introspection_functions()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "register_multicall_functions",
                        "sintaxis": [
                            "SimpleXMLRPCServer.register_multicall_functions()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class SimpleXMLRPCServer"
                ]
            }
        ],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "zipapp",
        "funciones": [
            {
                "nombre": "create_archive",
                "sintaxis": [
                    "zipapp.create_archive(source, target=None, interpreter=None, main=None, filter=None, compressed=False)"
                ],
                "parametros": [
                    "main",
                    "interpreter",
                    "target",
                    "source",
                    "filter",
                    "compressed"
                ]
            },
            {
                "nombre": "get_interpreter",
                "sintaxis": [
                    "zipapp.get_interpreter(archive)"
                ],
                "parametros": [
                    "archive"
                ]
            }
        ],
        "clases": [],
        "constantes": [],
        "excepciones": []
    },
    {
        "nombre": "zipfile",
        "funciones": [
            {
                "nombre": "is_zipfile",
                "sintaxis": [
                    "zipfile.is_zipfile(filename)"
                ],
                "parametros": [
                    "filename"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Path",
                "constructores": [
                    {
                        "nombre": "Path",
                        "sintaxis": [
                            "class zipfile.Path(root, at='')",
                            "class zipfile.Path"
                        ],
                        "parametros": [
                            "root",
                            "at"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "exists",
                        "sintaxis": [
                            "Path.exists()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_dir",
                        "sintaxis": [
                            "Path.is_dir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_file",
                        "sintaxis": [
                            "Path.is_file()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "iterdir",
                        "sintaxis": [
                            "Path.iterdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "joinpath",
                        "sintaxis": [
                            "Path.joinpath(*other)"
                        ],
                        "parametros": [
                            "other"
                        ]
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "Path.open(mode='r', *, pwd, **)"
                        ],
                        "parametros": [
                            "mode",
                            "*",
                            "pwd",
                            "**"
                        ]
                    },
                    {
                        "nombre": "read_bytes",
                        "sintaxis": [
                            "Path.read_bytes()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read_text",
                        "sintaxis": [
                            "Path.read_text(*, **)"
                        ],
                        "parametros": [
                            "*",
                            "**"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "name",
                        "sintaxis": [
                            "Path.name"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Path"
                ]
            },
            {
                "nombre": "PyZipFile",
                "constructores": [
                    {
                        "nombre": "PyZipFile",
                        "sintaxis": [
                            "class zipfile.PyZipFile",
                            "class zipfile.PyZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=True, optimize=- 1)"
                        ],
                        "parametros": [
                            "mode",
                            "allowZip64",
                            "compression",
                            "optimize",
                            "file"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "writepy",
                        "sintaxis": [
                            "writepy(pathname, basename='', filterfunc=None)"
                        ],
                        "parametros": [
                            "basename",
                            "filterfunc",
                            "pathname"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class PyZipFile"
                ]
            },
            {
                "nombre": "ZipFile",
                "constructores": [
                    {
                        "nombre": "ZipFile",
                        "sintaxis": [
                            "class zipfile.ZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
                            "class zipfile.ZipFile"
                        ],
                        "parametros": [
                            "mode",
                            "allowZip64",
                            "strict_timestamps",
                            "compresslevel",
                            "file",
                            "compression",
                            "*"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "close",
                        "sintaxis": [
                            "ZipFile.close()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "extract",
                        "sintaxis": [
                            "ZipFile.extract(member, path=None, pwd=None)"
                        ],
                        "parametros": [
                            "path",
                            "pwd",
                            "member"
                        ]
                    },
                    {
                        "nombre": "extractall",
                        "sintaxis": [
                            "ZipFile.extractall(path=None, members=None, pwd=None)"
                        ],
                        "parametros": [
                            "members",
                            "pwd",
                            "path"
                        ]
                    },
                    {
                        "nombre": "getinfo",
                        "sintaxis": [
                            "ZipFile.getinfo(name)"
                        ],
                        "parametros": [
                            "name"
                        ]
                    },
                    {
                        "nombre": "infolist",
                        "sintaxis": [
                            "ZipFile.infolist()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "namelist",
                        "sintaxis": [
                            "ZipFile.namelist()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "open",
                        "sintaxis": [
                            "ZipFile.open(name, mode='r', pwd=None, *, force_zip64=False)"
                        ],
                        "parametros": [
                            "mode",
                            "pwd",
                            "name",
                            "force_zip64",
                            "*"
                        ]
                    },
                    {
                        "nombre": "printdir",
                        "sintaxis": [
                            "ZipFile.printdir()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "read",
                        "sintaxis": [
                            "ZipFile.read(name, pwd=None)"
                        ],
                        "parametros": [
                            "pwd",
                            "name"
                        ]
                    },
                    {
                        "nombre": "setpassword",
                        "sintaxis": [
                            "ZipFile.setpassword(pwd)"
                        ],
                        "parametros": [
                            "pwd"
                        ]
                    },
                    {
                        "nombre": "testzip",
                        "sintaxis": [
                            "ZipFile.testzip()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "write",
                        "sintaxis": [
                            "ZipFile.write(filename, arcname=None, compress_type=None, compresslevel=None)"
                        ],
                        "parametros": [
                            "compress_type",
                            "filename",
                            "compresslevel",
                            "arcname"
                        ]
                    },
                    {
                        "nombre": "writestr",
                        "sintaxis": [
                            "ZipFile.writestr(zinfo_or_arcname, data, compress_type=None, compresslevel=None)"
                        ],
                        "parametros": [
                            "compress_type",
                            "zinfo_or_arcname",
                            "compresslevel",
                            "data"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "comment",
                        "sintaxis": [
                            "ZipFile.comment"
                        ]
                    },
                    {
                        "nombre": "debug",
                        "sintaxis": [
                            "ZipFile.debug"
                        ]
                    },
                    {
                        "nombre": "filename",
                        "sintaxis": [
                            "ZipFile.filename"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ZipFile"
                ]
            },
            {
                "nombre": "ZipInfo",
                "constructores": [
                    {
                        "nombre": "ZipInfo",
                        "sintaxis": [
                            "class zipfile.ZipInfo(filename='NoName', date_time=1980, 1, 1, 0, 0, 0)"
                        ],
                        "parametros": [
                            "filename",
                            "date_time"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "from_file",
                        "sintaxis": [
                            "classmethod ZipInfo.from_file(filename, arcname=None, *, strict_timestamps=True)"
                        ],
                        "parametros": [
                            "filename",
                            "strict_timestamps",
                            "*",
                            "arcname"
                        ]
                    },
                    {
                        "nombre": "is_dir",
                        "sintaxis": [
                            "ZipInfo.is_dir()"
                        ],
                        "parametros": []
                    }
                ],
                "atributos": [
                    {
                        "nombre": "comment",
                        "sintaxis": [
                            "ZipInfo.comment"
                        ]
                    },
                    {
                        "nombre": "compress_size",
                        "sintaxis": [
                            "ZipInfo.compress_size"
                        ]
                    },
                    {
                        "nombre": "compress_type",
                        "sintaxis": [
                            "ZipInfo.compress_type"
                        ]
                    },
                    {
                        "nombre": "CRC",
                        "sintaxis": [
                            "ZipInfo.CRC"
                        ]
                    },
                    {
                        "nombre": "create_system",
                        "sintaxis": [
                            "ZipInfo.create_system"
                        ]
                    },
                    {
                        "nombre": "create_version",
                        "sintaxis": [
                            "ZipInfo.create_version"
                        ]
                    },
                    {
                        "nombre": "date_time",
                        "sintaxis": [
                            "ZipInfo.date_time"
                        ]
                    },
                    {
                        "nombre": "external_attr",
                        "sintaxis": [
                            "ZipInfo.external_attr"
                        ]
                    },
                    {
                        "nombre": "extra",
                        "sintaxis": [
                            "ZipInfo.extra"
                        ]
                    },
                    {
                        "nombre": "extract_version",
                        "sintaxis": [
                            "ZipInfo.extract_version"
                        ]
                    },
                    {
                        "nombre": "filename",
                        "sintaxis": [
                            "ZipInfo.filename"
                        ]
                    },
                    {
                        "nombre": "file_size",
                        "sintaxis": [
                            "ZipInfo.file_size"
                        ]
                    },
                    {
                        "nombre": "flag_bits",
                        "sintaxis": [
                            "ZipInfo.flag_bits"
                        ]
                    },
                    {
                        "nombre": "header_offset",
                        "sintaxis": [
                            "ZipInfo.header_offset"
                        ]
                    },
                    {
                        "nombre": "internal_attr",
                        "sintaxis": [
                            "ZipInfo.internal_attr"
                        ]
                    },
                    {
                        "nombre": "reserved",
                        "sintaxis": [
                            "ZipInfo.reserved"
                        ]
                    },
                    {
                        "nombre": "volume",
                        "sintaxis": [
                            "ZipInfo.volume"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ZipInfo"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ZIP_BZIP2",
                "sintaxis": [
                    "zipfile.ZIP_BZIP2"
                ]
            },
            {
                "nombre": "ZIP_DEFLATED",
                "sintaxis": [
                    "zipfile.ZIP_DEFLATED"
                ]
            },
            {
                "nombre": "ZIP_LZMA",
                "sintaxis": [
                    "zipfile.ZIP_LZMA"
                ]
            },
            {
                "nombre": "ZIP_STORED",
                "sintaxis": [
                    "zipfile.ZIP_STORED"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "BadZipFile",
                "sintaxis": [
                    "exception zipfile.BadZipFile"
                ]
            },
            {
                "nombre": "BadZipfile",
                "sintaxis": [
                    "exception zipfile.BadZipfile"
                ]
            },
            {
                "nombre": "LargeZipFile",
                "sintaxis": [
                    "exception zipfile.LargeZipFile"
                ]
            }
        ]
    },
    {
        "nombre": "zipimport",
        "funciones": [],
        "clases": [
            {
                "nombre": "zipimporter",
                "constructores": [
                    {
                        "nombre": "zipimporter",
                        "sintaxis": [
                            "class zipimport.zipimporter(archivepath)"
                        ],
                        "parametros": [
                            "archivepath"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "create_module",
                        "sintaxis": [
                            "create_module(spec)"
                        ],
                        "parametros": [
                            "spec"
                        ]
                    },
                    {
                        "nombre": "exec_module",
                        "sintaxis": [
                            "exec_module(module)"
                        ],
                        "parametros": [
                            "module"
                        ]
                    },
                    {
                        "nombre": "find_loader",
                        "sintaxis": [
                            "find_loader(fullname, path=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    },
                    {
                        "nombre": "find_module",
                        "sintaxis": [
                            "find_module(fullname, path=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "path"
                        ]
                    },
                    {
                        "nombre": "find_spec",
                        "sintaxis": [
                            "find_spec(fullname, target=None)"
                        ],
                        "parametros": [
                            "fullname",
                            "target"
                        ]
                    },
                    {
                        "nombre": "get_code",
                        "sintaxis": [
                            "get_code(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_data",
                        "sintaxis": [
                            "get_data(pathname)"
                        ],
                        "parametros": [
                            "pathname"
                        ]
                    },
                    {
                        "nombre": "get_filename",
                        "sintaxis": [
                            "get_filename(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "get_source",
                        "sintaxis": [
                            "get_source(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "invalidate_caches",
                        "sintaxis": [
                            "invalidate_caches()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "is_package",
                        "sintaxis": [
                            "is_package(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    },
                    {
                        "nombre": "load_module",
                        "sintaxis": [
                            "load_module(fullname)"
                        ],
                        "parametros": [
                            "fullname"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "archive",
                        "sintaxis": [
                            "archive"
                        ]
                    },
                    {
                        "nombre": "prefix",
                        "sintaxis": [
                            "prefix"
                        ]
                    }
                ],
                "sintaxis": [
                    "class zipimporter"
                ]
            }
        ],
        "constantes": [],
        "excepciones": [
            {
                "nombre": "ZipImportError",
                "sintaxis": [
                    "exception zipimport.ZipImportError"
                ]
            }
        ]
    },
    {
        "nombre": "zlib",
        "funciones": [
            {
                "nombre": "adler32",
                "sintaxis": [
                    "zlib.adler32(data[, value])"
                ],
                "parametros": [
                    "value",
                    "data"
                ]
            },
            {
                "nombre": "compress",
                "sintaxis": [
                    "zlib.compress(data, /, level=-1)"
                ],
                "parametros": [
                    "/",
                    "level",
                    "data"
                ]
            },
            {
                "nombre": "compressobj",
                "sintaxis": [
                    "zlib.compressobj(level=-1, method=DEFLATED, wbits=MAX_WBITS, memLevel=DEF_MEM_LEVEL, strategy=Z_DEFAULT_STRATEGY[, zdict])"
                ],
                "parametros": [
                    "zdict",
                    "memLevel",
                    "method",
                    "wbits",
                    "level",
                    "strategy"
                ]
            },
            {
                "nombre": "crc32",
                "sintaxis": [
                    "zlib.crc32(data[, value])"
                ],
                "parametros": [
                    "value",
                    "data"
                ]
            },
            {
                "nombre": "decompress",
                "sintaxis": [
                    "zlib.decompress(data, /, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)"
                ],
                "parametros": [
                    "bufsize",
                    "/",
                    "wbits",
                    "data"
                ]
            },
            {
                "nombre": "decompressobj",
                "sintaxis": [
                    "zlib.decompressobj(wbits=MAX_WBITS[, zdict])"
                ],
                "parametros": [
                    "zdict",
                    "wbits"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "Compress",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "compress",
                        "sintaxis": [
                            "Compress.compress(data)"
                        ],
                        "parametros": [
                            "data"
                        ]
                    },
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "Compress.copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "Compress.flush([mode])"
                        ],
                        "parametros": [
                            "mode"
                        ]
                    }
                ],
                "atributos": [],
                "sintaxis": [
                    "class Compress"
                ]
            },
            {
                "nombre": "Decompress",
                "constructores": [],
                "metodos": [
                    {
                        "nombre": "copy",
                        "sintaxis": [
                            "Decompress.copy()"
                        ],
                        "parametros": []
                    },
                    {
                        "nombre": "decompress",
                        "sintaxis": [
                            "Decompress.decompress(data, max_length=0)"
                        ],
                        "parametros": [
                            "max_length",
                            "data"
                        ]
                    },
                    {
                        "nombre": "flush",
                        "sintaxis": [
                            "Decompress.flush([length])"
                        ],
                        "parametros": [
                            "length"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "eof",
                        "sintaxis": [
                            "Decompress.eof"
                        ]
                    },
                    {
                        "nombre": "unconsumed_tail",
                        "sintaxis": [
                            "Decompress.unconsumed_tail"
                        ]
                    },
                    {
                        "nombre": "unused_data",
                        "sintaxis": [
                            "Decompress.unused_data"
                        ]
                    }
                ],
                "sintaxis": [
                    "class Decompress"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "ZLIB_RUNTIME_VERSION",
                "sintaxis": [
                    "zlib.ZLIB_RUNTIME_VERSION"
                ]
            },
            {
                "nombre": "ZLIB_VERSION",
                "sintaxis": [
                    "zlib.ZLIB_VERSION"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "error",
                "sintaxis": [
                    "exception zlib.error"
                ]
            }
        ]
    },
    {
        "nombre": "zoneinfo",
        "funciones": [
            {
                "nombre": "available_timezones",
                "sintaxis": [
                    "zoneinfo.available_timezones()"
                ],
                "parametros": []
            },
            {
                "nombre": "reset_tzpath",
                "sintaxis": [
                    "zoneinfo.reset_tzpath(to=None)"
                ],
                "parametros": [
                    "to"
                ]
            }
        ],
        "clases": [
            {
                "nombre": "ZoneInfo",
                "constructores": [
                    {
                        "nombre": "ZoneInfo",
                        "sintaxis": [
                            "class zoneinfo.ZoneInfo(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    }
                ],
                "metodos": [
                    {
                        "nombre": "clear_cache",
                        "sintaxis": [
                            "classmethod ZoneInfo.clear_cache(*, only_keys=None)"
                        ],
                        "parametros": [
                            "*",
                            "only_keys"
                        ]
                    },
                    {
                        "nombre": "from_file",
                        "sintaxis": [
                            "classmethod ZoneInfo.from_file(fobj, /, key=None)"
                        ],
                        "parametros": [
                            "fobj",
                            "/",
                            "key"
                        ]
                    },
                    {
                        "nombre": "no_cache",
                        "sintaxis": [
                            "classmethod ZoneInfo.no_cache(key)"
                        ],
                        "parametros": [
                            "key"
                        ]
                    }
                ],
                "atributos": [
                    {
                        "nombre": "key",
                        "sintaxis": [
                            "ZoneInfo.key"
                        ]
                    }
                ],
                "sintaxis": [
                    "class ZoneInfo"
                ]
            }
        ],
        "constantes": [
            {
                "nombre": "TZPATH",
                "sintaxis": [
                    "zoneinfo.TZPATH"
                ]
            }
        ],
        "excepciones": [
            {
                "nombre": "InvalidTZPathWarning",
                "sintaxis": [
                    "exception zoneinfo.InvalidTZPathWarning"
                ]
            },
            {
                "nombre": "ZoneInfoNotFoundError",
                "sintaxis": [
                    "exception zoneinfo.ZoneInfoNotFoundError"
                ]
            }
        ]
    }
]